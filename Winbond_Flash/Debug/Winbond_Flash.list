
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a564  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a7fc  0800a7fc  0000b7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a848  0800a848  0000b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000038  24000000  0800a858  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a8c  24000038  0800a890  0000c038  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ac4  0800a890  0000cac4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016df1  00000000  00000000  0000c066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e6f  00000000  00000000  00022e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e98  00000000  00000000  00025cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b2c  00000000  00000000  00026b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000380f5  00000000  00000000  0002768c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000167e2  00000000  00000000  0005f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ee83  00000000  00000000  00075f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4de6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ba4  00000000  00000000  001d4e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001d89d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a7e4 	.word	0x0800a7e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	0800a7e4 	.word	0x0800a7e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <Read_Register+0x50>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f8a9 	bl	8000764 <Read_Status_Register>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <Read_Register+0x54>)
 8000618:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 f99c 	bl	8000958 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <Read_Register+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f89d 	bl	8000764 <Read_Status_Register>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <Read_Register+0x5c>)
 8000630:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f000 f990 	bl	8000958 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <Read_Register+0x60>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f891 	bl	8000764 <Read_Status_Register>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Read_Register+0x64>)
 8000648:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 f984 	bl	8000958 <delay_ns>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000004 	.word	0x24000004
 8000658:	24000054 	.word	0x24000054
 800065c:	24000005 	.word	0x24000005
 8000660:	24000055 	.word	0x24000055
 8000664:	24000006 	.word	0x24000006
 8000668:	24000056 	.word	0x24000056

0800066c <Read_Data>:
	Buffer_Index=0;
	Buffer=&write_data[0];
	memset(write_data, 0xFF, sizeof(write_data));
}

void Read_Data(uint16_t page, uint8_t* data){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	80fb      	strh	r3, [r7, #6]
	Select_Page_Read(page);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f902 	bl	8000884 <Select_Page_Read>
	Read_Data_Buffer(data, 2048);
 8000680:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f000 f931 	bl	80008ec <Read_Data_Buffer>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000698:	2064      	movs	r0, #100	@ 0x64
 800069a:	f000 f95d 	bl	8000958 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800069e:	e002      	b.n	80006a6 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80006a0:	2064      	movs	r0, #100	@ 0x64
 80006a2:	f000 f959 	bl	8000958 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <W25N_WaitForReady+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f85a 	bl	8000764 <Read_Status_Register>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f2      	bne.n	80006a0 <W25N_WaitForReady+0xc>
    }
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24000006 	.word	0x24000006

080006c4 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 80006ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d2:	f001 f929 	bl	8001928 <HAL_Delay>
	if(BUF){
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d012      	beq.n	8000702 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <Flash_Init+0x98>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f83f 	bl	8000764 <Read_Status_Register>
 80006e6:	4603      	mov	r3, r0
 80006e8:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <Flash_Init+0x98>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	7bba      	ldrb	r2, [r7, #14]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f864 	bl	80007c8 <Write_Status_Register>
 8000700:	e011      	b.n	8000726 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <Flash_Init+0x98>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f82c 	bl	8000764 <Read_Status_Register>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f023 0308 	bic.w	r3, r3, #8
 8000716:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <Flash_Init+0x98>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f851 	bl	80007c8 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <Flash_Init+0x9c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f81a 	bl	8000764 <Read_Status_Register>
 8000730:	4603      	mov	r3, r0
 8000732:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000734:	7b7b      	ldrb	r3, [r7, #13]
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800073c:	7b7b      	ldrb	r3, [r7, #13]
 800073e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000742:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <Flash_Init+0x9c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	7b7a      	ldrb	r2, [r7, #13]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f83b 	bl	80007c8 <Write_Status_Register>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000005 	.word	0x24000005
 8000760:	24000004 	.word	0x24000004

08000764 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <Read_Status_Register+0x50>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <Read_Status_Register+0x54>)
 8000774:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000776:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <Read_Status_Register+0x54>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7053      	strb	r3, [r2, #1]
	csLOW();
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	480e      	ldr	r0, [pc, #56]	@ (80007bc <Read_Status_Register+0x58>)
 8000782:	f004 fa61 	bl	8004c48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000786:	2364      	movs	r3, #100	@ 0x64
 8000788:	2202      	movs	r2, #2
 800078a:	490b      	ldr	r1, [pc, #44]	@ (80007b8 <Read_Status_Register+0x54>)
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <Read_Status_Register+0x5c>)
 800078e:	f007 f9ff 	bl	8007b90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000792:	2364      	movs	r3, #100	@ 0x64
 8000794:	2201      	movs	r2, #1
 8000796:	490b      	ldr	r1, [pc, #44]	@ (80007c4 <Read_Status_Register+0x60>)
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <Read_Status_Register+0x5c>)
 800079a:	f007 fbe7 	bl	8007f6c <HAL_SPI_Receive>
	csHIGH();
 800079e:	2201      	movs	r2, #1
 80007a0:	2110      	movs	r1, #16
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <Read_Status_Register+0x58>)
 80007a4:	f004 fa50 	bl	8004c48 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <Read_Status_Register+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	24000002 	.word	0x24000002
 80007b8:	24000858 	.word	0x24000858
 80007bc:	58020000 	.word	0x58020000
 80007c0:	24000878 	.word	0x24000878
 80007c4:	24000860 	.word	0x24000860

080007c8 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <Write_Status_Register+0x4c>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <Write_Status_Register+0x50>)
 80007de:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <Write_Status_Register+0x50>)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 80007e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <Write_Status_Register+0x50>)
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	7093      	strb	r3, [r2, #2]
	csLOW();
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	480a      	ldr	r0, [pc, #40]	@ (800081c <Write_Status_Register+0x54>)
 80007f2:	f004 fa29 	bl	8004c48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	2203      	movs	r2, #3
 80007fa:	4907      	ldr	r1, [pc, #28]	@ (8000818 <Write_Status_Register+0x50>)
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <Write_Status_Register+0x58>)
 80007fe:	f007 f9c7 	bl	8007b90 <HAL_SPI_Transmit>
	csHIGH();
 8000802:	2201      	movs	r2, #1
 8000804:	2110      	movs	r1, #16
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <Write_Status_Register+0x54>)
 8000808:	f004 fa1e 	bl	8004c48 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24000003 	.word	0x24000003
 8000818:	24000858 	.word	0x24000858
 800081c:	58020000 	.word	0x58020000
 8000820:	24000878 	.word	0x24000878

08000824 <Read_ID>:

uint32_t Read_ID(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2100      	movs	r1, #0
 800082e:	460a      	mov	r2, r1
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	460a      	mov	r2, r1
 8000834:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	480f      	ldr	r0, [pc, #60]	@ (8000878 <Read_ID+0x54>)
 800083c:	f004 fa04 	bl	8004c48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000840:	2364      	movs	r3, #100	@ 0x64
 8000842:	2202      	movs	r2, #2
 8000844:	490d      	ldr	r1, [pc, #52]	@ (800087c <Read_ID+0x58>)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <Read_ID+0x5c>)
 8000848:	f007 f9a2 	bl	8007b90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 800084c:	1d39      	adds	r1, r7, #4
 800084e:	2364      	movs	r3, #100	@ 0x64
 8000850:	2203      	movs	r2, #3
 8000852:	480b      	ldr	r0, [pc, #44]	@ (8000880 <Read_ID+0x5c>)
 8000854:	f007 fb8a 	bl	8007f6c <HAL_SPI_Receive>
	csHIGH();
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	4806      	ldr	r0, [pc, #24]	@ (8000878 <Read_ID+0x54>)
 800085e:	f004 f9f3 	bl	8004c48 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000862:	793b      	ldrb	r3, [r7, #4]
 8000864:	041a      	lsls	r2, r3, #16
 8000866:	797b      	ldrb	r3, [r7, #5]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	79b9      	ldrb	r1, [r7, #6]
 800086c:	430b      	orrs	r3, r1
 800086e:	4313      	orrs	r3, r2
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58020000 	.word	0x58020000
 800087c:	24000000 	.word	0x24000000
 8000880:	24000878 	.word	0x24000878

08000884 <Select_Page_Read>:
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
	csHIGH();
	W25N_WaitForReady();
}

void Select_Page_Read(uint16_t Page_Addr){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <Select_Page_Read+0x58>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <Select_Page_Read+0x5c>)
 8000894:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <Select_Page_Read+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <Select_Page_Read+0x5c>)
 80008a6:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <Select_Page_Read+0x5c>)
 80008ae:	70da      	strb	r2, [r3, #3]
	csLOW();
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <Select_Page_Read+0x60>)
 80008b6:	f004 f9c7 	bl	8004c48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 80008ba:	2364      	movs	r3, #100	@ 0x64
 80008bc:	2204      	movs	r2, #4
 80008be:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <Select_Page_Read+0x5c>)
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <Select_Page_Read+0x64>)
 80008c2:	f007 f965 	bl	8007b90 <HAL_SPI_Transmit>
	csHIGH();
 80008c6:	2201      	movs	r2, #1
 80008c8:	2110      	movs	r1, #16
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <Select_Page_Read+0x60>)
 80008cc:	f004 f9bc 	bl	8004c48 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 80008d0:	f7ff fee0 	bl	8000694 <W25N_WaitForReady>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000007 	.word	0x24000007
 80008e0:	24000858 	.word	0x24000858
 80008e4:	58020000 	.word	0x58020000
 80008e8:	24000878 	.word	0x24000878

080008ec <Read_Data_Buffer>:

void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <Read_Data_Buffer+0x5c>)
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <Read_Data_Buffer+0x60>)
 80008fe:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <Read_Data_Buffer+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <Read_Data_Buffer+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <Read_Data_Buffer+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	480e      	ldr	r0, [pc, #56]	@ (8000950 <Read_Data_Buffer+0x64>)
 8000918:	f004 f996 	bl	8004c48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 800091c:	2364      	movs	r3, #100	@ 0x64
 800091e:	2204      	movs	r2, #4
 8000920:	490a      	ldr	r1, [pc, #40]	@ (800094c <Read_Data_Buffer+0x60>)
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <Read_Data_Buffer+0x68>)
 8000924:	f007 f934 	bl	8007b90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000928:	887a      	ldrh	r2, [r7, #2]
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <Read_Data_Buffer+0x68>)
 8000932:	f007 fb1b 	bl	8007f6c <HAL_SPI_Receive>
	csHIGH();
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <Read_Data_Buffer+0x64>)
 800093c:	f004 f984 	bl	8004c48 <HAL_GPIO_WritePin>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000008 	.word	0x24000008
 800094c:	24000858 	.word	0x24000858
 8000950:	58020000 	.word	0x58020000
 8000954:	24000878 	.word	0x24000878

08000958 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <delay_ns+0x48>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	0a5b      	lsrs	r3, r3, #9
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <delay_ns+0x4c>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	09db      	lsrs	r3, r3, #7
 800096e:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <delay_ns+0x50>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000980:	bf00      	nop
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <delay_ns+0x50>)
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f8      	bhi.n	8000982 <delay_ns+0x2a>
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2400000c 	.word	0x2400000c
 80009a4:	00044b83 	.word	0x00044b83
 80009a8:	e0001000 	.word	0xe0001000

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 ff28 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f89e 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f9da 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 f9b8 	bl	8000d30 <MX_DMA_Init>
  MX_SPI1_Init();
 80009c0:	f000 f914 	bl	8000bec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009c4:	f000 f968 	bl	8000c98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fd29 	bl	8001420 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fd26 	bl	8001420 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 fd23 	bl	8001420 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009da:	2101      	movs	r1, #1
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fdbf 	bl	8001560 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009e2:	4b3a      	ldr	r3, [pc, #232]	@ (8000acc <main+0x120>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009ea:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <main+0x120>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009f0:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <main+0x120>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009f6:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <main+0x120>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009fc:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <main+0x120>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a02:	4932      	ldr	r1, [pc, #200]	@ (8000acc <main+0x120>)
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fe3b 	bl	8001680 <BSP_COM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <main+0x68>
  {
    Error_Handler();
 8000a10:	f000 fa34 	bl	8000e7c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000a14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <main+0x124>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <main+0x124>)
 8000a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a1e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000a20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <main+0x128>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad4 <main+0x128>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	492a      	ldr	r1, [pc, #168]	@ (8000ad8 <main+0x12c>)
 8000a30:	482a      	ldr	r0, [pc, #168]	@ (8000adc <main+0x130>)
 8000a32:	f007 ff9d 	bl	8008970 <HAL_UART_Receive_DMA>

  Flash_Init(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fe44 	bl	80006c4 <Flash_Init>
  ID=Read_ID();
 8000a3c:	f7ff fef2 	bl	8000824 <Read_ID>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a27      	ldr	r2, [pc, #156]	@ (8000ae0 <main+0x134>)
 8000a44:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000a46:	f7ff fddd 	bl	8000604 <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000a4a:	2364      	movs	r3, #100	@ 0x64
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4925      	ldr	r1, [pc, #148]	@ (8000ae4 <main+0x138>)
 8000a50:	4825      	ldr	r0, [pc, #148]	@ (8000ae8 <main+0x13c>)
 8000a52:	f007 fec4 	bl	80087de <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <main+0x138>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b31      	cmp	r3, #49	@ 0x31
 8000a5c:	d11a      	bne.n	8000a94 <main+0xe8>
		  Read_Data(0, &Read_data[0]);
 8000a5e:	4923      	ldr	r1, [pc, #140]	@ (8000aec <main+0x140>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fe03 	bl	800066c <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a6e:	491f      	ldr	r1, [pc, #124]	@ (8000aec <main+0x140>)
 8000a70:	481d      	ldr	r0, [pc, #116]	@ (8000ae8 <main+0x13c>)
 8000a72:	f007 fe26 	bl	80086c2 <HAL_UART_Transmit>
		  Read_Data(1, &Read_data[0]);
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <main+0x140>)
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fdf7 	bl	800066c <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a86:	4919      	ldr	r1, [pc, #100]	@ (8000aec <main+0x140>)
 8000a88:	4817      	ldr	r0, [pc, #92]	@ (8000ae8 <main+0x13c>)
 8000a8a:	f007 fe1a 	bl	80086c2 <HAL_UART_Transmit>
		  command = 0;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <main+0x138>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <main+0x138>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b32      	cmp	r3, #50	@ 0x32
 8000a9a:	d108      	bne.n	8000aae <main+0x102>
		  Start_Flight_Recording=1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <main+0x144>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fd32 	bl	800150c <BSP_LED_Toggle>
		  command=0;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <main+0x138>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <main+0x138>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b33      	cmp	r3, #51	@ 0x33
 8000ab4:	d1c7      	bne.n	8000a46 <main+0x9a>
		  Start_Flight_Recording=0;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <main+0x144>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fd25 	bl	800150c <BSP_LED_Toggle>
		  command=0;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <main+0x138>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000ac8:	e7bd      	b.n	8000a46 <main+0x9a>
 8000aca:	bf00      	nop
 8000acc:	24000868 	.word	0x24000868
 8000ad0:	e000edf0 	.word	0xe000edf0
 8000ad4:	e0001000 	.word	0xe0001000
 8000ad8:	24000a10 	.word	0x24000a10
 8000adc:	24000900 	.word	0x24000900
 8000ae0:	24000a0c 	.word	0x24000a0c
 8000ae4:	24000009 	.word	0x24000009
 8000ae8:	24000a2c 	.word	0x24000a2c
 8000aec:	24000058 	.word	0x24000058
 8000af0:	24000a1a 	.word	0x24000a1a

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09c      	sub	sp, #112	@ 0x70
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	224c      	movs	r2, #76	@ 0x4c
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 fe42 	bl	800a78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f009 fe3c 	bl	800a78c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f004 f8cb 	bl	8004cb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b31      	ldr	r3, [pc, #196]	@ (8000be4 <SystemClock_Config+0xf0>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a30      	ldr	r2, [pc, #192]	@ (8000be4 <SystemClock_Config+0xf0>)
 8000b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000be4 <SystemClock_Config+0xf0>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <SystemClock_Config+0xf4>)
 8000b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b38:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemClock_Config+0xf4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <SystemClock_Config+0xf4>)
 8000b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b4c:	bf00      	nop
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <SystemClock_Config+0xf0>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b5a:	d1f8      	bne.n	8000b4e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b64:	2340      	movs	r3, #64	@ 0x40
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b74:	233c      	movs	r3, #60	@ 0x3c
 8000b76:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b84:	230c      	movs	r3, #12
 8000b86:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 f8c5 	bl	8004d24 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ba0:	f000 f96c 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	233f      	movs	r3, #63	@ 0x3f
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb8:	2340      	movs	r3, #64	@ 0x40
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bc2:	2340      	movs	r3, #64	@ 0x40
 8000bc4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fd04 	bl	80055d8 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000bd6:	f000 f951 	bl	8000e7c <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3770      	adds	r7, #112	@ 0x70
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58024800 	.word	0x58024800
 8000be8:	58000400 	.word	0x58000400

08000bec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000bf2:	4a28      	ldr	r2, [pc, #160]	@ (8000c94 <MX_SPI1_Init+0xa8>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000bf8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c06:	2207      	movs	r2, #7
 8000c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c18:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c20:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000c24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c44:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_SPI1_Init+0xa4>)
 8000c7e:	f006 fe63 	bl	8007948 <HAL_SPI_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c88:	f000 f8f8 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	24000878 	.word	0x24000878
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ce2:	f007 fc9e 	bl	8008622 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f8c6 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cf4:	f009 fc7f 	bl	800a5f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 f8bd 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d06:	f009 fcb4 	bl	800a672 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f000 f8b4 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d16:	f009 fc35 	bl	800a584 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f8ac 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000900 	.word	0x24000900
 8000d2c:	40011000 	.word	0x40011000

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	200b      	movs	r0, #11
 8000d5a:	f000 fef0 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d5e:	200b      	movs	r0, #11
 8000d60:	f000 ff07 	bl	8001b72 <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a38      	ldr	r2, [pc, #224]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b36      	ldr	r3, [pc, #216]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da4:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a31      	ldr	r2, [pc, #196]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a29      	ldr	r2, [pc, #164]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	4a1a      	ldr	r2, [pc, #104]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_GPIO_Init+0x100>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4814      	ldr	r0, [pc, #80]	@ (8000e74 <MX_GPIO_Init+0x104>)
 8000e22:	f003 ff11 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4813      	ldr	r0, [pc, #76]	@ (8000e78 <MX_GPIO_Init+0x108>)
 8000e2c:	f003 ff0c 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8000e30:	2310      	movs	r3, #16
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_GPIO_Init+0x104>)
 8000e48:	f003 fd4e 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_GPIO_Init+0x108>)
 8000e64:	f003 fd40 	bl	80048e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	@ 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020000 	.word	0x58020000
 8000e78:	58021000 	.word	0x58021000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <Error_Handler+0x8>

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e94:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0bc      	sub	sp, #240	@ 0xf0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	22c0      	movs	r2, #192	@ 0xc0
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f009 fc55 	bl	800a78c <memset>
  if(hspi->Instance==SPI1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a38      	ldr	r2, [pc, #224]	@ (8000fc8 <HAL_SPI_MspInit+0x10c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d168      	bne.n	8000fbe <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fef5 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f0c:	f7ff ffb6 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f10:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f16:	4a2d      	ldr	r2, [pc, #180]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_SPI_MspInit+0x110>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f6a:	2360      	movs	r3, #96	@ 0x60
 8000f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f82:	2305      	movs	r3, #5
 8000f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <HAL_SPI_MspInit+0x114>)
 8000f90:	f003 fcaa 	bl	80048e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f94:	2320      	movs	r3, #32
 8000f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fac:	2305      	movs	r3, #5
 8000fae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <HAL_SPI_MspInit+0x118>)
 8000fba:	f003 fc95 	bl	80048e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37f0      	adds	r7, #240	@ 0xf0
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40013000 	.word	0x40013000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	58020400 	.word	0x58020400

08000fd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ba      	sub	sp, #232	@ 0xe8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	22c0      	movs	r2, #192	@ 0xc0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f009 fbc7 	bl	800a78c <memset>
  if(huart->Instance==USART1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4d      	ldr	r2, [pc, #308]	@ (8001138 <HAL_UART_MspInit+0x160>)
 8001004:	4293      	cmp	r3, r2
 8001006:	f040 8093 	bne.w	8001130 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800100a:	f04f 0201 	mov.w	r2, #1
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fe65 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800102c:	f7ff ff26 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001030:	4b42      	ldr	r3, [pc, #264]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001036:	4a41      	ldr	r2, [pc, #260]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001040:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a39      	ldr	r2, [pc, #228]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <HAL_UART_MspInit+0x164>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800106c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001086:	2304      	movs	r3, #4
 8001088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001090:	4619      	mov	r1, r3
 8001092:	482b      	ldr	r0, [pc, #172]	@ (8001140 <HAL_UART_MspInit+0x168>)
 8001094:	f003 fc28 	bl	80048e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001098:	2340      	movs	r3, #64	@ 0x40
 800109a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	2307      	movs	r3, #7
 80010b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4820      	ldr	r0, [pc, #128]	@ (8001140 <HAL_UART_MspInit+0x168>)
 80010be:	f003 fc13 	bl	80048e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010c4:	4a20      	ldr	r2, [pc, #128]	@ (8001148 <HAL_UART_MspInit+0x170>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010ca:	2229      	movs	r2, #41	@ 0x29
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001102:	4810      	ldr	r0, [pc, #64]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 8001104:	f000 fd50 	bl	8001ba8 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800110e:	f7ff feb5 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 8001116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_UART_MspInit+0x16c>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2025      	movs	r0, #37	@ 0x25
 8001126:	f000 fd0a 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800112a:	2025      	movs	r0, #37	@ 0x25
 800112c:	f000 fd21 	bl	8001b72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001130:	bf00      	nop
 8001132:	37e8      	adds	r7, #232	@ 0xe8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40011000 	.word	0x40011000
 800113c:	58024400 	.word	0x58024400
 8001140:	58020400 	.word	0x58020400
 8001144:	24000994 	.word	0x24000994
 8001148:	40020010 	.word	0x40020010

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x4>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 fba0 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <SysTick_Handler+0x48>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d015      	beq.n	80011dc <SysTick_Handler+0x3c>
	  CLK_SIM++;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <SysTick_Handler+0x4c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <SysTick_Handler+0x4c>)
 80011b8:	6013      	str	r3, [r2, #0]
	  Time++;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <SysTick_Handler+0x50>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <SysTick_Handler+0x50>)
 80011c4:	801a      	strh	r2, [r3, #0]
	  if(Time>=100){
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <SysTick_Handler+0x50>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	2b63      	cmp	r3, #99	@ 0x63
 80011cc:	d909      	bls.n	80011e2 <SysTick_Handler+0x42>
	    	Write_To_Flightdata=1;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <SysTick_Handler+0x54>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
	    	Time=0;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SysTick_Handler+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	e002      	b.n	80011e2 <SysTick_Handler+0x42>
	  Time=0;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <SysTick_Handler+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	801a      	strh	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24000a1a 	.word	0x24000a1a
 80011ec:	24000a20 	.word	0x24000a20
 80011f0:	24000a1c 	.word	0x24000a1c
 80011f4:	24000a1b 	.word	0x24000a1b

080011f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <DMA1_Stream0_IRQHandler+0x10>)
 80011fe:	f001 fffd 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000994 	.word	0x24000994

0800120c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <USART1_IRQHandler+0x10>)
 8001212:	f007 fbf9 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000900 	.word	0x24000900

08001220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001224:	2000      	movs	r0, #0
 8001226:	f000 fa0d 	bl	8001644 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8001238:	220a      	movs	r2, #10
 800123a:	4905      	ldr	r1, [pc, #20]	@ (8001250 <HAL_UART_RxCpltCallback+0x20>)
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_UART_RxCpltCallback+0x24>)
 800123e:	f007 fb97 	bl	8008970 <HAL_UART_Receive_DMA>
		BSP_LED_Toggle(LED_RED);
 8001242:	2002      	movs	r0, #2
 8001244:	f000 f962 	bl	800150c <BSP_LED_Toggle>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000a10 	.word	0x24000a10
 8001254:	24000900 	.word	0x24000900

08001258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800125c:	4b43      	ldr	r3, [pc, #268]	@ (800136c <SystemInit+0x114>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001262:	4a42      	ldr	r2, [pc, #264]	@ (800136c <SystemInit+0x114>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800126c:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <SystemInit+0x118>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	2b06      	cmp	r3, #6
 8001276:	d807      	bhi.n	8001288 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001278:	4b3d      	ldr	r3, [pc, #244]	@ (8001370 <SystemInit+0x118>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 030f 	bic.w	r3, r3, #15
 8001280:	4a3b      	ldr	r2, [pc, #236]	@ (8001370 <SystemInit+0x118>)
 8001282:	f043 0307 	orr.w	r3, r3, #7
 8001286:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001288:	4b3a      	ldr	r3, [pc, #232]	@ (8001374 <SystemInit+0x11c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a39      	ldr	r2, [pc, #228]	@ (8001374 <SystemInit+0x11c>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001294:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <SystemInit+0x11c>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <SystemInit+0x11c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4935      	ldr	r1, [pc, #212]	@ (8001374 <SystemInit+0x11c>)
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <SystemInit+0x120>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <SystemInit+0x118>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <SystemInit+0x118>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001370 <SystemInit+0x118>)
 80012bc:	f043 0307 	orr.w	r3, r3, #7
 80012c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <SystemInit+0x11c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001374 <SystemInit+0x11c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <SystemInit+0x11c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <SystemInit+0x11c>)
 80012d6:	4a29      	ldr	r2, [pc, #164]	@ (800137c <SystemInit+0x124>)
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <SystemInit+0x11c>)
 80012dc:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <SystemInit+0x128>)
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <SystemInit+0x11c>)
 80012e2:	4a28      	ldr	r2, [pc, #160]	@ (8001384 <SystemInit+0x12c>)
 80012e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <SystemInit+0x11c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012ec:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <SystemInit+0x11c>)
 80012ee:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <SystemInit+0x12c>)
 80012f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <SystemInit+0x11c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <SystemInit+0x11c>)
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <SystemInit+0x12c>)
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <SystemInit+0x11c>)
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <SystemInit+0x11c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1a      	ldr	r2, [pc, #104]	@ (8001374 <SystemInit+0x11c>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <SystemInit+0x11c>)
 8001312:	2200      	movs	r2, #0
 8001314:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <SystemInit+0x130>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <SystemInit+0x134>)
 800131c:	4013      	ands	r3, r2
 800131e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001322:	d202      	bcs.n	800132a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <SystemInit+0x138>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <SystemInit+0x11c>)
 800132c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d113      	bne.n	8001360 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <SystemInit+0x11c>)
 800133a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800133e:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <SystemInit+0x11c>)
 8001340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001344:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <SystemInit+0x13c>)
 800134a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800134e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <SystemInit+0x11c>)
 8001352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001356:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <SystemInit+0x11c>)
 8001358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800135c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	52002000 	.word	0x52002000
 8001374:	58024400 	.word	0x58024400
 8001378:	eaf6ed7f 	.word	0xeaf6ed7f
 800137c:	02020200 	.word	0x02020200
 8001380:	01ff0000 	.word	0x01ff0000
 8001384:	01010280 	.word	0x01010280
 8001388:	5c001000 	.word	0x5c001000
 800138c:	ffff0000 	.word	0xffff0000
 8001390:	51008108 	.word	0x51008108
 8001394:	52004000 	.word	0x52004000

08001398 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <ExitRun0Mode+0x2c>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <ExitRun0Mode+0x2c>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80013a8:	bf00      	nop
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <ExitRun0Mode+0x2c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f9      	beq.n	80013aa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	58024800 	.word	0x58024800

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001404 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013cc:	f7ff ffe4 	bl	8001398 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff ff42 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f009 f9cf 	bl	800a79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fad5 	bl	80009ac <main>
  bx  lr
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800140c:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8001410:	0800a858 	.word	0x0800a858
  ldr r2, =_sbss
 8001414:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8001418:	24000ac4 	.word	0x24000ac4

0800141c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC3_IRQHandler>
	...

08001420 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <BSP_LED_Init+0x28>
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d006      	beq.n	8001448 <BSP_LED_Init+0x28>
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d003      	beq.n	8001448 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001440:	f06f 0301 	mvn.w	r3, #1
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001446:	e055      	b.n	80014f4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	4a2a      	ldr	r2, [pc, #168]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	e021      	b.n	80014b2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d10f      	bne.n	8001494 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <BSP_LED_Init+0xe0>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	e00e      	b.n	80014b2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <BSP_LED_Init+0xe0>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <BSP_LED_Init+0xe0>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <BSP_LED_Init+0xe0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <BSP_LED_Init+0xe4>)
 80014b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ba:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001508 <BSP_LED_Init+0xe8>)
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	f107 0218 	add.w	r2, r7, #24
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fa06 	bl	80048e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <BSP_LED_Init+0xe8>)
 80014e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <BSP_LED_Init+0xe4>)
 80014e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f003 fbaa 	bl	8004c48 <HAL_GPIO_WritePin>
  }

  return ret;
 80014f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3730      	adds	r7, #48	@ 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	58024400 	.word	0x58024400
 8001504:	0800a80c 	.word	0x0800a80c
 8001508:	24000018 	.word	0x24000018

0800150c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <BSP_LED_Toggle+0x28>
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d006      	beq.n	8001534 <BSP_LED_Toggle+0x28>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d003      	beq.n	8001534 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800152c:	f06f 0301 	mvn.w	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e00b      	b.n	800154c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <BSP_LED_Toggle+0x4c>)
 8001538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4907      	ldr	r1, [pc, #28]	@ (800155c <BSP_LED_Toggle+0x50>)
 8001540:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f003 fb97 	bl	8004c7a <HAL_GPIO_TogglePin>
  }

  return ret;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24000018 	.word	0x24000018
 800155c:	0800a80c 	.word	0x0800a80c

08001560 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <BSP_PB_Init+0xcc>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <BSP_PB_Init+0xcc>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001580:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <BSP_PB_Init+0xcc>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800158e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001592:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <BSP_PB_Init+0xd0>)
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	f107 020c 	add.w	r2, r7, #12
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 f997 	bl	80048e8 <HAL_GPIO_Init>
 80015ba:	e031      	b.n	8001620 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80015bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001630 <BSP_PB_Init+0xd0>)
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	f107 020c 	add.w	r2, r7, #12
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 f989 	bl	80048e8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <BSP_PB_Init+0xd4>)
 80015dc:	441a      	add	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4915      	ldr	r1, [pc, #84]	@ (8001638 <BSP_PB_Init+0xd8>)
 80015e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f003 f938 	bl	800485e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <BSP_PB_Init+0xd4>)
 80015f4:	1898      	adds	r0, r3, r2
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4a10      	ldr	r2, [pc, #64]	@ (800163c <BSP_PB_Init+0xdc>)
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	461a      	mov	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f003 f90d 	bl	8004820 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001606:	2028      	movs	r0, #40	@ 0x28
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <BSP_PB_Init+0xe0>)
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	f000 fa93 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001618:	2328      	movs	r3, #40	@ 0x28
 800161a:	4618      	mov	r0, r3
 800161c:	f000 faa9 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	58024400 	.word	0x58024400
 8001630:	24000024 	.word	0x24000024
 8001634:	24000a24 	.word	0x24000a24
 8001638:	0800a814 	.word	0x0800a814
 800163c:	24000028 	.word	0x24000028
 8001640:	2400002c 	.word	0x2400002c

08001644 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <BSP_PB_IRQHandler+0x20>)
 8001654:	4413      	add	r3, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f916 	bl	8004888 <HAL_EXTI_IRQHandler>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	24000a24 	.word	0x24000a24

08001668 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001696:	f06f 0301 	mvn.w	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e018      	b.n	80016d0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2294      	movs	r2, #148	@ 0x94
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <BSP_COM_Init+0x5c>)
 80016a8:	4413      	add	r3, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f852 	bl	8001754 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2294      	movs	r2, #148	@ 0x94
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <BSP_COM_Init+0x5c>)
 80016ba:	4413      	add	r3, r2
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f80e 	bl	80016e0 <MX_USART3_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016ca:	f06f 0303 	mvn.w	r3, #3
 80016ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	24000a2c 	.word	0x24000a2c

080016e0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <MX_USART3_Init+0x60>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	220c      	movs	r2, #12
 80016fe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	895b      	ldrh	r3, [r3, #10]
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	891b      	ldrh	r3, [r3, #8]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	899b      	ldrh	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800172c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 ff77 	bl	8008622 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000014 	.word	0x24000014

08001744 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff ff8d 	bl	8001668 <BSP_PB_Callback>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <COM1_MspInit+0xa8>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	4a26      	ldr	r2, [pc, #152]	@ (80017fc <COM1_MspInit+0xa8>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176c:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <COM1_MspInit+0xa8>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <COM1_MspInit+0xa8>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <COM1_MspInit+0xa8>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <COM1_MspInit+0xa8>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <COM1_MspInit+0xa8>)
 800179a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <COM1_MspInit+0xa8>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <COM1_MspInit+0xa8>)
 80017aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80017b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80017c8:	2307      	movs	r3, #7
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	@ (8001800 <COM1_MspInit+0xac>)
 80017d4:	f003 f888 	bl	80048e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80017d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80017e2:	2307      	movs	r3, #7
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <COM1_MspInit+0xac>)
 80017ee:	f003 f87b 	bl	80048e8 <HAL_GPIO_Init>
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020c00 	.word	0x58020c00

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f98c 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001810:	f004 f898 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_Init+0x68>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	4913      	ldr	r1, [pc, #76]	@ (8001870 <HAL_Init+0x6c>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_Init+0x68>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_Init+0x6c>)
 8001838:	5cd3      	ldrb	r3, [r2, r3]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_Init+0x70>)
 8001846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_Init+0x74>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f814 	bl	800187c <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e002      	b.n	8001864 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800185e:	f7ff fb13 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	58024400 	.word	0x58024400
 8001870:	0800a7fc 	.word	0x0800a7fc
 8001874:	24000010 	.word	0x24000010
 8001878:	2400000c 	.word	0x2400000c

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_InitTick+0x60>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e021      	b.n	80018d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_InitTick+0x64>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_InitTick+0x60>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f971 	bl	8001b8e <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f93b 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x68>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	24000034 	.word	0x24000034
 80018e0:	2400000c 	.word	0x2400000c
 80018e4:	24000030 	.word	0x24000030

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	24000034 	.word	0x24000034
 800190c:	24000ac0 	.word	0x24000ac0

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	24000ac0 	.word	0x24000ac0

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24000034 	.word	0x24000034

08001970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetREVID+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0c1b      	lsrs	r3, r3, #16
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	5c001000 	.word	0x5c001000

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0000 	.word	0x05fa0000

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff40 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa4 	bl	8001ae4 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff feae 	bl	8001910 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e316      	b.n	80021ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a66      	ldr	r2, [pc, #408]	@ (8001d60 <HAL_DMA_Init+0x1b8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_DMA_Init+0x1bc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d045      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a63      	ldr	r2, [pc, #396]	@ (8001d68 <HAL_DMA_Init+0x1c0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d040      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a62      	ldr	r2, [pc, #392]	@ (8001d6c <HAL_DMA_Init+0x1c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d03b      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a60      	ldr	r2, [pc, #384]	@ (8001d70 <HAL_DMA_Init+0x1c8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d036      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d74 <HAL_DMA_Init+0x1cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	@ (8001d78 <HAL_DMA_Init+0x1d0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02c      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <HAL_DMA_Init+0x1d4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d027      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5a      	ldr	r2, [pc, #360]	@ (8001d80 <HAL_DMA_Init+0x1d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a59      	ldr	r2, [pc, #356]	@ (8001d84 <HAL_DMA_Init+0x1dc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01d      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a57      	ldr	r2, [pc, #348]	@ (8001d88 <HAL_DMA_Init+0x1e0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a56      	ldr	r2, [pc, #344]	@ (8001d8c <HAL_DMA_Init+0x1e4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a54      	ldr	r2, [pc, #336]	@ (8001d90 <HAL_DMA_Init+0x1e8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a53      	ldr	r2, [pc, #332]	@ (8001d94 <HAL_DMA_Init+0x1ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a51      	ldr	r2, [pc, #324]	@ (8001d98 <HAL_DMA_Init+0x1f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Init+0xb8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_DMA_Init+0x1f4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_DMA_Init+0xbc>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_DMA_Init+0xbe>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 813b 	beq.w	8001ee2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <HAL_DMA_Init+0x1b8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04a      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <HAL_DMA_Init+0x1bc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d045      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a34      	ldr	r2, [pc, #208]	@ (8001d68 <HAL_DMA_Init+0x1c0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d040      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a33      	ldr	r2, [pc, #204]	@ (8001d6c <HAL_DMA_Init+0x1c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d03b      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a31      	ldr	r2, [pc, #196]	@ (8001d70 <HAL_DMA_Init+0x1c8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d036      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a30      	ldr	r2, [pc, #192]	@ (8001d74 <HAL_DMA_Init+0x1cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d031      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d78 <HAL_DMA_Init+0x1d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02c      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_DMA_Init+0x1d4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d027      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <HAL_DMA_Init+0x1d8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2a      	ldr	r2, [pc, #168]	@ (8001d84 <HAL_DMA_Init+0x1dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01d      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <HAL_DMA_Init+0x1e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <HAL_DMA_Init+0x1e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <HAL_DMA_Init+0x1e8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a24      	ldr	r2, [pc, #144]	@ (8001d94 <HAL_DMA_Init+0x1ec>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_DMA_Init+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_Init+0x174>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <HAL_DMA_Init+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <HAL_DMA_Init+0x186>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_DMA_Init+0x196>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d3e:	e02f      	b.n	8001da0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d40:	f7ff fde6 	bl	8001910 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d928      	bls.n	8001da0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e246      	b.n	80021ee <HAL_DMA_Init+0x646>
 8001d60:	40020010 	.word	0x40020010
 8001d64:	40020028 	.word	0x40020028
 8001d68:	40020040 	.word	0x40020040
 8001d6c:	40020058 	.word	0x40020058
 8001d70:	40020070 	.word	0x40020070
 8001d74:	40020088 	.word	0x40020088
 8001d78:	400200a0 	.word	0x400200a0
 8001d7c:	400200b8 	.word	0x400200b8
 8001d80:	40020410 	.word	0x40020410
 8001d84:	40020428 	.word	0x40020428
 8001d88:	40020440 	.word	0x40020440
 8001d8c:	40020458 	.word	0x40020458
 8001d90:	40020470 	.word	0x40020470
 8001d94:	40020488 	.word	0x40020488
 8001d98:	400204a0 	.word	0x400204a0
 8001d9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1c8      	bne.n	8001d40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4b83      	ldr	r3, [pc, #524]	@ (8001fc8 <HAL_DMA_Init+0x420>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e04:	4b71      	ldr	r3, [pc, #452]	@ (8001fcc <HAL_DMA_Init+0x424>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b71      	ldr	r3, [pc, #452]	@ (8001fd0 <HAL_DMA_Init+0x428>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e10:	d328      	bcc.n	8001e64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b28      	cmp	r3, #40	@ 0x28
 8001e18:	d903      	bls.n	8001e22 <HAL_DMA_Init+0x27a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e20:	d917      	bls.n	8001e52 <HAL_DMA_Init+0x2aa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e28:	d903      	bls.n	8001e32 <HAL_DMA_Init+0x28a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b42      	cmp	r3, #66	@ 0x42
 8001e30:	d90f      	bls.n	8001e52 <HAL_DMA_Init+0x2aa>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b46      	cmp	r3, #70	@ 0x46
 8001e38:	d903      	bls.n	8001e42 <HAL_DMA_Init+0x29a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b48      	cmp	r3, #72	@ 0x48
 8001e40:	d907      	bls.n	8001e52 <HAL_DMA_Init+0x2aa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e48:	d905      	bls.n	8001e56 <HAL_DMA_Init+0x2ae>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b52      	cmp	r3, #82	@ 0x52
 8001e50:	d801      	bhi.n	8001e56 <HAL_DMA_Init+0x2ae>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_DMA_Init+0x2b0>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f023 0307 	bic.w	r3, r3, #7
 8001e7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d117      	bne.n	8001ebe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 fb33 	bl	800450c <DMA_CheckFifoParam>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e197      	b.n	80021ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f002 fa6e 	bl	80043a8 <DMA_CalcBaseAndBitshift>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	223f      	movs	r2, #63	@ 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e0cd      	b.n	800207e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd4 <HAL_DMA_Init+0x42c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a39      	ldr	r2, [pc, #228]	@ (8001fd8 <HAL_DMA_Init+0x430>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01d      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a38      	ldr	r2, [pc, #224]	@ (8001fdc <HAL_DMA_Init+0x434>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a36      	ldr	r2, [pc, #216]	@ (8001fe0 <HAL_DMA_Init+0x438>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a35      	ldr	r2, [pc, #212]	@ (8001fe4 <HAL_DMA_Init+0x43c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a33      	ldr	r2, [pc, #204]	@ (8001fe8 <HAL_DMA_Init+0x440>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a32      	ldr	r2, [pc, #200]	@ (8001fec <HAL_DMA_Init+0x444>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Init+0x38a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a30      	ldr	r2, [pc, #192]	@ (8001ff0 <HAL_DMA_Init+0x448>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Init+0x38e>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_DMA_Init+0x390>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <HAL_DMA_Init+0x42c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d021      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_DMA_Init+0x430>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01c      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_DMA_Init+0x434>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d017      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <HAL_DMA_Init+0x438>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_DMA_Init+0x43c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00d      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_DMA_Init+0x440>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d008      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_DMA_Init+0x444>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_Init+0x3e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_DMA_Init+0x448>)
 8001f8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_DMA_Init+0x44c>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d021      	beq.n	8001ff8 <HAL_DMA_Init+0x450>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b80      	cmp	r3, #128	@ 0x80
 8001fba:	d102      	bne.n	8001fc2 <HAL_DMA_Init+0x41a>
 8001fbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fc0:	e01b      	b.n	8001ffa <HAL_DMA_Init+0x452>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e019      	b.n	8001ffa <HAL_DMA_Init+0x452>
 8001fc6:	bf00      	nop
 8001fc8:	fe10803f 	.word	0xfe10803f
 8001fcc:	5c001000 	.word	0x5c001000
 8001fd0:	ffff0000 	.word	0xffff0000
 8001fd4:	58025408 	.word	0x58025408
 8001fd8:	5802541c 	.word	0x5802541c
 8001fdc:	58025430 	.word	0x58025430
 8001fe0:	58025444 	.word	0x58025444
 8001fe4:	58025458 	.word	0x58025458
 8001fe8:	5802546c 	.word	0x5802546c
 8001fec:	58025480 	.word	0x58025480
 8001ff0:	58025494 	.word	0x58025494
 8001ff4:	fffe000f 	.word	0xfffe000f
 8001ff8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002028:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b6e      	ldr	r3, [pc, #440]	@ (80021f8 <HAL_DMA_Init+0x650>)
 8002040:	4413      	add	r3, r2
 8002042:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_DMA_Init+0x654>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f002 f9a9 	bl	80043a8 <DMA_CalcBaseAndBitshift>
 8002056:	4603      	mov	r3, r0
 8002058:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2201      	movs	r2, #1
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	e008      	b.n	800207e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2203      	movs	r2, #3
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0b7      	b.n	80021ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a5f      	ldr	r2, [pc, #380]	@ (8002200 <HAL_DMA_Init+0x658>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d072      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5d      	ldr	r2, [pc, #372]	@ (8002204 <HAL_DMA_Init+0x65c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d06d      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5c      	ldr	r2, [pc, #368]	@ (8002208 <HAL_DMA_Init+0x660>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d068      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5a      	ldr	r2, [pc, #360]	@ (800220c <HAL_DMA_Init+0x664>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d063      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a59      	ldr	r2, [pc, #356]	@ (8002210 <HAL_DMA_Init+0x668>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a57      	ldr	r2, [pc, #348]	@ (8002214 <HAL_DMA_Init+0x66c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d059      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <HAL_DMA_Init+0x670>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d054      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a54      	ldr	r2, [pc, #336]	@ (800221c <HAL_DMA_Init+0x674>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04f      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a53      	ldr	r2, [pc, #332]	@ (8002220 <HAL_DMA_Init+0x678>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a51      	ldr	r2, [pc, #324]	@ (8002224 <HAL_DMA_Init+0x67c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a50      	ldr	r2, [pc, #320]	@ (8002228 <HAL_DMA_Init+0x680>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a4e      	ldr	r2, [pc, #312]	@ (800222c <HAL_DMA_Init+0x684>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002230 <HAL_DMA_Init+0x688>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_DMA_Init+0x68c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_DMA_Init+0x690>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a48      	ldr	r2, [pc, #288]	@ (800223c <HAL_DMA_Init+0x694>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_DMA_Init+0x698>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a45      	ldr	r2, [pc, #276]	@ (8002244 <HAL_DMA_Init+0x69c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a44      	ldr	r2, [pc, #272]	@ (8002248 <HAL_DMA_Init+0x6a0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a42      	ldr	r2, [pc, #264]	@ (800224c <HAL_DMA_Init+0x6a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a41      	ldr	r2, [pc, #260]	@ (8002250 <HAL_DMA_Init+0x6a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3f      	ldr	r2, [pc, #252]	@ (8002254 <HAL_DMA_Init+0x6ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <HAL_DMA_Init+0x6b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Init+0x5c6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3c      	ldr	r2, [pc, #240]	@ (800225c <HAL_DMA_Init+0x6b4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Init+0x5ca>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_DMA_Init+0x5cc>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f002 fa43 	bl	8004604 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b80      	cmp	r3, #128	@ 0x80
 8002184:	d102      	bne.n	800218c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d010      	beq.n	80021cc <HAL_DMA_Init+0x624>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d80c      	bhi.n	80021cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f002 fac0 	bl	8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e008      	b.n	80021de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	a7fdabf8 	.word	0xa7fdabf8
 80021fc:	cccccccd 	.word	0xcccccccd
 8002200:	40020010 	.word	0x40020010
 8002204:	40020028 	.word	0x40020028
 8002208:	40020040 	.word	0x40020040
 800220c:	40020058 	.word	0x40020058
 8002210:	40020070 	.word	0x40020070
 8002214:	40020088 	.word	0x40020088
 8002218:	400200a0 	.word	0x400200a0
 800221c:	400200b8 	.word	0x400200b8
 8002220:	40020410 	.word	0x40020410
 8002224:	40020428 	.word	0x40020428
 8002228:	40020440 	.word	0x40020440
 800222c:	40020458 	.word	0x40020458
 8002230:	40020470 	.word	0x40020470
 8002234:	40020488 	.word	0x40020488
 8002238:	400204a0 	.word	0x400204a0
 800223c:	400204b8 	.word	0x400204b8
 8002240:	58025408 	.word	0x58025408
 8002244:	5802541c 	.word	0x5802541c
 8002248:	58025430 	.word	0x58025430
 800224c:	58025444 	.word	0x58025444
 8002250:	58025458 	.word	0x58025458
 8002254:	5802546c 	.word	0x5802546c
 8002258:	58025480 	.word	0x58025480
 800225c:	58025494 	.word	0x58025494

08002260 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e226      	b.n	80026ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_DMA_Start_IT+0x2a>
 8002286:	2302      	movs	r3, #2
 8002288:	e21f      	b.n	80026ca <HAL_DMA_Start_IT+0x46a>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	f040 820a 	bne.w	80026b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a68      	ldr	r2, [pc, #416]	@ (8002454 <HAL_DMA_Start_IT+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d04a      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	@ (8002458 <HAL_DMA_Start_IT+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d045      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a65      	ldr	r2, [pc, #404]	@ (800245c <HAL_DMA_Start_IT+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d040      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a63      	ldr	r2, [pc, #396]	@ (8002460 <HAL_DMA_Start_IT+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d03b      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a62      	ldr	r2, [pc, #392]	@ (8002464 <HAL_DMA_Start_IT+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d036      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a60      	ldr	r2, [pc, #384]	@ (8002468 <HAL_DMA_Start_IT+0x208>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d031      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5f      	ldr	r2, [pc, #380]	@ (800246c <HAL_DMA_Start_IT+0x20c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d02c      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002470 <HAL_DMA_Start_IT+0x210>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d027      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	@ (8002474 <HAL_DMA_Start_IT+0x214>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5a      	ldr	r2, [pc, #360]	@ (8002478 <HAL_DMA_Start_IT+0x218>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01d      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a59      	ldr	r2, [pc, #356]	@ (800247c <HAL_DMA_Start_IT+0x21c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d018      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a57      	ldr	r2, [pc, #348]	@ (8002480 <HAL_DMA_Start_IT+0x220>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_DMA_Start_IT+0x224>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a54      	ldr	r2, [pc, #336]	@ (8002488 <HAL_DMA_Start_IT+0x228>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d009      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a53      	ldr	r2, [pc, #332]	@ (800248c <HAL_DMA_Start_IT+0x22c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d004      	beq.n	800234e <HAL_DMA_Start_IT+0xee>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a51      	ldr	r2, [pc, #324]	@ (8002490 <HAL_DMA_Start_IT+0x230>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <HAL_DMA_Start_IT+0x100>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e007      	b.n	8002370 <HAL_DMA_Start_IT+0x110>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f001 fe6a 	bl	8004050 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	@ (8002454 <HAL_DMA_Start_IT+0x1f4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d04a      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	@ (8002458 <HAL_DMA_Start_IT+0x1f8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d045      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a31      	ldr	r2, [pc, #196]	@ (800245c <HAL_DMA_Start_IT+0x1fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d040      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a30      	ldr	r2, [pc, #192]	@ (8002460 <HAL_DMA_Start_IT+0x200>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d03b      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002464 <HAL_DMA_Start_IT+0x204>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d036      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <HAL_DMA_Start_IT+0x208>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d031      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2b      	ldr	r2, [pc, #172]	@ (800246c <HAL_DMA_Start_IT+0x20c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02c      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <HAL_DMA_Start_IT+0x210>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d027      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a28      	ldr	r2, [pc, #160]	@ (8002474 <HAL_DMA_Start_IT+0x214>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a27      	ldr	r2, [pc, #156]	@ (8002478 <HAL_DMA_Start_IT+0x218>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01d      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_DMA_Start_IT+0x21c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <HAL_DMA_Start_IT+0x220>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <HAL_DMA_Start_IT+0x224>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <HAL_DMA_Start_IT+0x228>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <HAL_DMA_Start_IT+0x22c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Start_IT+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1e      	ldr	r2, [pc, #120]	@ (8002490 <HAL_DMA_Start_IT+0x230>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Start_IT+0x1c0>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_DMA_Start_IT+0x1c2>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d036      	beq.n	8002494 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 021e 	bic.w	r2, r3, #30
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0216 	orr.w	r2, r2, #22
 8002438:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03e      	beq.n	80024c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0208 	orr.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e035      	b.n	80024c0 <HAL_DMA_Start_IT+0x260>
 8002454:	40020010 	.word	0x40020010
 8002458:	40020028 	.word	0x40020028
 800245c:	40020040 	.word	0x40020040
 8002460:	40020058 	.word	0x40020058
 8002464:	40020070 	.word	0x40020070
 8002468:	40020088 	.word	0x40020088
 800246c:	400200a0 	.word	0x400200a0
 8002470:	400200b8 	.word	0x400200b8
 8002474:	40020410 	.word	0x40020410
 8002478:	40020428 	.word	0x40020428
 800247c:	40020440 	.word	0x40020440
 8002480:	40020458 	.word	0x40020458
 8002484:	40020470 	.word	0x40020470
 8002488:	40020488 	.word	0x40020488
 800248c:	400204a0 	.word	0x400204a0
 8002490:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020e 	bic.w	r2, r3, #14
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 020a 	orr.w	r2, r2, #10
 80024a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0204 	orr.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a83      	ldr	r2, [pc, #524]	@ (80026d4 <HAL_DMA_Start_IT+0x474>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d072      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a82      	ldr	r2, [pc, #520]	@ (80026d8 <HAL_DMA_Start_IT+0x478>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d06d      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a80      	ldr	r2, [pc, #512]	@ (80026dc <HAL_DMA_Start_IT+0x47c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d068      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7f      	ldr	r2, [pc, #508]	@ (80026e0 <HAL_DMA_Start_IT+0x480>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d063      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a7d      	ldr	r2, [pc, #500]	@ (80026e4 <HAL_DMA_Start_IT+0x484>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d05e      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7c      	ldr	r2, [pc, #496]	@ (80026e8 <HAL_DMA_Start_IT+0x488>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d059      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7a      	ldr	r2, [pc, #488]	@ (80026ec <HAL_DMA_Start_IT+0x48c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d054      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a79      	ldr	r2, [pc, #484]	@ (80026f0 <HAL_DMA_Start_IT+0x490>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d04f      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a77      	ldr	r2, [pc, #476]	@ (80026f4 <HAL_DMA_Start_IT+0x494>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d04a      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a76      	ldr	r2, [pc, #472]	@ (80026f8 <HAL_DMA_Start_IT+0x498>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d045      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a74      	ldr	r2, [pc, #464]	@ (80026fc <HAL_DMA_Start_IT+0x49c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d040      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a73      	ldr	r2, [pc, #460]	@ (8002700 <HAL_DMA_Start_IT+0x4a0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d03b      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a71      	ldr	r2, [pc, #452]	@ (8002704 <HAL_DMA_Start_IT+0x4a4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d036      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a70      	ldr	r2, [pc, #448]	@ (8002708 <HAL_DMA_Start_IT+0x4a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d031      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_DMA_Start_IT+0x4ac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6d      	ldr	r2, [pc, #436]	@ (8002710 <HAL_DMA_Start_IT+0x4b0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6b      	ldr	r2, [pc, #428]	@ (8002714 <HAL_DMA_Start_IT+0x4b4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6a      	ldr	r2, [pc, #424]	@ (8002718 <HAL_DMA_Start_IT+0x4b8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a68      	ldr	r2, [pc, #416]	@ (800271c <HAL_DMA_Start_IT+0x4bc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a67      	ldr	r2, [pc, #412]	@ (8002720 <HAL_DMA_Start_IT+0x4c0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <HAL_DMA_Start_IT+0x4c4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a64      	ldr	r2, [pc, #400]	@ (8002728 <HAL_DMA_Start_IT+0x4c8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a62      	ldr	r2, [pc, #392]	@ (800272c <HAL_DMA_Start_IT+0x4cc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Start_IT+0x350>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a61      	ldr	r2, [pc, #388]	@ (8002730 <HAL_DMA_Start_IT+0x4d0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Start_IT+0x354>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Start_IT+0x356>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01a      	beq.n	80025f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a37      	ldr	r2, [pc, #220]	@ (80026d4 <HAL_DMA_Start_IT+0x474>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04a      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a36      	ldr	r2, [pc, #216]	@ (80026d8 <HAL_DMA_Start_IT+0x478>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d045      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a34      	ldr	r2, [pc, #208]	@ (80026dc <HAL_DMA_Start_IT+0x47c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a33      	ldr	r2, [pc, #204]	@ (80026e0 <HAL_DMA_Start_IT+0x480>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d03b      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a31      	ldr	r2, [pc, #196]	@ (80026e4 <HAL_DMA_Start_IT+0x484>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a30      	ldr	r2, [pc, #192]	@ (80026e8 <HAL_DMA_Start_IT+0x488>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d031      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2e      	ldr	r2, [pc, #184]	@ (80026ec <HAL_DMA_Start_IT+0x48c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02c      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2d      	ldr	r2, [pc, #180]	@ (80026f0 <HAL_DMA_Start_IT+0x490>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d027      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <HAL_DMA_Start_IT+0x494>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_DMA_Start_IT+0x498>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	@ (80026fc <HAL_DMA_Start_IT+0x49c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a27      	ldr	r2, [pc, #156]	@ (8002700 <HAL_DMA_Start_IT+0x4a0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a25      	ldr	r2, [pc, #148]	@ (8002704 <HAL_DMA_Start_IT+0x4a4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <HAL_DMA_Start_IT+0x4a8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	@ (800270c <HAL_DMA_Start_IT+0x4ac>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Start_IT+0x430>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	@ (8002710 <HAL_DMA_Start_IT+0x4b0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <HAL_DMA_Start_IT+0x442>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e012      	b.n	80026c8 <HAL_DMA_Start_IT+0x468>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e009      	b.n	80026c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40020010 	.word	0x40020010
 80026d8:	40020028 	.word	0x40020028
 80026dc:	40020040 	.word	0x40020040
 80026e0:	40020058 	.word	0x40020058
 80026e4:	40020070 	.word	0x40020070
 80026e8:	40020088 	.word	0x40020088
 80026ec:	400200a0 	.word	0x400200a0
 80026f0:	400200b8 	.word	0x400200b8
 80026f4:	40020410 	.word	0x40020410
 80026f8:	40020428 	.word	0x40020428
 80026fc:	40020440 	.word	0x40020440
 8002700:	40020458 	.word	0x40020458
 8002704:	40020470 	.word	0x40020470
 8002708:	40020488 	.word	0x40020488
 800270c:	400204a0 	.word	0x400204a0
 8002710:	400204b8 	.word	0x400204b8
 8002714:	58025408 	.word	0x58025408
 8002718:	5802541c 	.word	0x5802541c
 800271c:	58025430 	.word	0x58025430
 8002720:	58025444 	.word	0x58025444
 8002724:	58025458 	.word	0x58025458
 8002728:	5802546c 	.word	0x5802546c
 800272c:	58025480 	.word	0x58025480
 8002730:	58025494 	.word	0x58025494

08002734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff f8e8 	bl	8001910 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2dc      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d008      	beq.n	800276a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e2cd      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a76      	ldr	r2, [pc, #472]	@ (8002948 <HAL_DMA_Abort+0x214>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a74      	ldr	r2, [pc, #464]	@ (800294c <HAL_DMA_Abort+0x218>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	@ (8002950 <HAL_DMA_Abort+0x21c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a71      	ldr	r2, [pc, #452]	@ (8002954 <HAL_DMA_Abort+0x220>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a70      	ldr	r2, [pc, #448]	@ (8002958 <HAL_DMA_Abort+0x224>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	@ (800295c <HAL_DMA_Abort+0x228>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002960 <HAL_DMA_Abort+0x22c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002964 <HAL_DMA_Abort+0x230>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6a      	ldr	r2, [pc, #424]	@ (8002968 <HAL_DMA_Abort+0x234>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	@ (800296c <HAL_DMA_Abort+0x238>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a67      	ldr	r2, [pc, #412]	@ (8002970 <HAL_DMA_Abort+0x23c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_DMA_Abort+0x240>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a64      	ldr	r2, [pc, #400]	@ (8002978 <HAL_DMA_Abort+0x244>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a62      	ldr	r2, [pc, #392]	@ (800297c <HAL_DMA_Abort+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a61      	ldr	r2, [pc, #388]	@ (8002980 <HAL_DMA_Abort+0x24c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort+0xd6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5f      	ldr	r2, [pc, #380]	@ (8002984 <HAL_DMA_Abort+0x250>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_DMA_Abort+0xda>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_DMA_Abort+0xdc>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 021e 	bic.w	r2, r2, #30
 8002822:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002832:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e00a      	b.n	8002852 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 020e 	bic.w	r2, r2, #14
 800284a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3c      	ldr	r2, [pc, #240]	@ (8002948 <HAL_DMA_Abort+0x214>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d072      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3a      	ldr	r2, [pc, #232]	@ (800294c <HAL_DMA_Abort+0x218>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d06d      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a39      	ldr	r2, [pc, #228]	@ (8002950 <HAL_DMA_Abort+0x21c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d068      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <HAL_DMA_Abort+0x220>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d063      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a36      	ldr	r2, [pc, #216]	@ (8002958 <HAL_DMA_Abort+0x224>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d05e      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a34      	ldr	r2, [pc, #208]	@ (800295c <HAL_DMA_Abort+0x228>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d059      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a33      	ldr	r2, [pc, #204]	@ (8002960 <HAL_DMA_Abort+0x22c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d054      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_DMA_Abort+0x230>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04f      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a30      	ldr	r2, [pc, #192]	@ (8002968 <HAL_DMA_Abort+0x234>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04a      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_DMA_Abort+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d045      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_DMA_Abort+0x23c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d040      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_DMA_Abort+0x240>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03b      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_DMA_Abort+0x244>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d036      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a28      	ldr	r2, [pc, #160]	@ (800297c <HAL_DMA_Abort+0x248>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <HAL_DMA_Abort+0x24c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02c      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a25      	ldr	r2, [pc, #148]	@ (8002984 <HAL_DMA_Abort+0x250>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <HAL_DMA_Abort+0x254>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a22      	ldr	r2, [pc, #136]	@ (800298c <HAL_DMA_Abort+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01d      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a21      	ldr	r2, [pc, #132]	@ (8002990 <HAL_DMA_Abort+0x25c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d018      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <HAL_DMA_Abort+0x260>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1e      	ldr	r2, [pc, #120]	@ (8002998 <HAL_DMA_Abort+0x264>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <HAL_DMA_Abort+0x268>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <HAL_DMA_Abort+0x26c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_DMA_Abort+0x20e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a19      	ldr	r2, [pc, #100]	@ (80029a4 <HAL_DMA_Abort+0x270>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d132      	bne.n	80029a8 <HAL_DMA_Abort+0x274>
 8002942:	2301      	movs	r3, #1
 8002944:	e031      	b.n	80029aa <HAL_DMA_Abort+0x276>
 8002946:	bf00      	nop
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
 8002988:	58025408 	.word	0x58025408
 800298c:	5802541c 	.word	0x5802541c
 8002990:	58025430 	.word	0x58025430
 8002994:	58025444 	.word	0x58025444
 8002998:	58025458 	.word	0x58025458
 800299c:	5802546c 	.word	0x5802546c
 80029a0:	58025480 	.word	0x58025480
 80029a4:	58025494 	.word	0x58025494
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002b78 <HAL_DMA_Abort+0x444>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6b      	ldr	r2, [pc, #428]	@ (8002b7c <HAL_DMA_Abort+0x448>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002b80 <HAL_DMA_Abort+0x44c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a68      	ldr	r2, [pc, #416]	@ (8002b84 <HAL_DMA_Abort+0x450>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a67      	ldr	r2, [pc, #412]	@ (8002b88 <HAL_DMA_Abort+0x454>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_DMA_Abort+0x458>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a64      	ldr	r2, [pc, #400]	@ (8002b90 <HAL_DMA_Abort+0x45c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a62      	ldr	r2, [pc, #392]	@ (8002b94 <HAL_DMA_Abort+0x460>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a61      	ldr	r2, [pc, #388]	@ (8002b98 <HAL_DMA_Abort+0x464>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8002b9c <HAL_DMA_Abort+0x468>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_DMA_Abort+0x46c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba4 <HAL_DMA_Abort+0x470>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba8 <HAL_DMA_Abort+0x474>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a59      	ldr	r2, [pc, #356]	@ (8002bac <HAL_DMA_Abort+0x478>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a58      	ldr	r2, [pc, #352]	@ (8002bb0 <HAL_DMA_Abort+0x47c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <HAL_DMA_Abort+0x480>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_DMA_Abort+0x33c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_DMA_Abort+0x34c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a80:	e013      	b.n	8002aaa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a82:	f7fe ff45 	bl	8001910 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d90c      	bls.n	8002aaa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e12d      	b.n	8002d06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e5      	bne.n	8002a82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	@ (8002b78 <HAL_DMA_Abort+0x444>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04a      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <HAL_DMA_Abort+0x448>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d045      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	@ (8002b80 <HAL_DMA_Abort+0x44c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d040      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <HAL_DMA_Abort+0x450>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03b      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a29      	ldr	r2, [pc, #164]	@ (8002b88 <HAL_DMA_Abort+0x454>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d036      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <HAL_DMA_Abort+0x458>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <HAL_DMA_Abort+0x45c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a24      	ldr	r2, [pc, #144]	@ (8002b94 <HAL_DMA_Abort+0x460>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d027      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a23      	ldr	r2, [pc, #140]	@ (8002b98 <HAL_DMA_Abort+0x464>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <HAL_DMA_Abort+0x468>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	@ (8002ba0 <HAL_DMA_Abort+0x46c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_DMA_Abort+0x470>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_DMA_Abort+0x474>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_DMA_Abort+0x478>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb0 <HAL_DMA_Abort+0x47c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_DMA_Abort+0x422>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_DMA_Abort+0x480>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Abort+0x426>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_Abort+0x428>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02b      	beq.n	8002bb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	223f      	movs	r2, #63	@ 0x3f
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	e02a      	b.n	8002bce <HAL_DMA_Abort+0x49a>
 8002b78:	40020010 	.word	0x40020010
 8002b7c:	40020028 	.word	0x40020028
 8002b80:	40020040 	.word	0x40020040
 8002b84:	40020058 	.word	0x40020058
 8002b88:	40020070 	.word	0x40020070
 8002b8c:	40020088 	.word	0x40020088
 8002b90:	400200a0 	.word	0x400200a0
 8002b94:	400200b8 	.word	0x400200b8
 8002b98:	40020410 	.word	0x40020410
 8002b9c:	40020428 	.word	0x40020428
 8002ba0:	40020440 	.word	0x40020440
 8002ba4:	40020458 	.word	0x40020458
 8002ba8:	40020470 	.word	0x40020470
 8002bac:	40020488 	.word	0x40020488
 8002bb0:	400204a0 	.word	0x400204a0
 8002bb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8002d10 <HAL_DMA_Abort+0x5dc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8002d14 <HAL_DMA_Abort+0x5e0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4c      	ldr	r2, [pc, #304]	@ (8002d18 <HAL_DMA_Abort+0x5e4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8002d1c <HAL_DMA_Abort+0x5e8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a49      	ldr	r2, [pc, #292]	@ (8002d20 <HAL_DMA_Abort+0x5ec>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a47      	ldr	r2, [pc, #284]	@ (8002d24 <HAL_DMA_Abort+0x5f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a46      	ldr	r2, [pc, #280]	@ (8002d28 <HAL_DMA_Abort+0x5f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a44      	ldr	r2, [pc, #272]	@ (8002d2c <HAL_DMA_Abort+0x5f8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a43      	ldr	r2, [pc, #268]	@ (8002d30 <HAL_DMA_Abort+0x5fc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a41      	ldr	r2, [pc, #260]	@ (8002d34 <HAL_DMA_Abort+0x600>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a40      	ldr	r2, [pc, #256]	@ (8002d38 <HAL_DMA_Abort+0x604>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3e      	ldr	r2, [pc, #248]	@ (8002d3c <HAL_DMA_Abort+0x608>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d40 <HAL_DMA_Abort+0x60c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_DMA_Abort+0x610>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d48 <HAL_DMA_Abort+0x614>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_DMA_Abort+0x618>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	@ (8002d50 <HAL_DMA_Abort+0x61c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	@ (8002d54 <HAL_DMA_Abort+0x620>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	@ (8002d58 <HAL_DMA_Abort+0x624>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_DMA_Abort+0x628>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <HAL_DMA_Abort+0x62c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d64 <HAL_DMA_Abort+0x630>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2e      	ldr	r2, [pc, #184]	@ (8002d68 <HAL_DMA_Abort+0x634>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Abort+0x58a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <HAL_DMA_Abort+0x638>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Abort+0x58e>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort+0x590>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cd0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cf2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40020010 	.word	0x40020010
 8002d14:	40020028 	.word	0x40020028
 8002d18:	40020040 	.word	0x40020040
 8002d1c:	40020058 	.word	0x40020058
 8002d20:	40020070 	.word	0x40020070
 8002d24:	40020088 	.word	0x40020088
 8002d28:	400200a0 	.word	0x400200a0
 8002d2c:	400200b8 	.word	0x400200b8
 8002d30:	40020410 	.word	0x40020410
 8002d34:	40020428 	.word	0x40020428
 8002d38:	40020440 	.word	0x40020440
 8002d3c:	40020458 	.word	0x40020458
 8002d40:	40020470 	.word	0x40020470
 8002d44:	40020488 	.word	0x40020488
 8002d48:	400204a0 	.word	0x400204a0
 8002d4c:	400204b8 	.word	0x400204b8
 8002d50:	58025408 	.word	0x58025408
 8002d54:	5802541c 	.word	0x5802541c
 8002d58:	58025430 	.word	0x58025430
 8002d5c:	58025444 	.word	0x58025444
 8002d60:	58025458 	.word	0x58025458
 8002d64:	5802546c 	.word	0x5802546c
 8002d68:	58025480 	.word	0x58025480
 8002d6c:	58025494 	.word	0x58025494

08002d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e237      	b.n	80031f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e22c      	b.n	80031f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04a      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d045      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a59      	ldr	r2, [pc, #356]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d040      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a58      	ldr	r2, [pc, #352]	@ (8002f1c <HAL_DMA_Abort_IT+0x1ac>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03b      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d036      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a55      	ldr	r2, [pc, #340]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a53      	ldr	r2, [pc, #332]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02c      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_DMA_Abort_IT+0x1bc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a50      	ldr	r2, [pc, #320]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01d      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4d      	ldr	r2, [pc, #308]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f3c <HAL_DMA_Abort_IT+0x1cc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4a      	ldr	r2, [pc, #296]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a49      	ldr	r2, [pc, #292]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a47      	ldr	r2, [pc, #284]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a46      	ldr	r2, [pc, #280]	@ (8002f4c <HAL_DMA_Abort_IT+0x1dc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Abort_IT+0xcc>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_DMA_Abort_IT+0xce>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8086 	beq.w	8002f50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04a      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d045      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_DMA_Abort_IT+0x1ac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d03b      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d036      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a28      	ldr	r2, [pc, #160]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02c      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a25      	ldr	r2, [pc, #148]	@ (8002f2c <HAL_DMA_Abort_IT+0x1bc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d027      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_Abort_IT+0x1cc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <HAL_DMA_Abort_IT+0x1dc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <HAL_DMA_Abort_IT+0x18e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e178      	b.n	80031f0 <HAL_DMA_Abort_IT+0x480>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e16f      	b.n	80031f0 <HAL_DMA_Abort_IT+0x480>
 8002f10:	40020010 	.word	0x40020010
 8002f14:	40020028 	.word	0x40020028
 8002f18:	40020040 	.word	0x40020040
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	40020070 	.word	0x40020070
 8002f24:	40020088 	.word	0x40020088
 8002f28:	400200a0 	.word	0x400200a0
 8002f2c:	400200b8 	.word	0x400200b8
 8002f30:	40020410 	.word	0x40020410
 8002f34:	40020428 	.word	0x40020428
 8002f38:	40020440 	.word	0x40020440
 8002f3c:	40020458 	.word	0x40020458
 8002f40:	40020470 	.word	0x40020470
 8002f44:	40020488 	.word	0x40020488
 8002f48:	400204a0 	.word	0x400204a0
 8002f4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6c      	ldr	r2, [pc, #432]	@ (8003118 <HAL_DMA_Abort_IT+0x3a8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d04a      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800311c <HAL_DMA_Abort_IT+0x3ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d045      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a69      	ldr	r2, [pc, #420]	@ (8003120 <HAL_DMA_Abort_IT+0x3b0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d040      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a68      	ldr	r2, [pc, #416]	@ (8003124 <HAL_DMA_Abort_IT+0x3b4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d03b      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a66      	ldr	r2, [pc, #408]	@ (8003128 <HAL_DMA_Abort_IT+0x3b8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d036      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a65      	ldr	r2, [pc, #404]	@ (800312c <HAL_DMA_Abort_IT+0x3bc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d031      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a63      	ldr	r2, [pc, #396]	@ (8003130 <HAL_DMA_Abort_IT+0x3c0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02c      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a62      	ldr	r2, [pc, #392]	@ (8003134 <HAL_DMA_Abort_IT+0x3c4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d027      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_DMA_Abort_IT+0x3c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d022      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800313c <HAL_DMA_Abort_IT+0x3cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01d      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003140 <HAL_DMA_Abort_IT+0x3d0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d018      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003144 <HAL_DMA_Abort_IT+0x3d4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_DMA_Abort_IT+0x3d8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a59      	ldr	r2, [pc, #356]	@ (800314c <HAL_DMA_Abort_IT+0x3dc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a57      	ldr	r2, [pc, #348]	@ (8003150 <HAL_DMA_Abort_IT+0x3e0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a56      	ldr	r2, [pc, #344]	@ (8003154 <HAL_DMA_Abort_IT+0x3e4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <HAL_DMA_Abort_IT+0x2a2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e007      	b.n	8003022 <HAL_DMA_Abort_IT+0x2b2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3c      	ldr	r2, [pc, #240]	@ (8003118 <HAL_DMA_Abort_IT+0x3a8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d072      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3a      	ldr	r2, [pc, #232]	@ (800311c <HAL_DMA_Abort_IT+0x3ac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d06d      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <HAL_DMA_Abort_IT+0x3b0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d068      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a37      	ldr	r2, [pc, #220]	@ (8003124 <HAL_DMA_Abort_IT+0x3b4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d063      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a36      	ldr	r2, [pc, #216]	@ (8003128 <HAL_DMA_Abort_IT+0x3b8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d05e      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a34      	ldr	r2, [pc, #208]	@ (800312c <HAL_DMA_Abort_IT+0x3bc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d059      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <HAL_DMA_Abort_IT+0x3c0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d054      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <HAL_DMA_Abort_IT+0x3c4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d04f      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_DMA_Abort_IT+0x3c8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_DMA_Abort_IT+0x3cc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_DMA_Abort_IT+0x3d0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_DMA_Abort_IT+0x3d4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <HAL_DMA_Abort_IT+0x3d8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_DMA_Abort_IT+0x3dc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_DMA_Abort_IT+0x3e0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <HAL_DMA_Abort_IT+0x3e4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <HAL_DMA_Abort_IT+0x3e8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_DMA_Abort_IT+0x3ec>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_DMA_Abort_IT+0x3f0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_DMA_Abort_IT+0x3f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <HAL_DMA_Abort_IT+0x3f8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_DMA_Abort_IT+0x3fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_DMA_Abort_IT+0x400>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_DMA_Abort_IT+0x404>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d132      	bne.n	8003178 <HAL_DMA_Abort_IT+0x408>
 8003112:	2301      	movs	r3, #1
 8003114:	e031      	b.n	800317a <HAL_DMA_Abort_IT+0x40a>
 8003116:	bf00      	nop
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8
 8003158:	58025408 	.word	0x58025408
 800315c:	5802541c 	.word	0x5802541c
 8003160:	58025430 	.word	0x58025430
 8003164:	58025444 	.word	0x58025444
 8003168:	58025458 	.word	0x58025458
 800316c:	5802546c 	.word	0x5802546c
 8003170:	58025480 	.word	0x58025480
 8003174:	58025494 	.word	0x58025494
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800318c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003208:	4b67      	ldr	r3, [pc, #412]	@ (80033a8 <HAL_DMA_IRQHandler+0x1ac>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a67      	ldr	r2, [pc, #412]	@ (80033ac <HAL_DMA_IRQHandler+0x1b0>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5f      	ldr	r2, [pc, #380]	@ (80033b0 <HAL_DMA_IRQHandler+0x1b4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04a      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5d      	ldr	r2, [pc, #372]	@ (80033b4 <HAL_DMA_IRQHandler+0x1b8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d045      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5c      	ldr	r2, [pc, #368]	@ (80033b8 <HAL_DMA_IRQHandler+0x1bc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5a      	ldr	r2, [pc, #360]	@ (80033bc <HAL_DMA_IRQHandler+0x1c0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d03b      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a59      	ldr	r2, [pc, #356]	@ (80033c0 <HAL_DMA_IRQHandler+0x1c4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d036      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a57      	ldr	r2, [pc, #348]	@ (80033c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d031      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a56      	ldr	r2, [pc, #344]	@ (80033c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d02c      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a54      	ldr	r2, [pc, #336]	@ (80033cc <HAL_DMA_IRQHandler+0x1d0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d027      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a53      	ldr	r2, [pc, #332]	@ (80033d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d022      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a51      	ldr	r2, [pc, #324]	@ (80033d4 <HAL_DMA_IRQHandler+0x1d8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01d      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a50      	ldr	r2, [pc, #320]	@ (80033d8 <HAL_DMA_IRQHandler+0x1dc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4e      	ldr	r2, [pc, #312]	@ (80033dc <HAL_DMA_IRQHandler+0x1e0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a4d      	ldr	r2, [pc, #308]	@ (80033e0 <HAL_DMA_IRQHandler+0x1e4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	@ (80033e4 <HAL_DMA_IRQHandler+0x1e8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4a      	ldr	r2, [pc, #296]	@ (80033e8 <HAL_DMA_IRQHandler+0x1ec>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_IRQHandler+0xd2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a48      	ldr	r2, [pc, #288]	@ (80033ec <HAL_DMA_IRQHandler+0x1f0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_DMA_IRQHandler+0xd6>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 842b 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2208      	movs	r2, #8
 80032e4:	409a      	lsls	r2, r3
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a2 	beq.w	8003434 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_DMA_IRQHandler+0x1b4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d04a      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <HAL_DMA_IRQHandler+0x1b8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d045      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <HAL_DMA_IRQHandler+0x1bc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d040      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2a      	ldr	r2, [pc, #168]	@ (80033bc <HAL_DMA_IRQHandler+0x1c0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d03b      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a28      	ldr	r2, [pc, #160]	@ (80033c0 <HAL_DMA_IRQHandler+0x1c4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d036      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d031      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a25      	ldr	r2, [pc, #148]	@ (80033c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d02c      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a24      	ldr	r2, [pc, #144]	@ (80033cc <HAL_DMA_IRQHandler+0x1d0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d027      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d022      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <HAL_DMA_IRQHandler+0x1d8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01d      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_DMA_IRQHandler+0x1dc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d018      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_DMA_IRQHandler+0x1e0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_DMA_IRQHandler+0x1e4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <HAL_DMA_IRQHandler+0x1e8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_DMA_IRQHandler+0x1ec>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_DMA_IRQHandler+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <HAL_DMA_IRQHandler+0x1f0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d12f      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x1f4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e02e      	b.n	8003404 <HAL_DMA_IRQHandler+0x208>
 80033a6:	bf00      	nop
 80033a8:	2400000c 	.word	0x2400000c
 80033ac:	1b4e81b5 	.word	0x1b4e81b5
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2208      	movs	r2, #8
 8003422:	409a      	lsls	r2, r3
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06e      	beq.n	8003528 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a69      	ldr	r2, [pc, #420]	@ (80035f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04a      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a67      	ldr	r2, [pc, #412]	@ (80035f8 <HAL_DMA_IRQHandler+0x3fc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d045      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a66      	ldr	r2, [pc, #408]	@ (80035fc <HAL_DMA_IRQHandler+0x400>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d040      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a64      	ldr	r2, [pc, #400]	@ (8003600 <HAL_DMA_IRQHandler+0x404>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d03b      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a63      	ldr	r2, [pc, #396]	@ (8003604 <HAL_DMA_IRQHandler+0x408>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d036      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a61      	ldr	r2, [pc, #388]	@ (8003608 <HAL_DMA_IRQHandler+0x40c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d031      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a60      	ldr	r2, [pc, #384]	@ (800360c <HAL_DMA_IRQHandler+0x410>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d02c      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5e      	ldr	r2, [pc, #376]	@ (8003610 <HAL_DMA_IRQHandler+0x414>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d027      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5d      	ldr	r2, [pc, #372]	@ (8003614 <HAL_DMA_IRQHandler+0x418>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003618 <HAL_DMA_IRQHandler+0x41c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5a      	ldr	r2, [pc, #360]	@ (800361c <HAL_DMA_IRQHandler+0x420>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a58      	ldr	r2, [pc, #352]	@ (8003620 <HAL_DMA_IRQHandler+0x424>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a57      	ldr	r2, [pc, #348]	@ (8003624 <HAL_DMA_IRQHandler+0x428>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a55      	ldr	r2, [pc, #340]	@ (8003628 <HAL_DMA_IRQHandler+0x42c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a54      	ldr	r2, [pc, #336]	@ (800362c <HAL_DMA_IRQHandler+0x430>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2ee>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_DMA_IRQHandler+0x434>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10a      	bne.n	8003500 <HAL_DMA_IRQHandler+0x304>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e003      	b.n	8003508 <HAL_DMA_IRQHandler+0x30c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2204      	movs	r2, #4
 8003532:	409a      	lsls	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 808f 	beq.w	800365c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2a      	ldr	r2, [pc, #168]	@ (80035f8 <HAL_DMA_IRQHandler+0x3fc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a29      	ldr	r2, [pc, #164]	@ (80035fc <HAL_DMA_IRQHandler+0x400>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <HAL_DMA_IRQHandler+0x404>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a26      	ldr	r2, [pc, #152]	@ (8003604 <HAL_DMA_IRQHandler+0x408>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <HAL_DMA_IRQHandler+0x40c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_DMA_IRQHandler+0x410>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a21      	ldr	r2, [pc, #132]	@ (8003610 <HAL_DMA_IRQHandler+0x414>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <HAL_DMA_IRQHandler+0x418>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1e      	ldr	r2, [pc, #120]	@ (8003618 <HAL_DMA_IRQHandler+0x41c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_DMA_IRQHandler+0x420>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003620 <HAL_DMA_IRQHandler+0x424>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_DMA_IRQHandler+0x428>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_DMA_IRQHandler+0x42c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a17      	ldr	r2, [pc, #92]	@ (800362c <HAL_DMA_IRQHandler+0x430>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_IRQHandler+0x3e2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <HAL_DMA_IRQHandler+0x434>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d12a      	bne.n	8003634 <HAL_DMA_IRQHandler+0x438>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e023      	b.n	800363c <HAL_DMA_IRQHandler+0x440>
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2204      	movs	r2, #4
 800364a:	409a      	lsls	r2, r3
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	f043 0204 	orr.w	r2, r3, #4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2210      	movs	r2, #16
 8003666:	409a      	lsls	r2, r3
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a6 	beq.w	80037be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a85      	ldr	r2, [pc, #532]	@ (800388c <HAL_DMA_IRQHandler+0x690>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	@ (8003890 <HAL_DMA_IRQHandler+0x694>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a82      	ldr	r2, [pc, #520]	@ (8003894 <HAL_DMA_IRQHandler+0x698>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a80      	ldr	r2, [pc, #512]	@ (8003898 <HAL_DMA_IRQHandler+0x69c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7f      	ldr	r2, [pc, #508]	@ (800389c <HAL_DMA_IRQHandler+0x6a0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7d      	ldr	r2, [pc, #500]	@ (80038a0 <HAL_DMA_IRQHandler+0x6a4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_DMA_IRQHandler+0x6a8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7a      	ldr	r2, [pc, #488]	@ (80038a8 <HAL_DMA_IRQHandler+0x6ac>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a79      	ldr	r2, [pc, #484]	@ (80038ac <HAL_DMA_IRQHandler+0x6b0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a77      	ldr	r2, [pc, #476]	@ (80038b0 <HAL_DMA_IRQHandler+0x6b4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <HAL_DMA_IRQHandler+0x6b8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a74      	ldr	r2, [pc, #464]	@ (80038b8 <HAL_DMA_IRQHandler+0x6bc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	@ (80038bc <HAL_DMA_IRQHandler+0x6c0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a71      	ldr	r2, [pc, #452]	@ (80038c0 <HAL_DMA_IRQHandler+0x6c4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a70      	ldr	r2, [pc, #448]	@ (80038c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_IRQHandler+0x516>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <HAL_DMA_IRQHandler+0x6cc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10a      	bne.n	8003728 <HAL_DMA_IRQHandler+0x52c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e009      	b.n	800373c <HAL_DMA_IRQHandler+0x540>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03e      	beq.n	80037be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2210      	movs	r2, #16
 800374a:	409a      	lsls	r2, r3
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d024      	beq.n	80037be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e01f      	b.n	80037be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01b      	beq.n	80037be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
 800378e:	e016      	b.n	80037be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2220      	movs	r2, #32
 80037c8:	409a      	lsls	r2, r3
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8110 	beq.w	80039f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <HAL_DMA_IRQHandler+0x690>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003890 <HAL_DMA_IRQHandler+0x694>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a29      	ldr	r2, [pc, #164]	@ (8003894 <HAL_DMA_IRQHandler+0x698>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a28      	ldr	r2, [pc, #160]	@ (8003898 <HAL_DMA_IRQHandler+0x69c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a26      	ldr	r2, [pc, #152]	@ (800389c <HAL_DMA_IRQHandler+0x6a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a25      	ldr	r2, [pc, #148]	@ (80038a0 <HAL_DMA_IRQHandler+0x6a4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	@ (80038a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a20      	ldr	r2, [pc, #128]	@ (80038ac <HAL_DMA_IRQHandler+0x6b0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <HAL_DMA_IRQHandler+0x6b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <HAL_DMA_IRQHandler+0x6c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a19      	ldr	r2, [pc, #100]	@ (80038c0 <HAL_DMA_IRQHandler+0x6c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_IRQHandler+0x678>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d12b      	bne.n	80038cc <HAL_DMA_IRQHandler+0x6d0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e02a      	b.n	80038e0 <HAL_DMA_IRQHandler+0x6e4>
 800388a:	bf00      	nop
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8087 	beq.w	80039f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2220      	movs	r2, #32
 80038f0:	409a      	lsls	r2, r3
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d139      	bne.n	8003976 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0216 	bic.w	r2, r2, #22
 8003910:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003920:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_DMA_IRQHandler+0x736>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0208 	bic.w	r2, r2, #8
 8003940:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	223f      	movs	r2, #63	@ 0x3f
 800394c:	409a      	lsls	r2, r3
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 834a 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
          }
          return;
 8003974:	e344      	b.n	8004000 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d018      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02c      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
 80039a2:	e027      	b.n	80039f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d023      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
 80039b4:	e01e      	b.n	80039f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10f      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0210 	bic.w	r2, r2, #16
 80039d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8306 	beq.w	800400a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8088 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a7a      	ldr	r2, [pc, #488]	@ (8003c04 <HAL_DMA_IRQHandler+0xa08>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d04a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a79      	ldr	r2, [pc, #484]	@ (8003c08 <HAL_DMA_IRQHandler+0xa0c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d045      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a77      	ldr	r2, [pc, #476]	@ (8003c0c <HAL_DMA_IRQHandler+0xa10>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a76      	ldr	r2, [pc, #472]	@ (8003c10 <HAL_DMA_IRQHandler+0xa14>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03b      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a74      	ldr	r2, [pc, #464]	@ (8003c14 <HAL_DMA_IRQHandler+0xa18>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a73      	ldr	r2, [pc, #460]	@ (8003c18 <HAL_DMA_IRQHandler+0xa1c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a71      	ldr	r2, [pc, #452]	@ (8003c1c <HAL_DMA_IRQHandler+0xa20>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a70      	ldr	r2, [pc, #448]	@ (8003c20 <HAL_DMA_IRQHandler+0xa24>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6e      	ldr	r2, [pc, #440]	@ (8003c24 <HAL_DMA_IRQHandler+0xa28>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6d      	ldr	r2, [pc, #436]	@ (8003c28 <HAL_DMA_IRQHandler+0xa2c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003c2c <HAL_DMA_IRQHandler+0xa30>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6a      	ldr	r2, [pc, #424]	@ (8003c30 <HAL_DMA_IRQHandler+0xa34>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a68      	ldr	r2, [pc, #416]	@ (8003c34 <HAL_DMA_IRQHandler+0xa38>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a67      	ldr	r2, [pc, #412]	@ (8003c38 <HAL_DMA_IRQHandler+0xa3c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_DMA_IRQHandler+0xa40>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x8b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a64      	ldr	r2, [pc, #400]	@ (8003c40 <HAL_DMA_IRQHandler+0xa44>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <HAL_DMA_IRQHandler+0x8ca>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e007      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x8da>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d307      	bcc.n	8003af2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f2      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x8da>
 8003af0:	e000      	b.n	8003af4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003af2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b0a:	e003      	b.n	8003b14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8272 	beq.w	800400a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e26c      	b.n	800400a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a43      	ldr	r2, [pc, #268]	@ (8003c44 <HAL_DMA_IRQHandler+0xa48>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a42      	ldr	r2, [pc, #264]	@ (8003c48 <HAL_DMA_IRQHandler+0xa4c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01d      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a40      	ldr	r2, [pc, #256]	@ (8003c4c <HAL_DMA_IRQHandler+0xa50>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a3f      	ldr	r2, [pc, #252]	@ (8003c50 <HAL_DMA_IRQHandler+0xa54>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c54 <HAL_DMA_IRQHandler+0xa58>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3c      	ldr	r2, [pc, #240]	@ (8003c58 <HAL_DMA_IRQHandler+0xa5c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3a      	ldr	r2, [pc, #232]	@ (8003c5c <HAL_DMA_IRQHandler+0xa60>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x984>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a39      	ldr	r2, [pc, #228]	@ (8003c60 <HAL_DMA_IRQHandler+0xa64>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x988>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_DMA_IRQHandler+0x98a>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 823f 	beq.w	800400a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80cd 	beq.w	8003d44 <HAL_DMA_IRQHandler+0xb48>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80c7 	beq.w	8003d44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d049      	beq.n	8003c64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8210 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bec:	e20a      	b.n	8004004 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8206 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c00:	e200      	b.n	8004004 <HAL_DMA_IRQHandler+0xe08>
 8003c02:	bf00      	nop
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	58025408 	.word	0x58025408
 8003c48:	5802541c 	.word	0x5802541c
 8003c4c:	58025430 	.word	0x58025430
 8003c50:	58025444 	.word	0x58025444
 8003c54:	58025458 	.word	0x58025458
 8003c58:	5802546c 	.word	0x5802546c
 8003c5c:	58025480 	.word	0x58025480
 8003c60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d160      	bne.n	8003d30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7f      	ldr	r2, [pc, #508]	@ (8003e70 <HAL_DMA_IRQHandler+0xc74>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04a      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e74 <HAL_DMA_IRQHandler+0xc78>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d045      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7c      	ldr	r2, [pc, #496]	@ (8003e78 <HAL_DMA_IRQHandler+0xc7c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a7a      	ldr	r2, [pc, #488]	@ (8003e7c <HAL_DMA_IRQHandler+0xc80>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03b      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a79      	ldr	r2, [pc, #484]	@ (8003e80 <HAL_DMA_IRQHandler+0xc84>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d036      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a77      	ldr	r2, [pc, #476]	@ (8003e84 <HAL_DMA_IRQHandler+0xc88>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a76      	ldr	r2, [pc, #472]	@ (8003e88 <HAL_DMA_IRQHandler+0xc8c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d02c      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a74      	ldr	r2, [pc, #464]	@ (8003e8c <HAL_DMA_IRQHandler+0xc90>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d027      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a73      	ldr	r2, [pc, #460]	@ (8003e90 <HAL_DMA_IRQHandler+0xc94>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a71      	ldr	r2, [pc, #452]	@ (8003e94 <HAL_DMA_IRQHandler+0xc98>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a70      	ldr	r2, [pc, #448]	@ (8003e98 <HAL_DMA_IRQHandler+0xc9c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e9c <HAL_DMA_IRQHandler+0xca0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ea0 <HAL_DMA_IRQHandler+0xca4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ea4 <HAL_DMA_IRQHandler+0xca8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea8 <HAL_DMA_IRQHandler+0xcac>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xb12>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a68      	ldr	r2, [pc, #416]	@ (8003eac <HAL_DMA_IRQHandler+0xcb0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <HAL_DMA_IRQHandler+0xb24>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <HAL_DMA_IRQHandler+0xb34>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8165 	beq.w	8004004 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d42:	e15f      	b.n	8004004 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80c5 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xce8>
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80bf 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	2202      	movs	r2, #2
 8003d70:	409a      	lsls	r2, r3
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 813a 	beq.w	8004008 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d9c:	e134      	b.n	8004008 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8130 	beq.w	8004008 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db0:	e12a      	b.n	8004008 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 8089 	bne.w	8003ed0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_DMA_IRQHandler+0xc74>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <HAL_DMA_IRQHandler+0xc78>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_DMA_IRQHandler+0xc7c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <HAL_DMA_IRQHandler+0xc80>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <HAL_DMA_IRQHandler+0xc84>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <HAL_DMA_IRQHandler+0xc88>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_DMA_IRQHandler+0xc8c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <HAL_DMA_IRQHandler+0xc90>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <HAL_DMA_IRQHandler+0xc94>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e94 <HAL_DMA_IRQHandler+0xc98>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <HAL_DMA_IRQHandler+0xc9c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	@ (8003e9c <HAL_DMA_IRQHandler+0xca0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_DMA_IRQHandler+0xca4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <HAL_DMA_IRQHandler+0xca8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <HAL_DMA_IRQHandler+0xcac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xc62>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <HAL_DMA_IRQHandler+0xcb0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d128      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0xcb4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0214 	bic.w	r2, r2, #20
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e027      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xcc4>
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 020a 	bic.w	r2, r2, #10
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee2:	e091      	b.n	8004008 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2208      	movs	r2, #8
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8088 	beq.w	800400a <HAL_DMA_IRQHandler+0xe0e>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8082 	beq.w	800400a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	@ (8004010 <HAL_DMA_IRQHandler+0xe14>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04a      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3f      	ldr	r2, [pc, #252]	@ (8004014 <HAL_DMA_IRQHandler+0xe18>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d045      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <HAL_DMA_IRQHandler+0xe1c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d040      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3c      	ldr	r2, [pc, #240]	@ (800401c <HAL_DMA_IRQHandler+0xe20>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d03b      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3b      	ldr	r2, [pc, #236]	@ (8004020 <HAL_DMA_IRQHandler+0xe24>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d036      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a39      	ldr	r2, [pc, #228]	@ (8004024 <HAL_DMA_IRQHandler+0xe28>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d031      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	@ (8004028 <HAL_DMA_IRQHandler+0xe2c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d02c      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a36      	ldr	r2, [pc, #216]	@ (800402c <HAL_DMA_IRQHandler+0xe30>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d027      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a35      	ldr	r2, [pc, #212]	@ (8004030 <HAL_DMA_IRQHandler+0xe34>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a33      	ldr	r2, [pc, #204]	@ (8004034 <HAL_DMA_IRQHandler+0xe38>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	@ (8004038 <HAL_DMA_IRQHandler+0xe3c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a30      	ldr	r2, [pc, #192]	@ (800403c <HAL_DMA_IRQHandler+0xe40>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	@ (8004040 <HAL_DMA_IRQHandler+0xe44>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <HAL_DMA_IRQHandler+0xe48>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2c      	ldr	r2, [pc, #176]	@ (8004048 <HAL_DMA_IRQHandler+0xe4c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xdaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800404c <HAL_DMA_IRQHandler+0xe50>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0xdbc>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 021c 	bic.w	r2, r2, #28
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e007      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xdcc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 020e 	bic.w	r2, r2, #14
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
 8003ffe:	e004      	b.n	800400a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004008:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800400a:	3728      	adds	r7, #40	@ 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8

08004050 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7f      	ldr	r2, [pc, #508]	@ (800426c <DMA_SetConfig+0x21c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d072      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7d      	ldr	r2, [pc, #500]	@ (8004270 <DMA_SetConfig+0x220>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d06d      	beq.n	800415a <DMA_SetConfig+0x10a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7c      	ldr	r2, [pc, #496]	@ (8004274 <DMA_SetConfig+0x224>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d068      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a7a      	ldr	r2, [pc, #488]	@ (8004278 <DMA_SetConfig+0x228>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d063      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a79      	ldr	r2, [pc, #484]	@ (800427c <DMA_SetConfig+0x22c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d05e      	beq.n	800415a <DMA_SetConfig+0x10a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a77      	ldr	r2, [pc, #476]	@ (8004280 <DMA_SetConfig+0x230>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d059      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a76      	ldr	r2, [pc, #472]	@ (8004284 <DMA_SetConfig+0x234>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d054      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a74      	ldr	r2, [pc, #464]	@ (8004288 <DMA_SetConfig+0x238>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04f      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a73      	ldr	r2, [pc, #460]	@ (800428c <DMA_SetConfig+0x23c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d04a      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a71      	ldr	r2, [pc, #452]	@ (8004290 <DMA_SetConfig+0x240>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d045      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a70      	ldr	r2, [pc, #448]	@ (8004294 <DMA_SetConfig+0x244>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d040      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004298 <DMA_SetConfig+0x248>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d03b      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6d      	ldr	r2, [pc, #436]	@ (800429c <DMA_SetConfig+0x24c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d036      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6b      	ldr	r2, [pc, #428]	@ (80042a0 <DMA_SetConfig+0x250>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <DMA_SetConfig+0x10a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6a      	ldr	r2, [pc, #424]	@ (80042a4 <DMA_SetConfig+0x254>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d02c      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a68      	ldr	r2, [pc, #416]	@ (80042a8 <DMA_SetConfig+0x258>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d027      	beq.n	800415a <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a67      	ldr	r2, [pc, #412]	@ (80042ac <DMA_SetConfig+0x25c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a65      	ldr	r2, [pc, #404]	@ (80042b0 <DMA_SetConfig+0x260>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <DMA_SetConfig+0x10a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a64      	ldr	r2, [pc, #400]	@ (80042b4 <DMA_SetConfig+0x264>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a62      	ldr	r2, [pc, #392]	@ (80042b8 <DMA_SetConfig+0x268>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a61      	ldr	r2, [pc, #388]	@ (80042bc <DMA_SetConfig+0x26c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <DMA_SetConfig+0x10a>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5f      	ldr	r2, [pc, #380]	@ (80042c0 <DMA_SetConfig+0x270>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5e      	ldr	r2, [pc, #376]	@ (80042c4 <DMA_SetConfig+0x274>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <DMA_SetConfig+0x10a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5c      	ldr	r2, [pc, #368]	@ (80042c8 <DMA_SetConfig+0x278>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <DMA_SetConfig+0x10e>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <DMA_SetConfig+0x110>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800416c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800417e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a39      	ldr	r2, [pc, #228]	@ (800426c <DMA_SetConfig+0x21c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a38      	ldr	r2, [pc, #224]	@ (8004270 <DMA_SetConfig+0x220>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a36      	ldr	r2, [pc, #216]	@ (8004274 <DMA_SetConfig+0x224>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <DMA_SetConfig+0x228>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a33      	ldr	r2, [pc, #204]	@ (800427c <DMA_SetConfig+0x22c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a32      	ldr	r2, [pc, #200]	@ (8004280 <DMA_SetConfig+0x230>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <DMA_SetConfig+0x234>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004288 <DMA_SetConfig+0x238>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2d      	ldr	r2, [pc, #180]	@ (800428c <DMA_SetConfig+0x23c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2c      	ldr	r2, [pc, #176]	@ (8004290 <DMA_SetConfig+0x240>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004294 <DMA_SetConfig+0x244>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a29      	ldr	r2, [pc, #164]	@ (8004298 <DMA_SetConfig+0x248>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a27      	ldr	r2, [pc, #156]	@ (800429c <DMA_SetConfig+0x24c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a26      	ldr	r2, [pc, #152]	@ (80042a0 <DMA_SetConfig+0x250>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a24      	ldr	r2, [pc, #144]	@ (80042a4 <DMA_SetConfig+0x254>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <DMA_SetConfig+0x1d0>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a23      	ldr	r2, [pc, #140]	@ (80042a8 <DMA_SetConfig+0x258>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <DMA_SetConfig+0x1d4>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <DMA_SetConfig+0x1d6>
 8004224:	2300      	movs	r3, #0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d059      	beq.n	80042de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	223f      	movs	r2, #63	@ 0x3f
 8004234:	409a      	lsls	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004248:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	d138      	bne.n	80042cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800426a:	e086      	b.n	800437a <DMA_SetConfig+0x32a>
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
 80042ac:	58025408 	.word	0x58025408
 80042b0:	5802541c 	.word	0x5802541c
 80042b4:	58025430 	.word	0x58025430
 80042b8:	58025444 	.word	0x58025444
 80042bc:	58025458 	.word	0x58025458
 80042c0:	5802546c 	.word	0x5802546c
 80042c4:	58025480 	.word	0x58025480
 80042c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
}
 80042dc:	e04d      	b.n	800437a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a29      	ldr	r2, [pc, #164]	@ (8004388 <DMA_SetConfig+0x338>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <DMA_SetConfig+0x2de>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <DMA_SetConfig+0x33c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <DMA_SetConfig+0x2de>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a26      	ldr	r2, [pc, #152]	@ (8004390 <DMA_SetConfig+0x340>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <DMA_SetConfig+0x2de>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <DMA_SetConfig+0x344>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <DMA_SetConfig+0x2de>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <DMA_SetConfig+0x348>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <DMA_SetConfig+0x2de>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a21      	ldr	r2, [pc, #132]	@ (800439c <DMA_SetConfig+0x34c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <DMA_SetConfig+0x2de>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a20      	ldr	r2, [pc, #128]	@ (80043a0 <DMA_SetConfig+0x350>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <DMA_SetConfig+0x2de>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <DMA_SetConfig+0x354>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <DMA_SetConfig+0x2e2>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <DMA_SetConfig+0x2e4>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	d108      	bne.n	800436a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	60da      	str	r2, [r3, #12]
}
 8004368:	e007      	b.n	800437a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	58025408 	.word	0x58025408
 800438c:	5802541c 	.word	0x5802541c
 8004390:	58025430 	.word	0x58025430
 8004394:	58025444 	.word	0x58025444
 8004398:	58025458 	.word	0x58025458
 800439c:	5802546c 	.word	0x5802546c
 80043a0:	58025480 	.word	0x58025480
 80043a4:	58025494 	.word	0x58025494

080043a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a42      	ldr	r2, [pc, #264]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x118>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d04a      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a41      	ldr	r2, [pc, #260]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d045      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d040      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3e      	ldr	r2, [pc, #248]	@ (80044cc <DMA_CalcBaseAndBitshift+0x124>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d03b      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3c      	ldr	r2, [pc, #240]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x128>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d036      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3b      	ldr	r2, [pc, #236]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d031      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a39      	ldr	r2, [pc, #228]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02c      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a38      	ldr	r2, [pc, #224]	@ (80044dc <DMA_CalcBaseAndBitshift+0x134>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d027      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a35      	ldr	r2, [pc, #212]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d01d      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a33      	ldr	r2, [pc, #204]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x140>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a32      	ldr	r2, [pc, #200]	@ (80044ec <DMA_CalcBaseAndBitshift+0x144>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <DMA_CalcBaseAndBitshift+0x148>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2f      	ldr	r2, [pc, #188]	@ (80044f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2d      	ldr	r2, [pc, #180]	@ (80044f8 <DMA_CalcBaseAndBitshift+0x150>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2c      	ldr	r2, [pc, #176]	@ (80044fc <DMA_CalcBaseAndBitshift+0x154>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <DMA_CalcBaseAndBitshift+0xac>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <DMA_CalcBaseAndBitshift+0xae>
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d024      	beq.n	80044a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3b10      	subs	r3, #16
 8004462:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <DMA_CalcBaseAndBitshift+0x158>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	4a24      	ldr	r2, [pc, #144]	@ (8004504 <DMA_CalcBaseAndBitshift+0x15c>)
 8004474:	5cd3      	ldrb	r3, [r2, r3]
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d908      	bls.n	8004494 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	4b1f      	ldr	r3, [pc, #124]	@ (8004508 <DMA_CalcBaseAndBitshift+0x160>)
 800448a:	4013      	ands	r3, r2
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	659a      	str	r2, [r3, #88]	@ 0x58
 8004492:	e00d      	b.n	80044b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <DMA_CalcBaseAndBitshift+0x160>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a2:	e005      	b.n	80044b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8
 8004500:	aaaaaaab 	.word	0xaaaaaaab
 8004504:	0800a818 	.word	0x0800a818
 8004508:	fffffc00 	.word	0xfffffc00

0800450c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d120      	bne.n	8004562 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	2b03      	cmp	r3, #3
 8004526:	d858      	bhi.n	80045da <DMA_CheckFifoParam+0xce>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <DMA_CheckFifoParam+0x24>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004541 	.word	0x08004541
 8004534:	08004553 	.word	0x08004553
 8004538:	08004541 	.word	0x08004541
 800453c:	080045db 	.word	0x080045db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d048      	beq.n	80045de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004550:	e045      	b.n	80045de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800455a:	d142      	bne.n	80045e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004560:	e03f      	b.n	80045e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456a:	d123      	bne.n	80045b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	2b03      	cmp	r3, #3
 8004572:	d838      	bhi.n	80045e6 <DMA_CheckFifoParam+0xda>
 8004574:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <DMA_CheckFifoParam+0x70>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	0800458d 	.word	0x0800458d
 8004580:	08004593 	.word	0x08004593
 8004584:	0800458d 	.word	0x0800458d
 8004588:	080045a5 	.word	0x080045a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
        break;
 8004590:	e030      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d025      	beq.n	80045ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045a2:	e022      	b.n	80045ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045ac:	d11f      	bne.n	80045ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b2:	e01c      	b.n	80045ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d902      	bls.n	80045c2 <DMA_CheckFifoParam+0xb6>
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d003      	beq.n	80045c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045c0:	e018      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
        break;
 80045c6:	e015      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
    break;
 80045d8:	e00b      	b.n	80045f2 <DMA_CheckFifoParam+0xe6>
        break;
 80045da:	bf00      	nop
 80045dc:	e00a      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        break;
 80045de:	bf00      	nop
 80045e0:	e008      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        break;
 80045e2:	bf00      	nop
 80045e4:	e006      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
    break;
 80045f2:	bf00      	nop
    }
  }

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop

08004604 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a36      	ldr	r2, [pc, #216]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a35      	ldr	r2, [pc, #212]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a33      	ldr	r2, [pc, #204]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a32      	ldr	r2, [pc, #200]	@ (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a30      	ldr	r2, [pc, #192]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2d      	ldr	r2, [pc, #180]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01a      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3b08      	subs	r3, #8
 8004674:	4a28      	ldr	r2, [pc, #160]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4b26      	ldr	r3, [pc, #152]	@ (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a24      	ldr	r2, [pc, #144]	@ (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004690:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2201      	movs	r2, #1
 800469a:	409a      	lsls	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046a0:	e024      	b.n	80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	3b10      	subs	r3, #16
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d806      	bhi.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d902      	bls.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3308      	adds	r3, #8
 80046c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4b18      	ldr	r3, [pc, #96]	@ (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a16      	ldr	r2, [pc, #88]	@ (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2201      	movs	r2, #1
 80046e6:	409a      	lsls	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	58025408 	.word	0x58025408
 80046fc:	5802541c 	.word	0x5802541c
 8004700:	58025430 	.word	0x58025430
 8004704:	58025444 	.word	0x58025444
 8004708:	58025458 	.word	0x58025458
 800470c:	5802546c 	.word	0x5802546c
 8004710:	58025480 	.word	0x58025480
 8004714:	58025494 	.word	0x58025494
 8004718:	cccccccd 	.word	0xcccccccd
 800471c:	16009600 	.word	0x16009600
 8004720:	58025880 	.word	0x58025880
 8004724:	aaaaaaab 	.word	0xaaaaaaab
 8004728:	400204b8 	.word	0x400204b8
 800472c:	4002040f 	.word	0x4002040f
 8004730:	10008200 	.word	0x10008200
 8004734:	40020880 	.word	0x40020880

08004738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04a      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d847      	bhi.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01d      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a21      	ldr	r2, [pc, #132]	@ (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	@ (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4b17      	ldr	r3, [pc, #92]	@ (8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a15      	ldr	r2, [pc, #84]	@ (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80047c2:	e009      	b.n	80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a11      	ldr	r2, [pc, #68]	@ (800481c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b01      	subs	r3, #1
 80047dc:	2201      	movs	r2, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	58025408 	.word	0x58025408
 80047f4:	5802541c 	.word	0x5802541c
 80047f8:	58025430 	.word	0x58025430
 80047fc:	58025444 	.word	0x58025444
 8004800:	58025458 	.word	0x58025458
 8004804:	5802546c 	.word	0x5802546c
 8004808:	58025480 	.word	0x58025480
 800480c:	58025494 	.word	0x58025494
 8004810:	1600963f 	.word	0x1600963f
 8004814:	58025940 	.word	0x58025940
 8004818:	1000823f 	.word	0x1000823f
 800481c:	40020940 	.word	0x40020940

08004820 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	460b      	mov	r3, r1
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e00a      	b.n	8004852 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]
      break;
 8004848:	e002      	b.n	8004850 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	bf00      	nop
  }

  return status;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e003      	b.n	800487a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2201      	movs	r2, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	011a      	lsls	r2, r3, #4
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <HAL_EXTI_IRQHandler+0x5c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4798      	blx	r3
    }
  }
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	58000088 	.word	0x58000088

080048e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	@ 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048f6:	4b89      	ldr	r3, [pc, #548]	@ (8004b1c <HAL_GPIO_Init+0x234>)
 80048f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048fa:	e194      	b.n	8004c26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8186 	beq.w	8004c20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d005      	beq.n	800492c <HAL_GPIO_Init+0x44>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d130      	bne.n	800498e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004962:	2201      	movs	r2, #1
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 0201 	and.w	r2, r3, #1
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d017      	beq.n	80049ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d123      	bne.n	8004a1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	08da      	lsrs	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3208      	adds	r2, #8
 80049de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	08da      	lsrs	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3208      	adds	r2, #8
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80e0 	beq.w	8004c20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a60:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a66:	4a2e      	ldr	r2, [pc, #184]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a7e:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <HAL_GPIO_Init+0x23c>)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	220f      	movs	r2, #15
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	@ (8004b28 <HAL_GPIO_Init+0x240>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d052      	beq.n	8004b50 <HAL_GPIO_Init+0x268>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_GPIO_Init+0x244>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_GPIO_Init+0x22e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b30 <HAL_GPIO_Init+0x248>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_GPIO_Init+0x22a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_GPIO_Init+0x24c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x226>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_GPIO_Init+0x250>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x222>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <HAL_GPIO_Init+0x254>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x21e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <HAL_GPIO_Init+0x258>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x21a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_GPIO_Init+0x25c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x216>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <HAL_GPIO_Init+0x260>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x212>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HAL_GPIO_Init+0x264>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x20e>
 8004af2:	2309      	movs	r3, #9
 8004af4:	e02d      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004af6:	230a      	movs	r3, #10
 8004af8:	e02b      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004afa:	2308      	movs	r3, #8
 8004afc:	e029      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004afe:	2307      	movs	r3, #7
 8004b00:	e027      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b02:	2306      	movs	r3, #6
 8004b04:	e025      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b06:	2305      	movs	r3, #5
 8004b08:	e023      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	e021      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e01f      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e01d      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01b      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b1a:	bf00      	nop
 8004b1c:	58000080 	.word	0x58000080
 8004b20:	58024400 	.word	0x58024400
 8004b24:	58000400 	.word	0x58000400
 8004b28:	58020000 	.word	0x58020000
 8004b2c:	58020400 	.word	0x58020400
 8004b30:	58020800 	.word	0x58020800
 8004b34:	58020c00 	.word	0x58020c00
 8004b38:	58021000 	.word	0x58021000
 8004b3c:	58021400 	.word	0x58021400
 8004b40:	58021800 	.word	0x58021800
 8004b44:	58021c00 	.word	0x58021c00
 8004b48:	58022000 	.word	0x58022000
 8004b4c:	58022400 	.word	0x58022400
 8004b50:	2300      	movs	r3, #0
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	f002 0203 	and.w	r2, r2, #3
 8004b58:	0092      	lsls	r2, r2, #2
 8004b5a:	4093      	lsls	r3, r2
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b62:	4938      	ldr	r1, [pc, #224]	@ (8004c44 <HAL_GPIO_Init+0x35c>)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3301      	adds	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f47f ae63 	bne.w	80048fc <HAL_GPIO_Init+0x14>
  }
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	3724      	adds	r7, #36	@ 0x24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	58000400 	.word	0x58000400

08004c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
 8004c54:	4613      	mov	r3, r2
 8004c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c64:	e003      	b.n	8004c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	041a      	lsls	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	619a      	str	r2, [r3, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c8c:	887a      	ldrh	r2, [r7, #2]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	041a      	lsls	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43d9      	mvns	r1, r3
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004cb8:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <HAL_PWREx_ConfigSupply+0x70>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d00a      	beq.n	8004cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cc4:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <HAL_PWREx_ConfigSupply+0x70>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e01f      	b.n	8004d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e01d      	b.n	8004d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cda:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <HAL_PWREx_ConfigSupply+0x70>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 0207 	bic.w	r2, r3, #7
 8004ce2:	490f      	ldr	r1, [pc, #60]	@ (8004d20 <HAL_PWREx_ConfigSupply+0x70>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cea:	f7fc fe11 	bl	8001910 <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cf0:	e009      	b.n	8004d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cf2:	f7fc fe0d 	bl	8001910 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d00:	d901      	bls.n	8004d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e007      	b.n	8004d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_PWREx_ConfigSupply+0x70>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d12:	d1ee      	bne.n	8004cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	58024800 	.word	0x58024800

08004d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	@ 0x30
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f000 bc48 	b.w	80055c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8088 	beq.w	8004e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b99      	ldr	r3, [pc, #612]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d50:	4b96      	ldr	r3, [pc, #600]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d007      	beq.n	8004d6c <HAL_RCC_OscConfig+0x48>
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5e:	2b18      	cmp	r3, #24
 8004d60:	d111      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62>
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d06d      	beq.n	8004e54 <HAL_RCC_OscConfig+0x130>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d169      	bne.n	8004e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f000 bc21 	b.w	80055c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x7a>
 8004d90:	4b86      	ldr	r3, [pc, #536]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a85      	ldr	r2, [pc, #532]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e02e      	b.n	8004dfc <HAL_RCC_OscConfig+0xd8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x9c>
 8004da6:	4b81      	ldr	r3, [pc, #516]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a80      	ldr	r2, [pc, #512]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b7e      	ldr	r3, [pc, #504]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xd8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0xc0>
 8004dca:	4b78      	ldr	r3, [pc, #480]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a77      	ldr	r2, [pc, #476]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b75      	ldr	r3, [pc, #468]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a74      	ldr	r2, [pc, #464]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xd8>
 8004de4:	4b71      	ldr	r3, [pc, #452]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a70      	ldr	r2, [pc, #448]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b6e      	ldr	r3, [pc, #440]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6d      	ldr	r2, [pc, #436]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fc fd84 	bl	8001910 <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fc fd80 	bl	8001910 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	@ 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e3d4      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1e:	4b63      	ldr	r3, [pc, #396]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xe8>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fd70 	bl	8001910 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fc fd6c 	bl	8001910 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	@ 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e3c0      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e46:	4b59      	ldr	r3, [pc, #356]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x110>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80ca 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e64:	4b51      	ldr	r3, [pc, #324]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <HAL_RCC_OscConfig+0x166>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	2b18      	cmp	r3, #24
 8004e7e:	d156      	bne.n	8004f2e <HAL_RCC_OscConfig+0x20a>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d151      	bne.n	8004f2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8a:	4b48      	ldr	r3, [pc, #288]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x17e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e392      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea2:	4b42      	ldr	r3, [pc, #264]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0219 	bic.w	r2, r3, #25
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	493f      	ldr	r1, [pc, #252]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fd2c 	bl	8001910 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fd28 	bl	8001910 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e37c      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ece:	4b37      	ldr	r3, [pc, #220]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	f7fc fd49 	bl	8001970 <HAL_GetREVID>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d817      	bhi.n	8004f18 <HAL_RCC_OscConfig+0x1f4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d108      	bne.n	8004f02 <HAL_RCC_OscConfig+0x1de>
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f00:	e07a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f02:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	031b      	lsls	r3, r3, #12
 8004f10:	4926      	ldr	r1, [pc, #152]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f16:	e06f      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	4921      	ldr	r1, [pc, #132]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2c:	e064      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d047      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f36:	4b1d      	ldr	r3, [pc, #116]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0219 	bic.w	r2, r3, #25
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	491a      	ldr	r1, [pc, #104]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fce2 	bl	8001910 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fc fcde 	bl	8001910 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e332      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	f7fc fcff 	bl	8001970 <HAL_GetREVID>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d819      	bhi.n	8004fb0 <HAL_RCC_OscConfig+0x28c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d108      	bne.n	8004f96 <HAL_RCC_OscConfig+0x272>
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f8c:	4a07      	ldr	r2, [pc, #28]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f92:	6053      	str	r3, [r2, #4]
 8004f94:	e030      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	031b      	lsls	r3, r3, #12
 8004fa4:	4901      	ldr	r1, [pc, #4]	@ (8004fac <HAL_RCC_OscConfig+0x288>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
 8004faa:	e025      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	4b9a      	ldr	r3, [pc, #616]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	4997      	ldr	r1, [pc, #604]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
 8004fc4:	e018      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b95      	ldr	r3, [pc, #596]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a94      	ldr	r2, [pc, #592]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fc fc9d 	bl	8001910 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fc fc99 	bl	8001910 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e2ed      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fec:	4b8b      	ldr	r3, [pc, #556]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80a9 	beq.w	8005158 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4b85      	ldr	r3, [pc, #532]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005010:	4b82      	ldr	r3, [pc, #520]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d007      	beq.n	800502c <HAL_RCC_OscConfig+0x308>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b18      	cmp	r3, #24
 8005020:	d13a      	bne.n	8005098 <HAL_RCC_OscConfig+0x374>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d135      	bne.n	8005098 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800502c:	4b7b      	ldr	r3, [pc, #492]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_OscConfig+0x320>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b80      	cmp	r3, #128	@ 0x80
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e2c1      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005044:	f7fc fc94 	bl	8001970 <HAL_GetREVID>
 8005048:	4603      	mov	r3, r0
 800504a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800504e:	4293      	cmp	r3, r2
 8005050:	d817      	bhi.n	8005082 <HAL_RCC_OscConfig+0x35e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	2b20      	cmp	r3, #32
 8005058:	d108      	bne.n	800506c <HAL_RCC_OscConfig+0x348>
 800505a:	4b70      	ldr	r3, [pc, #448]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005062:	4a6e      	ldr	r2, [pc, #440]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005068:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800506a:	e075      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800506c:	4b6b      	ldr	r3, [pc, #428]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	069b      	lsls	r3, r3, #26
 800507a:	4968      	ldr	r1, [pc, #416]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005080:	e06a      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005082:	4b66      	ldr	r3, [pc, #408]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	4962      	ldr	r1, [pc, #392]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005096:	e05f      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d042      	beq.n	8005126 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050a0:	4b5e      	ldr	r3, [pc, #376]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5d      	ldr	r2, [pc, #372]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc fc30 	bl	8001910 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050b4:	f7fc fc2c 	bl	8001910 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e280      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050c6:	4b55      	ldr	r3, [pc, #340]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050d2:	f7fc fc4d 	bl	8001970 <HAL_GetREVID>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050dc:	4293      	cmp	r3, r2
 80050de:	d817      	bhi.n	8005110 <HAL_RCC_OscConfig+0x3ec>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d108      	bne.n	80050fa <HAL_RCC_OscConfig+0x3d6>
 80050e8:	4b4c      	ldr	r3, [pc, #304]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050f0:	4a4a      	ldr	r2, [pc, #296]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050f6:	6053      	str	r3, [r2, #4]
 80050f8:	e02e      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
 80050fa:	4b48      	ldr	r3, [pc, #288]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	069b      	lsls	r3, r3, #26
 8005108:	4944      	ldr	r1, [pc, #272]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	604b      	str	r3, [r1, #4]
 800510e:	e023      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
 8005110:	4b42      	ldr	r3, [pc, #264]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	493f      	ldr	r1, [pc, #252]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005120:	4313      	orrs	r3, r2
 8005122:	60cb      	str	r3, [r1, #12]
 8005124:	e018      	b.n	8005158 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005126:	4b3d      	ldr	r3, [pc, #244]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a3c      	ldr	r2, [pc, #240]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800512c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fc fbed 	bl	8001910 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800513a:	f7fc fbe9 	bl	8001910 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e23d      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800514c:	4b33      	ldr	r3, [pc, #204]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d036      	beq.n	80051d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516c:	4b2b      	ldr	r3, [pc, #172]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005170:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fc fbca 	bl	8001910 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005180:	f7fc fbc6 	bl	8001910 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e21a      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005192:	4b22      	ldr	r3, [pc, #136]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x45c>
 800519e:	e018      	b.n	80051d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a0:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a4:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc fbb0 	bl	8001910 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fc fbac 	bl	8001910 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e200      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d039      	beq.n	8005252 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01c      	beq.n	8005220 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0c      	ldr	r2, [pc, #48]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 80051ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051f2:	f7fc fb8d 	bl	8001910 <HAL_GetTick>
 80051f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fa:	f7fc fb89 	bl	8001910 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e1dd      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800520c:	4b03      	ldr	r3, [pc, #12]	@ (800521c <HAL_RCC_OscConfig+0x4f8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x4d6>
 8005218:	e01b      	b.n	8005252 <HAL_RCC_OscConfig+0x52e>
 800521a:	bf00      	nop
 800521c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005220:	4b9b      	ldr	r3, [pc, #620]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a9a      	ldr	r2, [pc, #616]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800522a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800522c:	f7fc fb70 	bl	8001910 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005234:	f7fc fb6c 	bl	8001910 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e1c0      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005246:	4b92      	ldr	r3, [pc, #584]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8081 	beq.w	8005362 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005260:	4b8c      	ldr	r3, [pc, #560]	@ (8005494 <HAL_RCC_OscConfig+0x770>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a8b      	ldr	r2, [pc, #556]	@ (8005494 <HAL_RCC_OscConfig+0x770>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526c:	f7fc fb50 	bl	8001910 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fc fb4c 	bl	8001910 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	@ 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e1a0      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005286:	4b83      	ldr	r3, [pc, #524]	@ (8005494 <HAL_RCC_OscConfig+0x770>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d106      	bne.n	80052a8 <HAL_RCC_OscConfig+0x584>
 800529a:	4b7d      	ldr	r3, [pc, #500]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	4a7c      	ldr	r2, [pc, #496]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a6:	e02d      	b.n	8005304 <HAL_RCC_OscConfig+0x5e0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10c      	bne.n	80052ca <HAL_RCC_OscConfig+0x5a6>
 80052b0:	4b77      	ldr	r3, [pc, #476]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b4:	4a76      	ldr	r2, [pc, #472]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80052bc:	4b74      	ldr	r3, [pc, #464]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	4a73      	ldr	r2, [pc, #460]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052c2:	f023 0304 	bic.w	r3, r3, #4
 80052c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0x5e0>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c8>
 80052d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d6:	4a6e      	ldr	r2, [pc, #440]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052de:	4b6c      	ldr	r3, [pc, #432]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0x5e0>
 80052ec:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	4a67      	ldr	r2, [pc, #412]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f8:	4b65      	ldr	r3, [pc, #404]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a64      	ldr	r2, [pc, #400]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fc fb00 	bl	8001910 <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fc fafc 	bl	8001910 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e14e      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800532a:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ee      	beq.n	8005314 <HAL_RCC_OscConfig+0x5f0>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fc faea 	bl	8001910 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fc fae6 	bl	8001910 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e138      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005356:	4b4e      	ldr	r3, [pc, #312]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ee      	bne.n	8005340 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 812d 	beq.w	80055c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800536c:	4b48      	ldr	r3, [pc, #288]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005374:	2b18      	cmp	r3, #24
 8005376:	f000 80bd 	beq.w	80054f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	2b02      	cmp	r3, #2
 8005380:	f040 809e 	bne.w	80054c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005384:	4b42      	ldr	r3, [pc, #264]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a41      	ldr	r2, [pc, #260]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fc fabe 	bl	8001910 <HAL_GetTick>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fc faba 	bl	8001910 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e10e      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053aa:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80053b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <HAL_RCC_OscConfig+0x774>)
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053c6:	0112      	lsls	r2, r2, #4
 80053c8:	430a      	orrs	r2, r1
 80053ca:	4931      	ldr	r1, [pc, #196]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	3b01      	subs	r3, #1
 80053d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053de:	3b01      	subs	r3, #1
 80053e0:	025b      	lsls	r3, r3, #9
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	3b01      	subs	r3, #1
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	3b01      	subs	r3, #1
 80053fa:	061b      	lsls	r3, r3, #24
 80053fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005400:	4923      	ldr	r1, [pc, #140]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005406:	4b22      	ldr	r3, [pc, #136]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a21      	ldr	r2, [pc, #132]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005412:	4b1f      	ldr	r3, [pc, #124]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005416:	4b21      	ldr	r3, [pc, #132]	@ (800549c <HAL_RCC_OscConfig+0x778>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800541e:	00d2      	lsls	r2, r2, #3
 8005420:	491b      	ldr	r1, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005426:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	f023 020c 	bic.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	4917      	ldr	r1, [pc, #92]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005434:	4313      	orrs	r3, r2
 8005436:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005438:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	f023 0202 	bic.w	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005444:	4912      	ldr	r1, [pc, #72]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800544a:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	4a10      	ldr	r2, [pc, #64]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005456:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	4a0d      	ldr	r2, [pc, #52]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800545c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800546c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800546e:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	4a07      	ldr	r2, [pc, #28]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a04      	ldr	r2, [pc, #16]	@ (8005490 <HAL_RCC_OscConfig+0x76c>)
 8005480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fc fa43 	bl	8001910 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800548c:	e011      	b.n	80054b2 <HAL_RCC_OscConfig+0x78e>
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400
 8005494:	58024800 	.word	0x58024800
 8005498:	fffffc0c 	.word	0xfffffc0c
 800549c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc fa36 	bl	8001910 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e08a      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b2:	4b47      	ldr	r3, [pc, #284]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x77c>
 80054be:	e082      	b.n	80055c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c0:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a42      	ldr	r2, [pc, #264]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fc fa20 	bl	8001910 <HAL_GetTick>
 80054d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc fa1c 	bl	8001910 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e070      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054e6:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x7b0>
 80054f2:	e068      	b.n	80055c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054f4:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054fa:	4b35      	ldr	r3, [pc, #212]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	2b01      	cmp	r3, #1
 8005506:	d031      	beq.n	800556c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d12a      	bne.n	800556c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d122      	bne.n	800556c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d11a      	bne.n	800556c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	0a5b      	lsrs	r3, r3, #9
 800553a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005542:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d111      	bne.n	800556c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d108      	bne.n	800556c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0e1b      	lsrs	r3, r3, #24
 800555e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005566:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e02b      	b.n	80055c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 8005572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800557a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d01f      	beq.n	80055c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005586:	4b12      	ldr	r3, [pc, #72]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	4a11      	ldr	r2, [pc, #68]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005592:	f7fc f9bd 	bl	8001910 <HAL_GetTick>
 8005596:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005598:	bf00      	nop
 800559a:	f7fc f9b9 	bl	8001910 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d0f9      	beq.n	800559a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055a6:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80055a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <HAL_RCC_OscConfig+0x8b0>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055b2:	00d2      	lsls	r2, r2, #3
 80055b4:	4906      	ldr	r1, [pc, #24]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <HAL_RCC_OscConfig+0x8ac>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3730      	adds	r7, #48	@ 0x30
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	58024400 	.word	0x58024400
 80055d4:	ffff0007 	.word	0xffff0007

080055d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e19c      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d910      	bls.n	800561c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b87      	ldr	r3, [pc, #540]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 020f 	bic.w	r2, r3, #15
 8005602:	4985      	ldr	r1, [pc, #532]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b83      	ldr	r3, [pc, #524]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e184      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	4b7b      	ldr	r3, [pc, #492]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005634:	429a      	cmp	r2, r3
 8005636:	d908      	bls.n	800564a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005638:	4b78      	ldr	r3, [pc, #480]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4975      	ldr	r1, [pc, #468]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005646:	4313      	orrs	r3, r2
 8005648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	4b70      	ldr	r3, [pc, #448]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005662:	429a      	cmp	r2, r3
 8005664:	d908      	bls.n	8005678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005666:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	496a      	ldr	r1, [pc, #424]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005674:	4313      	orrs	r3, r2
 8005676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	4b64      	ldr	r3, [pc, #400]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005690:	429a      	cmp	r2, r3
 8005692:	d908      	bls.n	80056a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005694:	4b61      	ldr	r3, [pc, #388]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	495e      	ldr	r1, [pc, #376]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	4b59      	ldr	r3, [pc, #356]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056be:	429a      	cmp	r2, r3
 80056c0:	d908      	bls.n	80056d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056c2:	4b56      	ldr	r3, [pc, #344]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	4953      	ldr	r1, [pc, #332]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b4d      	ldr	r3, [pc, #308]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d908      	bls.n	8005702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f0:	4b4a      	ldr	r3, [pc, #296]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f023 020f 	bic.w	r2, r3, #15
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4947      	ldr	r1, [pc, #284]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d055      	beq.n	80057ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800570e:	4b43      	ldr	r3, [pc, #268]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4940      	ldr	r1, [pc, #256]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800571c:	4313      	orrs	r3, r2
 800571e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d107      	bne.n	8005738 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005728:	4b3c      	ldr	r3, [pc, #240]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d121      	bne.n	8005778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0f6      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d107      	bne.n	8005750 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005740:	4b36      	ldr	r3, [pc, #216]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d115      	bne.n	8005778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0ea      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005758:	4b30      	ldr	r3, [pc, #192]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0de      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005768:	4b2c      	ldr	r3, [pc, #176]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0d6      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005778:	4b28      	ldr	r3, [pc, #160]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f023 0207 	bic.w	r2, r3, #7
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4925      	ldr	r1, [pc, #148]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578a:	f7fc f8c1 	bl	8001910 <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005792:	f7fc f8bd 	bl	8001910 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0be      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a8:	4b1c      	ldr	r3, [pc, #112]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d1eb      	bne.n	8005792 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d208      	bcs.n	80057e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d6:	4b11      	ldr	r3, [pc, #68]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f023 020f 	bic.w	r2, r3, #15
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	490e      	ldr	r1, [pc, #56]	@ (800581c <HAL_RCC_ClockConfig+0x244>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d214      	bcs.n	8005820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b08      	ldr	r3, [pc, #32]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 020f 	bic.w	r2, r3, #15
 80057fe:	4906      	ldr	r1, [pc, #24]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <HAL_RCC_ClockConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d005      	beq.n	8005820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e086      	b.n	8005926 <HAL_RCC_ClockConfig+0x34e>
 8005818:	52002000 	.word	0x52002000
 800581c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d010      	beq.n	800584e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	4b3f      	ldr	r3, [pc, #252]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005838:	429a      	cmp	r2, r3
 800583a:	d208      	bcs.n	800584e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800583c:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	4939      	ldr	r1, [pc, #228]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 800584a:	4313      	orrs	r3, r2
 800584c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005866:	429a      	cmp	r2, r3
 8005868:	d208      	bcs.n	800587c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800586a:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	492e      	ldr	r1, [pc, #184]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 8005878:	4313      	orrs	r3, r2
 800587a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005894:	429a      	cmp	r2, r3
 8005896:	d208      	bcs.n	80058aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005898:	4b25      	ldr	r3, [pc, #148]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	4922      	ldr	r1, [pc, #136]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d208      	bcs.n	80058d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4917      	ldr	r1, [pc, #92]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058d8:	f000 f834 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	4912      	ldr	r1, [pc, #72]	@ (8005934 <HAL_RCC_ClockConfig+0x35c>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <HAL_RCC_ClockConfig+0x358>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005934 <HAL_RCC_ClockConfig+0x35c>)
 8005900:	5cd3      	ldrb	r3, [r2, r3]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <HAL_RCC_ClockConfig+0x360>)
 800590e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005910:	4a0a      	ldr	r2, [pc, #40]	@ (800593c <HAL_RCC_ClockConfig+0x364>)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005916:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <HAL_RCC_ClockConfig+0x368>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fb ffae 	bl	800187c <HAL_InitTick>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	58024400 	.word	0x58024400
 8005934:	0800a7fc 	.word	0x0800a7fc
 8005938:	24000010 	.word	0x24000010
 800593c:	2400000c 	.word	0x2400000c
 8005940:	24000030 	.word	0x24000030

08005944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	@ 0x24
 8005948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594a:	4bb3      	ldr	r3, [pc, #716]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005952:	2b18      	cmp	r3, #24
 8005954:	f200 8155 	bhi.w	8005c02 <HAL_RCC_GetSysClockFreq+0x2be>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	080059c5 	.word	0x080059c5
 8005964:	08005c03 	.word	0x08005c03
 8005968:	08005c03 	.word	0x08005c03
 800596c:	08005c03 	.word	0x08005c03
 8005970:	08005c03 	.word	0x08005c03
 8005974:	08005c03 	.word	0x08005c03
 8005978:	08005c03 	.word	0x08005c03
 800597c:	08005c03 	.word	0x08005c03
 8005980:	080059eb 	.word	0x080059eb
 8005984:	08005c03 	.word	0x08005c03
 8005988:	08005c03 	.word	0x08005c03
 800598c:	08005c03 	.word	0x08005c03
 8005990:	08005c03 	.word	0x08005c03
 8005994:	08005c03 	.word	0x08005c03
 8005998:	08005c03 	.word	0x08005c03
 800599c:	08005c03 	.word	0x08005c03
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	08005c03 	.word	0x08005c03
 80059a8:	08005c03 	.word	0x08005c03
 80059ac:	08005c03 	.word	0x08005c03
 80059b0:	08005c03 	.word	0x08005c03
 80059b4:	08005c03 	.word	0x08005c03
 80059b8:	08005c03 	.word	0x08005c03
 80059bc:	08005c03 	.word	0x08005c03
 80059c0:	080059f7 	.word	0x080059f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c4:	4b94      	ldr	r3, [pc, #592]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d0:	4b91      	ldr	r3, [pc, #580]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	08db      	lsrs	r3, r3, #3
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	4a90      	ldr	r2, [pc, #576]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059e2:	e111      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059e4:	4b8d      	ldr	r3, [pc, #564]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e6:	61bb      	str	r3, [r7, #24]
      break;
 80059e8:	e10e      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059ec:	61bb      	str	r3, [r7, #24]
      break;
 80059ee:	e10b      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059f2:	61bb      	str	r3, [r7, #24]
      break;
 80059f4:	e108      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059f6:	4b88      	ldr	r3, [pc, #544]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a00:	4b85      	ldr	r3, [pc, #532]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a0c:	4b82      	ldr	r3, [pc, #520]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a16:	4b80      	ldr	r3, [pc, #512]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1a:	08db      	lsrs	r3, r3, #3
 8005a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80e1 	beq.w	8005bfc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	f000 8083 	beq.w	8005b48 <HAL_RCC_GetSysClockFreq+0x204>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f200 80a1 	bhi.w	8005b8c <HAL_RCC_GetSysClockFreq+0x248>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x114>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d056      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a56:	e099      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a58:	4b6f      	ldr	r3, [pc, #444]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02d      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a64:	4b6c      	ldr	r3, [pc, #432]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	08db      	lsrs	r3, r3, #3
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8e:	4b62      	ldr	r3, [pc, #392]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005abe:	e087      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad2:	4b51      	ldr	r3, [pc, #324]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b02:	e065      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	4b40      	ldr	r3, [pc, #256]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b46:	e043      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b8a:	e021      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	0a5b      	lsrs	r3, r3, #9
 8005bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bda:	3301      	adds	r3, #1
 8005bdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf4:	ee17 3a90 	vmov	r3, s15
 8005bf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bfa:	e005      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
      break;
 8005c00:	e002      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c04:	61bb      	str	r3, [r7, #24]
      break;
 8005c06:	bf00      	nop
  }

  return sysclockfreq;
 8005c08:	69bb      	ldr	r3, [r7, #24]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	@ 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	03d09000 	.word	0x03d09000
 8005c20:	003d0900 	.word	0x003d0900
 8005c24:	007a1200 	.word	0x007a1200
 8005c28:	46000000 	.word	0x46000000
 8005c2c:	4c742400 	.word	0x4c742400
 8005c30:	4a742400 	.word	0x4a742400
 8005c34:	4af42400 	.word	0x4af42400

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c3e:	f7ff fe81 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	490f      	ldr	r1, [pc, #60]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005c50:	5ccb      	ldrb	r3, [r1, r3]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	4a09      	ldr	r2, [pc, #36]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	4a07      	ldr	r2, [pc, #28]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c76:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c7c:	4b04      	ldr	r3, [pc, #16]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	0800a7fc 	.word	0x0800a7fc
 8005c90:	24000010 	.word	0x24000010
 8005c94:	2400000c 	.word	0x2400000c

08005c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c9c:	f7ff ffcc 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4904      	ldr	r1, [pc, #16]	@ (8005cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	0800a7fc 	.word	0x0800a7fc

08005cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005cc8:	f7ff ffb6 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4904      	ldr	r1, [pc, #16]	@ (8005cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	0800a7fc 	.word	0x0800a7fc

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf4:	b0ca      	sub	sp, #296	@ 0x128
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d14:	2500      	movs	r5, #0
 8005d16:	ea54 0305 	orrs.w	r3, r4, r5
 8005d1a:	d049      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d26:	d02f      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d2c:	d828      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d32:	d01a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d38:	d822      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d42:	d007      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d44:	e01c      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d46:	4bb8      	ldr	r3, [pc, #736]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d52:	e01a      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	3308      	adds	r3, #8
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fc8f 	bl	8007680 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d68:	e00f      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	3328      	adds	r3, #40	@ 0x28
 8005d70:	2102      	movs	r1, #2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 fd36 	bl	80077e4 <RCCEx_PLL3_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d7e:	e004      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d86:	e000      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d92:	4ba5      	ldr	r3, [pc, #660]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da0:	4aa1      	ldr	r2, [pc, #644]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005dbc:	f04f 0900 	mov.w	r9, #0
 8005dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8005dc4:	d047      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d82a      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005ded 	.word	0x08005ded
 8005ddc:	08005dfb 	.word	0x08005dfb
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e2f 	.word	0x08005e2f
 8005de8:	08005e2f 	.word	0x08005e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4b8e      	ldr	r3, [pc, #568]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	4a8d      	ldr	r2, [pc, #564]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df8:	e01a      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	3308      	adds	r3, #8
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 fc3c 	bl	8007680 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e0e:	e00f      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e14:	3328      	adds	r3, #40	@ 0x28
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fce3 	bl	80077e4 <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e24:	e004      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e2c:	e000      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e38:	4b7b      	ldr	r3, [pc, #492]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3c:	f023 0107 	bic.w	r1, r3, #7
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e46:	4a78      	ldr	r2, [pc, #480]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e62:	f04f 0b00 	mov.w	fp, #0
 8005e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e6a:	d04c      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e76:	d030      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e7c:	d829      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e80:	d02d      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e84:	d825      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d018      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	d821      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e98:	4b63      	ldr	r3, [pc, #396]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4a62      	ldr	r2, [pc, #392]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fbe6 	bl	8007680 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005eba:	e011      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fc8d 	bl	80077e4 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005f12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f20:	460b      	mov	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	d053      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f32:	d035      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f38:	d82e      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f3e:	d031      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f44:	d828      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f4a:	d01a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f50:	d822      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f5a:	d007      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f5c:	e01c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5e:	4b32      	ldr	r3, [pc, #200]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	4a31      	ldr	r2, [pc, #196]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e01c      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	3308      	adds	r3, #8
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fb83 	bl	8007680 <RCCEx_PLL2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f80:	e011      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	3328      	adds	r3, #40	@ 0x28
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fc2a 	bl	80077e4 <RCCEx_PLL3_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f96:	e006      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fae:	4b1e      	ldr	r3, [pc, #120]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d056      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ffa:	d038      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006000:	d831      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006006:	d034      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800600c:	d82b      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800600e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006012:	d01d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006018:	d825      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d006      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800601e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006024:	e01f      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006026:	bf00      	nop
 8006028:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800602c:	4ba2      	ldr	r3, [pc, #648]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	4aa1      	ldr	r2, [pc, #644]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006038:	e01c      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	3308      	adds	r3, #8
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fb1c 	bl	8007680 <RCCEx_PLL2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800604e:	e011      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	3328      	adds	r3, #40	@ 0x28
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fbc3 	bl	80077e4 <RCCEx_PLL3_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006064:	e006      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606c:	e002      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800607c:	4b8e      	ldr	r3, [pc, #568]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006080:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006088:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800608c:	4a8a      	ldr	r2, [pc, #552]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800608e:	430b      	orrs	r3, r1
 8006090:	6593      	str	r3, [r2, #88]	@ 0x58
 8006092:	e003      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060b6:	460b      	mov	r3, r1
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d03a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c2:	2b30      	cmp	r3, #48	@ 0x30
 80060c4:	d01f      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060c6:	2b30      	cmp	r3, #48	@ 0x30
 80060c8:	d819      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d00c      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d815      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d019      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d111      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060da:	4b77      	ldr	r3, [pc, #476]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	4a76      	ldr	r2, [pc, #472]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060e6:	e011      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	3308      	adds	r3, #8
 80060ee:	2102      	movs	r1, #2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fac5 	bl	8007680 <RCCEx_PLL2_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060fc:	e006      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006104:	e002      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800610a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006114:	4b68      	ldr	r3, [pc, #416]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006118:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006122:	4a65      	ldr	r2, [pc, #404]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006124:	430b      	orrs	r3, r1
 8006126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800613e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006148:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800614c:	460b      	mov	r3, r1
 800614e:	4313      	orrs	r3, r2
 8006150:	d051      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800615c:	d035      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800615e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006162:	d82e      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006164:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006168:	d031      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800616a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800616e:	d828      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006174:	d01a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800617a:	d822      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006184:	d007      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006186:	e01c      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b4b      	ldr	r3, [pc, #300]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a4a      	ldr	r2, [pc, #296]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006194:	e01c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3308      	adds	r3, #8
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fa6e 	bl	8007680 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061aa:	e011      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	3328      	adds	r3, #40	@ 0x28
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fb15 	bl	80077e4 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061c0:	e006      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061d8:	4b37      	ldr	r3, [pc, #220]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e6:	4a34      	ldr	r2, [pc, #208]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800620c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d056      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006220:	d033      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006226:	d82c      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006228:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800622c:	d02f      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800622e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006232:	d826      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006238:	d02b      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800623a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800623e:	d820      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006244:	d012      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624a:	d81a      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d022      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006254:	d115      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625a:	3308      	adds	r3, #8
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fa0e 	bl	8007680 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800626a:	e015      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	3328      	adds	r3, #40	@ 0x28
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fab5 	bl	80077e4 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006280:	e00a      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006288:	e006      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800628a:	bf00      	nop
 800628c:	e004      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10d      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ae:	4a02      	ldr	r2, [pc, #8]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b4:	e006      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062b6:	bf00      	nop
 80062b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d055      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f0:	d033      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f6:	d82c      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fc:	d02f      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d826      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006308:	d02b      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800630a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800630e:	d820      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006314:	d012      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631a:	d81a      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d022      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006324:	d115      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	3308      	adds	r3, #8
 800632c:	2101      	movs	r1, #1
 800632e:	4618      	mov	r0, r3
 8006330:	f001 f9a6 	bl	8007680 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800633a:	e015      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006340:	3328      	adds	r3, #40	@ 0x28
 8006342:	2101      	movs	r1, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fa4d 	bl	80077e4 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006350:	e00a      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006358:	e006      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800635a:	bf00      	nop
 800635c:	e004      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800635e:	bf00      	nop
 8006360:	e002      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006370:	4ba3      	ldr	r3, [pc, #652]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006380:	4a9f      	ldr	r2, [pc, #636]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006382:	430b      	orrs	r3, r1
 8006384:	6593      	str	r3, [r2, #88]	@ 0x58
 8006386:	e003      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800639c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d037      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ba:	d00e      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80063bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c0:	d816      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ca:	d111      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	4a8b      	ldr	r2, [pc, #556]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063d8:	e00f      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	3308      	adds	r3, #8
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f94c 	bl	8007680 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063ee:	e004      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006402:	4b7f      	ldr	r3, [pc, #508]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	4a7b      	ldr	r2, [pc, #492]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006412:	430b      	orrs	r3, r1
 8006414:	6513      	str	r3, [r2, #80]	@ 0x50
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800642c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006436:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800643a:	460b      	mov	r3, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	d039      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006446:	2b03      	cmp	r3, #3
 8006448:	d81c      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	0800648d 	.word	0x0800648d
 8006454:	08006461 	.word	0x08006461
 8006458:	0800646f 	.word	0x0800646f
 800645c:	0800648d 	.word	0x0800648d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006460:	4b67      	ldr	r3, [pc, #412]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	4a66      	ldr	r2, [pc, #408]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800646c:	e00f      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	3308      	adds	r3, #8
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f902 	bl	8007680 <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006482:	e004      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800648a:	e000      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800648c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006496:	4b5a      	ldr	r3, [pc, #360]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	f023 0103 	bic.w	r1, r3, #3
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a4:	4a56      	ldr	r2, [pc, #344]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064aa:	e003      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f000 809f 	beq.w	8006614 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a4a      	ldr	r2, [pc, #296]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e2:	f7fb fa15 	bl	8001910 <HAL_GetTick>
 80064e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ea:	e00b      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ec:	f7fb fa10 	bl	8001910 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b64      	cmp	r3, #100	@ 0x64
 80064fa:	d903      	bls.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006502:	e005      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006504:	4b3f      	ldr	r3, [pc, #252]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0ed      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006514:	2b00      	cmp	r3, #0
 8006516:	d179      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006518:	4b39      	ldr	r3, [pc, #228]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800651a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006524:	4053      	eors	r3, r2
 8006526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652a:	2b00      	cmp	r3, #0
 800652c:	d015      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800652e:	4b34      	ldr	r3, [pc, #208]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800653a:	4b31      	ldr	r3, [pc, #196]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	4a30      	ldr	r2, [pc, #192]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006544:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006546:	4b2e      	ldr	r3, [pc, #184]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	4a2d      	ldr	r2, [pc, #180]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006550:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006552:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006558:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006566:	d118      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fb f9d2 	bl	8001910 <HAL_GetTick>
 800656c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006570:	e00d      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fb f9cd 	bl	8001910 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800657c:	1ad2      	subs	r2, r2, r3
 800657e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006582:	429a      	cmp	r2, r3
 8006584:	d903      	bls.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800658c:	e005      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0eb      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800659a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d129      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b2:	d10e      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80065b4:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065c4:	091a      	lsrs	r2, r3, #4
 80065c6:	4b10      	ldr	r3, [pc, #64]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6113      	str	r3, [r2, #16]
 80065d0:	e005      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80065d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065dc:	6113      	str	r3, [r2, #16]
 80065de:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ee:	4a04      	ldr	r2, [pc, #16]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f4:	e00e      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80065fe:	e009      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006600:	58024400 	.word	0x58024400
 8006604:	58024800 	.word	0x58024800
 8006608:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f002 0301 	and.w	r3, r2, #1
 8006620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800662a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	f000 8089 	beq.w	8006748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800663c:	2b28      	cmp	r3, #40	@ 0x28
 800663e:	d86b      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006640:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	08006721 	.word	0x08006721
 800664c:	08006719 	.word	0x08006719
 8006650:	08006719 	.word	0x08006719
 8006654:	08006719 	.word	0x08006719
 8006658:	08006719 	.word	0x08006719
 800665c:	08006719 	.word	0x08006719
 8006660:	08006719 	.word	0x08006719
 8006664:	08006719 	.word	0x08006719
 8006668:	080066ed 	.word	0x080066ed
 800666c:	08006719 	.word	0x08006719
 8006670:	08006719 	.word	0x08006719
 8006674:	08006719 	.word	0x08006719
 8006678:	08006719 	.word	0x08006719
 800667c:	08006719 	.word	0x08006719
 8006680:	08006719 	.word	0x08006719
 8006684:	08006719 	.word	0x08006719
 8006688:	08006703 	.word	0x08006703
 800668c:	08006719 	.word	0x08006719
 8006690:	08006719 	.word	0x08006719
 8006694:	08006719 	.word	0x08006719
 8006698:	08006719 	.word	0x08006719
 800669c:	08006719 	.word	0x08006719
 80066a0:	08006719 	.word	0x08006719
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006721 	.word	0x08006721
 80066ac:	08006719 	.word	0x08006719
 80066b0:	08006719 	.word	0x08006719
 80066b4:	08006719 	.word	0x08006719
 80066b8:	08006719 	.word	0x08006719
 80066bc:	08006719 	.word	0x08006719
 80066c0:	08006719 	.word	0x08006719
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006721 	.word	0x08006721
 80066cc:	08006719 	.word	0x08006719
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006719 	.word	0x08006719
 80066d8:	08006719 	.word	0x08006719
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006721 	.word	0x08006721
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f0:	3308      	adds	r3, #8
 80066f2:	2101      	movs	r1, #1
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 ffc3 	bl	8007680 <RCCEx_PLL2_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006700:	e00f      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	3328      	adds	r3, #40	@ 0x28
 8006708:	2101      	movs	r1, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f001 f86a 	bl	80077e4 <RCCEx_PLL3_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800672a:	4bbf      	ldr	r3, [pc, #764]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800672c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006738:	4abb      	ldr	r2, [pc, #748]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6553      	str	r3, [r2, #84]	@ 0x54
 800673e:	e003      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f002 0302 	and.w	r3, r2, #2
 8006754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800675e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d041      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800676e:	2b05      	cmp	r3, #5
 8006770:	d824      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067c5 	.word	0x080067c5
 800677c:	08006791 	.word	0x08006791
 8006780:	080067a7 	.word	0x080067a7
 8006784:	080067c5 	.word	0x080067c5
 8006788:	080067c5 	.word	0x080067c5
 800678c:	080067c5 	.word	0x080067c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	3308      	adds	r3, #8
 8006796:	2101      	movs	r1, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f000 ff71 	bl	8007680 <RCCEx_PLL2_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067a4:	e00f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	3328      	adds	r3, #40	@ 0x28
 80067ac:	2101      	movs	r1, #1
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 f818 	bl	80077e4 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067ce:	4b96      	ldr	r3, [pc, #600]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d2:	f023 0107 	bic.w	r1, r3, #7
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067dc:	4a92      	ldr	r2, [pc, #584]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80067e2:	e003      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f002 0304 	and.w	r3, r2, #4
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	d044      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006814:	2b05      	cmp	r3, #5
 8006816:	d825      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006818:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	0800686d 	.word	0x0800686d
 8006824:	08006839 	.word	0x08006839
 8006828:	0800684f 	.word	0x0800684f
 800682c:	0800686d 	.word	0x0800686d
 8006830:	0800686d 	.word	0x0800686d
 8006834:	0800686d 	.word	0x0800686d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	3308      	adds	r3, #8
 800683e:	2101      	movs	r1, #1
 8006840:	4618      	mov	r0, r3
 8006842:	f000 ff1d 	bl	8007680 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800684c:	e00f      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ffc4 	bl	80077e4 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006862:	e004      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800686c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006876:	4b6c      	ldr	r3, [pc, #432]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687a:	f023 0107 	bic.w	r1, r3, #7
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006886:	4a68      	ldr	r2, [pc, #416]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006888:	430b      	orrs	r3, r1
 800688a:	6593      	str	r3, [r2, #88]	@ 0x58
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f002 0320 	and.w	r3, r2, #32
 80068a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068a6:	2300      	movs	r3, #0
 80068a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068b0:	460b      	mov	r3, r1
 80068b2:	4313      	orrs	r3, r2
 80068b4:	d055      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068c2:	d033      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80068c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068c8:	d82c      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ce:	d02f      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d4:	d826      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068da:	d02b      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068e0:	d820      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e6:	d012      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ec:	d81a      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d022      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f6:	d115      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	3308      	adds	r3, #8
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f000 febd 	bl	8007680 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800690c:	e015      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	3328      	adds	r3, #40	@ 0x28
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff64 	bl	80077e4 <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006922:	e00a      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800692a:	e006      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800692c:	bf00      	nop
 800692e:	e004      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006930:	bf00      	nop
 8006932:	e002      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006942:	4b39      	ldr	r3, [pc, #228]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006946:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	4a35      	ldr	r2, [pc, #212]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006954:	430b      	orrs	r3, r1
 8006956:	6553      	str	r3, [r2, #84]	@ 0x54
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800697c:	460b      	mov	r3, r1
 800697e:	4313      	orrs	r3, r2
 8006980:	d058      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800698a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800698e:	d033      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006990:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006994:	d82c      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699a:	d02f      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a0:	d826      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a6:	d02b      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80069a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069ac:	d820      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b2:	d012      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80069b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b8:	d81a      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c2:	d115      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	3308      	adds	r3, #8
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fe57 	bl	8007680 <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069d8:	e015      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	3328      	adds	r3, #40	@ 0x28
 80069e0:	2102      	movs	r1, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fefe 	bl	80077e4 <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069ee:	e00a      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f6:	e006      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069f8:	bf00      	nop
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069fc:	bf00      	nop
 80069fe:	e002      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10e      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a0e:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a1e:	4a02      	ldr	r2, [pc, #8]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a24:	e006      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	d055      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a60:	d033      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a66:	d82c      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a6c:	d02f      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a72:	d826      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a78:	d02b      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a7e:	d820      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a84:	d012      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a8a:	d81a      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d022      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a94:	d115      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fdee 	bl	8007680 <RCCEx_PLL2_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aaa:	e015      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab0:	3328      	adds	r3, #40	@ 0x28
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fe95 	bl	80077e4 <RCCEx_PLL3_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ac8:	e006      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aca:	bf00      	nop
 8006acc:	e004      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006af0:	4a9d      	ldr	r2, [pc, #628]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006af2:	430b      	orrs	r3, r1
 8006af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f002 0308 	and.w	r3, r2, #8
 8006b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d01e      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	3328      	adds	r3, #40	@ 0x28
 8006b34:	2102      	movs	r1, #2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fe54 	bl	80077e4 <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b48:	4b87      	ldr	r3, [pc, #540]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b58:	4a83      	ldr	r2, [pc, #524]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f002 0310 	and.w	r3, r2, #16
 8006b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d01e      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	3328      	adds	r3, #40	@ 0x28
 8006b92:	2102      	movs	r1, #2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fe25 	bl	80077e4 <RCCEx_PLL3_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ba6:	4b70      	ldr	r3, [pc, #448]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d03e      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006be8:	d022      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bee:	d81b      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf8:	d00b      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bfa:	e015      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	3308      	adds	r3, #8
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fd3b 	bl	8007680 <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c10:	e00f      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	3328      	adds	r3, #40	@ 0x28
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fde2 	bl	80077e4 <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c4a:	4a47      	ldr	r2, [pc, #284]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c68:	2300      	movs	r3, #0
 8006c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c82:	d01f      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c88:	d818      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8e:	d003      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c94:	d007      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c96:	e011      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c98:	4b33      	ldr	r3, [pc, #204]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	4a32      	ldr	r2, [pc, #200]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ca4:	e00f      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	3328      	adds	r3, #40	@ 0x28
 8006cac:	2101      	movs	r1, #1
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fd98 	bl	80077e4 <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cba:	e004      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cce:	4b26      	ldr	r3, [pc, #152]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cde:	4a22      	ldr	r2, [pc, #136]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ce4:	e003      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d04:	460b      	mov	r3, r1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	d034      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d18:	d007      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006d1a:	e011      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1c:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	4a11      	ldr	r2, [pc, #68]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d28:	e00e      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	3308      	adds	r3, #8
 8006d30:	2102      	movs	r1, #2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fca4 	bl	8007680 <RCCEx_PLL2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d50:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d82:	2300      	movs	r3, #0
 8006d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d00c      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fd23 	bl	80077e4 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006db8:	2300      	movs	r3, #0
 8006dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d038      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dd2:	d018      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dd8:	d811      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dde:	d014      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d80b      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dee:	d106      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4bc3      	ldr	r3, [pc, #780]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	4ac2      	ldr	r2, [pc, #776]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006dfc:	e008      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e04:	e004      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e06:	bf00      	nop
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10b      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e18:	4bb9      	ldr	r3, [pc, #740]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e28:	4ab5      	ldr	r2, [pc, #724]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e2e:	e003      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e46:	2300      	movs	r3, #0
 8006e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4313      	orrs	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e54:	4baa      	ldr	r3, [pc, #680]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e62:	4aa7      	ldr	r2, [pc, #668]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e76:	2300      	movs	r3, #0
 8006e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d00a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e84:	4b9e      	ldr	r3, [pc, #632]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e94:	4a9a      	ldr	r2, [pc, #616]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e96:	430b      	orrs	r3, r1
 8006e98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006eb6:	4b92      	ldr	r3, [pc, #584]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ed8:	2300      	movs	r3, #0
 8006eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ee6:	4b86      	ldr	r3, [pc, #536]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4a85      	ldr	r2, [pc, #532]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ef0:	6113      	str	r3, [r2, #16]
 8006ef2:	4b83      	ldr	r3, [pc, #524]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ef4:	6919      	ldr	r1, [r3, #16]
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006efe:	4a80      	ldr	r2, [pc, #512]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f20:	4b77      	ldr	r3, [pc, #476]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f2e:	4a74      	ldr	r2, [pc, #464]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f42:	2300      	movs	r3, #0
 8006f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	d00a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f50:	4b6b      	ldr	r3, [pc, #428]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f60:	4a67      	ldr	r2, [pc, #412]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	d011      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3308      	adds	r3, #8
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fb78 	bl	8007680 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	6239      	str	r1, [r7, #32]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	d011      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	2101      	movs	r1, #1
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fb58 	bl	8007680 <RCCEx_PLL2_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	61b9      	str	r1, [r7, #24]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d011      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	3308      	adds	r3, #8
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb38 	bl	8007680 <RCCEx_PLL2_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	2100      	movs	r1, #0
 8007030:	6139      	str	r1, [r7, #16]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800703c:	460b      	mov	r3, r1
 800703e:	4313      	orrs	r3, r2
 8007040:	d011      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	3328      	adds	r3, #40	@ 0x28
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fbca 	bl	80077e4 <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	2100      	movs	r1, #0
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d011      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	3328      	adds	r3, #40	@ 0x28
 8007088:	2101      	movs	r1, #1
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fbaa 	bl	80077e4 <RCCEx_PLL3_Config>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	2100      	movs	r1, #0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070bc:	460b      	mov	r3, r1
 80070be:	4313      	orrs	r3, r2
 80070c0:	d011      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c6:	3328      	adds	r3, #40	@ 0x28
 80070c8:	2102      	movs	r1, #2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fb8a 	bl	80077e4 <RCCEx_PLL3_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070fa:	46bd      	mov	sp, r7
 80070fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007100:	58024400 	.word	0x58024400

08007104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007108:	f7fe fd96 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4904      	ldr	r1, [pc, #16]	@ (800712c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007124:	4618      	mov	r0, r3
 8007126:	bd80      	pop	{r7, pc}
 8007128:	58024400 	.word	0x58024400
 800712c:	0800a7fc 	.word	0x0800a7fc

08007130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	@ 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007138:	4ba1      	ldr	r3, [pc, #644]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007142:	4b9f      	ldr	r3, [pc, #636]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	0b1b      	lsrs	r3, r3, #12
 8007148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800714c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800714e:	4b9c      	ldr	r3, [pc, #624]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	091b      	lsrs	r3, r3, #4
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800715a:	4b99      	ldr	r3, [pc, #612]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8111 	beq.w	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b02      	cmp	r3, #2
 8007182:	f000 8083 	beq.w	800728c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b02      	cmp	r3, #2
 800718a:	f200 80a1 	bhi.w	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d056      	beq.n	8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800719a:	e099      	b.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800719c:	4b88      	ldr	r3, [pc, #544]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d02d      	beq.n	8007204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a8:	4b85      	ldr	r3, [pc, #532]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	4a84      	ldr	r2, [pc, #528]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
 80071b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b7b      	ldr	r3, [pc, #492]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007202:	e087      	b.n	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b6a      	ldr	r3, [pc, #424]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a03 	vldr	s12, [r7, #12]
 800722a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007246:	e065      	b.n	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b59      	ldr	r3, [pc, #356]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728a:	e043      	b.n	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b48      	ldr	r3, [pc, #288]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ce:	e021      	b.n	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b37      	ldr	r3, [pc, #220]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007314:	4b2a      	ldr	r3, [pc, #168]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800732a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733a:	ee17 2a90 	vmov	r2, s15
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007342:	4b1f      	ldr	r3, [pc, #124]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007368:	ee17 2a90 	vmov	r2, s15
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007370:	4b13      	ldr	r3, [pc, #76]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738a:	edd7 6a07 	vldr	s13, [r7, #28]
 800738e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800739e:	e008      	b.n	80073b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	609a      	str	r2, [r3, #8]
}
 80073b2:	bf00      	nop
 80073b4:	3724      	adds	r7, #36	@ 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	58024400 	.word	0x58024400
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	46000000 	.word	0x46000000
 80073cc:	4c742400 	.word	0x4c742400
 80073d0:	4a742400 	.word	0x4a742400
 80073d4:	4af42400 	.word	0x4af42400

080073d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073d8:	b480      	push	{r7}
 80073da:	b089      	sub	sp, #36	@ 0x24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	0d1b      	lsrs	r3, r3, #20
 80073f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007402:	4b99      	ldr	r3, [pc, #612]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	08db      	lsrs	r3, r3, #3
 8007408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	fb02 f303 	mul.w	r3, r2, r3
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8111 	beq.w	8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b02      	cmp	r3, #2
 800742a:	f000 8083 	beq.w	8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b02      	cmp	r3, #2
 8007432:	f200 80a1 	bhi.w	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d056      	beq.n	80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007442:	e099      	b.n	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007444:	4b88      	ldr	r3, [pc, #544]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02d      	beq.n	80074ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007450:	4b85      	ldr	r3, [pc, #532]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	08db      	lsrs	r3, r3, #3
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	4a84      	ldr	r2, [pc, #528]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
 8007460:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747a:	4b7b      	ldr	r3, [pc, #492]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748a:	ed97 6a03 	vldr	s12, [r7, #12]
 800748e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074aa:	e087      	b.n	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074be:	4b6a      	ldr	r3, [pc, #424]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ee:	e065      	b.n	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007502:	4b59      	ldr	r3, [pc, #356]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a03 	vldr	s12, [r7, #12]
 8007516:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007532:	e043      	b.n	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007546:	4b48      	ldr	r3, [pc, #288]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007556:	ed97 6a03 	vldr	s12, [r7, #12]
 800755a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800756a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007576:	e021      	b.n	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b37      	ldr	r3, [pc, #220]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a03 	vldr	s12, [r7, #12]
 800759e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	0a5b      	lsrs	r3, r3, #9
 80075c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e2:	ee17 2a90 	vmov	r2, s15
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007604:	edd7 6a07 	vldr	s13, [r7, #28]
 8007608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007610:	ee17 2a90 	vmov	r2, s15
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007618:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	0e1b      	lsrs	r3, r3, #24
 800761e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800762e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007632:	edd7 6a07 	vldr	s13, [r7, #28]
 8007636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763e:	ee17 2a90 	vmov	r2, s15
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007646:	e008      	b.n	800765a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	609a      	str	r2, [r3, #8]
}
 800765a:	bf00      	nop
 800765c:	3724      	adds	r7, #36	@ 0x24
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	58024400 	.word	0x58024400
 800766c:	03d09000 	.word	0x03d09000
 8007670:	46000000 	.word	0x46000000
 8007674:	4c742400 	.word	0x4c742400
 8007678:	4a742400 	.word	0x4a742400
 800767c:	4af42400 	.word	0x4af42400

08007680 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800768e:	4b53      	ldr	r3, [pc, #332]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b03      	cmp	r3, #3
 8007698:	d101      	bne.n	800769e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e099      	b.n	80077d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800769e:	4b4f      	ldr	r3, [pc, #316]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a4e      	ldr	r2, [pc, #312]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80076a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076aa:	f7fa f931 	bl	8001910 <HAL_GetTick>
 80076ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076b0:	e008      	b.n	80076c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076b2:	f7fa f92d 	bl	8001910 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e086      	b.n	80077d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c4:	4b45      	ldr	r3, [pc, #276]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f0      	bne.n	80076b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076d0:	4b42      	ldr	r3, [pc, #264]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	493f      	ldr	r1, [pc, #252]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	025b      	lsls	r3, r3, #9
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	3b01      	subs	r3, #1
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	3b01      	subs	r3, #1
 800770e:	061b      	lsls	r3, r3, #24
 8007710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007714:	4931      	ldr	r1, [pc, #196]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007716:	4313      	orrs	r3, r2
 8007718:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800771a:	4b30      	ldr	r3, [pc, #192]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	492d      	ldr	r1, [pc, #180]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800772c:	4b2b      	ldr	r3, [pc, #172]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	f023 0220 	bic.w	r2, r3, #32
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	4928      	ldr	r1, [pc, #160]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800773a:	4313      	orrs	r3, r2
 800773c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800773e:	4b27      	ldr	r3, [pc, #156]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	4a26      	ldr	r2, [pc, #152]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007744:	f023 0310 	bic.w	r3, r3, #16
 8007748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800774a:	4b24      	ldr	r3, [pc, #144]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800774c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800774e:	4b24      	ldr	r3, [pc, #144]	@ (80077e0 <RCCEx_PLL2_Config+0x160>)
 8007750:	4013      	ands	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	69d2      	ldr	r2, [r2, #28]
 8007756:	00d2      	lsls	r2, r2, #3
 8007758:	4920      	ldr	r1, [pc, #128]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800775e:	4b1f      	ldr	r3, [pc, #124]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	4a1e      	ldr	r2, [pc, #120]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007764:	f043 0310 	orr.w	r3, r3, #16
 8007768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007770:	4b1a      	ldr	r3, [pc, #104]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	4a19      	ldr	r2, [pc, #100]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800777a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800777c:	e00f      	b.n	800779e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d106      	bne.n	8007792 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007784:	4b15      	ldr	r3, [pc, #84]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	4a14      	ldr	r2, [pc, #80]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 800778a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800778e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007790:	e005      	b.n	800779e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007792:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	4a11      	ldr	r2, [pc, #68]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 8007798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800779c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800779e:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a0e      	ldr	r2, [pc, #56]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80077a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7fa f8b1 	bl	8001910 <HAL_GetTick>
 80077ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077b0:	e008      	b.n	80077c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077b2:	f7fa f8ad 	bl	8001910 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e006      	b.n	80077d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c4:	4b05      	ldr	r3, [pc, #20]	@ (80077dc <RCCEx_PLL2_Config+0x15c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f0      	beq.n	80077b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	58024400 	.word	0x58024400
 80077e0:	ffff0007 	.word	0xffff0007

080077e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077f2:	4b53      	ldr	r3, [pc, #332]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d101      	bne.n	8007802 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e099      	b.n	8007936 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007802:	4b4f      	ldr	r3, [pc, #316]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a4e      	ldr	r2, [pc, #312]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800780c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7fa f87f 	bl	8001910 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007814:	e008      	b.n	8007828 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007816:	f7fa f87b 	bl	8001910 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e086      	b.n	8007936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007828:	4b45      	ldr	r3, [pc, #276]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007834:	4b42      	ldr	r3, [pc, #264]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	051b      	lsls	r3, r3, #20
 8007842:	493f      	ldr	r1, [pc, #252]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007844:	4313      	orrs	r3, r2
 8007846:	628b      	str	r3, [r1, #40]	@ 0x28
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	3b01      	subs	r3, #1
 8007858:	025b      	lsls	r3, r3, #9
 800785a:	b29b      	uxth	r3, r3
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	3b01      	subs	r3, #1
 8007864:	041b      	lsls	r3, r3, #16
 8007866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	3b01      	subs	r3, #1
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007878:	4931      	ldr	r1, [pc, #196]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800787e:	4b30      	ldr	r3, [pc, #192]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	492d      	ldr	r1, [pc, #180]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007890:	4b2b      	ldr	r3, [pc, #172]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007894:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	4928      	ldr	r1, [pc, #160]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078a2:	4b27      	ldr	r3, [pc, #156]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	4a26      	ldr	r2, [pc, #152]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ae:	4b24      	ldr	r3, [pc, #144]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078b2:	4b24      	ldr	r3, [pc, #144]	@ (8007944 <RCCEx_PLL3_Config+0x160>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	69d2      	ldr	r2, [r2, #28]
 80078ba:	00d2      	lsls	r2, r2, #3
 80078bc:	4920      	ldr	r1, [pc, #128]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4a19      	ldr	r2, [pc, #100]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078e0:	e00f      	b.n	8007902 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d106      	bne.n	80078f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4a14      	ldr	r2, [pc, #80]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078f4:	e005      	b.n	8007902 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078f6:	4b12      	ldr	r3, [pc, #72]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fa:	4a11      	ldr	r2, [pc, #68]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 80078fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007900:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007902:	4b0f      	ldr	r3, [pc, #60]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0e      	ldr	r2, [pc, #56]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 8007908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800790c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7f9 ffff 	bl	8001910 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007914:	e008      	b.n	8007928 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007916:	f7f9 fffb 	bl	8001910 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e006      	b.n	8007936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <RCCEx_PLL3_Config+0x15c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	58024400 	.word	0x58024400
 8007944:	ffff0007 	.word	0xffff0007

08007948 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e10f      	b.n	8007b7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a87      	ldr	r2, [pc, #540]	@ (8007b84 <HAL_SPI_Init+0x23c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <HAL_SPI_Init+0x42>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a86      	ldr	r2, [pc, #536]	@ (8007b88 <HAL_SPI_Init+0x240>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00a      	beq.n	800798a <HAL_SPI_Init+0x42>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a84      	ldr	r2, [pc, #528]	@ (8007b8c <HAL_SPI_Init+0x244>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d005      	beq.n	800798a <HAL_SPI_Init+0x42>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d901      	bls.n	800798a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0f7      	b.n	8007b7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fe2e 	bl	80085ec <SPI_GetPacketSize>
 8007990:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a7b      	ldr	r2, [pc, #492]	@ (8007b84 <HAL_SPI_Init+0x23c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00c      	beq.n	80079b6 <HAL_SPI_Init+0x6e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a79      	ldr	r2, [pc, #484]	@ (8007b88 <HAL_SPI_Init+0x240>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d007      	beq.n	80079b6 <HAL_SPI_Init+0x6e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a78      	ldr	r2, [pc, #480]	@ (8007b8c <HAL_SPI_Init+0x244>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d002      	beq.n	80079b6 <HAL_SPI_Init+0x6e>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d811      	bhi.n	80079da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ba:	4a72      	ldr	r2, [pc, #456]	@ (8007b84 <HAL_SPI_Init+0x23c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a70      	ldr	r2, [pc, #448]	@ (8007b88 <HAL_SPI_Init+0x240>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_SPI_Init+0x8c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a6f      	ldr	r2, [pc, #444]	@ (8007b8c <HAL_SPI_Init+0x244>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d104      	bne.n	80079de <HAL_SPI_Init+0x96>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d901      	bls.n	80079de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0cd      	b.n	8007b7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fa62 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007a1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a24:	d119      	bne.n	8007a5a <HAL_SPI_Init+0x112>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a2e:	d103      	bne.n	8007a38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a48:	d107      	bne.n	8007a5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <HAL_SPI_Init+0x13e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	2b06      	cmp	r3, #6
 8007a6c:	d90b      	bls.n	8007a86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e007      	b.n	8007a96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa8:	ea42 0103 	orr.w	r1, r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af6:	ea42 0103 	orr.w	r1, r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d113      	bne.n	8007b36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40013000 	.word	0x40013000
 8007b88:	40003800 	.word	0x40003800
 8007b8c:	40003c00 	.word	0x40003c00

08007b90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3320      	adds	r3, #32
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba8:	f7f9 feb2 	bl	8001910 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d001      	beq.n	8007bbe <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e1d1      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_Transmit+0x3a>
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e1c9      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_SPI_Transmit+0x4c>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e1c2      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007c34:	d108      	bne.n	8007c48 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e009      	b.n	8007c5c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007c5a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4b96      	ldr	r3, [pc, #600]	@ (8007ebc <HAL_SPI_Transmit+0x32c>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	88f9      	ldrh	r1, [r7, #6]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c88:	d107      	bne.n	8007c9a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b0f      	cmp	r3, #15
 8007ca0:	d947      	bls.n	8007d32 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ca2:	e03f      	b.n	8007d24 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d114      	bne.n	8007cdc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007cda:	e023      	b.n	8007d24 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cdc:	f7f9 fe18 	bl	8001910 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d803      	bhi.n	8007cf4 <HAL_SPI_Transmit+0x164>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d102      	bne.n	8007cfa <HAL_SPI_Transmit+0x16a>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d114      	bne.n	8007d24 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fba8 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e11e      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1b9      	bne.n	8007ca4 <HAL_SPI_Transmit+0x114>
 8007d30:	e0f1      	b.n	8007f16 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	2b07      	cmp	r3, #7
 8007d38:	f240 80e6 	bls.w	8007f08 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d3c:	e05d      	b.n	8007dfa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d132      	bne.n	8007db2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d918      	bls.n	8007d8a <HAL_SPI_Transmit+0x1fa>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d014      	beq.n	8007d8a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b02      	subs	r3, #2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d88:	e037      	b.n	8007dfa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d8e:	881a      	ldrh	r2, [r3, #0]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d98:	1c9a      	adds	r2, r3, #2
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007db0:	e023      	b.n	8007dfa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db2:	f7f9 fdad 	bl	8001910 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d803      	bhi.n	8007dca <HAL_SPI_Transmit+0x23a>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d102      	bne.n	8007dd0 <HAL_SPI_Transmit+0x240>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d114      	bne.n	8007dfa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fb3d 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ddc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e0b3      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d19b      	bne.n	8007d3e <HAL_SPI_Transmit+0x1ae>
 8007e06:	e086      	b.n	8007f16 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d154      	bne.n	8007ec0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d918      	bls.n	8007e54 <HAL_SPI_Transmit+0x2c4>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d914      	bls.n	8007e54 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e52:	e059      	b.n	8007f08 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d917      	bls.n	8007e90 <HAL_SPI_Transmit+0x300>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d013      	beq.n	8007e90 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b02      	subs	r3, #2
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007e8e:	e03b      	b.n	8007f08 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3320      	adds	r3, #32
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007eba:	e025      	b.n	8007f08 <HAL_SPI_Transmit+0x378>
 8007ebc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec0:	f7f9 fd26 	bl	8001910 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d803      	bhi.n	8007ed8 <HAL_SPI_Transmit+0x348>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d102      	bne.n	8007ede <HAL_SPI_Transmit+0x34e>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d114      	bne.n	8007f08 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fab6 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e02c      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f af79 	bne.w	8007e08 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2108      	movs	r1, #8
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fb35 	bl	8008590 <SPI_WaitOnFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f32:	f043 0220 	orr.w	r2, r3, #32
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fa87 	bl	8008450 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007f60:	2300      	movs	r3, #0
  }
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop

08007f6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3301      	adds	r3, #1
 8007f86:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3330      	adds	r3, #48	@ 0x30
 8007f8e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f90:	f7f9 fcbe 	bl	8001910 <HAL_GetTick>
 8007f94:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d001      	beq.n	8007fa6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e250      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Receive+0x46>
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e248      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_SPI_Receive+0x58>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e241      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800801c:	d108      	bne.n	8008030 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e009      	b.n	8008044 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008042:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	4b95      	ldr	r3, [pc, #596]	@ (80082a0 <HAL_SPI_Receive+0x334>)
 800804c:	4013      	ands	r3, r2
 800804e:	88f9      	ldrh	r1, [r7, #6]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	430b      	orrs	r3, r1
 8008056:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008070:	d107      	bne.n	8008082 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008080:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d96c      	bls.n	8008164 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800808a:	e064      	b.n	8008156 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d114      	bne.n	80080cc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80080ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080ca:	e044      	b.n	8008156 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	8bfa      	ldrh	r2, [r7, #30]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d919      	bls.n	800810e <HAL_SPI_Receive+0x1a2>
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d014      	beq.n	800810e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80080ee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800810c:	e023      	b.n	8008156 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800810e:	f7f9 fbff 	bl	8001910 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d803      	bhi.n	8008126 <HAL_SPI_Receive+0x1ba>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d102      	bne.n	800812c <HAL_SPI_Receive+0x1c0>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d114      	bne.n	8008156 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f98f 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e178      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d194      	bne.n	800808c <HAL_SPI_Receive+0x120>
 8008162:	e15e      	b.n	8008422 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b07      	cmp	r3, #7
 800816a:	f240 8153 	bls.w	8008414 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800816e:	e08f      	b.n	8008290 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b01      	cmp	r3, #1
 8008184:	d114      	bne.n	80081b0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	8812      	ldrh	r2, [r2, #0]
 800818e:	b292      	uxth	r2, r2
 8008190:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081ae:	e06f      	b.n	8008290 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8bfa      	ldrh	r2, [r7, #30]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d924      	bls.n	8008208 <HAL_SPI_Receive+0x29c>
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01f      	beq.n	8008208 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	8812      	ldrh	r2, [r2, #0]
 80081d0:	b292      	uxth	r2, r2
 80081d2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	8812      	ldrh	r2, [r2, #0]
 80081e6:	b292      	uxth	r2, r2
 80081e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ee:	1c9a      	adds	r2, r3, #2
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b02      	subs	r3, #2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008206:	e043      	b.n	8008290 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d119      	bne.n	8008248 <HAL_SPI_Receive+0x2dc>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d014      	beq.n	8008248 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	8812      	ldrh	r2, [r2, #0]
 8008226:	b292      	uxth	r2, r2
 8008228:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800822e:	1c9a      	adds	r2, r3, #2
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008246:	e023      	b.n	8008290 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008248:	f7f9 fb62 	bl	8001910 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d803      	bhi.n	8008260 <HAL_SPI_Receive+0x2f4>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	d102      	bne.n	8008266 <HAL_SPI_Receive+0x2fa>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d114      	bne.n	8008290 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f8f2 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008272:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e0db      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	f47f af69 	bne.w	8008170 <HAL_SPI_Receive+0x204>
 800829e:	e0c0      	b.n	8008422 <HAL_SPI_Receive+0x4b6>
 80082a0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d117      	bne.n	80082ea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082e8:	e094      	b.n	8008414 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	8bfa      	ldrh	r2, [r7, #30]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d946      	bls.n	8008386 <HAL_SPI_Receive+0x41a>
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d041      	beq.n	8008386 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008346:	7812      	ldrb	r2, [r2, #0]
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b04      	subs	r3, #4
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008384:	e046      	b.n	8008414 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d81c      	bhi.n	80083cc <HAL_SPI_Receive+0x460>
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80083ca:	e023      	b.n	8008414 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083cc:	f7f9 faa0 	bl	8001910 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d803      	bhi.n	80083e4 <HAL_SPI_Receive+0x478>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d102      	bne.n	80083ea <HAL_SPI_Receive+0x47e>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d114      	bne.n	8008414 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f830 	bl	8008450 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e019      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	f47f af41 	bne.w	80082a4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f814 	bl	8008450 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008446:	2300      	movs	r3, #0
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0208 	orr.w	r2, r2, #8
 800846e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0210 	orr.w	r2, r2, #16
 800847e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6919      	ldr	r1, [r3, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b3c      	ldr	r3, [pc, #240]	@ (800858c <SPI_CloseTransfer+0x13c>)
 800849c:	400b      	ands	r3, r1
 800849e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80084ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d014      	beq.n	80084e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00f      	beq.n	80084e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0220 	orr.w	r2, r2, #32
 80084e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d014      	beq.n	800851c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00f      	beq.n	800851c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008502:	f043 0204 	orr.w	r2, r3, #4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800851a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00f      	beq.n	8008546 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800852c:	f043 0201 	orr.w	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008544:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00f      	beq.n	8008570 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008556:	f043 0208 	orr.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800856e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	fffffc90 	.word	0xfffffc90

08008590 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	4613      	mov	r3, r2
 800859e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085a0:	e010      	b.n	80085c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085a2:	f7f9 f9b5 	bl	8001910 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d803      	bhi.n	80085ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d102      	bne.n	80085c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e00f      	b.n	80085e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695a      	ldr	r2, [r3, #20]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4013      	ands	r3, r2
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	bf0c      	ite	eq
 80085d4:	2301      	moveq	r3, #1
 80085d6:	2300      	movne	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d0df      	beq.n	80085a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	3301      	adds	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	3307      	adds	r3, #7
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	fb02 f303 	mul.w	r3, r2, r3
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e042      	b.n	80086ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7f8 fcc6 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2224      	movs	r2, #36	@ 0x24
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fb33 	bl	8009cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fdc8 	bl	8009208 <UART_SetConfig>
 8008678:	4603      	mov	r3, r0
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e01b      	b.n	80086ba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008690:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fbb2 	bl	8009e1c <UART_CheckIdleState>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b08a      	sub	sp, #40	@ 0x28
 80086c6:	af02      	add	r7, sp, #8
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d17b      	bne.n	80087d4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_UART_Transmit+0x26>
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e074      	b.n	80087d6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2221      	movs	r2, #33	@ 0x21
 80086f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086fc:	f7f9 f908 	bl	8001910 <HAL_GetTick>
 8008700:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	88fa      	ldrh	r2, [r7, #6]
 8008706:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	88fa      	ldrh	r2, [r7, #6]
 800870e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800871a:	d108      	bne.n	800872e <HAL_UART_Transmit+0x6c>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	e003      	b.n	8008736 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008736:	e030      	b.n	800879a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	2180      	movs	r1, #128	@ 0x80
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f001 fc14 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e03d      	b.n	80087d6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800876e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	3302      	adds	r3, #2
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e007      	b.n	8008788 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1c8      	bne.n	8008738 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2140      	movs	r1, #64	@ 0x40
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 fbdd 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e006      	b.n	80087d6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	e000      	b.n	80087d6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087d4:	2302      	movs	r3, #2
  }
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b08a      	sub	sp, #40	@ 0x28
 80087e2:	af02      	add	r7, sp, #8
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	f040 80b5 	bne.w	8008964 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <HAL_UART_Receive+0x28>
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e0ad      	b.n	8008966 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2222      	movs	r2, #34	@ 0x22
 8008816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008820:	f7f9 f876 	bl	8001910 <HAL_GetTick>
 8008824:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	88fa      	ldrh	r2, [r7, #6]
 800882a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883e:	d10e      	bne.n	800885e <HAL_UART_Receive+0x80>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <HAL_UART_Receive+0x76>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800884e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008852:	e02d      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	22ff      	movs	r2, #255	@ 0xff
 8008858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800885c:	e028      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <HAL_UART_Receive+0xa4>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <HAL_UART_Receive+0x9a>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	22ff      	movs	r2, #255	@ 0xff
 8008872:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008876:	e01b      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	227f      	movs	r2, #127	@ 0x7f
 800887c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008880:	e016      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800888a:	d10d      	bne.n	80088a8 <HAL_UART_Receive+0xca>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <HAL_UART_Receive+0xc0>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	227f      	movs	r2, #127	@ 0x7f
 8008898:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800889c:	e008      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	223f      	movs	r2, #63	@ 0x3f
 80088a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a6:	e003      	b.n	80088b0 <HAL_UART_Receive+0xd2>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c0:	d108      	bne.n	80088d4 <HAL_UART_Receive+0xf6>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d104      	bne.n	80088d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e003      	b.n	80088dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80088dc:	e036      	b.n	800894c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2120      	movs	r1, #32
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 fb41 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e032      	b.n	8008966 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	b29a      	uxth	r2, r3
 800890e:	8a7b      	ldrh	r3, [r7, #18]
 8008910:	4013      	ands	r3, r2
 8008912:	b29a      	uxth	r2, r3
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	3302      	adds	r3, #2
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	e00c      	b.n	800893a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008926:	b2da      	uxtb	r2, r3
 8008928:	8a7b      	ldrh	r3, [r7, #18]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	4013      	ands	r3, r2
 800892e:	b2da      	uxtb	r2, r3
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	3301      	adds	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008952:	b29b      	uxth	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1c2      	bne.n	80088de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	e000      	b.n	8008966 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008964:	2302      	movs	r3, #2
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	@ 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008984:	2b20      	cmp	r3, #32
 8008986:	d137      	bne.n	80089f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_UART_Receive_DMA+0x24>
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e030      	b.n	80089fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a18      	ldr	r2, [pc, #96]	@ (8008a04 <HAL_UART_Receive_DMA+0x94>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d01f      	beq.n	80089e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	613b      	str	r3, [r7, #16]
   return(result);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f001 fb2c 	bl	800a04c <UART_Start_Receive_DMA>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e000      	b.n	80089fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089f8:	2302      	movs	r3, #2
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3728      	adds	r7, #40	@ 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	58000c00 	.word	0x58000c00

08008a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a36:	4013      	ands	r3, r2
 8008a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11b      	bne.n	8008a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d015      	beq.n	8008a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8393 	beq.w	8009198 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
      }
      return;
 8008a7a:	e38d      	b.n	8009198 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8123 	beq.w	8008ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8008cc0 <HAL_UART_IRQHandler+0x2b8>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a96:	4b8b      	ldr	r3, [pc, #556]	@ (8008cc4 <HAL_UART_IRQHandler+0x2bc>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8116 	beq.w	8008ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d011      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xc8>
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2201      	movs	r2, #1
 8008abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac6:	f043 0201 	orr.w	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d011      	beq.n	8008b00 <HAL_UART_IRQHandler+0xf8>
 8008adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2202      	movs	r2, #2
 8008aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <HAL_UART_IRQHandler+0x128>
 8008b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b26:	f043 0202 	orr.w	r2, r3, #2
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d017      	beq.n	8008b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d105      	bne.n	8008b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008cc0 <HAL_UART_IRQHandler+0x2b8>)
 8008b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b62:	f043 0208 	orr.w	r2, r3, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d012      	beq.n	8008b9e <HAL_UART_IRQHandler+0x196>
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00c      	beq.n	8008b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b94:	f043 0220 	orr.w	r2, r3, #32
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 82f9 	beq.w	800919c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d013      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf2:	2b40      	cmp	r3, #64	@ 0x40
 8008bf4:	d005      	beq.n	8008c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d054      	beq.n	8008cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fb0a 	bl	800a21c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c12:	2b40      	cmp	r3, #64	@ 0x40
 8008c14:	d146      	bne.n	8008ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1d9      	bne.n	8008c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_UART_IRQHandler+0x2c0>)
 8008c74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fa f877 	bl	8002d70 <HAL_DMA_Abort_IT>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d019      	beq.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c96:	4610      	mov	r0, r2
 8008c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9a:	e00f      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa9d 	bl	80091dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca2:	e00b      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa99 	bl	80091dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008caa:	e007      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fa95 	bl	80091dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008cba:	e26f      	b.n	800919c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbc:	bf00      	nop
    return;
 8008cbe:	e26d      	b.n	800919c <HAL_UART_IRQHandler+0x794>
 8008cc0:	10000001 	.word	0x10000001
 8008cc4:	04000120 	.word	0x04000120
 8008cc8:	0800a4cf 	.word	0x0800a4cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	f040 8203 	bne.w	80090dc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 81fc 	beq.w	80090dc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 81f5 	beq.w	80090dc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d04:	2b40      	cmp	r3, #64	@ 0x40
 8008d06:	f040 816d 	bne.w	8008fe4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4aa4      	ldr	r2, [pc, #656]	@ (8008fa4 <HAL_UART_IRQHandler+0x59c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d068      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4aa1      	ldr	r2, [pc, #644]	@ (8008fa8 <HAL_UART_IRQHandler+0x5a0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d061      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a9f      	ldr	r2, [pc, #636]	@ (8008fac <HAL_UART_IRQHandler+0x5a4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d05a      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a9c      	ldr	r2, [pc, #624]	@ (8008fb0 <HAL_UART_IRQHandler+0x5a8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d053      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a9a      	ldr	r2, [pc, #616]	@ (8008fb4 <HAL_UART_IRQHandler+0x5ac>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d04c      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a97      	ldr	r2, [pc, #604]	@ (8008fb8 <HAL_UART_IRQHandler+0x5b0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d045      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a95      	ldr	r2, [pc, #596]	@ (8008fbc <HAL_UART_IRQHandler+0x5b4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d03e      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a92      	ldr	r2, [pc, #584]	@ (8008fc0 <HAL_UART_IRQHandler+0x5b8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d037      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a90      	ldr	r2, [pc, #576]	@ (8008fc4 <HAL_UART_IRQHandler+0x5bc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d030      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a8d      	ldr	r2, [pc, #564]	@ (8008fc8 <HAL_UART_IRQHandler+0x5c0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d029      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a8b      	ldr	r2, [pc, #556]	@ (8008fcc <HAL_UART_IRQHandler+0x5c4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a88      	ldr	r2, [pc, #544]	@ (8008fd0 <HAL_UART_IRQHandler+0x5c8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01b      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a86      	ldr	r2, [pc, #536]	@ (8008fd4 <HAL_UART_IRQHandler+0x5cc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d014      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a83      	ldr	r2, [pc, #524]	@ (8008fd8 <HAL_UART_IRQHandler+0x5d0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00d      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a81      	ldr	r2, [pc, #516]	@ (8008fdc <HAL_UART_IRQHandler+0x5d4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d006      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a7e      	ldr	r2, [pc, #504]	@ (8008fe0 <HAL_UART_IRQHandler+0x5d8>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d106      	bne.n	8008df8 <HAL_UART_IRQHandler+0x3f0>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e005      	b.n	8008e04 <HAL_UART_IRQHandler+0x3fc>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80ad 	beq.w	8008f6c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	f080 80a5 	bcs.w	8008f6c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e38:	f000 8087 	beq.w	8008f4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1da      	bne.n	8008e3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008eaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e1      	bne.n	8008e86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008eec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e3      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e4      	bne.n	8008f08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f9 fbf5 	bl	8002734 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f943 	bl	80091f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008f6a:	e119      	b.n	80091a0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f76:	429a      	cmp	r2, r3
 8008f78:	f040 8112 	bne.w	80091a0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f88:	f040 810a 	bne.w	80091a0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f928 	bl	80091f0 <HAL_UARTEx_RxEventCallback>
      return;
 8008fa0:	e0fe      	b.n	80091a0 <HAL_UART_IRQHandler+0x798>
 8008fa2:	bf00      	nop
 8008fa4:	40020010 	.word	0x40020010
 8008fa8:	40020028 	.word	0x40020028
 8008fac:	40020040 	.word	0x40020040
 8008fb0:	40020058 	.word	0x40020058
 8008fb4:	40020070 	.word	0x40020070
 8008fb8:	40020088 	.word	0x40020088
 8008fbc:	400200a0 	.word	0x400200a0
 8008fc0:	400200b8 	.word	0x400200b8
 8008fc4:	40020410 	.word	0x40020410
 8008fc8:	40020428 	.word	0x40020428
 8008fcc:	40020440 	.word	0x40020440
 8008fd0:	40020458 	.word	0x40020458
 8008fd4:	40020470 	.word	0x40020470
 8008fd8:	40020488 	.word	0x40020488
 8008fdc:	400204a0 	.word	0x400204a0
 8008fe0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80cf 	beq.w	80091a4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80ca 	beq.w	80091a4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800901e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009032:	647b      	str	r3, [r7, #68]	@ 0x44
 8009034:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e4      	bne.n	8009010 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	623b      	str	r3, [r7, #32]
   return(result);
 8009056:	6a3a      	ldr	r2, [r7, #32]
 8009058:	4b55      	ldr	r3, [pc, #340]	@ (80091b0 <HAL_UART_IRQHandler+0x7a8>)
 800905a:	4013      	ands	r3, r2
 800905c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800906a:	633a      	str	r2, [r7, #48]	@ 0x30
 800906c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e3      	bne.n	8009046 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0310 	bic.w	r3, r3, #16
 80090a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090b4:	61fb      	str	r3, [r7, #28]
 80090b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	617b      	str	r3, [r7, #20]
   return(result);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e4      	bne.n	8009092 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f88b 	bl	80091f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090da:	e063      	b.n	80091a4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00e      	beq.n	8009106 <HAL_UART_IRQHandler+0x6fe>
 80090e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d008      	beq.n	8009106 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 fa22 	bl	800a548 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009104:	e051      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800910a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800910e:	2b00      	cmp	r3, #0
 8009110:	d014      	beq.n	800913c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800911e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800912e:	2b00      	cmp	r3, #0
 8009130:	d03a      	beq.n	80091a8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
    }
    return;
 800913a:	e035      	b.n	80091a8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <HAL_UART_IRQHandler+0x754>
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800914c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f9cc 	bl	800a4f2 <UART_EndTransmit_IT>
    return;
 800915a:	e026      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_UART_IRQHandler+0x774>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f9fb 	bl	800a570 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800917a:	e016      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d010      	beq.n	80091aa <HAL_UART_IRQHandler+0x7a2>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	2b00      	cmp	r3, #0
 800918e:	da0c      	bge.n	80091aa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f9e3 	bl	800a55c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009196:	e008      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
      return;
 8009198:	bf00      	nop
 800919a:	e006      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
    return;
 800919c:	bf00      	nop
 800919e:	e004      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
      return;
 80091a0:	bf00      	nop
 80091a2:	e002      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
      return;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <HAL_UART_IRQHandler+0x7a2>
    return;
 80091a8:	bf00      	nop
  }
}
 80091aa:	37e8      	adds	r7, #232	@ 0xe8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	effffffe 	.word	0xeffffffe

080091b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800920c:	b092      	sub	sp, #72	@ 0x48
 800920e:	af00      	add	r7, sp, #0
 8009210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	431a      	orrs	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	431a      	orrs	r2, r3
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	4313      	orrs	r3, r2
 800922e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4bbe      	ldr	r3, [pc, #760]	@ (8009530 <UART_SetConfig+0x328>)
 8009238:	4013      	ands	r3, r2
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	6812      	ldr	r2, [r2, #0]
 800923e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009240:	430b      	orrs	r3, r1
 8009242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4ab3      	ldr	r2, [pc, #716]	@ (8009534 <UART_SetConfig+0x32c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d004      	beq.n	8009274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009270:	4313      	orrs	r3, r2
 8009272:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	4baf      	ldr	r3, [pc, #700]	@ (8009538 <UART_SetConfig+0x330>)
 800927c:	4013      	ands	r3, r2
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009284:	430b      	orrs	r3, r1
 8009286:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	f023 010f 	bic.w	r1, r3, #15
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4aa6      	ldr	r2, [pc, #664]	@ (800953c <UART_SetConfig+0x334>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d177      	bne.n	8009398 <UART_SetConfig+0x190>
 80092a8:	4ba5      	ldr	r3, [pc, #660]	@ (8009540 <UART_SetConfig+0x338>)
 80092aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092b0:	2b28      	cmp	r3, #40	@ 0x28
 80092b2:	d86d      	bhi.n	8009390 <UART_SetConfig+0x188>
 80092b4:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <UART_SetConfig+0xb4>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	08009361 	.word	0x08009361
 80092c0:	08009391 	.word	0x08009391
 80092c4:	08009391 	.word	0x08009391
 80092c8:	08009391 	.word	0x08009391
 80092cc:	08009391 	.word	0x08009391
 80092d0:	08009391 	.word	0x08009391
 80092d4:	08009391 	.word	0x08009391
 80092d8:	08009391 	.word	0x08009391
 80092dc:	08009369 	.word	0x08009369
 80092e0:	08009391 	.word	0x08009391
 80092e4:	08009391 	.word	0x08009391
 80092e8:	08009391 	.word	0x08009391
 80092ec:	08009391 	.word	0x08009391
 80092f0:	08009391 	.word	0x08009391
 80092f4:	08009391 	.word	0x08009391
 80092f8:	08009391 	.word	0x08009391
 80092fc:	08009371 	.word	0x08009371
 8009300:	08009391 	.word	0x08009391
 8009304:	08009391 	.word	0x08009391
 8009308:	08009391 	.word	0x08009391
 800930c:	08009391 	.word	0x08009391
 8009310:	08009391 	.word	0x08009391
 8009314:	08009391 	.word	0x08009391
 8009318:	08009391 	.word	0x08009391
 800931c:	08009379 	.word	0x08009379
 8009320:	08009391 	.word	0x08009391
 8009324:	08009391 	.word	0x08009391
 8009328:	08009391 	.word	0x08009391
 800932c:	08009391 	.word	0x08009391
 8009330:	08009391 	.word	0x08009391
 8009334:	08009391 	.word	0x08009391
 8009338:	08009391 	.word	0x08009391
 800933c:	08009381 	.word	0x08009381
 8009340:	08009391 	.word	0x08009391
 8009344:	08009391 	.word	0x08009391
 8009348:	08009391 	.word	0x08009391
 800934c:	08009391 	.word	0x08009391
 8009350:	08009391 	.word	0x08009391
 8009354:	08009391 	.word	0x08009391
 8009358:	08009391 	.word	0x08009391
 800935c:	08009389 	.word	0x08009389
 8009360:	2301      	movs	r3, #1
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e222      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e21e      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e21a      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e216      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009380:	2320      	movs	r3, #32
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e212      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009388:	2340      	movs	r3, #64	@ 0x40
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e20e      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009390:	2380      	movs	r3, #128	@ 0x80
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e20a      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a69      	ldr	r2, [pc, #420]	@ (8009544 <UART_SetConfig+0x33c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d130      	bne.n	8009404 <UART_SetConfig+0x1fc>
 80093a2:	4b67      	ldr	r3, [pc, #412]	@ (8009540 <UART_SetConfig+0x338>)
 80093a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b05      	cmp	r3, #5
 80093ac:	d826      	bhi.n	80093fc <UART_SetConfig+0x1f4>
 80093ae:	a201      	add	r2, pc, #4	@ (adr r2, 80093b4 <UART_SetConfig+0x1ac>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e1ec      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e1e8      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e1e4      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e1e0      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093ec:	2320      	movs	r3, #32
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e1dc      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093f4:	2340      	movs	r3, #64	@ 0x40
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e1d8      	b.n	80097ae <UART_SetConfig+0x5a6>
 80093fc:	2380      	movs	r3, #128	@ 0x80
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e1d4      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a4f      	ldr	r2, [pc, #316]	@ (8009548 <UART_SetConfig+0x340>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d130      	bne.n	8009470 <UART_SetConfig+0x268>
 800940e:	4b4c      	ldr	r3, [pc, #304]	@ (8009540 <UART_SetConfig+0x338>)
 8009410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b05      	cmp	r3, #5
 8009418:	d826      	bhi.n	8009468 <UART_SetConfig+0x260>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <UART_SetConfig+0x218>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009439 	.word	0x08009439
 8009424:	08009441 	.word	0x08009441
 8009428:	08009449 	.word	0x08009449
 800942c:	08009451 	.word	0x08009451
 8009430:	08009459 	.word	0x08009459
 8009434:	08009461 	.word	0x08009461
 8009438:	2300      	movs	r3, #0
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e1b6      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009440:	2304      	movs	r3, #4
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e1b2      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009448:	2308      	movs	r3, #8
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e1ae      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009450:	2310      	movs	r3, #16
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e1aa      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009458:	2320      	movs	r3, #32
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945e:	e1a6      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009460:	2340      	movs	r3, #64	@ 0x40
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e1a2      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009468:	2380      	movs	r3, #128	@ 0x80
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e19e      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a35      	ldr	r2, [pc, #212]	@ (800954c <UART_SetConfig+0x344>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d130      	bne.n	80094dc <UART_SetConfig+0x2d4>
 800947a:	4b31      	ldr	r3, [pc, #196]	@ (8009540 <UART_SetConfig+0x338>)
 800947c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b05      	cmp	r3, #5
 8009484:	d826      	bhi.n	80094d4 <UART_SetConfig+0x2cc>
 8009486:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <UART_SetConfig+0x284>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094a5 	.word	0x080094a5
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094b5 	.word	0x080094b5
 8009498:	080094bd 	.word	0x080094bd
 800949c:	080094c5 	.word	0x080094c5
 80094a0:	080094cd 	.word	0x080094cd
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e180      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e17c      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e178      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e174      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094c4:	2320      	movs	r3, #32
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e170      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094cc:	2340      	movs	r3, #64	@ 0x40
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e16c      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094d4:	2380      	movs	r3, #128	@ 0x80
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e168      	b.n	80097ae <UART_SetConfig+0x5a6>
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009550 <UART_SetConfig+0x348>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d142      	bne.n	800956c <UART_SetConfig+0x364>
 80094e6:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <UART_SetConfig+0x338>)
 80094e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d838      	bhi.n	8009564 <UART_SetConfig+0x35c>
 80094f2:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <UART_SetConfig+0x2f0>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009519 	.word	0x08009519
 8009500:	08009521 	.word	0x08009521
 8009504:	08009529 	.word	0x08009529
 8009508:	08009555 	.word	0x08009555
 800950c:	0800955d 	.word	0x0800955d
 8009510:	2300      	movs	r3, #0
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e14a      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009518:	2304      	movs	r3, #4
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e146      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009520:	2308      	movs	r3, #8
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e142      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009528:	2310      	movs	r3, #16
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e13e      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009530:	cfff69f3 	.word	0xcfff69f3
 8009534:	58000c00 	.word	0x58000c00
 8009538:	11fff4ff 	.word	0x11fff4ff
 800953c:	40011000 	.word	0x40011000
 8009540:	58024400 	.word	0x58024400
 8009544:	40004400 	.word	0x40004400
 8009548:	40004800 	.word	0x40004800
 800954c:	40004c00 	.word	0x40004c00
 8009550:	40005000 	.word	0x40005000
 8009554:	2320      	movs	r3, #32
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e128      	b.n	80097ae <UART_SetConfig+0x5a6>
 800955c:	2340      	movs	r3, #64	@ 0x40
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e124      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009564:	2380      	movs	r3, #128	@ 0x80
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e120      	b.n	80097ae <UART_SetConfig+0x5a6>
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4acb      	ldr	r2, [pc, #812]	@ (80098a0 <UART_SetConfig+0x698>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d176      	bne.n	8009664 <UART_SetConfig+0x45c>
 8009576:	4bcb      	ldr	r3, [pc, #812]	@ (80098a4 <UART_SetConfig+0x69c>)
 8009578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800957e:	2b28      	cmp	r3, #40	@ 0x28
 8009580:	d86c      	bhi.n	800965c <UART_SetConfig+0x454>
 8009582:	a201      	add	r2, pc, #4	@ (adr r2, 8009588 <UART_SetConfig+0x380>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	0800962d 	.word	0x0800962d
 800958c:	0800965d 	.word	0x0800965d
 8009590:	0800965d 	.word	0x0800965d
 8009594:	0800965d 	.word	0x0800965d
 8009598:	0800965d 	.word	0x0800965d
 800959c:	0800965d 	.word	0x0800965d
 80095a0:	0800965d 	.word	0x0800965d
 80095a4:	0800965d 	.word	0x0800965d
 80095a8:	08009635 	.word	0x08009635
 80095ac:	0800965d 	.word	0x0800965d
 80095b0:	0800965d 	.word	0x0800965d
 80095b4:	0800965d 	.word	0x0800965d
 80095b8:	0800965d 	.word	0x0800965d
 80095bc:	0800965d 	.word	0x0800965d
 80095c0:	0800965d 	.word	0x0800965d
 80095c4:	0800965d 	.word	0x0800965d
 80095c8:	0800963d 	.word	0x0800963d
 80095cc:	0800965d 	.word	0x0800965d
 80095d0:	0800965d 	.word	0x0800965d
 80095d4:	0800965d 	.word	0x0800965d
 80095d8:	0800965d 	.word	0x0800965d
 80095dc:	0800965d 	.word	0x0800965d
 80095e0:	0800965d 	.word	0x0800965d
 80095e4:	0800965d 	.word	0x0800965d
 80095e8:	08009645 	.word	0x08009645
 80095ec:	0800965d 	.word	0x0800965d
 80095f0:	0800965d 	.word	0x0800965d
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	0800965d 	.word	0x0800965d
 80095fc:	0800965d 	.word	0x0800965d
 8009600:	0800965d 	.word	0x0800965d
 8009604:	0800965d 	.word	0x0800965d
 8009608:	0800964d 	.word	0x0800964d
 800960c:	0800965d 	.word	0x0800965d
 8009610:	0800965d 	.word	0x0800965d
 8009614:	0800965d 	.word	0x0800965d
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	0800965d 	.word	0x0800965d
 8009624:	0800965d 	.word	0x0800965d
 8009628:	08009655 	.word	0x08009655
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e0bc      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e0b8      	b.n	80097ae <UART_SetConfig+0x5a6>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e0b4      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e0b0      	b.n	80097ae <UART_SetConfig+0x5a6>
 800964c:	2320      	movs	r3, #32
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e0ac      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009654:	2340      	movs	r3, #64	@ 0x40
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e0a8      	b.n	80097ae <UART_SetConfig+0x5a6>
 800965c:	2380      	movs	r3, #128	@ 0x80
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e0a4      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a8f      	ldr	r2, [pc, #572]	@ (80098a8 <UART_SetConfig+0x6a0>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d130      	bne.n	80096d0 <UART_SetConfig+0x4c8>
 800966e:	4b8d      	ldr	r3, [pc, #564]	@ (80098a4 <UART_SetConfig+0x69c>)
 8009670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	2b05      	cmp	r3, #5
 8009678:	d826      	bhi.n	80096c8 <UART_SetConfig+0x4c0>
 800967a:	a201      	add	r2, pc, #4	@ (adr r2, 8009680 <UART_SetConfig+0x478>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	08009699 	.word	0x08009699
 8009684:	080096a1 	.word	0x080096a1
 8009688:	080096a9 	.word	0x080096a9
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096b9 	.word	0x080096b9
 8009694:	080096c1 	.word	0x080096c1
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e086      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096a0:	2304      	movs	r3, #4
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e082      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096a8:	2308      	movs	r3, #8
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e07e      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096b0:	2310      	movs	r3, #16
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e07a      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096b8:	2320      	movs	r3, #32
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e076      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096c0:	2340      	movs	r3, #64	@ 0x40
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e072      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096c8:	2380      	movs	r3, #128	@ 0x80
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e06e      	b.n	80097ae <UART_SetConfig+0x5a6>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a75      	ldr	r2, [pc, #468]	@ (80098ac <UART_SetConfig+0x6a4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d130      	bne.n	800973c <UART_SetConfig+0x534>
 80096da:	4b72      	ldr	r3, [pc, #456]	@ (80098a4 <UART_SetConfig+0x69c>)
 80096dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d826      	bhi.n	8009734 <UART_SetConfig+0x52c>
 80096e6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ec <UART_SetConfig+0x4e4>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009705 	.word	0x08009705
 80096f0:	0800970d 	.word	0x0800970d
 80096f4:	08009715 	.word	0x08009715
 80096f8:	0800971d 	.word	0x0800971d
 80096fc:	08009725 	.word	0x08009725
 8009700:	0800972d 	.word	0x0800972d
 8009704:	2300      	movs	r3, #0
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e050      	b.n	80097ae <UART_SetConfig+0x5a6>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e04c      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e048      	b.n	80097ae <UART_SetConfig+0x5a6>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e044      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009724:	2320      	movs	r3, #32
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e040      	b.n	80097ae <UART_SetConfig+0x5a6>
 800972c:	2340      	movs	r3, #64	@ 0x40
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e03c      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009734:	2380      	movs	r3, #128	@ 0x80
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973a:	e038      	b.n	80097ae <UART_SetConfig+0x5a6>
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a5b      	ldr	r2, [pc, #364]	@ (80098b0 <UART_SetConfig+0x6a8>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d130      	bne.n	80097a8 <UART_SetConfig+0x5a0>
 8009746:	4b57      	ldr	r3, [pc, #348]	@ (80098a4 <UART_SetConfig+0x69c>)
 8009748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	2b05      	cmp	r3, #5
 8009750:	d826      	bhi.n	80097a0 <UART_SetConfig+0x598>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <UART_SetConfig+0x550>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	08009771 	.word	0x08009771
 800975c:	08009779 	.word	0x08009779
 8009760:	08009781 	.word	0x08009781
 8009764:	08009789 	.word	0x08009789
 8009768:	08009791 	.word	0x08009791
 800976c:	08009799 	.word	0x08009799
 8009770:	2302      	movs	r3, #2
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e01a      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009778:	2304      	movs	r3, #4
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e016      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009780:	2308      	movs	r3, #8
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e012      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009788:	2310      	movs	r3, #16
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e00e      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009790:	2320      	movs	r3, #32
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e00a      	b.n	80097ae <UART_SetConfig+0x5a6>
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e006      	b.n	80097ae <UART_SetConfig+0x5a6>
 80097a0:	2380      	movs	r3, #128	@ 0x80
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a6:	e002      	b.n	80097ae <UART_SetConfig+0x5a6>
 80097a8:	2380      	movs	r3, #128	@ 0x80
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a3f      	ldr	r2, [pc, #252]	@ (80098b0 <UART_SetConfig+0x6a8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	f040 80f8 	bne.w	80099aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097be:	2b20      	cmp	r3, #32
 80097c0:	dc46      	bgt.n	8009850 <UART_SetConfig+0x648>
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	f2c0 8082 	blt.w	80098cc <UART_SetConfig+0x6c4>
 80097c8:	3b02      	subs	r3, #2
 80097ca:	2b1e      	cmp	r3, #30
 80097cc:	d87e      	bhi.n	80098cc <UART_SetConfig+0x6c4>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <UART_SetConfig+0x5cc>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009857 	.word	0x08009857
 80097d8:	080098cd 	.word	0x080098cd
 80097dc:	0800985f 	.word	0x0800985f
 80097e0:	080098cd 	.word	0x080098cd
 80097e4:	080098cd 	.word	0x080098cd
 80097e8:	080098cd 	.word	0x080098cd
 80097ec:	0800986f 	.word	0x0800986f
 80097f0:	080098cd 	.word	0x080098cd
 80097f4:	080098cd 	.word	0x080098cd
 80097f8:	080098cd 	.word	0x080098cd
 80097fc:	080098cd 	.word	0x080098cd
 8009800:	080098cd 	.word	0x080098cd
 8009804:	080098cd 	.word	0x080098cd
 8009808:	080098cd 	.word	0x080098cd
 800980c:	0800987f 	.word	0x0800987f
 8009810:	080098cd 	.word	0x080098cd
 8009814:	080098cd 	.word	0x080098cd
 8009818:	080098cd 	.word	0x080098cd
 800981c:	080098cd 	.word	0x080098cd
 8009820:	080098cd 	.word	0x080098cd
 8009824:	080098cd 	.word	0x080098cd
 8009828:	080098cd 	.word	0x080098cd
 800982c:	080098cd 	.word	0x080098cd
 8009830:	080098cd 	.word	0x080098cd
 8009834:	080098cd 	.word	0x080098cd
 8009838:	080098cd 	.word	0x080098cd
 800983c:	080098cd 	.word	0x080098cd
 8009840:	080098cd 	.word	0x080098cd
 8009844:	080098cd 	.word	0x080098cd
 8009848:	080098cd 	.word	0x080098cd
 800984c:	080098bf 	.word	0x080098bf
 8009850:	2b40      	cmp	r3, #64	@ 0x40
 8009852:	d037      	beq.n	80098c4 <UART_SetConfig+0x6bc>
 8009854:	e03a      	b.n	80098cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009856:	f7fd fc55 	bl	8007104 <HAL_RCCEx_GetD3PCLK1Freq>
 800985a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800985c:	e03c      	b.n	80098d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800985e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009862:	4618      	mov	r0, r3
 8009864:	f7fd fc64 	bl	8007130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986c:	e034      	b.n	80098d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986e:	f107 0318 	add.w	r3, r7, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f7fd fdb0 	bl	80073d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987c:	e02c      	b.n	80098d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800987e:	4b09      	ldr	r3, [pc, #36]	@ (80098a4 <UART_SetConfig+0x69c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d016      	beq.n	80098b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800988a:	4b06      	ldr	r3, [pc, #24]	@ (80098a4 <UART_SetConfig+0x69c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	08db      	lsrs	r3, r3, #3
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	4a07      	ldr	r2, [pc, #28]	@ (80098b4 <UART_SetConfig+0x6ac>)
 8009896:	fa22 f303 	lsr.w	r3, r2, r3
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800989c:	e01c      	b.n	80098d8 <UART_SetConfig+0x6d0>
 800989e:	bf00      	nop
 80098a0:	40011400 	.word	0x40011400
 80098a4:	58024400 	.word	0x58024400
 80098a8:	40007800 	.word	0x40007800
 80098ac:	40007c00 	.word	0x40007c00
 80098b0:	58000c00 	.word	0x58000c00
 80098b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80098b8:	4b9d      	ldr	r3, [pc, #628]	@ (8009b30 <UART_SetConfig+0x928>)
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098bc:	e00c      	b.n	80098d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098be:	4b9d      	ldr	r3, [pc, #628]	@ (8009b34 <UART_SetConfig+0x92c>)
 80098c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c2:	e009      	b.n	80098d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ca:	e005      	b.n	80098d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 81de 	beq.w	8009c9c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e4:	4a94      	ldr	r2, [pc, #592]	@ (8009b38 <UART_SetConfig+0x930>)
 80098e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	4413      	add	r3, r2
 80098fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009900:	429a      	cmp	r2, r3
 8009902:	d305      	bcc.n	8009910 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800990a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800990c:	429a      	cmp	r2, r3
 800990e:	d903      	bls.n	8009918 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009916:	e1c1      	b.n	8009c9c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991a:	2200      	movs	r2, #0
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	60fa      	str	r2, [r7, #12]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	4a84      	ldr	r2, [pc, #528]	@ (8009b38 <UART_SetConfig+0x930>)
 8009926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800992a:	b29b      	uxth	r3, r3
 800992c:	2200      	movs	r2, #0
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800993a:	f7f6 fccd 	bl	80002d8 <__aeabi_uldivmod>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	020b      	lsls	r3, r1, #8
 8009950:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009954:	0202      	lsls	r2, r0, #8
 8009956:	6979      	ldr	r1, [r7, #20]
 8009958:	6849      	ldr	r1, [r1, #4]
 800995a:	0849      	lsrs	r1, r1, #1
 800995c:	2000      	movs	r0, #0
 800995e:	460c      	mov	r4, r1
 8009960:	4605      	mov	r5, r0
 8009962:	eb12 0804 	adds.w	r8, r2, r4
 8009966:	eb43 0905 	adc.w	r9, r3, r5
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	469a      	mov	sl, r3
 8009972:	4693      	mov	fp, r2
 8009974:	4652      	mov	r2, sl
 8009976:	465b      	mov	r3, fp
 8009978:	4640      	mov	r0, r8
 800997a:	4649      	mov	r1, r9
 800997c:	f7f6 fcac 	bl	80002d8 <__aeabi_uldivmod>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4613      	mov	r3, r2
 8009986:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800998e:	d308      	bcc.n	80099a2 <UART_SetConfig+0x79a>
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009996:	d204      	bcs.n	80099a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800999e:	60da      	str	r2, [r3, #12]
 80099a0:	e17c      	b.n	8009c9c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099a8:	e178      	b.n	8009c9c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b2:	f040 80c5 	bne.w	8009b40 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80099b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	dc48      	bgt.n	8009a50 <UART_SetConfig+0x848>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	db7b      	blt.n	8009aba <UART_SetConfig+0x8b2>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d879      	bhi.n	8009aba <UART_SetConfig+0x8b2>
 80099c6:	a201      	add	r2, pc, #4	@ (adr r2, 80099cc <UART_SetConfig+0x7c4>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	08009a57 	.word	0x08009a57
 80099d0:	08009a5f 	.word	0x08009a5f
 80099d4:	08009abb 	.word	0x08009abb
 80099d8:	08009abb 	.word	0x08009abb
 80099dc:	08009a67 	.word	0x08009a67
 80099e0:	08009abb 	.word	0x08009abb
 80099e4:	08009abb 	.word	0x08009abb
 80099e8:	08009abb 	.word	0x08009abb
 80099ec:	08009a77 	.word	0x08009a77
 80099f0:	08009abb 	.word	0x08009abb
 80099f4:	08009abb 	.word	0x08009abb
 80099f8:	08009abb 	.word	0x08009abb
 80099fc:	08009abb 	.word	0x08009abb
 8009a00:	08009abb 	.word	0x08009abb
 8009a04:	08009abb 	.word	0x08009abb
 8009a08:	08009abb 	.word	0x08009abb
 8009a0c:	08009a87 	.word	0x08009a87
 8009a10:	08009abb 	.word	0x08009abb
 8009a14:	08009abb 	.word	0x08009abb
 8009a18:	08009abb 	.word	0x08009abb
 8009a1c:	08009abb 	.word	0x08009abb
 8009a20:	08009abb 	.word	0x08009abb
 8009a24:	08009abb 	.word	0x08009abb
 8009a28:	08009abb 	.word	0x08009abb
 8009a2c:	08009abb 	.word	0x08009abb
 8009a30:	08009abb 	.word	0x08009abb
 8009a34:	08009abb 	.word	0x08009abb
 8009a38:	08009abb 	.word	0x08009abb
 8009a3c:	08009abb 	.word	0x08009abb
 8009a40:	08009abb 	.word	0x08009abb
 8009a44:	08009abb 	.word	0x08009abb
 8009a48:	08009abb 	.word	0x08009abb
 8009a4c:	08009aad 	.word	0x08009aad
 8009a50:	2b40      	cmp	r3, #64	@ 0x40
 8009a52:	d02e      	beq.n	8009ab2 <UART_SetConfig+0x8aa>
 8009a54:	e031      	b.n	8009aba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a56:	f7fc f91f 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 8009a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a5c:	e033      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a5e:	f7fc f931 	bl	8005cc4 <HAL_RCC_GetPCLK2Freq>
 8009a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a64:	e02f      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fd fb60 	bl	8007130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a74:	e027      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a76:	f107 0318 	add.w	r3, r7, #24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd fcac 	bl	80073d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e01f      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a86:	4b2d      	ldr	r3, [pc, #180]	@ (8009b3c <UART_SetConfig+0x934>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d009      	beq.n	8009aa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a92:	4b2a      	ldr	r3, [pc, #168]	@ (8009b3c <UART_SetConfig+0x934>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	4a24      	ldr	r2, [pc, #144]	@ (8009b30 <UART_SetConfig+0x928>)
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa4:	e00f      	b.n	8009ac6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009aa6:	4b22      	ldr	r3, [pc, #136]	@ (8009b30 <UART_SetConfig+0x928>)
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aaa:	e00c      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aac:	4b21      	ldr	r3, [pc, #132]	@ (8009b34 <UART_SetConfig+0x92c>)
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e009      	b.n	8009ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e005      	b.n	8009ac6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80e7 	beq.w	8009c9c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad2:	4a19      	ldr	r2, [pc, #100]	@ (8009b38 <UART_SetConfig+0x930>)
 8009ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae0:	005a      	lsls	r2, r3, #1
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	085b      	lsrs	r3, r3, #1
 8009ae8:	441a      	add	r2, r3
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	d916      	bls.n	8009b28 <UART_SetConfig+0x920>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b00:	d212      	bcs.n	8009b28 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	f023 030f 	bic.w	r3, r3, #15
 8009b0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009b24:	60da      	str	r2, [r3, #12]
 8009b26:	e0b9      	b.n	8009c9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b2e:	e0b5      	b.n	8009c9c <UART_SetConfig+0xa94>
 8009b30:	03d09000 	.word	0x03d09000
 8009b34:	003d0900 	.word	0x003d0900
 8009b38:	0800a820 	.word	0x0800a820
 8009b3c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	dc49      	bgt.n	8009bdc <UART_SetConfig+0x9d4>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	db7c      	blt.n	8009c46 <UART_SetConfig+0xa3e>
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d87a      	bhi.n	8009c46 <UART_SetConfig+0xa3e>
 8009b50:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <UART_SetConfig+0x950>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009be3 	.word	0x08009be3
 8009b5c:	08009beb 	.word	0x08009beb
 8009b60:	08009c47 	.word	0x08009c47
 8009b64:	08009c47 	.word	0x08009c47
 8009b68:	08009bf3 	.word	0x08009bf3
 8009b6c:	08009c47 	.word	0x08009c47
 8009b70:	08009c47 	.word	0x08009c47
 8009b74:	08009c47 	.word	0x08009c47
 8009b78:	08009c03 	.word	0x08009c03
 8009b7c:	08009c47 	.word	0x08009c47
 8009b80:	08009c47 	.word	0x08009c47
 8009b84:	08009c47 	.word	0x08009c47
 8009b88:	08009c47 	.word	0x08009c47
 8009b8c:	08009c47 	.word	0x08009c47
 8009b90:	08009c47 	.word	0x08009c47
 8009b94:	08009c47 	.word	0x08009c47
 8009b98:	08009c13 	.word	0x08009c13
 8009b9c:	08009c47 	.word	0x08009c47
 8009ba0:	08009c47 	.word	0x08009c47
 8009ba4:	08009c47 	.word	0x08009c47
 8009ba8:	08009c47 	.word	0x08009c47
 8009bac:	08009c47 	.word	0x08009c47
 8009bb0:	08009c47 	.word	0x08009c47
 8009bb4:	08009c47 	.word	0x08009c47
 8009bb8:	08009c47 	.word	0x08009c47
 8009bbc:	08009c47 	.word	0x08009c47
 8009bc0:	08009c47 	.word	0x08009c47
 8009bc4:	08009c47 	.word	0x08009c47
 8009bc8:	08009c47 	.word	0x08009c47
 8009bcc:	08009c47 	.word	0x08009c47
 8009bd0:	08009c47 	.word	0x08009c47
 8009bd4:	08009c47 	.word	0x08009c47
 8009bd8:	08009c39 	.word	0x08009c39
 8009bdc:	2b40      	cmp	r3, #64	@ 0x40
 8009bde:	d02e      	beq.n	8009c3e <UART_SetConfig+0xa36>
 8009be0:	e031      	b.n	8009c46 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be2:	f7fc f859 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 8009be6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009be8:	e033      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bea:	f7fc f86b 	bl	8005cc4 <HAL_RCC_GetPCLK2Freq>
 8009bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bf0:	e02f      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fa9a 	bl	8007130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c00:	e027      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c02:	f107 0318 	add.w	r3, r7, #24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fd fbe6 	bl	80073d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c10:	e01f      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c12:	4b2d      	ldr	r3, [pc, #180]	@ (8009cc8 <UART_SetConfig+0xac0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8009cc8 <UART_SetConfig+0xac0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	08db      	lsrs	r3, r3, #3
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	4a28      	ldr	r2, [pc, #160]	@ (8009ccc <UART_SetConfig+0xac4>)
 8009c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c30:	e00f      	b.n	8009c52 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009c32:	4b26      	ldr	r3, [pc, #152]	@ (8009ccc <UART_SetConfig+0xac4>)
 8009c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c36:	e00c      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c38:	4b25      	ldr	r3, [pc, #148]	@ (8009cd0 <UART_SetConfig+0xac8>)
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3c:	e009      	b.n	8009c52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c44:	e005      	b.n	8009c52 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c50:	bf00      	nop
    }

    if (pclk != 0U)
 8009c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d021      	beq.n	8009c9c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cd4 <UART_SetConfig+0xacc>)
 8009c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	085b      	lsrs	r3, r3, #1
 8009c70:	441a      	add	r2, r3
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	d909      	bls.n	8009c96 <UART_SetConfig+0xa8e>
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c88:	d205      	bcs.n	8009c96 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60da      	str	r2, [r3, #12]
 8009c94:	e002      	b.n	8009c9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009cb8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3748      	adds	r7, #72	@ 0x48
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	03d09000 	.word	0x03d09000
 8009cd0:	003d0900 	.word	0x003d0900
 8009cd4:	0800a820 	.word	0x0800a820

08009cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00a      	beq.n	8009d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00a      	beq.n	8009d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01a      	beq.n	8009dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd6:	d10a      	bne.n	8009dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	605a      	str	r2, [r3, #4]
  }
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b098      	sub	sp, #96	@ 0x60
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e2c:	f7f7 fd70 	bl	8001910 <HAL_GetTick>
 8009e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d12f      	bne.n	8009ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f88e 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d022      	beq.n	8009ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e6      	bne.n	8009e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e063      	b.n	8009f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d149      	bne.n	8009f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f857 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d03c      	beq.n	8009f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e6      	bne.n	8009ec8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f023 0301 	bic.w	r3, r3, #1
 8009f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f1a:	61fa      	str	r2, [r7, #28]
 8009f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	69b9      	ldr	r1, [r7, #24]
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	617b      	str	r3, [r7, #20]
   return(result);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e5      	bne.n	8009efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e012      	b.n	8009f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3758      	adds	r7, #88	@ 0x58
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f80:	e04f      	b.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d04b      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f8a:	f7f7 fcc1 	bl	8001910 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d302      	bcc.n	8009fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e04e      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d037      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b80      	cmp	r3, #128	@ 0x80
 8009fb6:	d034      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b40      	cmp	r3, #64	@ 0x40
 8009fbc:	d031      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d110      	bne.n	8009fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f921 	bl	800a21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e029      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ffc:	d111      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f907 	bl	800a21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e00f      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4013      	ands	r3, r2
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	bf0c      	ite	eq
 800a032:	2301      	moveq	r3, #1
 800a034:	2300      	movne	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d0a0      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b096      	sub	sp, #88	@ 0x58
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	88fa      	ldrh	r2, [r7, #6]
 800a064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2222      	movs	r2, #34	@ 0x22
 800a074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02d      	beq.n	800a0de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a088:	4a40      	ldr	r2, [pc, #256]	@ (800a18c <UART_Start_Receive_DMA+0x140>)
 800a08a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a092:	4a3f      	ldr	r2, [pc, #252]	@ (800a190 <UART_Start_Receive_DMA+0x144>)
 800a094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09c:	4a3d      	ldr	r2, [pc, #244]	@ (800a194 <UART_Start_Receive_DMA+0x148>)
 800a09e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3324      	adds	r3, #36	@ 0x24
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0bc:	461a      	mov	r2, r3
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	f7f8 f8ce 	bl	8002260 <HAL_DMA_Start_IT>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2210      	movs	r2, #16
 800a0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e051      	b.n	800a182 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d018      	beq.n	800a118 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a104:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a106:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a10a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e6      	bne.n	800a0e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3308      	adds	r3, #8
 800a11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	f043 0301 	orr.w	r3, r3, #1
 800a12e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3308      	adds	r3, #8
 800a136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a138:	637a      	str	r2, [r7, #52]	@ 0x34
 800a13a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a13e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e5      	bne.n	800a118 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	613b      	str	r3, [r7, #16]
   return(result);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3308      	adds	r3, #8
 800a16a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a16c:	623a      	str	r2, [r7, #32]
 800a16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	6a3a      	ldr	r2, [r7, #32]
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	61bb      	str	r3, [r7, #24]
   return(result);
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e5      	bne.n	800a14c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3758      	adds	r7, #88	@ 0x58
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	0800a2e9 	.word	0x0800a2e9
 800a190:	0800a411 	.word	0x0800a411
 800a194:	0800a44f 	.word	0x0800a44f

0800a198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b08f      	sub	sp, #60	@ 0x3c
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e6      	bne.n	800a1a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a1e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1f2:	61ba      	str	r2, [r7, #24]
 800a1f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6979      	ldr	r1, [r7, #20]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e5      	bne.n	800a1d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a20e:	bf00      	nop
 800a210:	373c      	adds	r7, #60	@ 0x3c
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
	...

0800a21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b095      	sub	sp, #84	@ 0x54
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a242:	643b      	str	r3, [r7, #64]	@ 0x40
 800a244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	61fb      	str	r3, [r7, #28]
   return(result);
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	4b1e      	ldr	r3, [pc, #120]	@ (800a2e4 <UART_EndRxTransfer+0xc8>)
 800a26a:	4013      	ands	r3, r2
 800a26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3308      	adds	r3, #8
 800a274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e5      	bne.n	800a256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d118      	bne.n	800a2c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f023 0310 	bic.w	r3, r3, #16
 800a2a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6979      	ldr	r1, [r7, #20]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2d8:	bf00      	nop
 800a2da:	3754      	adds	r7, #84	@ 0x54
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	effffffe 	.word	0xeffffffe

0800a2e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b09c      	sub	sp, #112	@ 0x70
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2fe:	d071      	beq.n	800a3e4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a31c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a31e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a326:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a328:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a32c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	667b      	str	r3, [r7, #100]	@ 0x64
 800a352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a35a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a35c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e5      	bne.n	800a33a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	623b      	str	r3, [r7, #32]
   return(result);
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a384:	663b      	str	r3, [r7, #96]	@ 0x60
 800a386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a38e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d118      	bne.n	800a3e4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	e853 3f00 	ldrex	r3, [r3]
 800a3be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f023 0310 	bic.w	r3, r3, #16
 800a3c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d4:	69b9      	ldr	r1, [r7, #24]
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	e841 2300 	strex	r3, r2, [r1]
 800a3dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e6      	bne.n	800a3b2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d107      	bne.n	800a402 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3fc:	f7fe fef8 	bl	80091f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a400:	e002      	b.n	800a408 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a402:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a404:	f7f6 ff14 	bl	8001230 <HAL_UART_RxCpltCallback>
}
 800a408:	bf00      	nop
 800a40a:	3770      	adds	r7, #112	@ 0x70
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d109      	bne.n	800a440 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a432:	085b      	lsrs	r3, r3, #1
 800a434:	b29b      	uxth	r3, r3
 800a436:	4619      	mov	r1, r3
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fe fed9 	bl	80091f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a43e:	e002      	b.n	800a446 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7fe fec1 	bl	80091c8 <HAL_UART_RxHalfCpltCallback>
}
 800a446:	bf00      	nop
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a462:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a476:	2b80      	cmp	r3, #128	@ 0x80
 800a478:	d109      	bne.n	800a48e <UART_DMAError+0x40>
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b21      	cmp	r3, #33	@ 0x21
 800a47e:	d106      	bne.n	800a48e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2200      	movs	r2, #0
 800a484:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a488:	6978      	ldr	r0, [r7, #20]
 800a48a:	f7ff fe85 	bl	800a198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a498:	2b40      	cmp	r3, #64	@ 0x40
 800a49a:	d109      	bne.n	800a4b0 <UART_DMAError+0x62>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b22      	cmp	r3, #34	@ 0x22
 800a4a0:	d106      	bne.n	800a4b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a4aa:	6978      	ldr	r0, [r7, #20]
 800a4ac:	f7ff feb6 	bl	800a21c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b6:	f043 0210 	orr.w	r2, r3, #16
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4c0:	6978      	ldr	r0, [r7, #20]
 800a4c2:	f7fe fe8b 	bl	80091dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4c6:	bf00      	nop
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7fe fe79 	bl	80091dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b088      	sub	sp, #32
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	60bb      	str	r3, [r7, #8]
   return(result);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6979      	ldr	r1, [r7, #20]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	613b      	str	r3, [r7, #16]
   return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7fe fe3a 	bl	80091b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a540:	bf00      	nop
 800a542:	3720      	adds	r7, #32
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_UARTEx_DisableFifoMode+0x16>
 800a596:	2302      	movs	r3, #2
 800a598:	e027      	b.n	800a5ea <HAL_UARTEx_DisableFifoMode+0x66>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2224      	movs	r2, #36	@ 0x24
 800a5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0201 	bic.w	r2, r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a60a:	2302      	movs	r3, #2
 800a60c:	e02d      	b.n	800a66a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2224      	movs	r2, #36	@ 0x24
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0201 	bic.w	r2, r2, #1
 800a634:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f850 	bl	800a6f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a686:	2302      	movs	r3, #2
 800a688:	e02d      	b.n	800a6e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2224      	movs	r2, #36	@ 0x24
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0201 	bic.w	r2, r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f812 	bl	800a6f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d108      	bne.n	800a712 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a710:	e031      	b.n	800a776 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a712:	2310      	movs	r3, #16
 800a714:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a716:	2310      	movs	r3, #16
 800a718:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	0e5b      	lsrs	r3, r3, #25
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0307 	and.w	r3, r3, #7
 800a728:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	0f5b      	lsrs	r3, r3, #29
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	7b3a      	ldrb	r2, [r7, #12]
 800a73e:	4911      	ldr	r1, [pc, #68]	@ (800a784 <UARTEx_SetNbDataToProcess+0x94>)
 800a740:	5c8a      	ldrb	r2, [r1, r2]
 800a742:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a746:	7b3a      	ldrb	r2, [r7, #12]
 800a748:	490f      	ldr	r1, [pc, #60]	@ (800a788 <UARTEx_SetNbDataToProcess+0x98>)
 800a74a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a74c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a750:	b29a      	uxth	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	7b7a      	ldrb	r2, [r7, #13]
 800a75c:	4909      	ldr	r1, [pc, #36]	@ (800a784 <UARTEx_SetNbDataToProcess+0x94>)
 800a75e:	5c8a      	ldrb	r2, [r1, r2]
 800a760:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a764:	7b7a      	ldrb	r2, [r7, #13]
 800a766:	4908      	ldr	r1, [pc, #32]	@ (800a788 <UARTEx_SetNbDataToProcess+0x98>)
 800a768:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a76a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a776:	bf00      	nop
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	0800a838 	.word	0x0800a838
 800a788:	0800a840 	.word	0x0800a840

0800a78c <memset>:
 800a78c:	4402      	add	r2, r0
 800a78e:	4603      	mov	r3, r0
 800a790:	4293      	cmp	r3, r2
 800a792:	d100      	bne.n	800a796 <memset+0xa>
 800a794:	4770      	bx	lr
 800a796:	f803 1b01 	strb.w	r1, [r3], #1
 800a79a:	e7f9      	b.n	800a790 <memset+0x4>

0800a79c <__libc_init_array>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d4 <__libc_init_array+0x38>)
 800a7a0:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d8 <__libc_init_array+0x3c>)
 800a7a2:	1b64      	subs	r4, r4, r5
 800a7a4:	10a4      	asrs	r4, r4, #2
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	d109      	bne.n	800a7c0 <__libc_init_array+0x24>
 800a7ac:	4d0b      	ldr	r5, [pc, #44]	@ (800a7dc <__libc_init_array+0x40>)
 800a7ae:	4c0c      	ldr	r4, [pc, #48]	@ (800a7e0 <__libc_init_array+0x44>)
 800a7b0:	f000 f818 	bl	800a7e4 <_init>
 800a7b4:	1b64      	subs	r4, r4, r5
 800a7b6:	10a4      	asrs	r4, r4, #2
 800a7b8:	2600      	movs	r6, #0
 800a7ba:	42a6      	cmp	r6, r4
 800a7bc:	d105      	bne.n	800a7ca <__libc_init_array+0x2e>
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c4:	4798      	blx	r3
 800a7c6:	3601      	adds	r6, #1
 800a7c8:	e7ee      	b.n	800a7a8 <__libc_init_array+0xc>
 800a7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ce:	4798      	blx	r3
 800a7d0:	3601      	adds	r6, #1
 800a7d2:	e7f2      	b.n	800a7ba <__libc_init_array+0x1e>
 800a7d4:	0800a850 	.word	0x0800a850
 800a7d8:	0800a850 	.word	0x0800a850
 800a7dc:	0800a850 	.word	0x0800a850
 800a7e0:	0800a854 	.word	0x0800a854

0800a7e4 <_init>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	bf00      	nop
 800a7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ea:	bc08      	pop	{r3}
 800a7ec:	469e      	mov	lr, r3
 800a7ee:	4770      	bx	lr

0800a7f0 <_fini>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	bf00      	nop
 800a7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f6:	bc08      	pop	{r3}
 800a7f8:	469e      	mov	lr, r3
 800a7fa:	4770      	bx	lr
