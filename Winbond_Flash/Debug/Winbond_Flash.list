
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800b174  0800b174  0000c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2cc  0800b2cc  0000c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2d4  0800b2d4  0000c2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000898  24000000  0800b2dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000430  24000898  0800bb74  0000d898  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000cc8  0800bb74  0000dcc8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d898  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aedf  00000000  00000000  0000d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003070  00000000  00000000  000287a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d71  00000000  00000000  0002c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a030  00000000  00000000  0002d701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001907e  00000000  00000000  00067731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016af7e  00000000  00000000  000807af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb72d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ecc  00000000  00000000  001eb770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001f063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000898 	.word	0x24000898
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b15c 	.word	0x0800b15c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400089c 	.word	0x2400089c
 80002dc:	0800b15c 	.word	0x0800b15c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART1_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f003 ff32 	bl	800456a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 feac 	bl	8001468 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240008fc 	.word	0x240008fc
 800071c:	24000010 	.word	0x24000010
 8000720:	24000930 	.word	0x24000930

08000724 <Read_Register>:
///////////User friendly code for implementation///////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Read all status registers
void Read_Register(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <Read_Register+0x50>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fa0d 	bl	8000b4c <Read_Status_Register>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <Read_Register+0x54>)
 8000738:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800073a:	2064      	movs	r0, #100	@ 0x64
 800073c:	f000 fb72 	bl	8000e24 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <Read_Register+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa01 	bl	8000b4c <Read_Status_Register>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <Read_Register+0x5c>)
 8000750:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000752:	2064      	movs	r0, #100	@ 0x64
 8000754:	f000 fb66 	bl	8000e24 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <Read_Register+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f9f5 	bl	8000b4c <Read_Status_Register>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <Read_Register+0x64>)
 8000768:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800076a:	2064      	movs	r0, #100	@ 0x64
 800076c:	f000 fb5a 	bl	8000e24 <delay_ns>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000818 	.word	0x24000818
 8000778:	240008d0 	.word	0x240008d0
 800077c:	24000819 	.word	0x24000819
 8000780:	240008d1 	.word	0x240008d1
 8000784:	2400081a 	.word	0x2400081a
 8000788:	240008d2 	.word	0x240008d2

0800078c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <Write_Data+0x74>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <Write_Data+0x22>
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <Write_Data+0x78>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <Write_Data+0x22>
		Block_Erase(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fb05 	bl	8000db8 <Block_Erase>
	}
	uint16_t count=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 80007b2:	e01c      	b.n	80007ee <Write_Data+0x62>
		*Buffer=*data;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <Write_Data+0x7c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]
		Buffer++;
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <Write_Data+0x7c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <Write_Data+0x7c>)
 80007c6:	6013      	str	r3, [r2, #0]
		data++;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Write_Data+0x78>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <Write_Data+0x78>)
 80007d8:	801a      	strh	r2, [r3, #0]
		count++;
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <Write_Data+0x78>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007e8:	d301      	bcc.n	80007ee <Write_Data+0x62>
			Write_to_page();
 80007ea:	f000 f80f 	bl	800080c <Write_to_page>
	while(count<lenght){
 80007ee:	89fa      	ldrh	r2, [r7, #14]
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3de      	bcc.n	80007b4 <Write_Data+0x28>
		}
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	240008c2 	.word	0x240008c2
 8000804:	240008cc 	.word	0x240008cc
 8000808:	24000000 	.word	0x24000000

0800080c <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <Write_to_page+0x50>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4912      	ldr	r1, [pc, #72]	@ (8000860 <Write_to_page+0x54>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fa27 	bl	8000c6c <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <Write_to_page+0x58>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa60 	bl	8000ce8 <Write_Data_Flash>
	Page_Index++;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <Write_to_page+0x58>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <Write_to_page+0x58>)
 8000832:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <Write_to_page+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <Write_to_page+0x5c>)
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <Write_to_page+0x54>)
 800083e:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 8000840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000844:	21ff      	movs	r1, #255	@ 0xff
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <Write_to_page+0x54>)
 8000848:	f00a f80a 	bl	800a860 <memset>
	Automatic_Block_Managment(Page_Index);
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <Write_to_page+0x58>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f80b 	bl	800086c <Automatic_Block_Managment>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	240008cc 	.word	0x240008cc
 8000860:	24000018 	.word	0x24000018
 8000864:	240008c2 	.word	0x240008c2
 8000868:	24000000 	.word	0x24000000

0800086c <Automatic_Block_Managment>:
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	099b      	lsrs	r3, r3, #6
 800087a:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	89fa      	ldrh	r2, [r7, #14]
 8000882:	429a      	cmp	r2, r3
 8000884:	d007      	beq.n	8000896 <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa95 	bl	8000db8 <Block_Erase>
		Block_Mem=Block;
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000894:	e002      	b.n	800089c <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	8013      	strh	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	240008ce 	.word	0x240008ce

080008a8 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 80008ae:	481d      	ldr	r0, [pc, #116]	@ (8000924 <Chip_Erase+0x7c>)
 80008b0:	f000 fae2 	bl	8000e78 <USART1_Printf>
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
 80008b4:	1cf9      	adds	r1, r7, #3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <Chip_Erase+0x80>)
 80008be:	f008 ff42 	bl	8009746 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2b59      	cmp	r3, #89	@ 0x59
 80008c6:	d126      	bne.n	8000916 <Chip_Erase+0x6e>
		USART1_Printf("Sletter minne...\r\n");
 80008c8:	4818      	ldr	r0, [pc, #96]	@ (800092c <Chip_Erase+0x84>)
 80008ca:	f000 fad5 	bl	8000e78 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	e009      	b.n	80008e8 <Chip_Erase+0x40>
			Block_Erase(i*64);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa6b 	bl	8000db8 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3301      	adds	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ee:	ddf1      	ble.n	80008d4 <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <Chip_Erase+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <Chip_Erase+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <Chip_Erase+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
		memset(write_data, 0xFF, sizeof(write_data));
 8000902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000906:	21ff      	movs	r1, #255	@ 0xff
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <Chip_Erase+0x94>)
 800090a:	f009 ffa9 	bl	800a860 <memset>
		USART1_Printf("Ferdig\r\n");
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <Chip_Erase+0x98>)
 8000910:	f000 fab2 	bl	8000e78 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 8000914:	e002      	b.n	800091c <Chip_Erase+0x74>
		USART1_Printf("Sletter IKKE minne\r\n");
 8000916:	480b      	ldr	r0, [pc, #44]	@ (8000944 <Chip_Erase+0x9c>)
 8000918:	f000 faae 	bl	8000e78 <USART1_Printf>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800b174 	.word	0x0800b174
 8000928:	24000ae8 	.word	0x24000ae8
 800092c:	0800b1a8 	.word	0x0800b1a8
 8000930:	240008cc 	.word	0x240008cc
 8000934:	240008c2 	.word	0x240008c2
 8000938:	240008ce 	.word	0x240008ce
 800093c:	24000018 	.word	0x24000018
 8000940:	0800b1bc 	.word	0x0800b1bc
 8000944:	0800b1c8 	.word	0x0800b1c8

08000948 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual USART
void Read_Data_Cont(uint16_t len){
 8000948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800094c:	b089      	sub	sp, #36	@ 0x24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	80fb      	strh	r3, [r7, #6]
 8000954:	466b      	mov	r3, sp
 8000956:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f9f9 	bl	8000d50 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 800095e:	88f9      	ldrh	r1, [r7, #6]
 8000960:	460b      	mov	r3, r1
 8000962:	3b01      	subs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	b28b      	uxth	r3, r1
 8000968:	2200      	movs	r2, #0
 800096a:	4698      	mov	r8, r3
 800096c:	4691      	mov	r9, r2
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800097e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000982:	b28b      	uxth	r3, r1
 8000984:	2200      	movs	r2, #0
 8000986:	461c      	mov	r4, r3
 8000988:	4615      	mov	r5, r2
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	00eb      	lsls	r3, r5, #3
 8000994:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000998:	00e2      	lsls	r2, r4, #3
 800099a:	460b      	mov	r3, r1
 800099c:	3307      	adds	r3, #7
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	ebad 0d03 	sub.w	sp, sp, r3
 80009a6:	466b      	mov	r3, sp
 80009a8:	3300      	adds	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <Read_Data_Cont+0x114>)
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <Read_Data_Cont+0x118>)
 80009b2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <Read_Data_Cont+0x118>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <Read_Data_Cont+0x118>)
 80009bc:	2200      	movs	r2, #0
 80009be:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <Read_Data_Cont+0x118>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	70da      	strb	r2, [r3, #3]
	csLOW();
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	4826      	ldr	r0, [pc, #152]	@ (8000a64 <Read_Data_Cont+0x11c>)
 80009cc:	f004 fecc 	bl	8005768 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 80009d0:	2364      	movs	r3, #100	@ 0x64
 80009d2:	2204      	movs	r2, #4
 80009d4:	4922      	ldr	r1, [pc, #136]	@ (8000a60 <Read_Data_Cont+0x118>)
 80009d6:	4824      	ldr	r0, [pc, #144]	@ (8000a68 <Read_Data_Cont+0x120>)
 80009d8:	f007 fe6a 	bl	80086b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 80009dc:	88fa      	ldrh	r2, [r7, #6]
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	68f9      	ldr	r1, [r7, #12]
 80009e4:	4820      	ldr	r0, [pc, #128]	@ (8000a68 <Read_Data_Cont+0x120>)
 80009e6:	f008 f851 	bl	8008a8c <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3303      	adds	r3, #3
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	330b      	adds	r3, #11
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a02:	e018      	b.n	8000a36 <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000a04:	8bf9      	ldrh	r1, [r7, #30]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <Read_Data_Cont+0x124>)
 8000a0c:	f000 fa34 	bl	8000e78 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	68f9      	ldr	r1, [r7, #12]
 8000a18:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <Read_Data_Cont+0x120>)
 8000a1a:	f008 f837 	bl	8008a8c <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3303      	adds	r3, #3
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	330b      	adds	r3, #11
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d103      	bne.n	8000a46 <Read_Data_Cont+0xfe>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	7bdb      	ldrb	r3, [r3, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0de      	beq.n	8000a04 <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <Read_Data_Cont+0x11c>)
 8000a4c:	f004 fe8c 	bl	8005768 <HAL_GPIO_WritePin>
 8000a50:	46b5      	mov	sp, r6
}
 8000a52:	bf00      	nop
 8000a54:	3724      	adds	r7, #36	@ 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a5c:	2400000f 	.word	0x2400000f
 8000a60:	240008b4 	.word	0x240008b4
 8000a64:	58020000 	.word	0x58020000
 8000a68:	240009d0 	.word	0x240009d0
 8000a6c:	0800b1e0 	.word	0x0800b1e0

08000a70 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	csLOW();
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <Write_Enable+0x30>)
 8000a7a:	f004 fe75 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000a7e:	2364      	movs	r3, #100	@ 0x64
 8000a80:	2201      	movs	r2, #1
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <Write_Enable+0x34>)
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <Write_Enable+0x38>)
 8000a86:	f007 fe13 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <Write_Enable+0x30>)
 8000a90:	f004 fe6a 	bl	8005768 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000a94:	2064      	movs	r0, #100	@ 0x64
 8000a96:	f000 f9c5 	bl	8000e24 <delay_ns>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	2400000a 	.word	0x2400000a
 8000aa8:	240009d0 	.word	0x240009d0

08000aac <Flash_Init>:
}

//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aba:	f001 faa1 	bl	8002000 <HAL_Delay>
	if(BUF){
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d012      	beq.n	8000aea <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <Flash_Init+0x98>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f83f 	bl	8000b4c <Read_Status_Register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <Flash_Init+0x98>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	7bba      	ldrb	r2, [r7, #14]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f864 	bl	8000bb0 <Write_Status_Register>
 8000ae8:	e011      	b.n	8000b0e <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <Flash_Init+0x98>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f82c 	bl	8000b4c <Read_Status_Register>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f023 0308 	bic.w	r3, r3, #8
 8000afe:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <Flash_Init+0x98>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f851 	bl	8000bb0 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <Flash_Init+0x9c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f81a 	bl	8000b4c <Read_Status_Register>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 8000b24:	7b7b      	ldrb	r3, [r7, #13]
 8000b26:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000b2a:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <Flash_Init+0x9c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	7b7a      	ldrb	r2, [r7, #13]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f83b 	bl	8000bb0 <Write_Status_Register>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000819 	.word	0x24000819
 8000b48:	24000818 	.word	0x24000818

08000b4c <Read_Status_Register>:

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <Read_Status_Register+0x50>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <Read_Status_Register+0x54>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <Read_Status_Register+0x54>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000b64:	2200      	movs	r2, #0
 8000b66:	2110      	movs	r1, #16
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <Read_Status_Register+0x58>)
 8000b6a:	f004 fdfd 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000b6e:	2364      	movs	r3, #100	@ 0x64
 8000b70:	2202      	movs	r2, #2
 8000b72:	490b      	ldr	r1, [pc, #44]	@ (8000ba0 <Read_Status_Register+0x54>)
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <Read_Status_Register+0x5c>)
 8000b76:	f007 fd9b 	bl	80086b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000b7a:	2364      	movs	r3, #100	@ 0x64
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	490b      	ldr	r1, [pc, #44]	@ (8000bac <Read_Status_Register+0x60>)
 8000b80:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <Read_Status_Register+0x5c>)
 8000b82:	f007 ff83 	bl	8008a8c <HAL_SPI_Receive>
	csHIGH();
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <Read_Status_Register+0x58>)
 8000b8c:	f004 fdec 	bl	8005768 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <Read_Status_Register+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000004 	.word	0x24000004
 8000ba0:	240008b4 	.word	0x240008b4
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	240009d0 	.word	0x240009d0
 8000bac:	240008bc 	.word	0x240008bc

08000bb0 <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <Write_Status_Register+0x4c>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <Write_Status_Register+0x50>)
 8000bc6:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <Write_Status_Register+0x50>)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000bce:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <Write_Status_Register+0x50>)
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <Write_Status_Register+0x54>)
 8000bda:	f004 fdc5 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	2203      	movs	r2, #3
 8000be2:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <Write_Status_Register+0x50>)
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <Write_Status_Register+0x58>)
 8000be6:	f007 fd63 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <Write_Status_Register+0x54>)
 8000bf0:	f004 fdba 	bl	8005768 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	24000005 	.word	0x24000005
 8000c00:	240008b4 	.word	0x240008b4
 8000c04:	58020000 	.word	0x58020000
 8000c08:	240009d0 	.word	0x240009d0

08000c0c <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2100      	movs	r1, #0
 8000c16:	460a      	mov	r2, r1
 8000c18:	801a      	strh	r2, [r3, #0]
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2110      	movs	r1, #16
 8000c22:	480f      	ldr	r0, [pc, #60]	@ (8000c60 <Read_ID+0x54>)
 8000c24:	f004 fda0 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000c28:	2364      	movs	r3, #100	@ 0x64
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <Read_ID+0x58>)
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <Read_ID+0x5c>)
 8000c30:	f007 fd3e 	bl	80086b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000c34:	1d39      	adds	r1, r7, #4
 8000c36:	2364      	movs	r3, #100	@ 0x64
 8000c38:	2203      	movs	r2, #3
 8000c3a:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <Read_ID+0x5c>)
 8000c3c:	f007 ff26 	bl	8008a8c <HAL_SPI_Receive>
	csHIGH();
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <Read_ID+0x54>)
 8000c46:	f004 fd8f 	bl	8005768 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000c4a:	793b      	ldrb	r3, [r7, #4]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	797b      	ldrb	r3, [r7, #5]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	79b9      	ldrb	r1, [r7, #6]
 8000c54:	430b      	orrs	r3, r1
 8000c56:	4313      	orrs	r3, r2
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58020000 	.word	0x58020000
 8000c64:	24000008 	.word	0x24000008
 8000c68:	240009d0 	.word	0x240009d0

08000c6c <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000c7c:	f7ff fef8 	bl	8000a70 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <Write_Data_Buffer+0x6c>)
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <Write_Data_Buffer+0x70>)
 8000c86:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <Write_Data_Buffer+0x70>)
 8000c92:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <Write_Data_Buffer+0x70>)
 8000c9a:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <Write_Data_Buffer+0x74>)
 8000ca2:	f004 fd61 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000ca6:	2364      	movs	r3, #100	@ 0x64
 8000ca8:	2203      	movs	r2, #3
 8000caa:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <Write_Data_Buffer+0x70>)
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <Write_Data_Buffer+0x78>)
 8000cae:	f007 fcff 	bl	80086b0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000cb2:	88ba      	ldrh	r2, [r7, #4]
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	6839      	ldr	r1, [r7, #0]
 8000cba:	480a      	ldr	r0, [pc, #40]	@ (8000ce4 <Write_Data_Buffer+0x78>)
 8000cbc:	f007 fcf8 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <Write_Data_Buffer+0x74>)
 8000cc6:	f004 fd4f 	bl	8005768 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cca:	2064      	movs	r0, #100	@ 0x64
 8000ccc:	f000 f8aa 	bl	8000e24 <delay_ns>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2400000c 	.word	0x2400000c
 8000cdc:	240008b4 	.word	0x240008b4
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	240009d0 	.word	0x240009d0

08000ce8 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <Write_Data_Flash+0x58>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <Write_Data_Flash+0x5c>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <Write_Data_Flash+0x5c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <Write_Data_Flash+0x5c>)
 8000d0a:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <Write_Data_Flash+0x5c>)
 8000d12:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d14:	2200      	movs	r2, #0
 8000d16:	2110      	movs	r1, #16
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <Write_Data_Flash+0x60>)
 8000d1a:	f004 fd25 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000d1e:	2364      	movs	r3, #100	@ 0x64
 8000d20:	2204      	movs	r2, #4
 8000d22:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <Write_Data_Flash+0x5c>)
 8000d24:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <Write_Data_Flash+0x64>)
 8000d26:	f007 fcc3 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <Write_Data_Flash+0x60>)
 8000d30:	f004 fd1a 	bl	8005768 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d34:	f000 f8c6 	bl	8000ec4 <W25N_WaitForReady>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2400000d 	.word	0x2400000d
 8000d44:	240008b4 	.word	0x240008b4
 8000d48:	58020000 	.word	0x58020000
 8000d4c:	240009d0 	.word	0x240009d0

08000d50 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <Select_Page_Read+0x58>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <Select_Page_Read+0x5c>)
 8000d60:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <Select_Page_Read+0x5c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <Select_Page_Read+0x5c>)
 8000d72:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <Select_Page_Read+0x5c>)
 8000d7a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <Select_Page_Read+0x60>)
 8000d82:	f004 fcf1 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000d86:	2364      	movs	r3, #100	@ 0x64
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <Select_Page_Read+0x5c>)
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <Select_Page_Read+0x64>)
 8000d8e:	f007 fc8f 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000d92:	2201      	movs	r2, #1
 8000d94:	2110      	movs	r1, #16
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <Select_Page_Read+0x60>)
 8000d98:	f004 fce6 	bl	8005768 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d9c:	f000 f892 	bl	8000ec4 <W25N_WaitForReady>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2400000e 	.word	0x2400000e
 8000dac:	240008b4 	.word	0x240008b4
 8000db0:	58020000 	.word	0x58020000
 8000db4:	240009d0 	.word	0x240009d0

08000db8 <Block_Erase>:
	csHIGH();
}

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000dc2:	f7ff fe55 	bl	8000a70 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <Block_Erase+0x5c>)
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <Block_Erase+0x60>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <Block_Erase+0x60>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <Block_Erase+0x60>)
 8000dde:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <Block_Erase+0x60>)
 8000de6:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000de8:	2200      	movs	r2, #0
 8000dea:	2110      	movs	r1, #16
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <Block_Erase+0x64>)
 8000dee:	f004 fcbb 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000df2:	2364      	movs	r3, #100	@ 0x64
 8000df4:	2204      	movs	r2, #4
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <Block_Erase+0x60>)
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <Block_Erase+0x68>)
 8000dfa:	f007 fc59 	bl	80086b0 <HAL_SPI_Transmit>
	csHIGH();
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <Block_Erase+0x64>)
 8000e04:	f004 fcb0 	bl	8005768 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000e08:	f000 f85c 	bl	8000ec4 <W25N_WaitForReady>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2400000b 	.word	0x2400000b
 8000e18:	240008b4 	.word	0x240008b4
 8000e1c:	58020000 	.word	0x58020000
 8000e20:	240009d0 	.word	0x240009d0

08000e24 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <delay_ns+0x48>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0a5b      	lsrs	r3, r3, #9
 8000e32:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <delay_ns+0x4c>)
 8000e34:	fba2 2303 	umull	r2, r3, r2, r3
 8000e38:	09db      	lsrs	r3, r3, #7
 8000e3a:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <delay_ns+0x50>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000e4c:	bf00      	nop
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <delay_ns+0x50>)
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f8      	bhi.n	8000e4e <delay_ns+0x2a>
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2400081c 	.word	0x2400081c
 8000e70:	00044b83 	.word	0x00044b83
 8000e74:	e0001000 	.word	0xe0001000

08000e78 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e78:	b40f      	push	{r0, r1, r2, r3}
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b0a2      	sub	sp, #136	@ 0x88
 8000e7e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e84:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e86:	f107 0008 	add.w	r0, r7, #8
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	f009 fcd7 	bl	800a844 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fa20 	bl	80002e0 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f107 0108 	add.w	r1, r7, #8
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <USART1_Printf+0x48>)
 8000eae:	f008 fbbc 	bl	800962a <HAL_UART_Transmit>
}
 8000eb2:	bf00      	nop
 8000eb4:	3788      	adds	r7, #136	@ 0x88
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr
 8000ec0:	24000ae8 	.word	0x24000ae8

08000ec4 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000ec8:	2064      	movs	r0, #100	@ 0x64
 8000eca:	f7ff ffab 	bl	8000e24 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000ece:	e002      	b.n	8000ed6 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000ed0:	2064      	movs	r0, #100	@ 0x64
 8000ed2:	f7ff ffa7 	bl	8000e24 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <W25N_WaitForReady+0x2c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe36 	bl	8000b4c <Read_Status_Register>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f2      	bne.n	8000ed0 <W25N_WaitForReady+0xc>
    }
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2400081a 	.word	0x2400081a

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fff0 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f890 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fa0a 	bl	8001318 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f04:	f000 f9e8 	bl	80012d8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f08:	f000 f990 	bl	800122c <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8000f0c:	f000 f904 	bl	8001118 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 fdf1 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 fdee 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f000 fdeb 	bl	8001af8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f22:	2101      	movs	r1, #1
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fe87 	bl	8001c38 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <main+0x110>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f30:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f32:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <main+0x110>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f38:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <main+0x110>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f3e:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <main+0x110>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f44:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <main+0x110>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f4a:	492e      	ldr	r1, [pc, #184]	@ (8001004 <main+0x110>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 ff03 	bl	8001d58 <BSP_COM_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <main+0x68>
  {
    Error_Handler();
 8000f58:	f000 fa86 	bl	8001468 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <main+0x114>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4a29      	ldr	r2, [pc, #164]	@ (8001008 <main+0x114>)
 8000f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f66:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <main+0x118>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a27      	ldr	r2, [pc, #156]	@ (800100c <main+0x118>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fd99 	bl	8000aac <Flash_Init>
  ID=Read_ID();
 8000f7a:	f7ff fe47 	bl	8000c0c <Read_ID>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <main+0x11c>)
 8000f84:	601a      	str	r2, [r3, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000f86:	f7ff fbcd 	bl	8000724 <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000f8a:	2364      	movs	r3, #100	@ 0x64
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4921      	ldr	r1, [pc, #132]	@ (8001014 <main+0x120>)
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <main+0x124>)
 8000f92:	f008 fbd8 	bl	8009746 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <main+0x120>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b31      	cmp	r3, #49	@ 0x31
 8000f9c:	d105      	bne.n	8000faa <main+0xb6>
		  Read_Data_Cont(16);
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f7ff fcd2 	bl	8000948 <Read_Data_Cont>
//		  Read_Data(15, Read_data);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
//		  Read_Data(1, &Read_data[0]);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
		  command = 0;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <main+0x120>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <main+0x120>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b32      	cmp	r3, #50	@ 0x32
 8000fb0:	d10c      	bne.n	8000fcc <main+0xd8>
		  Start_Flight_Recording=1;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <main+0x128>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8000fb8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fbc:	f7ff fb7e 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fe0f 	bl	8001be4 <BSP_LED_Toggle>
		  command=0;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <main+0x120>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <main+0x120>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b33      	cmp	r3, #51	@ 0x33
 8000fd2:	d10c      	bne.n	8000fee <main+0xfa>
		  Start_Flight_Recording=0;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <main+0x128>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8000fda:	f240 1001 	movw	r0, #257	@ 0x101
 8000fde:	f7ff fb6d 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fdfe 	bl	8001be4 <BSP_LED_Toggle>
		  command=0;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <main+0x120>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <main+0x120>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b34      	cmp	r3, #52	@ 0x34
 8000ff4:	d1c7      	bne.n	8000f86 <main+0x92>
		  Chip_Erase();
 8000ff6:	f7ff fc57 	bl	80008a8 <Chip_Erase>
		  command=0;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <main+0x120>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8001000:	e7c1      	b.n	8000f86 <main+0x92>
 8001002:	bf00      	nop
 8001004:	24000920 	.word	0x24000920
 8001008:	e000edf0 	.word	0xe000edf0
 800100c:	e0001000 	.word	0xe0001000
 8001010:	24000ad0 	.word	0x24000ad0
 8001014:	24000ad4 	.word	0x24000ad4
 8001018:	24000ae8 	.word	0x24000ae8
 800101c:	240008c1 	.word	0x240008c1

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	@ 0x70
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102a:	224c      	movs	r2, #76	@ 0x4c
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f009 fc16 	bl	800a860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2220      	movs	r2, #32
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f009 fc10 	bl	800a860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001040:	2002      	movs	r0, #2
 8001042:	f004 fbc5 	bl	80057d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <SystemClock_Config+0xf0>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a30      	ldr	r2, [pc, #192]	@ (8001110 <SystemClock_Config+0xf0>)
 8001050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <SystemClock_Config+0xf0>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <SystemClock_Config+0xf4>)
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <SystemClock_Config+0xf4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <SystemClock_Config+0xf4>)
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001078:	bf00      	nop
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xf0>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001086:	d1f8      	bne.n	800107a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800108c:	2301      	movs	r3, #1
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2340      	movs	r3, #64	@ 0x40
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010a0:	233c      	movs	r3, #60	@ 0x3c
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010a8:	2305      	movs	r3, #5
 80010aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010b0:	230c      	movs	r3, #12
 80010b2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fbbf 	bl	8005844 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010cc:	f000 f9cc 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	233f      	movs	r3, #63	@ 0x3f
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2303      	movs	r3, #3
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010dc:	2308      	movs	r3, #8
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ee:	2340      	movs	r3, #64	@ 0x40
 80010f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2104      	movs	r1, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fffe 	bl	80060f8 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001102:	f000 f9b1 	bl	8001468 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3770      	adds	r7, #112	@ 0x70
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	58024800 	.word	0x58024800
 8001114:	58000400 	.word	0x58000400

08001118 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800111e:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <MX_FDCAN1_Init+0x108>)
 8001120:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001124:	4a3e      	ldr	r2, [pc, #248]	@ (8001220 <MX_FDCAN1_Init+0x108>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800112e:	4b3c      	ldr	r3, [pc, #240]	@ (8001220 <MX_FDCAN1_Init+0x108>)
 8001130:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800113e:	4a3a      	ldr	r2, [pc, #232]	@ (8001228 <MX_FDCAN1_Init+0x110>)
 8001140:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001142:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001148:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001150:	2200      	movs	r2, #0
 8001152:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001154:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001156:	2200      	movs	r2, #0
 8001158:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800115c:	2200      	movs	r2, #0
 800115e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001162:	2201      	movs	r2, #1
 8001164:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001168:	2202      	movs	r2, #2
 800116a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800116c:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800116e:	220d      	movs	r2, #13
 8001170:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001172:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001174:	2202      	movs	r2, #2
 8001176:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001178:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800117a:	2201      	movs	r2, #1
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001180:	2207      	movs	r2, #7
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001186:	2208      	movs	r2, #8
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800118c:	2207      	movs	r2, #7
 800118e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011a4:	2240      	movs	r2, #64	@ 0x40
 80011a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011aa:	2204      	movs	r2, #4
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011e4:	480f      	ldr	r0, [pc, #60]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011e6:	f002 ffb7 	bl	8004158 <HAL_FDCAN_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80011f0:	f000 f93a 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 80011f6:	f003 f98d 	bl	8004514 <HAL_FDCAN_Start>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001200:	f000 f932 	bl	8001468 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	4806      	ldr	r0, [pc, #24]	@ (8001224 <MX_FDCAN1_Init+0x10c>)
 800120a:	f003 fb75 	bl	80048f8 <HAL_FDCAN_ActivateNotification>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001214:	f000 f928 	bl	8001468 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58024400 	.word	0x58024400
 8001224:	24000930 	.word	0x24000930
 8001228:	4000a000 	.word	0x4000a000

0800122c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001232:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <MX_SPI1_Init+0xa8>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001238:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001246:	2207      	movs	r2, #7
 8001248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001258:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800125c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001260:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001298:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_SPI1_Init+0xa4>)
 80012be:	f007 f8d3 	bl	8008468 <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012c8:	f000 f8ce 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	240009d0 	.word	0x240009d0
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <MX_DMA_Init+0x3c>)
 80012e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <MX_DMA_Init+0x3c>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_DMA_Init+0x3c>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	200b      	movs	r0, #11
 8001302:	f000 ff88 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001306:	200b      	movs	r0, #11
 8001308:	f000 ff9f 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58024400 	.word	0x58024400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b4a      	ldr	r3, [pc, #296]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133e:	4b46      	ldr	r3, [pc, #280]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134c:	4b42      	ldr	r3, [pc, #264]	@ (8001458 <MX_GPIO_Init+0x140>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	4a41      	ldr	r2, [pc, #260]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135c:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <MX_GPIO_Init+0x140>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <MX_GPIO_Init+0x140>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	4a39      	ldr	r2, [pc, #228]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137a:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <MX_GPIO_Init+0x140>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <MX_GPIO_Init+0x140>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138e:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <MX_GPIO_Init+0x140>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001398:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_GPIO_Init+0x140>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d4:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <MX_GPIO_Init+0x140>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2110      	movs	r1, #16
 80013e6:	481d      	ldr	r0, [pc, #116]	@ (800145c <MX_GPIO_Init+0x144>)
 80013e8:	f004 f9be 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	481b      	ldr	r0, [pc, #108]	@ (8001460 <MX_GPIO_Init+0x148>)
 80013f2:	f004 f9b9 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80013f6:	2310      	movs	r3, #16
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <MX_GPIO_Init+0x144>)
 800140e:	f003 fffb 	bl	8005408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001424:	2304      	movs	r3, #4
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001430:	f003 ffea 	bl	8005408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_GPIO_Init+0x148>)
 800144c:	f003 ffdc 	bl	8005408 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3730      	adds	r7, #48	@ 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58024400 	.word	0x58024400
 800145c:	58020000 	.word	0x58020000
 8001460:	58021000 	.word	0x58021000
 8001464:	58020400 	.word	0x58020400

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <Error_Handler+0x10>)
 800146e:	f003 f851 	bl	8004514 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000930 	.word	0x24000930

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_MspInit+0x30>)
 8001484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x30>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x30>)
 8001494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58024400 	.word	0x58024400

080014b0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ba      	sub	sp, #232	@ 0xe8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	22c0      	movs	r2, #192	@ 0xc0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f009 f9c5 	bl	800a860 <memset>
  if(hfdcan->Instance==FDCAN1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <HAL_FDCAN_MspInit+0xf8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d15e      	bne.n	800159e <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80014f0:	230a      	movs	r3, #10
 80014f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80014f8:	2314      	movs	r3, #20
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001500:	23c0      	movs	r3, #192	@ 0xc0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001504:	2320      	movs	r3, #32
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800150c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f005 f979 	bl	8006810 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001524:	f7ff ffa0 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 800152a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800152e:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001538:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 800153a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_FDCAN_MspInit+0xfc>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800157c:	2309      	movs	r3, #9
 800157e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001582:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001586:	4619      	mov	r1, r3
 8001588:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <HAL_FDCAN_MspInit+0x100>)
 800158a:	f003 ff3d 	bl	8005408 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2013      	movs	r0, #19
 8001594:	f000 fe3f 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001598:	2013      	movs	r0, #19
 800159a:	f000 fe56 	bl	800224a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800159e:	bf00      	nop
 80015a0:	37e8      	adds	r7, #232	@ 0xe8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	4000a000 	.word	0x4000a000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020c00 	.word	0x58020c00

080015b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0bc      	sub	sp, #240	@ 0xf0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	22c0      	movs	r2, #192	@ 0xc0
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f009 f943 	bl	800a860 <memset>
  if(hspi->Instance==SPI1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a53      	ldr	r2, [pc, #332]	@ (800172c <HAL_SPI_MspInit+0x178>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	f040 809f 	bne.w	8001724 <HAL_SPI_MspInit+0x170>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 f908 	bl	8006810 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001606:	f7ff ff2f 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800160a:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 800160c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001610:	4a47      	ldr	r2, [pc, #284]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 8001612:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800161a:	4b45      	ldr	r3, [pc, #276]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 800161c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	4a40      	ldr	r2, [pc, #256]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001638:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164c:	4a38      	ldr	r2, [pc, #224]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001656:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <HAL_SPI_MspInit+0x17c>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001664:	2360      	movs	r3, #96	@ 0x60
 8001666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167c:	2305      	movs	r3, #5
 800167e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001686:	4619      	mov	r1, r3
 8001688:	482a      	ldr	r0, [pc, #168]	@ (8001734 <HAL_SPI_MspInit+0x180>)
 800168a:	f003 febd 	bl	8005408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800168e:	2320      	movs	r3, #32
 8001690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a6:	2305      	movs	r3, #5
 80016a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b0:	4619      	mov	r1, r3
 80016b2:	4821      	ldr	r0, [pc, #132]	@ (8001738 <HAL_SPI_MspInit+0x184>)
 80016b4:	f003 fea8 	bl	8005408 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016ba:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <HAL_SPI_MspInit+0x18c>)
 80016bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016c0:	2226      	movs	r2, #38	@ 0x26
 80016c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016c6:	2240      	movs	r2, #64	@ 0x40
 80016c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016f8:	4810      	ldr	r0, [pc, #64]	@ (800173c <HAL_SPI_MspInit+0x188>)
 80016fa:	f000 fdc1 	bl	8002280 <HAL_DMA_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001704:	f7ff feb0 	bl	8001468 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_SPI_MspInit+0x188>)
 800170c:	679a      	str	r2, [r3, #120]	@ 0x78
 800170e:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <HAL_SPI_MspInit+0x188>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2023      	movs	r0, #35	@ 0x23
 800171a:	f000 fd7c 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800171e:	2023      	movs	r0, #35	@ 0x23
 8001720:	f000 fd93 	bl	800224a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001724:	bf00      	nop
 8001726:	37f0      	adds	r7, #240	@ 0xf0
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013000 	.word	0x40013000
 8001730:	58024400 	.word	0x58024400
 8001734:	58020000 	.word	0x58020000
 8001738:	58020400 	.word	0x58020400
 800173c:	24000a58 	.word	0x24000a58
 8001740:	40020010 	.word	0x40020010

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 fc10 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <SysTick_Handler+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <SysTick_Handler+0x1a>
	  CLK_SIM++;
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <SysTick_Handler+0x24>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <SysTick_Handler+0x24>)
 80017b0:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	240008c1 	.word	0x240008c1
 80017bc:	24000ad8 	.word	0x24000ad8

080017c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA1_Stream0_IRQHandler+0x10>)
 80017c6:	f001 fafd 	bl	8002dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	24000a58 	.word	0x24000a58

080017d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80017da:	f003 f907 	bl	80049ec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000930 	.word	0x24000930

080017e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <SPI1_IRQHandler+0x10>)
 80017ee:	f007 fbbf 	bl	8008f70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240009d0 	.word	0x240009d0

080017fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 fa8b 	bl	8001d1c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001816:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001818:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800181a:	2140      	movs	r1, #64	@ 0x40
 800181c:	4826      	ldr	r0, [pc, #152]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xac>)
 800181e:	f002 feff 	bl	8004620 <HAL_FDCAN_GetRxMessage>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d13f      	bne.n	80018a8 <HAL_FDCAN_RxFifo0Callback+0x9c>
		uint8_t Temp[16];

		Temp[0]=0xFF;
 8001828:	23ff      	movs	r3, #255	@ 0xff
 800182a:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	3301      	adds	r3, #1
 8001836:	b292      	uxth	r2, r2
 8001838:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001842:	785b      	ldrb	r3, [r3, #1]
 8001844:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800185a:	795b      	ldrb	r3, [r3, #5]
 800185c:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001860:	799b      	ldrb	r3, [r3, #6]
 8001862:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001866:	79db      	ldrb	r3, [r3, #7]
 8001868:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	b2db      	uxtb	r3, r3
 8001884:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0e1b      	lsrs	r3, r3, #24
 800188c:	b2db      	uxtb	r3, r3
 800188e:	75bb      	strb	r3, [r7, #22]
		Temp[15]=0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]

		//Write to flash if when start
		if(Start_Flight_Recording==1){
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_FDCAN_RxFifo0Callback+0x9c>
			Write_Data(Temp, sizeof(Temp));
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	2110      	movs	r1, #16
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff72 	bl	800078c <Write_Data>
		}
	}
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	240008c4 	.word	0x240008c4
 80018b4:	240008d4 	.word	0x240008d4
 80018b8:	24000930 	.word	0x24000930
 80018bc:	24000ad8 	.word	0x24000ad8
 80018c0:	240008c1 	.word	0x240008c1

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f008 ffbc 	bl	800a870 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	24080000 	.word	0x24080000
 8001924:	00000400 	.word	0x00000400
 8001928:	24000adc 	.word	0x24000adc
 800192c:	24000cc8 	.word	0x24000cc8

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001934:	4b43      	ldr	r3, [pc, #268]	@ (8001a44 <SystemInit+0x114>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193a:	4a42      	ldr	r2, [pc, #264]	@ (8001a44 <SystemInit+0x114>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <SystemInit+0x118>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	2b06      	cmp	r3, #6
 800194e:	d807      	bhi.n	8001960 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001950:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <SystemInit+0x118>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 030f 	bic.w	r3, r3, #15
 8001958:	4a3b      	ldr	r2, [pc, #236]	@ (8001a48 <SystemInit+0x118>)
 800195a:	f043 0307 	orr.w	r3, r3, #7
 800195e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001960:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <SystemInit+0x11c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a39      	ldr	r2, [pc, #228]	@ (8001a4c <SystemInit+0x11c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800196c:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <SystemInit+0x11c>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001972:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <SystemInit+0x11c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4935      	ldr	r1, [pc, #212]	@ (8001a4c <SystemInit+0x11c>)
 8001978:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <SystemInit+0x120>)
 800197a:	4013      	ands	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800197e:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <SystemInit+0x118>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800198a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <SystemInit+0x118>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 030f 	bic.w	r3, r3, #15
 8001992:	4a2d      	ldr	r2, [pc, #180]	@ (8001a48 <SystemInit+0x118>)
 8001994:	f043 0307 	orr.w	r3, r3, #7
 8001998:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800199a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a4c <SystemInit+0x11c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <SystemInit+0x11c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019a6:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <SystemInit+0x11c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019ac:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <SystemInit+0x11c>)
 80019ae:	4a29      	ldr	r2, [pc, #164]	@ (8001a54 <SystemInit+0x124>)
 80019b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <SystemInit+0x11c>)
 80019b4:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <SystemInit+0x128>)
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <SystemInit+0x11c>)
 80019ba:	4a28      	ldr	r2, [pc, #160]	@ (8001a5c <SystemInit+0x12c>)
 80019bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <SystemInit+0x11c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019c4:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <SystemInit+0x11c>)
 80019c6:	4a25      	ldr	r2, [pc, #148]	@ (8001a5c <SystemInit+0x12c>)
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <SystemInit+0x11c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <SystemInit+0x11c>)
 80019d2:	4a22      	ldr	r2, [pc, #136]	@ (8001a5c <SystemInit+0x12c>)
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <SystemInit+0x11c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <SystemInit+0x11c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a4c <SystemInit+0x11c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <SystemInit+0x11c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <SystemInit+0x130>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <SystemInit+0x134>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019fa:	d202      	bcs.n	8001a02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <SystemInit+0x138>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <SystemInit+0x11c>)
 8001a04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d113      	bne.n	8001a38 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <SystemInit+0x11c>)
 8001a12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <SystemInit+0x11c>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <SystemInit+0x13c>)
 8001a22:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a26:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <SystemInit+0x11c>)
 8001a2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a2e:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <SystemInit+0x11c>)
 8001a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	52002000 	.word	0x52002000
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a54:	02020200 	.word	0x02020200
 8001a58:	01ff0000 	.word	0x01ff0000
 8001a5c:	01010280 	.word	0x01010280
 8001a60:	5c001000 	.word	0x5c001000
 8001a64:	ffff0000 	.word	0xffff0000
 8001a68:	51008108 	.word	0x51008108
 8001a6c:	52004000 	.word	0x52004000

08001a70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <ExitRun0Mode+0x2c>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <ExitRun0Mode+0x2c>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a80:	bf00      	nop
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <ExitRun0Mode+0x2c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f9      	beq.n	8001a82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	58024800 	.word	0x58024800

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001adc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001aa4:	f7ff ffe4 	bl	8001a70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa8:	f7ff ff42 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f008 fed3 	bl	800a87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fa0d 	bl	8000ef4 <main>
  bx  lr
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ae0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae4:	24000898 	.word	0x24000898
  ldr r2, =_sidata
 8001ae8:	0800b2dc 	.word	0x0800b2dc
  ldr r2, =_sbss
 8001aec:	24000898 	.word	0x24000898
  ldr r4, =_ebss
 8001af0:	24000cc8 	.word	0x24000cc8

08001af4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC3_IRQHandler>
	...

08001af8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <BSP_LED_Init+0x28>
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d006      	beq.n	8001b20 <BSP_LED_Init+0x28>
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d003      	beq.n	8001b20 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b18:	f06f 0301 	mvn.w	r3, #1
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1e:	e055      	b.n	8001bcc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001b26:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	e021      	b.n	8001b8a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10f      	bne.n	8001b6c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b52:	4a21      	ldr	r2, [pc, #132]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	e00e      	b.n	8001b8a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b72:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <BSP_LED_Init+0xe0>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <BSP_LED_Init+0xe4>)
 8001b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b92:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8001be0 <BSP_LED_Init+0xe8>)
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	f107 0218 	add.w	r2, r7, #24
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fc2a 	bl	8005408 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <BSP_LED_Init+0xe8>)
 8001bb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <BSP_LED_Init+0xe4>)
 8001bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f003 fdce 	bl	8005768 <HAL_GPIO_WritePin>
  }

  return ret;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	0800b25c 	.word	0x0800b25c
 8001be0:	24000828 	.word	0x24000828

08001be4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <BSP_LED_Toggle+0x28>
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d006      	beq.n	8001c0c <BSP_LED_Toggle+0x28>
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d003      	beq.n	8001c0c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c04:	f06f 0301 	mvn.w	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e00b      	b.n	8001c24 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <BSP_LED_Toggle+0x4c>)
 8001c10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <BSP_LED_Toggle+0x50>)
 8001c18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f003 fdbb 	bl	800579a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000828 	.word	0x24000828
 8001c34:	0800b25c 	.word	0x0800b25c

08001c38 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <BSP_PB_Init+0xcc>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <BSP_PB_Init+0xcc>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c58:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <BSP_PB_Init+0xcc>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <BSP_PB_Init+0xd0>)
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	f107 020c 	add.w	r2, r7, #12
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fbbb 	bl	8005408 <HAL_GPIO_Init>
 8001c92:	e031      	b.n	8001cf8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c98:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <BSP_PB_Init+0xd0>)
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fbad 	bl	8005408 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4a16      	ldr	r2, [pc, #88]	@ (8001d0c <BSP_PB_Init+0xd4>)
 8001cb4:	441a      	add	r2, r3
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4915      	ldr	r1, [pc, #84]	@ (8001d10 <BSP_PB_Init+0xd8>)
 8001cba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f002 fa04 	bl	80040ce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <BSP_PB_Init+0xd4>)
 8001ccc:	1898      	adds	r0, r3, r2
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <BSP_PB_Init+0xdc>)
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f002 f9d9 	bl	8004090 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001cde:	2028      	movs	r0, #40	@ 0x28
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <BSP_PB_Init+0xe0>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f000 fa93 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001cf0:	2328      	movs	r3, #40	@ 0x28
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 faa9 	bl	800224a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	58024400 	.word	0x58024400
 8001d08:	24000834 	.word	0x24000834
 8001d0c:	24000ae0 	.word	0x24000ae0
 8001d10:	0800b264 	.word	0x0800b264
 8001d14:	24000838 	.word	0x24000838
 8001d18:	2400083c 	.word	0x2400083c

08001d1c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <BSP_PB_IRQHandler+0x20>)
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 f9e2 	bl	80040f8 <HAL_EXTI_IRQHandler>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24000ae0 	.word	0x24000ae0

08001d40 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d6e:	f06f 0301 	mvn.w	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e018      	b.n	8001da8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2294      	movs	r2, #148	@ 0x94
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <BSP_COM_Init+0x5c>)
 8001d80:	4413      	add	r3, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f852 	bl	8001e2c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2294      	movs	r2, #148	@ 0x94
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <BSP_COM_Init+0x5c>)
 8001d92:	4413      	add	r3, r2
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f80e 	bl	8001db8 <MX_USART3_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001da2:	f06f 0303 	mvn.w	r3, #3
 8001da6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000ae8 	.word	0x24000ae8

08001db8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <MX_USART3_Init+0x60>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	895b      	ldrh	r3, [r3, #10]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	891b      	ldrh	r3, [r3, #8]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	899b      	ldrh	r3, [r3, #12]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e04:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 fbb5 	bl	8009576 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000824 	.word	0x24000824

08001e1c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff ff8d 	bl	8001d40 <BSP_PB_Callback>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3a:	4a26      	ldr	r2, [pc, #152]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <COM1_MspInit+0xa8>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e92:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <COM1_MspInit+0xac>)
 8001eac:	f003 faac 	bl	8005408 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <COM1_MspInit+0xac>)
 8001ec6:	f003 fa9f 	bl	8005408 <HAL_GPIO_Init>
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58020c00 	.word	0x58020c00

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f000 f98c 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ee8:	f004 fabc 	bl	8006464 <HAL_RCC_GetSysClockFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_Init+0x68>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	4913      	ldr	r1, [pc, #76]	@ (8001f48 <HAL_Init+0x6c>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_Init+0x68>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <HAL_Init+0x6c>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_Init+0x70>)
 8001f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f20:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <HAL_Init+0x74>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f814 	bl	8001f54 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e002      	b.n	8001f3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f36:	f7ff faa1 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58024400 	.word	0x58024400
 8001f48:	0800b24c 	.word	0x0800b24c
 8001f4c:	24000820 	.word	0x24000820
 8001f50:	2400081c 	.word	0x2400081c

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_InitTick+0x60>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e021      	b.n	8001fac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_InitTick+0x64>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_InitTick+0x60>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f971 	bl	8002266 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f93b 	bl	8002216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <HAL_InitTick+0x68>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	24000844 	.word	0x24000844
 8001fb8:	2400081c 	.word	0x2400081c
 8001fbc:	24000840 	.word	0x24000840

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	24000844 	.word	0x24000844
 8001fe4:	24000b7c 	.word	0x24000b7c

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	24000b7c 	.word	0x24000b7c

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	24000844 	.word	0x24000844

08002048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_GetREVID+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0c1b      	lsrs	r3, r3, #16
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	5c001000 	.word	0x5c001000

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	4313      	orrs	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	05fa0000 	.word	0x05fa0000

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	@ (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	@ (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f7ff ff8e 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff29 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff40 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff90 	bl	8002154 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5f 	bl	8002100 <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff33 	bl	80020c4 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa4 	bl	80021bc <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff feae 	bl	8001fe8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e316      	b.n	80028c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a66      	ldr	r2, [pc, #408]	@ (8002438 <HAL_DMA_Init+0x1b8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d04a      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a65      	ldr	r2, [pc, #404]	@ (800243c <HAL_DMA_Init+0x1bc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d045      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a63      	ldr	r2, [pc, #396]	@ (8002440 <HAL_DMA_Init+0x1c0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d040      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a62      	ldr	r2, [pc, #392]	@ (8002444 <HAL_DMA_Init+0x1c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d03b      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a60      	ldr	r2, [pc, #384]	@ (8002448 <HAL_DMA_Init+0x1c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d036      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a5f      	ldr	r2, [pc, #380]	@ (800244c <HAL_DMA_Init+0x1cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d031      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002450 <HAL_DMA_Init+0x1d0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02c      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002454 <HAL_DMA_Init+0x1d4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d027      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002458 <HAL_DMA_Init+0x1d8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d022      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a59      	ldr	r2, [pc, #356]	@ (800245c <HAL_DMA_Init+0x1dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01d      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <HAL_DMA_Init+0x1e0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d018      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_DMA_Init+0x1e4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a54      	ldr	r2, [pc, #336]	@ (8002468 <HAL_DMA_Init+0x1e8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00e      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a53      	ldr	r2, [pc, #332]	@ (800246c <HAL_DMA_Init+0x1ec>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a51      	ldr	r2, [pc, #324]	@ (8002470 <HAL_DMA_Init+0x1f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a50      	ldr	r2, [pc, #320]	@ (8002474 <HAL_DMA_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_DMA_Init+0xbc>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_DMA_Init+0xbe>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 813b 	beq.w	80025ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_Init+0x1b8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a36      	ldr	r2, [pc, #216]	@ (800243c <HAL_DMA_Init+0x1bc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_Init+0x1c0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	@ (8002444 <HAL_DMA_Init+0x1c4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_Init+0x1c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a30      	ldr	r2, [pc, #192]	@ (800244c <HAL_DMA_Init+0x1cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <HAL_DMA_Init+0x1d0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_DMA_Init+0x1d4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <HAL_DMA_Init+0x1d8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <HAL_DMA_Init+0x1dc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_DMA_Init+0x1e0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_DMA_Init+0x1e4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <HAL_DMA_Init+0x1e8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_DMA_Init+0x1ec>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <HAL_DMA_Init+0x1f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_DMA_Init+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <HAL_DMA_Init+0x186>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_DMA_Init+0x196>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002416:	e02f      	b.n	8002478 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002418:	f7ff fde6 	bl	8001fe8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d928      	bls.n	8002478 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e246      	b.n	80028c6 <HAL_DMA_Init+0x646>
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1c8      	bne.n	8002418 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4b83      	ldr	r3, [pc, #524]	@ (80026a0 <HAL_DMA_Init+0x420>)
 8002492:	4013      	ands	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800249e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	4313      	orrs	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024dc:	4b71      	ldr	r3, [pc, #452]	@ (80026a4 <HAL_DMA_Init+0x424>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b71      	ldr	r3, [pc, #452]	@ (80026a8 <HAL_DMA_Init+0x428>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024e8:	d328      	bcc.n	800253c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b28      	cmp	r3, #40	@ 0x28
 80024f0:	d903      	bls.n	80024fa <HAL_DMA_Init+0x27a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80024f8:	d917      	bls.n	800252a <HAL_DMA_Init+0x2aa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8002500:	d903      	bls.n	800250a <HAL_DMA_Init+0x28a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b42      	cmp	r3, #66	@ 0x42
 8002508:	d90f      	bls.n	800252a <HAL_DMA_Init+0x2aa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b46      	cmp	r3, #70	@ 0x46
 8002510:	d903      	bls.n	800251a <HAL_DMA_Init+0x29a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b48      	cmp	r3, #72	@ 0x48
 8002518:	d907      	bls.n	800252a <HAL_DMA_Init+0x2aa>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002520:	d905      	bls.n	800252e <HAL_DMA_Init+0x2ae>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b52      	cmp	r3, #82	@ 0x52
 8002528:	d801      	bhi.n	800252e <HAL_DMA_Init+0x2ae>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_DMA_Init+0x2b0>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800253a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	2b04      	cmp	r3, #4
 8002564:	d117      	bne.n	8002596 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f001 fbff 	bl	8003d7c <DMA_CheckFifoParam>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2240      	movs	r2, #64	@ 0x40
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e197      	b.n	80028c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f001 fb3a 	bl	8003c18 <DMA_CalcBaseAndBitshift>
 80025a4:	4603      	mov	r3, r0
 80025a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	223f      	movs	r2, #63	@ 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e0cd      	b.n	8002756 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3b      	ldr	r2, [pc, #236]	@ (80026ac <HAL_DMA_Init+0x42c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a39      	ldr	r2, [pc, #228]	@ (80026b0 <HAL_DMA_Init+0x430>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a38      	ldr	r2, [pc, #224]	@ (80026b4 <HAL_DMA_Init+0x434>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a36      	ldr	r2, [pc, #216]	@ (80026b8 <HAL_DMA_Init+0x438>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <HAL_DMA_Init+0x43c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a33      	ldr	r2, [pc, #204]	@ (80026c0 <HAL_DMA_Init+0x440>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_Init+0x38a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a32      	ldr	r2, [pc, #200]	@ (80026c4 <HAL_DMA_Init+0x444>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_Init+0x38a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a30      	ldr	r2, [pc, #192]	@ (80026c8 <HAL_DMA_Init+0x448>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_DMA_Init+0x38e>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_DMA_Init+0x390>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8097 	beq.w	8002744 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a24      	ldr	r2, [pc, #144]	@ (80026ac <HAL_DMA_Init+0x42c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d021      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <HAL_DMA_Init+0x430>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01c      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <HAL_DMA_Init+0x434>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d017      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <HAL_DMA_Init+0x438>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d012      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_DMA_Init+0x43c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00d      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <HAL_DMA_Init+0x440>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d008      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <HAL_DMA_Init+0x444>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <HAL_DMA_Init+0x3e4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_DMA_Init+0x448>)
 8002662:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <HAL_DMA_Init+0x44c>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b40      	cmp	r3, #64	@ 0x40
 800268a:	d021      	beq.n	80026d0 <HAL_DMA_Init+0x450>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b80      	cmp	r3, #128	@ 0x80
 8002692:	d102      	bne.n	800269a <HAL_DMA_Init+0x41a>
 8002694:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002698:	e01b      	b.n	80026d2 <HAL_DMA_Init+0x452>
 800269a:	2300      	movs	r3, #0
 800269c:	e019      	b.n	80026d2 <HAL_DMA_Init+0x452>
 800269e:	bf00      	nop
 80026a0:	fe10803f 	.word	0xfe10803f
 80026a4:	5c001000 	.word	0x5c001000
 80026a8:	ffff0000 	.word	0xffff0000
 80026ac:	58025408 	.word	0x58025408
 80026b0:	5802541c 	.word	0x5802541c
 80026b4:	58025430 	.word	0x58025430
 80026b8:	58025444 	.word	0x58025444
 80026bc:	58025458 	.word	0x58025458
 80026c0:	5802546c 	.word	0x5802546c
 80026c4:	58025480 	.word	0x58025480
 80026c8:	58025494 	.word	0x58025494
 80026cc:	fffe000f 	.word	0xfffe000f
 80026d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68d2      	ldr	r2, [r2, #12]
 80026d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002700:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b6e      	ldr	r3, [pc, #440]	@ (80028d0 <HAL_DMA_Init+0x650>)
 8002718:	4413      	add	r3, r2
 800271a:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_DMA_Init+0x654>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	009a      	lsls	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f001 fa75 	bl	8003c18 <DMA_CalcBaseAndBitshift>
 800272e:	4603      	mov	r3, r0
 8002730:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e008      	b.n	8002756 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2240      	movs	r2, #64	@ 0x40
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0b7      	b.n	80028c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <HAL_DMA_Init+0x658>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d072      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5d      	ldr	r2, [pc, #372]	@ (80028dc <HAL_DMA_Init+0x65c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d06d      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_DMA_Init+0x660>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d068      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5a      	ldr	r2, [pc, #360]	@ (80028e4 <HAL_DMA_Init+0x664>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d063      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <HAL_DMA_Init+0x668>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d05e      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a57      	ldr	r2, [pc, #348]	@ (80028ec <HAL_DMA_Init+0x66c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d059      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_DMA_Init+0x670>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d054      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a54      	ldr	r2, [pc, #336]	@ (80028f4 <HAL_DMA_Init+0x674>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d04f      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a53      	ldr	r2, [pc, #332]	@ (80028f8 <HAL_DMA_Init+0x678>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d04a      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a51      	ldr	r2, [pc, #324]	@ (80028fc <HAL_DMA_Init+0x67c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d045      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a50      	ldr	r2, [pc, #320]	@ (8002900 <HAL_DMA_Init+0x680>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d040      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002904 <HAL_DMA_Init+0x684>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d03b      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002908 <HAL_DMA_Init+0x688>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d036      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	@ (800290c <HAL_DMA_Init+0x68c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002910 <HAL_DMA_Init+0x690>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d02c      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_DMA_Init+0x694>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d027      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a47      	ldr	r2, [pc, #284]	@ (8002918 <HAL_DMA_Init+0x698>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a45      	ldr	r2, [pc, #276]	@ (800291c <HAL_DMA_Init+0x69c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01d      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a44      	ldr	r2, [pc, #272]	@ (8002920 <HAL_DMA_Init+0x6a0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a42      	ldr	r2, [pc, #264]	@ (8002924 <HAL_DMA_Init+0x6a4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a41      	ldr	r2, [pc, #260]	@ (8002928 <HAL_DMA_Init+0x6a8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <HAL_DMA_Init+0x6ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3e      	ldr	r2, [pc, #248]	@ (8002930 <HAL_DMA_Init+0x6b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_DMA_Init+0x5c6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3c      	ldr	r2, [pc, #240]	@ (8002934 <HAL_DMA_Init+0x6b4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_DMA_Init+0x5ca>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_DMA_Init+0x5cc>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f001 fb0f 	bl	8003e74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b80      	cmp	r3, #128	@ 0x80
 800285c:	d102      	bne.n	8002864 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002878:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HAL_DMA_Init+0x624>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d80c      	bhi.n	80028a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f001 fb8c 	bl	8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e008      	b.n	80028b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	a7fdabf8 	.word	0xa7fdabf8
 80028d4:	cccccccd 	.word	0xcccccccd
 80028d8:	40020010 	.word	0x40020010
 80028dc:	40020028 	.word	0x40020028
 80028e0:	40020040 	.word	0x40020040
 80028e4:	40020058 	.word	0x40020058
 80028e8:	40020070 	.word	0x40020070
 80028ec:	40020088 	.word	0x40020088
 80028f0:	400200a0 	.word	0x400200a0
 80028f4:	400200b8 	.word	0x400200b8
 80028f8:	40020410 	.word	0x40020410
 80028fc:	40020428 	.word	0x40020428
 8002900:	40020440 	.word	0x40020440
 8002904:	40020458 	.word	0x40020458
 8002908:	40020470 	.word	0x40020470
 800290c:	40020488 	.word	0x40020488
 8002910:	400204a0 	.word	0x400204a0
 8002914:	400204b8 	.word	0x400204b8
 8002918:	58025408 	.word	0x58025408
 800291c:	5802541c 	.word	0x5802541c
 8002920:	58025430 	.word	0x58025430
 8002924:	58025444 	.word	0x58025444
 8002928:	58025458 	.word	0x58025458
 800292c:	5802546c 	.word	0x5802546c
 8002930:	58025480 	.word	0x58025480
 8002934:	58025494 	.word	0x58025494

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e237      	b.n	8002dba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e22c      	b.n	8002dba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad8 <HAL_DMA_Abort_IT+0x1a0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d04a      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5b      	ldr	r2, [pc, #364]	@ (8002adc <HAL_DMA_Abort_IT+0x1a4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d045      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a59      	ldr	r2, [pc, #356]	@ (8002ae0 <HAL_DMA_Abort_IT+0x1a8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d040      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a58      	ldr	r2, [pc, #352]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d03b      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a56      	ldr	r2, [pc, #344]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1b0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a55      	ldr	r2, [pc, #340]	@ (8002aec <HAL_DMA_Abort_IT+0x1b4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a53      	ldr	r2, [pc, #332]	@ (8002af0 <HAL_DMA_Abort_IT+0x1b8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02c      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_DMA_Abort_IT+0x1bc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d027      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a50      	ldr	r2, [pc, #320]	@ (8002af8 <HAL_DMA_Abort_IT+0x1c0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a4f      	ldr	r2, [pc, #316]	@ (8002afc <HAL_DMA_Abort_IT+0x1c4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d01d      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b00 <HAL_DMA_Abort_IT+0x1c8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002b04 <HAL_DMA_Abort_IT+0x1cc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002b08 <HAL_DMA_Abort_IT+0x1d0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a49      	ldr	r2, [pc, #292]	@ (8002b0c <HAL_DMA_Abort_IT+0x1d4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a47      	ldr	r2, [pc, #284]	@ (8002b10 <HAL_DMA_Abort_IT+0x1d8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a46      	ldr	r2, [pc, #280]	@ (8002b14 <HAL_DMA_Abort_IT+0x1dc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Abort_IT+0xcc>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_Abort_IT+0xce>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8086 	beq.w	8002b18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad8 <HAL_DMA_Abort_IT+0x1a0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2e      	ldr	r2, [pc, #184]	@ (8002adc <HAL_DMA_Abort_IT+0x1a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d045      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d03b      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d036      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_DMA_Abort_IT+0x1b4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <HAL_DMA_Abort_IT+0x1b8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02c      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_DMA_Abort_IT+0x1bc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d027      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a23      	ldr	r2, [pc, #140]	@ (8002af8 <HAL_DMA_Abort_IT+0x1c0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_DMA_Abort_IT+0x1c4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01d      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	@ (8002b00 <HAL_DMA_Abort_IT+0x1c8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_DMA_Abort_IT+0x1cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	@ (8002b08 <HAL_DMA_Abort_IT+0x1d0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_DMA_Abort_IT+0x1d4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <HAL_DMA_Abort_IT+0x1d8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_DMA_Abort_IT+0x1dc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <HAL_DMA_Abort_IT+0x18e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e178      	b.n	8002db8 <HAL_DMA_Abort_IT+0x480>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e16f      	b.n	8002db8 <HAL_DMA_Abort_IT+0x480>
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020e 	bic.w	r2, r2, #14
 8002b26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6c      	ldr	r2, [pc, #432]	@ (8002ce0 <HAL_DMA_Abort_IT+0x3a8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d04a      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce4 <HAL_DMA_Abort_IT+0x3ac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d045      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a69      	ldr	r2, [pc, #420]	@ (8002ce8 <HAL_DMA_Abort_IT+0x3b0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d040      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a68      	ldr	r2, [pc, #416]	@ (8002cec <HAL_DMA_Abort_IT+0x3b4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d03b      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a66      	ldr	r2, [pc, #408]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3b8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d036      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3bc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d031      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a63      	ldr	r2, [pc, #396]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3c0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d02c      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a62      	ldr	r2, [pc, #392]	@ (8002cfc <HAL_DMA_Abort_IT+0x3c4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d027      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	@ (8002d00 <HAL_DMA_Abort_IT+0x3c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d022      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_DMA_Abort_IT+0x3cc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d01d      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	@ (8002d08 <HAL_DMA_Abort_IT+0x3d0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d0c <HAL_DMA_Abort_IT+0x3d4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d10 <HAL_DMA_Abort_IT+0x3d8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a59      	ldr	r2, [pc, #356]	@ (8002d14 <HAL_DMA_Abort_IT+0x3dc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	@ (8002d18 <HAL_DMA_Abort_IT+0x3e0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x290>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a56      	ldr	r2, [pc, #344]	@ (8002d1c <HAL_DMA_Abort_IT+0x3e4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <HAL_DMA_Abort_IT+0x2a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_DMA_Abort_IT+0x2b2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce0 <HAL_DMA_Abort_IT+0x3a8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d072      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce4 <HAL_DMA_Abort_IT+0x3ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d06d      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a39      	ldr	r2, [pc, #228]	@ (8002ce8 <HAL_DMA_Abort_IT+0x3b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d068      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a37      	ldr	r2, [pc, #220]	@ (8002cec <HAL_DMA_Abort_IT+0x3b4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d063      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a36      	ldr	r2, [pc, #216]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3b8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d05e      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a34      	ldr	r2, [pc, #208]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3bc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d059      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a33      	ldr	r2, [pc, #204]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3c0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d054      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a31      	ldr	r2, [pc, #196]	@ (8002cfc <HAL_DMA_Abort_IT+0x3c4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04f      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a30      	ldr	r2, [pc, #192]	@ (8002d00 <HAL_DMA_Abort_IT+0x3c8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04a      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2e      	ldr	r2, [pc, #184]	@ (8002d04 <HAL_DMA_Abort_IT+0x3cc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d045      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2d      	ldr	r2, [pc, #180]	@ (8002d08 <HAL_DMA_Abort_IT+0x3d0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d0c <HAL_DMA_Abort_IT+0x3d4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d03b      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2a      	ldr	r2, [pc, #168]	@ (8002d10 <HAL_DMA_Abort_IT+0x3d8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <HAL_DMA_Abort_IT+0x3dc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d031      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a27      	ldr	r2, [pc, #156]	@ (8002d18 <HAL_DMA_Abort_IT+0x3e0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	@ (8002d1c <HAL_DMA_Abort_IT+0x3e4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a24      	ldr	r2, [pc, #144]	@ (8002d20 <HAL_DMA_Abort_IT+0x3e8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d022      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <HAL_DMA_Abort_IT+0x3ec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <HAL_DMA_Abort_IT+0x3f0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <HAL_DMA_Abort_IT+0x3f4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <HAL_DMA_Abort_IT+0x3f8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <HAL_DMA_Abort_IT+0x3fc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <HAL_DMA_Abort_IT+0x400>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Abort_IT+0x3a2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	@ (8002d3c <HAL_DMA_Abort_IT+0x404>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d132      	bne.n	8002d40 <HAL_DMA_Abort_IT+0x408>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e031      	b.n	8002d42 <HAL_DMA_Abort_IT+0x40a>
 8002cde:	bf00      	nop
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
 8002d20:	58025408 	.word	0x58025408
 8002d24:	5802541c 	.word	0x5802541c
 8002d28:	58025430 	.word	0x58025430
 8002d2c:	58025444 	.word	0x58025444
 8002d30:	58025458 	.word	0x58025458
 8002d34:	5802546c 	.word	0x5802546c
 8002d38:	58025480 	.word	0x58025480
 8002d3c:	58025494 	.word	0x58025494
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd0:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_DMA_IRQHandler+0x1ac>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a67      	ldr	r2, [pc, #412]	@ (8002f74 <HAL_DMA_IRQHandler+0x1b0>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8002f78 <HAL_DMA_IRQHandler+0x1b4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d04a      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	@ (8002f7c <HAL_DMA_IRQHandler+0x1b8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d045      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002f80 <HAL_DMA_IRQHandler+0x1bc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d040      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5a      	ldr	r2, [pc, #360]	@ (8002f84 <HAL_DMA_IRQHandler+0x1c0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d03b      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a59      	ldr	r2, [pc, #356]	@ (8002f88 <HAL_DMA_IRQHandler+0x1c4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d036      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a57      	ldr	r2, [pc, #348]	@ (8002f8c <HAL_DMA_IRQHandler+0x1c8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d031      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_DMA_IRQHandler+0x1cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d02c      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a54      	ldr	r2, [pc, #336]	@ (8002f94 <HAL_DMA_IRQHandler+0x1d0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d027      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a53      	ldr	r2, [pc, #332]	@ (8002f98 <HAL_DMA_IRQHandler+0x1d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a51      	ldr	r2, [pc, #324]	@ (8002f9c <HAL_DMA_IRQHandler+0x1d8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a50      	ldr	r2, [pc, #320]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1dc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1e0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fac <HAL_DMA_IRQHandler+0x1e8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1ec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xd2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a48      	ldr	r2, [pc, #288]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_IRQHandler+0xd6>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_DMA_IRQHandler+0xd8>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 842b 	beq.w	80036f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a2 	beq.w	8002ffc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f78 <HAL_DMA_IRQHandler+0x1b4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f7c <HAL_DMA_IRQHandler+0x1b8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f80 <HAL_DMA_IRQHandler+0x1bc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2a      	ldr	r2, [pc, #168]	@ (8002f84 <HAL_DMA_IRQHandler+0x1c0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	@ (8002f88 <HAL_DMA_IRQHandler+0x1c4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a27      	ldr	r2, [pc, #156]	@ (8002f8c <HAL_DMA_IRQHandler+0x1c8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a25      	ldr	r2, [pc, #148]	@ (8002f90 <HAL_DMA_IRQHandler+0x1cc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a24      	ldr	r2, [pc, #144]	@ (8002f94 <HAL_DMA_IRQHandler+0x1d0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_DMA_IRQHandler+0x1d4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <HAL_DMA_IRQHandler+0x1d8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1dc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1e0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1e4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fac <HAL_DMA_IRQHandler+0x1e8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1ec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x194>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d12f      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x1f4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e02e      	b.n	8002fcc <HAL_DMA_IRQHandler+0x208>
 8002f6e:	bf00      	nop
 8002f70:	2400081c 	.word	0x2400081c
 8002f74:	1b4e81b5 	.word	0x1b4e81b5
 8002f78:	40020010 	.word	0x40020010
 8002f7c:	40020028 	.word	0x40020028
 8002f80:	40020040 	.word	0x40020040
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020070 	.word	0x40020070
 8002f8c:	40020088 	.word	0x40020088
 8002f90:	400200a0 	.word	0x400200a0
 8002f94:	400200b8 	.word	0x400200b8
 8002f98:	40020410 	.word	0x40020410
 8002f9c:	40020428 	.word	0x40020428
 8002fa0:	40020440 	.word	0x40020440
 8002fa4:	40020458 	.word	0x40020458
 8002fa8:	40020470 	.word	0x40020470
 8002fac:	40020488 	.word	0x40020488
 8002fb0:	400204a0 	.word	0x400204a0
 8002fb4:	400204b8 	.word	0x400204b8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2208      	movs	r2, #8
 8002fea:	409a      	lsls	r2, r3
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06e      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a69      	ldr	r2, [pc, #420]	@ (80031bc <HAL_DMA_IRQHandler+0x3f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a67      	ldr	r2, [pc, #412]	@ (80031c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a66      	ldr	r2, [pc, #408]	@ (80031c4 <HAL_DMA_IRQHandler+0x400>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a64      	ldr	r2, [pc, #400]	@ (80031c8 <HAL_DMA_IRQHandler+0x404>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a63      	ldr	r2, [pc, #396]	@ (80031cc <HAL_DMA_IRQHandler+0x408>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a61      	ldr	r2, [pc, #388]	@ (80031d0 <HAL_DMA_IRQHandler+0x40c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a60      	ldr	r2, [pc, #384]	@ (80031d4 <HAL_DMA_IRQHandler+0x410>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5e      	ldr	r2, [pc, #376]	@ (80031d8 <HAL_DMA_IRQHandler+0x414>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5d      	ldr	r2, [pc, #372]	@ (80031dc <HAL_DMA_IRQHandler+0x418>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a5b      	ldr	r2, [pc, #364]	@ (80031e0 <HAL_DMA_IRQHandler+0x41c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_DMA_IRQHandler+0x420>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a58      	ldr	r2, [pc, #352]	@ (80031e8 <HAL_DMA_IRQHandler+0x424>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a57      	ldr	r2, [pc, #348]	@ (80031ec <HAL_DMA_IRQHandler+0x428>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_DMA_IRQHandler+0x42c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a54      	ldr	r2, [pc, #336]	@ (80031f4 <HAL_DMA_IRQHandler+0x430>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x2ee>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a52      	ldr	r2, [pc, #328]	@ (80031f8 <HAL_DMA_IRQHandler+0x434>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10a      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x304>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e003      	b.n	80030d0 <HAL_DMA_IRQHandler+0x30c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2201      	movs	r2, #1
 80030de:	409a      	lsls	r2, r3
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f043 0202 	orr.w	r2, r3, #2
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2204      	movs	r2, #4
 80030fa:	409a      	lsls	r2, r3
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 808f 	beq.w	8003224 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	@ (80031bc <HAL_DMA_IRQHandler+0x3f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d04a      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d045      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <HAL_DMA_IRQHandler+0x400>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d040      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a27      	ldr	r2, [pc, #156]	@ (80031c8 <HAL_DMA_IRQHandler+0x404>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d03b      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a26      	ldr	r2, [pc, #152]	@ (80031cc <HAL_DMA_IRQHandler+0x408>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d036      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a24      	ldr	r2, [pc, #144]	@ (80031d0 <HAL_DMA_IRQHandler+0x40c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d031      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a23      	ldr	r2, [pc, #140]	@ (80031d4 <HAL_DMA_IRQHandler+0x410>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d02c      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a21      	ldr	r2, [pc, #132]	@ (80031d8 <HAL_DMA_IRQHandler+0x414>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d027      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_DMA_IRQHandler+0x418>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d022      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <HAL_DMA_IRQHandler+0x41c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1d      	ldr	r2, [pc, #116]	@ (80031e4 <HAL_DMA_IRQHandler+0x420>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_DMA_IRQHandler+0x424>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_DMA_IRQHandler+0x428>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_DMA_IRQHandler+0x42c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a17      	ldr	r2, [pc, #92]	@ (80031f4 <HAL_DMA_IRQHandler+0x430>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x3e2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <HAL_DMA_IRQHandler+0x434>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12a      	bne.n	80031fc <HAL_DMA_IRQHandler+0x438>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e023      	b.n	8003204 <HAL_DMA_IRQHandler+0x440>
 80031bc:	40020010 	.word	0x40020010
 80031c0:	40020028 	.word	0x40020028
 80031c4:	40020040 	.word	0x40020040
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40020070 	.word	0x40020070
 80031d0:	40020088 	.word	0x40020088
 80031d4:	400200a0 	.word	0x400200a0
 80031d8:	400200b8 	.word	0x400200b8
 80031dc:	40020410 	.word	0x40020410
 80031e0:	40020428 	.word	0x40020428
 80031e4:	40020440 	.word	0x40020440
 80031e8:	40020458 	.word	0x40020458
 80031ec:	40020470 	.word	0x40020470
 80031f0:	40020488 	.word	0x40020488
 80031f4:	400204a0 	.word	0x400204a0
 80031f8:	400204b8 	.word	0x400204b8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2210      	movs	r2, #16
 800322e:	409a      	lsls	r2, r3
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a6 	beq.w	8003386 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a85      	ldr	r2, [pc, #532]	@ (8003454 <HAL_DMA_IRQHandler+0x690>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	@ (8003458 <HAL_DMA_IRQHandler+0x694>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a82      	ldr	r2, [pc, #520]	@ (800345c <HAL_DMA_IRQHandler+0x698>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a80      	ldr	r2, [pc, #512]	@ (8003460 <HAL_DMA_IRQHandler+0x69c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7f      	ldr	r2, [pc, #508]	@ (8003464 <HAL_DMA_IRQHandler+0x6a0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a7d      	ldr	r2, [pc, #500]	@ (8003468 <HAL_DMA_IRQHandler+0x6a4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <HAL_DMA_IRQHandler+0x6a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7a      	ldr	r2, [pc, #488]	@ (8003470 <HAL_DMA_IRQHandler+0x6ac>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a79      	ldr	r2, [pc, #484]	@ (8003474 <HAL_DMA_IRQHandler+0x6b0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a77      	ldr	r2, [pc, #476]	@ (8003478 <HAL_DMA_IRQHandler+0x6b4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a76      	ldr	r2, [pc, #472]	@ (800347c <HAL_DMA_IRQHandler+0x6b8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a74      	ldr	r2, [pc, #464]	@ (8003480 <HAL_DMA_IRQHandler+0x6bc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a73      	ldr	r2, [pc, #460]	@ (8003484 <HAL_DMA_IRQHandler+0x6c0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a71      	ldr	r2, [pc, #452]	@ (8003488 <HAL_DMA_IRQHandler+0x6c4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a70      	ldr	r2, [pc, #448]	@ (800348c <HAL_DMA_IRQHandler+0x6c8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_IRQHandler+0x516>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_DMA_IRQHandler+0x6cc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10a      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x52c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e009      	b.n	8003304 <HAL_DMA_IRQHandler+0x540>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d03e      	beq.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2210      	movs	r2, #16
 8003312:	409a      	lsls	r2, r3
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d018      	beq.n	8003358 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d024      	beq.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
 8003344:	e01f      	b.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01b      	beq.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
 8003356:	e016      	b.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0208 	bic.w	r2, r2, #8
 8003374:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2220      	movs	r2, #32
 8003390:	409a      	lsls	r2, r3
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8110 	beq.w	80035bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003454 <HAL_DMA_IRQHandler+0x690>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003458 <HAL_DMA_IRQHandler+0x694>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d045      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a29      	ldr	r2, [pc, #164]	@ (800345c <HAL_DMA_IRQHandler+0x698>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d040      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <HAL_DMA_IRQHandler+0x69c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d03b      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a26      	ldr	r2, [pc, #152]	@ (8003464 <HAL_DMA_IRQHandler+0x6a0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a25      	ldr	r2, [pc, #148]	@ (8003468 <HAL_DMA_IRQHandler+0x6a4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a23      	ldr	r2, [pc, #140]	@ (800346c <HAL_DMA_IRQHandler+0x6a8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a22      	ldr	r2, [pc, #136]	@ (8003470 <HAL_DMA_IRQHandler+0x6ac>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d027      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_DMA_IRQHandler+0x6b0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <HAL_DMA_IRQHandler+0x6b4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01d      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_DMA_IRQHandler+0x6b8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_DMA_IRQHandler+0x6bc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_DMA_IRQHandler+0x6c0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a19      	ldr	r2, [pc, #100]	@ (8003488 <HAL_DMA_IRQHandler+0x6c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a17      	ldr	r2, [pc, #92]	@ (800348c <HAL_DMA_IRQHandler+0x6c8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_DMA_IRQHandler+0x678>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <HAL_DMA_IRQHandler+0x6cc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12b      	bne.n	8003494 <HAL_DMA_IRQHandler+0x6d0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e02a      	b.n	80034a8 <HAL_DMA_IRQHandler+0x6e4>
 8003452:	bf00      	nop
 8003454:	40020010 	.word	0x40020010
 8003458:	40020028 	.word	0x40020028
 800345c:	40020040 	.word	0x40020040
 8003460:	40020058 	.word	0x40020058
 8003464:	40020070 	.word	0x40020070
 8003468:	40020088 	.word	0x40020088
 800346c:	400200a0 	.word	0x400200a0
 8003470:	400200b8 	.word	0x400200b8
 8003474:	40020410 	.word	0x40020410
 8003478:	40020428 	.word	0x40020428
 800347c:	40020440 	.word	0x40020440
 8003480:	40020458 	.word	0x40020458
 8003484:	40020470 	.word	0x40020470
 8003488:	40020488 	.word	0x40020488
 800348c:	400204a0 	.word	0x400204a0
 8003490:	400204b8 	.word	0x400204b8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8087 	beq.w	80035bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2220      	movs	r2, #32
 80034b8:	409a      	lsls	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d139      	bne.n	800353e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0216 	bic.w	r2, r2, #22
 80034d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d103      	bne.n	80034fa <HAL_DMA_IRQHandler+0x736>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0208 	bic.w	r2, r2, #8
 8003508:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	223f      	movs	r2, #63	@ 0x3f
 8003514:	409a      	lsls	r2, r3
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 834a 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
          }
          return;
 800353c:	e344      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d018      	beq.n	800357e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d108      	bne.n	800356c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02c      	beq.n	80035bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e027      	b.n	80035bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e01e      	b.n	80035bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0210 	bic.w	r2, r2, #16
 800359a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8306 	beq.w	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8088 	beq.w	80036e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a7a      	ldr	r2, [pc, #488]	@ (80037cc <HAL_DMA_IRQHandler+0xa08>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a79      	ldr	r2, [pc, #484]	@ (80037d0 <HAL_DMA_IRQHandler+0xa0c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a77      	ldr	r2, [pc, #476]	@ (80037d4 <HAL_DMA_IRQHandler+0xa10>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a76      	ldr	r2, [pc, #472]	@ (80037d8 <HAL_DMA_IRQHandler+0xa14>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a74      	ldr	r2, [pc, #464]	@ (80037dc <HAL_DMA_IRQHandler+0xa18>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a73      	ldr	r2, [pc, #460]	@ (80037e0 <HAL_DMA_IRQHandler+0xa1c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a71      	ldr	r2, [pc, #452]	@ (80037e4 <HAL_DMA_IRQHandler+0xa20>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a70      	ldr	r2, [pc, #448]	@ (80037e8 <HAL_DMA_IRQHandler+0xa24>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6e      	ldr	r2, [pc, #440]	@ (80037ec <HAL_DMA_IRQHandler+0xa28>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6d      	ldr	r2, [pc, #436]	@ (80037f0 <HAL_DMA_IRQHandler+0xa2c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6b      	ldr	r2, [pc, #428]	@ (80037f4 <HAL_DMA_IRQHandler+0xa30>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6a      	ldr	r2, [pc, #424]	@ (80037f8 <HAL_DMA_IRQHandler+0xa34>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a68      	ldr	r2, [pc, #416]	@ (80037fc <HAL_DMA_IRQHandler+0xa38>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a67      	ldr	r2, [pc, #412]	@ (8003800 <HAL_DMA_IRQHandler+0xa3c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	@ (8003804 <HAL_DMA_IRQHandler+0xa40>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_IRQHandler+0x8b8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a64      	ldr	r2, [pc, #400]	@ (8003808 <HAL_DMA_IRQHandler+0xa44>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <HAL_DMA_IRQHandler+0x8ca>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_DMA_IRQHandler+0x8da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d307      	bcc.n	80036ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f2      	bne.n	800369e <HAL_DMA_IRQHandler+0x8da>
 80036b8:	e000      	b.n	80036bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036d2:	e003      	b.n	80036dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8272 	beq.w	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
 80036f6:	e26c      	b.n	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a43      	ldr	r2, [pc, #268]	@ (800380c <HAL_DMA_IRQHandler+0xa48>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_DMA_IRQHandler+0xa4c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d01d      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a40      	ldr	r2, [pc, #256]	@ (8003814 <HAL_DMA_IRQHandler+0xa50>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3f      	ldr	r2, [pc, #252]	@ (8003818 <HAL_DMA_IRQHandler+0xa54>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3d      	ldr	r2, [pc, #244]	@ (800381c <HAL_DMA_IRQHandler+0xa58>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3c      	ldr	r2, [pc, #240]	@ (8003820 <HAL_DMA_IRQHandler+0xa5c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3a      	ldr	r2, [pc, #232]	@ (8003824 <HAL_DMA_IRQHandler+0xa60>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_DMA_IRQHandler+0x984>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a39      	ldr	r2, [pc, #228]	@ (8003828 <HAL_DMA_IRQHandler+0xa64>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_DMA_IRQHandler+0x988>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_DMA_IRQHandler+0x98a>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 823f 	beq.w	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2204      	movs	r2, #4
 8003766:	409a      	lsls	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80cd 	beq.w	800390c <HAL_DMA_IRQHandler+0xb48>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80c7 	beq.w	800390c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2204      	movs	r2, #4
 8003788:	409a      	lsls	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d049      	beq.n	800382c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8210 	beq.w	8003bcc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b4:	e20a      	b.n	8003bcc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8206 	beq.w	8003bcc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c8:	e200      	b.n	8003bcc <HAL_DMA_IRQHandler+0xe08>
 80037ca:	bf00      	nop
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
 800380c:	58025408 	.word	0x58025408
 8003810:	5802541c 	.word	0x5802541c
 8003814:	58025430 	.word	0x58025430
 8003818:	58025444 	.word	0x58025444
 800381c:	58025458 	.word	0x58025458
 8003820:	5802546c 	.word	0x5802546c
 8003824:	58025480 	.word	0x58025480
 8003828:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d160      	bne.n	80038f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a38 <HAL_DMA_IRQHandler+0xc74>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7d      	ldr	r2, [pc, #500]	@ (8003a3c <HAL_DMA_IRQHandler+0xc78>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a40 <HAL_DMA_IRQHandler+0xc7c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7a      	ldr	r2, [pc, #488]	@ (8003a44 <HAL_DMA_IRQHandler+0xc80>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a79      	ldr	r2, [pc, #484]	@ (8003a48 <HAL_DMA_IRQHandler+0xc84>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a77      	ldr	r2, [pc, #476]	@ (8003a4c <HAL_DMA_IRQHandler+0xc88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a76      	ldr	r2, [pc, #472]	@ (8003a50 <HAL_DMA_IRQHandler+0xc8c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a74      	ldr	r2, [pc, #464]	@ (8003a54 <HAL_DMA_IRQHandler+0xc90>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a73      	ldr	r2, [pc, #460]	@ (8003a58 <HAL_DMA_IRQHandler+0xc94>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a71      	ldr	r2, [pc, #452]	@ (8003a5c <HAL_DMA_IRQHandler+0xc98>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a70      	ldr	r2, [pc, #448]	@ (8003a60 <HAL_DMA_IRQHandler+0xc9c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a64 <HAL_DMA_IRQHandler+0xca0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a68 <HAL_DMA_IRQHandler+0xca4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a6c <HAL_DMA_IRQHandler+0xca8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a70 <HAL_DMA_IRQHandler+0xcac>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xb12>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_DMA_IRQHandler+0xcb0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0xb24>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0208 	bic.w	r2, r2, #8
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e007      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb34>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8165 	beq.w	8003bcc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800390a:	e15f      	b.n	8003bcc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2202      	movs	r2, #2
 8003916:	409a      	lsls	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80c5 	beq.w	8003aac <HAL_DMA_IRQHandler+0xce8>
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80bf 	beq.w	8003aac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2202      	movs	r2, #2
 8003938:	409a      	lsls	r2, r3
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 813a 	beq.w	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003964:	e134      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8130 	beq.w	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003978:	e12a      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 8089 	bne.w	8003a98 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2b      	ldr	r2, [pc, #172]	@ (8003a38 <HAL_DMA_IRQHandler+0xc74>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a29      	ldr	r2, [pc, #164]	@ (8003a3c <HAL_DMA_IRQHandler+0xc78>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a28      	ldr	r2, [pc, #160]	@ (8003a40 <HAL_DMA_IRQHandler+0xc7c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a26      	ldr	r2, [pc, #152]	@ (8003a44 <HAL_DMA_IRQHandler+0xc80>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a25      	ldr	r2, [pc, #148]	@ (8003a48 <HAL_DMA_IRQHandler+0xc84>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <HAL_DMA_IRQHandler+0xc88>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a22      	ldr	r2, [pc, #136]	@ (8003a50 <HAL_DMA_IRQHandler+0xc8c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a20      	ldr	r2, [pc, #128]	@ (8003a54 <HAL_DMA_IRQHandler+0xc90>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <HAL_DMA_IRQHandler+0xc94>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a5c <HAL_DMA_IRQHandler+0xc98>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003a60 <HAL_DMA_IRQHandler+0xc9c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_DMA_IRQHandler+0xca0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_DMA_IRQHandler+0xca4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_DMA_IRQHandler+0xca8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <HAL_DMA_IRQHandler+0xcac>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc62>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <HAL_DMA_IRQHandler+0xcb0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d128      	bne.n	8003a78 <HAL_DMA_IRQHandler+0xcb4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0214 	bic.w	r2, r2, #20
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e027      	b.n	8003a88 <HAL_DMA_IRQHandler+0xcc4>
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	40020040 	.word	0x40020040
 8003a44:	40020058 	.word	0x40020058
 8003a48:	40020070 	.word	0x40020070
 8003a4c:	40020088 	.word	0x40020088
 8003a50:	400200a0 	.word	0x400200a0
 8003a54:	400200b8 	.word	0x400200b8
 8003a58:	40020410 	.word	0x40020410
 8003a5c:	40020428 	.word	0x40020428
 8003a60:	40020440 	.word	0x40020440
 8003a64:	40020458 	.word	0x40020458
 8003a68:	40020470 	.word	0x40020470
 8003a6c:	40020488 	.word	0x40020488
 8003a70:	400204a0 	.word	0x400204a0
 8003a74:	400204b8 	.word	0x400204b8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 020a 	bic.w	r2, r2, #10
 8003a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8097 	beq.w	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aaa:	e091      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8088 	beq.w	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8082 	beq.w	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a41      	ldr	r2, [pc, #260]	@ (8003bd8 <HAL_DMA_IRQHandler+0xe14>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04a      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3f      	ldr	r2, [pc, #252]	@ (8003bdc <HAL_DMA_IRQHandler+0xe18>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d045      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8003be0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d040      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3c      	ldr	r2, [pc, #240]	@ (8003be4 <HAL_DMA_IRQHandler+0xe20>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d03b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a3b      	ldr	r2, [pc, #236]	@ (8003be8 <HAL_DMA_IRQHandler+0xe24>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d036      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a39      	ldr	r2, [pc, #228]	@ (8003bec <HAL_DMA_IRQHandler+0xe28>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a38      	ldr	r2, [pc, #224]	@ (8003bf0 <HAL_DMA_IRQHandler+0xe2c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d02c      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a36      	ldr	r2, [pc, #216]	@ (8003bf4 <HAL_DMA_IRQHandler+0xe30>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <HAL_DMA_IRQHandler+0xe34>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a33      	ldr	r2, [pc, #204]	@ (8003bfc <HAL_DMA_IRQHandler+0xe38>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <HAL_DMA_IRQHandler+0xe3c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a30      	ldr	r2, [pc, #192]	@ (8003c04 <HAL_DMA_IRQHandler+0xe40>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c08 <HAL_DMA_IRQHandler+0xe44>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2d      	ldr	r2, [pc, #180]	@ (8003c0c <HAL_DMA_IRQHandler+0xe48>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c10 <HAL_DMA_IRQHandler+0xe4c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xdaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	@ (8003c14 <HAL_DMA_IRQHandler+0xe50>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <HAL_DMA_IRQHandler+0xdbc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 021c 	bic.w	r2, r2, #28
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e007      	b.n	8003b90 <HAL_DMA_IRQHandler+0xdcc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 020e 	bic.w	r2, r2, #14
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
 8003bc6:	e004      	b.n	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bc8:	bf00      	nop
 8003bca:	e002      	b.n	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bd2:	3728      	adds	r7, #40	@ 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8

08003c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a42      	ldr	r2, [pc, #264]	@ (8003d30 <DMA_CalcBaseAndBitshift+0x118>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d04a      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a41      	ldr	r2, [pc, #260]	@ (8003d34 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d045      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3f      	ldr	r2, [pc, #252]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x120>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d040      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3e      	ldr	r2, [pc, #248]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x124>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d03b      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x128>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d036      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d031      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a39      	ldr	r2, [pc, #228]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x130>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02c      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a38      	ldr	r2, [pc, #224]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x134>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d027      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a36      	ldr	r2, [pc, #216]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x138>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a35      	ldr	r2, [pc, #212]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01d      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a33      	ldr	r2, [pc, #204]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x140>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a32      	ldr	r2, [pc, #200]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x144>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a30      	ldr	r2, [pc, #192]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x148>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x150>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2c      	ldr	r2, [pc, #176]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x154>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <DMA_CalcBaseAndBitshift+0xac>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <DMA_CalcBaseAndBitshift+0xae>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d024      	beq.n	8003d14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3b10      	subs	r3, #16
 8003cd2:	4a27      	ldr	r2, [pc, #156]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x158>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	4a24      	ldr	r2, [pc, #144]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d908      	bls.n	8003d04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x160>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	1d1a      	adds	r2, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d02:	e00d      	b.n	8003d20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x160>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d12:	e005      	b.n	8003d20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40020010 	.word	0x40020010
 8003d34:	40020028 	.word	0x40020028
 8003d38:	40020040 	.word	0x40020040
 8003d3c:	40020058 	.word	0x40020058
 8003d40:	40020070 	.word	0x40020070
 8003d44:	40020088 	.word	0x40020088
 8003d48:	400200a0 	.word	0x400200a0
 8003d4c:	400200b8 	.word	0x400200b8
 8003d50:	40020410 	.word	0x40020410
 8003d54:	40020428 	.word	0x40020428
 8003d58:	40020440 	.word	0x40020440
 8003d5c:	40020458 	.word	0x40020458
 8003d60:	40020470 	.word	0x40020470
 8003d64:	40020488 	.word	0x40020488
 8003d68:	400204a0 	.word	0x400204a0
 8003d6c:	400204b8 	.word	0x400204b8
 8003d70:	aaaaaaab 	.word	0xaaaaaaab
 8003d74:	0800b268 	.word	0x0800b268
 8003d78:	fffffc00 	.word	0xfffffc00

08003d7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d120      	bne.n	8003dd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d858      	bhi.n	8003e4a <DMA_CheckFifoParam+0xce>
 8003d98:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <DMA_CheckFifoParam+0x24>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dc3 	.word	0x08003dc3
 8003da8:	08003db1 	.word	0x08003db1
 8003dac:	08003e4b 	.word	0x08003e4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d048      	beq.n	8003e4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dc0:	e045      	b.n	8003e4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dca:	d142      	bne.n	8003e52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dd0:	e03f      	b.n	8003e52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dda:	d123      	bne.n	8003e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d838      	bhi.n	8003e56 <DMA_CheckFifoParam+0xda>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <DMA_CheckFifoParam+0x70>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e03 	.word	0x08003e03
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	08003e15 	.word	0x08003e15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
        break;
 8003e00:	e030      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d025      	beq.n	8003e5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e12:	e022      	b.n	8003e5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e1c:	d11f      	bne.n	8003e5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e22:	e01c      	b.n	8003e5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d902      	bls.n	8003e32 <DMA_CheckFifoParam+0xb6>
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e30:	e018      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
        break;
 8003e36:	e015      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
    break;
 8003e48:	e00b      	b.n	8003e62 <DMA_CheckFifoParam+0xe6>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e00a      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e008      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        break;
 8003e52:	bf00      	nop
 8003e54:	e006      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        break;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
    break;
 8003e62:	bf00      	nop
    }
  }

  return status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop

08003e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a38      	ldr	r2, [pc, #224]	@ (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a36      	ldr	r2, [pc, #216]	@ (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a33      	ldr	r2, [pc, #204]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a32      	ldr	r2, [pc, #200]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a30      	ldr	r2, [pc, #192]	@ (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01a      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	3b08      	subs	r3, #8
 8003ee4:	4a28      	ldr	r2, [pc, #160]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4b26      	ldr	r3, [pc, #152]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f10:	e024      	b.n	8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	3b10      	subs	r3, #16
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d806      	bhi.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d902      	bls.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3308      	adds	r3, #8
 8003f38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4b18      	ldr	r3, [pc, #96]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	58025408 	.word	0x58025408
 8003f6c:	5802541c 	.word	0x5802541c
 8003f70:	58025430 	.word	0x58025430
 8003f74:	58025444 	.word	0x58025444
 8003f78:	58025458 	.word	0x58025458
 8003f7c:	5802546c 	.word	0x5802546c
 8003f80:	58025480 	.word	0x58025480
 8003f84:	58025494 	.word	0x58025494
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	16009600 	.word	0x16009600
 8003f90:	58025880 	.word	0x58025880
 8003f94:	aaaaaaab 	.word	0xaaaaaaab
 8003f98:	400204b8 	.word	0x400204b8
 8003f9c:	4002040f 	.word	0x4002040f
 8003fa0:	10008200 	.word	0x10008200
 8003fa4:	40020880 	.word	0x40020880

08003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04a      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d847      	bhi.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	@ (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4b17      	ldr	r3, [pc, #92]	@ (8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004030:	671a      	str	r2, [r3, #112]	@ 0x70
 8004032:	e009      	b.n	8004048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a11      	ldr	r2, [pc, #68]	@ (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004046:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494
 8004080:	1600963f 	.word	0x1600963f
 8004084:	58025940 	.word	0x58025940
 8004088:	1000823f 	.word	0x1000823f
 800408c:	40020940 	.word	0x40020940

08004090 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	460b      	mov	r3, r1
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e00a      	b.n	80040c2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]
      break;
 80040b8:	e002      	b.n	80040c0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	bf00      	nop
  }

  return status;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e003      	b.n	80040ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	011a      	lsls	r2, r3, #4
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_EXTI_IRQHandler+0x5c>)
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4798      	blx	r3
    }
  }
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	58000088 	.word	0x58000088

08004158 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b098      	sub	sp, #96	@ 0x60
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004160:	4a84      	ldr	r2, [pc, #528]	@ (8004374 <HAL_FDCAN_Init+0x21c>)
 8004162:	f107 030c 	add.w	r3, r7, #12
 8004166:	4611      	mov	r1, r2
 8004168:	224c      	movs	r2, #76	@ 0x4c
 800416a:	4618      	mov	r0, r3
 800416c:	f006 fbac 	bl	800a8c8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e1c6      	b.n	8004508 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7e      	ldr	r2, [pc, #504]	@ (8004378 <HAL_FDCAN_Init+0x220>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d106      	bne.n	8004192 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd f982 	bl	80014b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0210 	bic.w	r2, r2, #16
 80041ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7fd ff14 	bl	8001fe8 <HAL_GetTick>
 80041c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041c2:	e014      	b.n	80041ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041c4:	f7fd ff10 	bl	8001fe8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d90d      	bls.n	80041ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e18c      	b.n	8004508 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d0e3      	beq.n	80041c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800420c:	f7fd feec 	bl	8001fe8 <HAL_GetTick>
 8004210:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004212:	e014      	b.n	800423e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004214:	f7fd fee8 	bl	8001fe8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b0a      	cmp	r3, #10
 8004220:	d90d      	bls.n	800423e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e164      	b.n	8004508 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0e3      	beq.n	8004214 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0202 	orr.w	r2, r2, #2
 800425a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7c1b      	ldrb	r3, [r3, #16]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004272:	619a      	str	r2, [r3, #24]
 8004274:	e007      	b.n	8004286 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004284:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7c5b      	ldrb	r3, [r3, #17]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800429c:	619a      	str	r2, [r3, #24]
 800429e:	e007      	b.n	80042b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7c9b      	ldrb	r3, [r3, #18]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042c6:	619a      	str	r2, [r3, #24]
 80042c8:	e007      	b.n	80042da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80042fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0210 	bic.w	r2, r2, #16
 800430e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d108      	bne.n	800432a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0204 	orr.w	r2, r2, #4
 8004326:	619a      	str	r2, [r3, #24]
 8004328:	e030      	b.n	800438c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02c      	beq.n	800438c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d020      	beq.n	800437c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004348:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0210 	orr.w	r2, r2, #16
 8004358:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d114      	bne.n	800438c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0220 	orr.w	r2, r2, #32
 8004370:	619a      	str	r2, [r3, #24]
 8004372:	e00b      	b.n	800438c <HAL_FDCAN_Init+0x234>
 8004374:	0800b200 	.word	0x0800b200
 8004378:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	3b01      	subs	r3, #1
 8004392:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	3b01      	subs	r3, #1
 800439a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800439c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c0:	d115      	bne.n	80043ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	3b01      	subs	r3, #1
 80043ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	3b01      	subs	r3, #1
 80043d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004414:	4413      	add	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004422:	f023 0107 	bic.w	r1, r3, #7
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3360      	adds	r3, #96	@ 0x60
 800442e:	443b      	add	r3, r7
 8004430:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d011      	beq.n	800446a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800444e:	f023 0107 	bic.w	r1, r3, #7
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	3360      	adds	r3, #96	@ 0x60
 800445a:	443b      	add	r3, r7
 800445c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	d012      	beq.n	8004498 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800447a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	3360      	adds	r3, #96	@ 0x60
 8004486:	443b      	add	r3, r7
 8004488:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800448c:	011a      	lsls	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	3360      	adds	r3, #96	@ 0x60
 80044b4:	443b      	add	r3, r7
 80044b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <HAL_FDCAN_Init+0x3b8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d107      	bne.n	80044e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f022 0203 	bic.w	r2, r2, #3
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fd81 	bl	8005000 <FDCAN_CalcultateRamBlockAddresses>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004504:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004508:	4618      	mov	r0, r3
 800450a:	3760      	adds	r7, #96	@ 0x60
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	4000a000 	.word	0x4000a000

08004514 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d111      	bne.n	800454c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e008      	b.n	800455e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d141      	bne.n	8004606 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800458a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e038      	b.n	8004618 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e026      	b.n	8004618 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fe93 	bl	800530c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80045f6:	2201      	movs	r2, #1
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e008      	b.n	8004618 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800460c:	f043 0208 	orr.w	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004620:	b480      	push	{r7}
 8004622:	b08b      	sub	sp, #44	@ 0x2c
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004638:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800463a:	7efb      	ldrb	r3, [r7, #27]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f040 8149 	bne.w	80048d4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d14c      	bne.n	80046e2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004650:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e13c      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004682:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e12a      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a0:	d10a      	bne.n	80046b8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046b2:	d101      	bne.n	80046b8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d4:	69f9      	ldr	r1, [r7, #28]
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	e068      	b.n	80047b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b41      	cmp	r3, #65	@ 0x41
 80046e6:	d14c      	bne.n	8004782 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ec      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004722:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0da      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800473c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004740:	d10a      	bne.n	8004758 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800474a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004752:	d101      	bne.n	8004758 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004754:	2301      	movs	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	69f9      	ldr	r1, [r7, #28]
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	e018      	b.n	80047b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d309      	bcc.n	80047a0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0a2      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e005      	b.n	80047e4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	3304      	adds	r3, #4
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0fda      	lsrs	r2, r3, #31
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	3304      	adds	r3, #4
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	e00a      	b.n	8004870 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	441a      	add	r2, r3
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	440b      	add	r3, r1
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	3301      	adds	r3, #1
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a1f      	ldr	r2, [pc, #124]	@ (80048f4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	461a      	mov	r2, r3
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	4293      	cmp	r3, r2
 800487e:	d3ec      	bcc.n	800485a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d105      	bne.n	8004892 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004890:	e01e      	b.n	80048d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b41      	cmp	r3, #65	@ 0x41
 8004896:	d105      	bne.n	80048a4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80048a2:	e015      	b.n	80048d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b1f      	cmp	r3, #31
 80048a8:	d808      	bhi.n	80048bc <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	fa01 f202 	lsl.w	r2, r1, r2
 80048b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80048ba:	e009      	b.n	80048d0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 021f 	and.w	r2, r3, #31
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e008      	b.n	80048e6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	372c      	adds	r7, #44	@ 0x2c
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	0800b270 	.word	0x0800b270

080048f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800490a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d002      	beq.n	8004918 <HAL_FDCAN_ActivateNotification+0x20>
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d155      	bne.n	80049c4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d108      	bne.n	8004938 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004936:	e014      	b.n	8004962 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d108      	bne.n	800495a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004958:	e003      	b.n	8004962 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2203      	movs	r2, #3
 8004960:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	430a      	orrs	r2, r1
 800497c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	430a      	orrs	r2, r1
 800499a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <HAL_FDCAN_ActivateNotification+0xec>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0f9b      	lsrs	r3, r3, #30
 80049ba:	490b      	ldr	r1, [pc, #44]	@ (80049e8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e008      	b.n	80049d6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	3fcfffff 	.word	0x3fcfffff
 80049e8:	4000a800 	.word	0x4000a800

080049ec <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b096      	sub	sp, #88	@ 0x58
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80049f4:	4b9a      	ldr	r3, [pc, #616]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	079b      	lsls	r3, r3, #30
 80049fa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80049fc:	4b98      	ldr	r3, [pc, #608]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	079b      	lsls	r3, r3, #30
 8004a02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a04:	4013      	ands	r3, r2
 8004a06:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a12:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a34:	4013      	ands	r3, r2
 8004a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a56:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a64:	4013      	ands	r3, r2
 8004a66:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004a72:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ab0:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa54 	bl	8004f66 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac0:	0a9b      	lsrs	r3, r3, #10
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01d      	beq.n	8004b06 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	0a9b      	lsrs	r3, r3, #10
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d017      	beq.n	8004b06 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ade:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aea:	4013      	ands	r3, r2
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004af6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004af8:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004afe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa07 	bl	8004f14 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b12:	4b54      	ldr	r3, [pc, #336]	@ (8004c64 <HAL_FDCAN_IRQHandler+0x278>)
 8004b14:	400b      	ands	r3, r1
 8004b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b18:	4a51      	ldr	r2, [pc, #324]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	0f9b      	lsrs	r3, r3, #30
 8004b1e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9c0 	bl	8004ea8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b34:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <HAL_FDCAN_IRQHandler+0x278>)
 8004b36:	400b      	ands	r3, r1
 8004b38:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b3a:	4a49      	ldr	r2, [pc, #292]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3e:	0f9b      	lsrs	r3, r3, #30
 8004b40:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004b42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f9ba 	bl	8004ebe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b56:	4b43      	ldr	r3, [pc, #268]	@ (8004c64 <HAL_FDCAN_IRQHandler+0x278>)
 8004b58:	400b      	ands	r3, r1
 8004b5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b5c:	4a40      	ldr	r2, [pc, #256]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	0f9b      	lsrs	r3, r3, #30
 8004b62:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004b64:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fe50 	bl	800180c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b78:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <HAL_FDCAN_IRQHandler+0x278>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b7e:	4a38      	ldr	r2, [pc, #224]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b82:	0f9b      	lsrs	r3, r3, #30
 8004b84:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004b86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9a3 	bl	8004ed4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b90:	0adb      	lsrs	r3, r3, #11
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	0adb      	lsrs	r3, r3, #11
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bae:	651a      	str	r2, [r3, #80]	@ 0x50
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f997 	bl	8004eea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbe:	0a5b      	lsrs	r3, r3, #9
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01d      	beq.n	8004c04 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	0a5b      	lsrs	r3, r3, #9
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be8:	4013      	ands	r3, r2
 8004bea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004bfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f97d 	bl	8004efe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c06:	0cdb      	lsrs	r3, r3, #19
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c12:	0cdb      	lsrs	r3, r3, #19
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c24:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c26:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f97c 	bl	8004f2a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d010      	beq.n	8004c6c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c52:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c54:	4b02      	ldr	r3, [pc, #8]	@ (8004c60 <HAL_FDCAN_IRQHandler+0x274>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	e004      	b.n	8004c68 <HAL_FDCAN_IRQHandler+0x27c>
 8004c5e:	bf00      	nop
 8004c60:	4000a800 	.word	0x4000a800
 8004c64:	3fcfffff 	.word	0x3fcfffff
 8004c68:	f000 f969 	bl	8004f3e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6e:	0c9b      	lsrs	r3, r3, #18
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004c8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c8e:	4b83      	ldr	r3, [pc, #524]	@ (8004e9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f95c 	bl	8004f52 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9c:	0c5b      	lsrs	r3, r3, #17
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d015      	beq.n	8004cd2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	0c5b      	lsrs	r3, r3, #17
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00f      	beq.n	8004cd2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cba:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cbc:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cde:	4b70      	ldr	r3, [pc, #448]	@ (8004ea0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ce4:	4a6d      	ldr	r2, [pc, #436]	@ (8004e9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce8:	0f9b      	lsrs	r3, r3, #30
 8004cea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f94d 	bl	8004f8e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d00:	4b67      	ldr	r3, [pc, #412]	@ (8004ea0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d06:	4a65      	ldr	r2, [pc, #404]	@ (8004e9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0a:	0f9b      	lsrs	r3, r3, #30
 8004d0c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a60      	ldr	r2, [pc, #384]	@ (8004ea4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	f040 80ac 	bne.w	8004e82 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a4 	beq.w	8004e82 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d4e:	4013      	ands	r3, r2
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d66:	4013      	ands	r3, r2
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7e:	4013      	ands	r3, r2
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004d8c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	6a3a      	ldr	r2, [r7, #32]
 8004d96:	4013      	ands	r3, r2
 8004d98:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004da4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004dd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8e6 	bl	8004fa4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004de6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8e6 	bl	8004fba <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01a      	beq.n	8004e30 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e1c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2240      	movs	r2, #64	@ 0x40
 8004e24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	6939      	ldr	r1, [r7, #16]
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8d0 	bl	8004fd0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004e3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8d1 	bl	8004fe8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f874 	bl	8004f7a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004e92:	bf00      	nop
 8004e94:	3758      	adds	r7, #88	@ 0x58
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	4000a800 	.word	0x4000a800
 8004ea0:	3fcfffff 	.word	0x3fcfffff
 8004ea4:	4000a000 	.word	0x4000a000

08004ea8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005016:	4ba7      	ldr	r3, [pc, #668]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005018:	4013      	ands	r3, r2
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	0091      	lsls	r1, r2, #2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	430b      	orrs	r3, r1
 8005024:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005030:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	041a      	lsls	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	4413      	add	r3, r2
 800504c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005056:	4b97      	ldr	r3, [pc, #604]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005058:	4013      	ands	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0091      	lsls	r1, r2, #2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	430b      	orrs	r3, r1
 8005064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	041a      	lsls	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005098:	4b86      	ldr	r3, [pc, #536]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800509a:	4013      	ands	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	0091      	lsls	r1, r2, #2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	041a      	lsls	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4413      	add	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80050e0:	4b74      	ldr	r3, [pc, #464]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0091      	lsls	r1, r2, #2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050fa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005102:	041a      	lsls	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005128:	4b62      	ldr	r3, [pc, #392]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0091      	lsls	r1, r2, #2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4413      	add	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005154:	4b57      	ldr	r3, [pc, #348]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	0091      	lsls	r1, r2, #2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	430b      	orrs	r3, r1
 8005162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005176:	041a      	lsls	r2, r3, #16
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4413      	add	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005196:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005198:	4013      	ands	r3, r2
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0091      	lsls	r1, r2, #2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	430b      	orrs	r3, r1
 80051a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051b0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	041a      	lsls	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051cc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d4:	061a      	lsls	r2, r3, #24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e4:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80051e6:	4413      	add	r3, r2
 80051e8:	009a      	lsls	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005238:	441a      	add	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800529c:	441a      	add	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a04      	ldr	r2, [pc, #16]	@ (80052bc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d915      	bls.n	80052dc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80052b0:	e006      	b.n	80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80052b2:	bf00      	nop
 80052b4:	ffff0003 	.word	0xffff0003
 80052b8:	10002b00 	.word	0x10002b00
 80052bc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e010      	b.n	80052fe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e005      	b.n	80052f0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3f3      	bcc.n	80052e4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	@ 0x24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800532a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005332:	4313      	orrs	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e00a      	b.n	800534e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005340:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005346:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005358:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800535e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005364:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3304      	adds	r3, #4
 8005390:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	3304      	adds	r3, #4
 800539c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e020      	b.n	80053e6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3303      	adds	r3, #3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4413      	add	r3, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3302      	adds	r3, #2
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	440b      	add	r3, r1
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053bc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	440b      	add	r3, r1
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053ca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053d4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	3304      	adds	r3, #4
 80053de:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3304      	adds	r3, #4
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4a06      	ldr	r2, [pc, #24]	@ (8005404 <FDCAN_CopyMessageToRAM+0xf8>)
 80053ec:	5cd3      	ldrb	r3, [r2, r3]
 80053ee:	461a      	mov	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d3d6      	bcc.n	80053a4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	3724      	adds	r7, #36	@ 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	0800b270 	.word	0x0800b270

08005408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	@ 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005416:	4b89      	ldr	r3, [pc, #548]	@ (800563c <HAL_GPIO_Init+0x234>)
 8005418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800541a:	e194      	b.n	8005746 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	4013      	ands	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8186 	beq.w	8005740 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d005      	beq.n	800544c <HAL_GPIO_Init+0x44>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d130      	bne.n	80054ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	2203      	movs	r2, #3
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005482:	2201      	movs	r2, #1
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 0201 	and.w	r2, r3, #1
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d017      	beq.n	80054ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	2203      	movs	r2, #3
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43db      	mvns	r3, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4013      	ands	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d123      	bne.n	800553e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	08da      	lsrs	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3208      	adds	r2, #8
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	220f      	movs	r2, #15
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	08da      	lsrs	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3208      	adds	r2, #8
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2203      	movs	r2, #3
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0203 	and.w	r2, r3, #3
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80e0 	beq.w	8005740 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005580:	4b2f      	ldr	r3, [pc, #188]	@ (8005640 <HAL_GPIO_Init+0x238>)
 8005582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005586:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <HAL_GPIO_Init+0x238>)
 8005588:	f043 0302 	orr.w	r3, r3, #2
 800558c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005590:	4b2b      	ldr	r3, [pc, #172]	@ (8005640 <HAL_GPIO_Init+0x238>)
 8005592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800559e:	4a29      	ldr	r2, [pc, #164]	@ (8005644 <HAL_GPIO_Init+0x23c>)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	3302      	adds	r3, #2
 80055a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	220f      	movs	r2, #15
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a20      	ldr	r2, [pc, #128]	@ (8005648 <HAL_GPIO_Init+0x240>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d052      	beq.n	8005670 <HAL_GPIO_Init+0x268>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_GPIO_Init+0x244>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <HAL_GPIO_Init+0x22e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <HAL_GPIO_Init+0x248>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d02b      	beq.n	8005632 <HAL_GPIO_Init+0x22a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005654 <HAL_GPIO_Init+0x24c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d025      	beq.n	800562e <HAL_GPIO_Init+0x226>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <HAL_GPIO_Init+0x250>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01f      	beq.n	800562a <HAL_GPIO_Init+0x222>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <HAL_GPIO_Init+0x254>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d019      	beq.n	8005626 <HAL_GPIO_Init+0x21e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <HAL_GPIO_Init+0x258>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <HAL_GPIO_Init+0x21a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <HAL_GPIO_Init+0x25c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00d      	beq.n	800561e <HAL_GPIO_Init+0x216>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a18      	ldr	r2, [pc, #96]	@ (8005668 <HAL_GPIO_Init+0x260>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <HAL_GPIO_Init+0x212>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_GPIO_Init+0x264>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <HAL_GPIO_Init+0x20e>
 8005612:	2309      	movs	r3, #9
 8005614:	e02d      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 8005616:	230a      	movs	r3, #10
 8005618:	e02b      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 800561a:	2308      	movs	r3, #8
 800561c:	e029      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 800561e:	2307      	movs	r3, #7
 8005620:	e027      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 8005622:	2306      	movs	r3, #6
 8005624:	e025      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 8005626:	2305      	movs	r3, #5
 8005628:	e023      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 800562a:	2304      	movs	r3, #4
 800562c:	e021      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 800562e:	2303      	movs	r3, #3
 8005630:	e01f      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 8005632:	2302      	movs	r3, #2
 8005634:	e01d      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 8005636:	2301      	movs	r3, #1
 8005638:	e01b      	b.n	8005672 <HAL_GPIO_Init+0x26a>
 800563a:	bf00      	nop
 800563c:	58000080 	.word	0x58000080
 8005640:	58024400 	.word	0x58024400
 8005644:	58000400 	.word	0x58000400
 8005648:	58020000 	.word	0x58020000
 800564c:	58020400 	.word	0x58020400
 8005650:	58020800 	.word	0x58020800
 8005654:	58020c00 	.word	0x58020c00
 8005658:	58021000 	.word	0x58021000
 800565c:	58021400 	.word	0x58021400
 8005660:	58021800 	.word	0x58021800
 8005664:	58021c00 	.word	0x58021c00
 8005668:	58022000 	.word	0x58022000
 800566c:	58022400 	.word	0x58022400
 8005670:	2300      	movs	r3, #0
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f002 0203 	and.w	r2, r2, #3
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	4093      	lsls	r3, r2
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005682:	4938      	ldr	r1, [pc, #224]	@ (8005764 <HAL_GPIO_Init+0x35c>)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	3302      	adds	r3, #2
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f ae63 	bne.w	800541c <HAL_GPIO_Init+0x14>
  }
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	3724      	adds	r7, #36	@ 0x24
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	58000400 	.word	0x58000400

08005768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
 8005774:	4613      	mov	r3, r2
 8005776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005778:	787b      	ldrb	r3, [r7, #1]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005784:	e003      	b.n	800578e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	041a      	lsls	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057ac:	887a      	ldrh	r2, [r7, #2]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4013      	ands	r3, r2
 80057b2:	041a      	lsls	r2, r3, #16
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	43d9      	mvns	r1, r3
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	400b      	ands	r3, r1
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	619a      	str	r2, [r3, #24]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057d8:	4b19      	ldr	r3, [pc, #100]	@ (8005840 <HAL_PWREx_ConfigSupply+0x70>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d00a      	beq.n	80057fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057e4:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <HAL_PWREx_ConfigSupply+0x70>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d001      	beq.n	80057f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e01f      	b.n	8005836 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e01d      	b.n	8005836 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057fa:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_PWREx_ConfigSupply+0x70>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f023 0207 	bic.w	r2, r3, #7
 8005802:	490f      	ldr	r1, [pc, #60]	@ (8005840 <HAL_PWREx_ConfigSupply+0x70>)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4313      	orrs	r3, r2
 8005808:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800580a:	f7fc fbed 	bl	8001fe8 <HAL_GetTick>
 800580e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005810:	e009      	b.n	8005826 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005812:	f7fc fbe9 	bl	8001fe8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005820:	d901      	bls.n	8005826 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e007      	b.n	8005836 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005826:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <HAL_PWREx_ConfigSupply+0x70>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005832:	d1ee      	bne.n	8005812 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	58024800 	.word	0x58024800

08005844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08c      	sub	sp, #48	@ 0x30
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f000 bc48 	b.w	80060e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8088 	beq.w	8005976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	4b99      	ldr	r3, [pc, #612]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800586e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005870:	4b96      	ldr	r3, [pc, #600]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	2b10      	cmp	r3, #16
 800587a:	d007      	beq.n	800588c <HAL_RCC_OscConfig+0x48>
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	2b18      	cmp	r3, #24
 8005880:	d111      	bne.n	80058a6 <HAL_RCC_OscConfig+0x62>
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	4b8f      	ldr	r3, [pc, #572]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d06d      	beq.n	8005974 <HAL_RCC_OscConfig+0x130>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d169      	bne.n	8005974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f000 bc21 	b.w	80060e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ae:	d106      	bne.n	80058be <HAL_RCC_OscConfig+0x7a>
 80058b0:	4b86      	ldr	r3, [pc, #536]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a85      	ldr	r2, [pc, #532]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e02e      	b.n	800591c <HAL_RCC_OscConfig+0xd8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x9c>
 80058c6:	4b81      	ldr	r3, [pc, #516]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a80      	ldr	r2, [pc, #512]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4b7e      	ldr	r3, [pc, #504]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7d      	ldr	r2, [pc, #500]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xd8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0xc0>
 80058ea:	4b78      	ldr	r3, [pc, #480]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a77      	ldr	r2, [pc, #476]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b75      	ldr	r3, [pc, #468]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a74      	ldr	r2, [pc, #464]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xd8>
 8005904:	4b71      	ldr	r3, [pc, #452]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a70      	ldr	r2, [pc, #448]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b6e      	ldr	r3, [pc, #440]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6d      	ldr	r2, [pc, #436]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fc fb60 	bl	8001fe8 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592c:	f7fc fb5c 	bl	8001fe8 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	@ 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e3d4      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800593e:	4b63      	ldr	r3, [pc, #396]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xe8>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc fb4c 	bl	8001fe8 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fc fb48 	bl	8001fe8 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e3c0      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005966:	4b59      	ldr	r3, [pc, #356]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x110>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80ca 	beq.w	8005b18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005984:	4b51      	ldr	r3, [pc, #324]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800598c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800598e:	4b4f      	ldr	r3, [pc, #316]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_RCC_OscConfig+0x166>
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2b18      	cmp	r3, #24
 800599e:	d156      	bne.n	8005a4e <HAL_RCC_OscConfig+0x20a>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d151      	bne.n	8005a4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059aa:	4b48      	ldr	r3, [pc, #288]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_RCC_OscConfig+0x17e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e392      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059c2:	4b42      	ldr	r3, [pc, #264]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 0219 	bic.w	r2, r3, #25
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	493f      	ldr	r1, [pc, #252]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc fb08 	bl	8001fe8 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fc fb04 	bl	8001fe8 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e37c      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ee:	4b37      	ldr	r3, [pc, #220]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	f7fc fb25 	bl	8002048 <HAL_GetREVID>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d817      	bhi.n	8005a38 <HAL_RCC_OscConfig+0x1f4>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b40      	cmp	r3, #64	@ 0x40
 8005a0e:	d108      	bne.n	8005a22 <HAL_RCC_OscConfig+0x1de>
 8005a10:	4b2e      	ldr	r3, [pc, #184]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a18:	4a2c      	ldr	r2, [pc, #176]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a20:	e07a      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a22:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	031b      	lsls	r3, r3, #12
 8005a30:	4926      	ldr	r1, [pc, #152]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a36:	e06f      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a38:	4b24      	ldr	r3, [pc, #144]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	4921      	ldr	r1, [pc, #132]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4c:	e064      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d047      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a56:	4b1d      	ldr	r3, [pc, #116]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 0219 	bic.w	r2, r3, #25
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	491a      	ldr	r1, [pc, #104]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fc fabe 	bl	8001fe8 <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a70:	f7fc faba 	bl	8001fe8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e332      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8e:	f7fc fadb 	bl	8002048 <HAL_GetREVID>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d819      	bhi.n	8005ad0 <HAL_RCC_OscConfig+0x28c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b40      	cmp	r3, #64	@ 0x40
 8005aa2:	d108      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x272>
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005aac:	4a07      	ldr	r2, [pc, #28]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab2:	6053      	str	r3, [r2, #4]
 8005ab4:	e030      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	031b      	lsls	r3, r3, #12
 8005ac4:	4901      	ldr	r1, [pc, #4]	@ (8005acc <HAL_RCC_OscConfig+0x288>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
 8005aca:	e025      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	4b9a      	ldr	r3, [pc, #616]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	4997      	ldr	r1, [pc, #604]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	604b      	str	r3, [r1, #4]
 8005ae4:	e018      	b.n	8005b18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae6:	4b95      	ldr	r3, [pc, #596]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a94      	ldr	r2, [pc, #592]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fc fa79 	bl	8001fe8 <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afa:	f7fc fa75 	bl	8001fe8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e2ed      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b0c:	4b8b      	ldr	r3, [pc, #556]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80a9 	beq.w	8005c78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b26:	4b85      	ldr	r3, [pc, #532]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b30:	4b82      	ldr	r3, [pc, #520]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d007      	beq.n	8005b4c <HAL_RCC_OscConfig+0x308>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b18      	cmp	r3, #24
 8005b40:	d13a      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x374>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d135      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_OscConfig+0x320>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	2b80      	cmp	r3, #128	@ 0x80
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e2c1      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b64:	f7fc fa70 	bl	8002048 <HAL_GetREVID>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d817      	bhi.n	8005ba2 <HAL_RCC_OscConfig+0x35e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d108      	bne.n	8005b8c <HAL_RCC_OscConfig+0x348>
 8005b7a:	4b70      	ldr	r3, [pc, #448]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b82:	4a6e      	ldr	r2, [pc, #440]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b8a:	e075      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	069b      	lsls	r3, r3, #26
 8005b9a:	4968      	ldr	r1, [pc, #416]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ba0:	e06a      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ba2:	4b66      	ldr	r3, [pc, #408]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	061b      	lsls	r3, r3, #24
 8005bb0:	4962      	ldr	r1, [pc, #392]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bb6:	e05f      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d042      	beq.n	8005c46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fc fa0c 	bl	8001fe8 <HAL_GetTick>
 8005bd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005bd4:	f7fc fa08 	bl	8001fe8 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e280      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005be6:	4b55      	ldr	r3, [pc, #340]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bf2:	f7fc fa29 	bl	8002048 <HAL_GetREVID>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d817      	bhi.n	8005c30 <HAL_RCC_OscConfig+0x3ec>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d108      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3d6>
 8005c08:	4b4c      	ldr	r3, [pc, #304]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c10:	4a4a      	ldr	r2, [pc, #296]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c16:	6053      	str	r3, [r2, #4]
 8005c18:	e02e      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
 8005c1a:	4b48      	ldr	r3, [pc, #288]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	069b      	lsls	r3, r3, #26
 8005c28:	4944      	ldr	r1, [pc, #272]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
 8005c2e:	e023      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
 8005c30:	4b42      	ldr	r3, [pc, #264]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	493f      	ldr	r1, [pc, #252]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60cb      	str	r3, [r1, #12]
 8005c44:	e018      	b.n	8005c78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c46:	4b3d      	ldr	r3, [pc, #244]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fc f9c9 	bl	8001fe8 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c5a:	f7fc f9c5 	bl	8001fe8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e23d      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c6c:	4b33      	ldr	r3, [pc, #204]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d036      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c90:	4a2a      	ldr	r2, [pc, #168]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fc f9a6 	bl	8001fe8 <HAL_GetTick>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fc f9a2 	bl	8001fe8 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e21a      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cb2:	4b22      	ldr	r3, [pc, #136]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x45c>
 8005cbe:	e018      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ccc:	f7fc f98c 	bl	8001fe8 <HAL_GetTick>
 8005cd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fc f988 	bl	8001fe8 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e200      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ce6:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d039      	beq.n	8005d72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d12:	f7fc f969 	bl	8001fe8 <HAL_GetTick>
 8005d16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d1a:	f7fc f965 	bl	8001fe8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e1dd      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d2c:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <HAL_RCC_OscConfig+0x4f8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x4d6>
 8005d38:	e01b      	b.n	8005d72 <HAL_RCC_OscConfig+0x52e>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d40:	4b9b      	ldr	r3, [pc, #620]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a9a      	ldr	r2, [pc, #616]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005d46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d4c:	f7fc f94c 	bl	8001fe8 <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d54:	f7fc f948 	bl	8001fe8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e1c0      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d66:	4b92      	ldr	r3, [pc, #584]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8081 	beq.w	8005e82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d80:	4b8c      	ldr	r3, [pc, #560]	@ (8005fb4 <HAL_RCC_OscConfig+0x770>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a8b      	ldr	r2, [pc, #556]	@ (8005fb4 <HAL_RCC_OscConfig+0x770>)
 8005d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d8c:	f7fc f92c 	bl	8001fe8 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d94:	f7fc f928 	bl	8001fe8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	@ 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e1a0      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da6:	4b83      	ldr	r3, [pc, #524]	@ (8005fb4 <HAL_RCC_OscConfig+0x770>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x584>
 8005dba:	4b7d      	ldr	r3, [pc, #500]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc6:	e02d      	b.n	8005e24 <HAL_RCC_OscConfig+0x5e0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0x5a6>
 8005dd0:	4b77      	ldr	r3, [pc, #476]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	4a76      	ldr	r2, [pc, #472]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ddc:	4b74      	ldr	r3, [pc, #464]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a73      	ldr	r2, [pc, #460]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	e01c      	b.n	8005e24 <HAL_RCC_OscConfig+0x5e0>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x5c8>
 8005df2:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0x5e0>
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e10:	4a67      	ldr	r2, [pc, #412]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e18:	4b65      	ldr	r3, [pc, #404]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	4a64      	ldr	r2, [pc, #400]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e1e:	f023 0304 	bic.w	r3, r3, #4
 8005e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fc f8dc 	bl	8001fe8 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fc f8d8 	bl	8001fe8 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e14e      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e4a:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <HAL_RCC_OscConfig+0x5f0>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc f8c6 	bl	8001fe8 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fc f8c2 	bl	8001fe8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e138      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e76:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ee      	bne.n	8005e60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 812d 	beq.w	80060e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e8c:	4b48      	ldr	r3, [pc, #288]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e94:	2b18      	cmp	r3, #24
 8005e96:	f000 80bd 	beq.w	8006014 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	f040 809e 	bne.w	8005fe0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea4:	4b42      	ldr	r3, [pc, #264]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a41      	ldr	r2, [pc, #260]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fc f89a 	bl	8001fe8 <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb8:	f7fc f896 	bl	8001fe8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e10e      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eca:	4b39      	ldr	r3, [pc, #228]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed6:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eda:	4b37      	ldr	r3, [pc, #220]	@ (8005fb8 <HAL_RCC_OscConfig+0x774>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	4931      	ldr	r1, [pc, #196]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	3b01      	subs	r3, #1
 8005f00:	025b      	lsls	r3, r3, #9
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f20:	4923      	ldr	r1, [pc, #140]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f26:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	4a21      	ldr	r2, [pc, #132]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f32:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f36:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <HAL_RCC_OscConfig+0x778>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f3e:	00d2      	lsls	r2, r2, #3
 8005f40:	491b      	ldr	r1, [pc, #108]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f46:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	f023 020c 	bic.w	r2, r3, #12
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	4917      	ldr	r1, [pc, #92]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	f023 0202 	bic.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f64:	4912      	ldr	r1, [pc, #72]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f6a:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	4a10      	ldr	r2, [pc, #64]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f76:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f82:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f8e:	4b08      	ldr	r3, [pc, #32]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	4a07      	ldr	r2, [pc, #28]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f9a:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <HAL_RCC_OscConfig+0x76c>)
 8005fa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fc f81f 	bl	8001fe8 <HAL_GetTick>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fac:	e011      	b.n	8005fd2 <HAL_RCC_OscConfig+0x78e>
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	58024800 	.word	0x58024800
 8005fb8:	fffffc0c 	.word	0xfffffc0c
 8005fbc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fc f812 	bl	8001fe8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e08a      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fd2:	4b47      	ldr	r3, [pc, #284]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x77c>
 8005fde:	e082      	b.n	80060e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe0:	4b43      	ldr	r3, [pc, #268]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a42      	ldr	r2, [pc, #264]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8005fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fb fffc 	bl	8001fe8 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff4:	f7fb fff8 	bl	8001fe8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e070      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006006:	4b3a      	ldr	r3, [pc, #232]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x7b0>
 8006012:	e068      	b.n	80060e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006014:	4b36      	ldr	r3, [pc, #216]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800601a:	4b35      	ldr	r3, [pc, #212]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	2b01      	cmp	r3, #1
 8006026:	d031      	beq.n	800608c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f003 0203 	and.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006032:	429a      	cmp	r2, r3
 8006034:	d12a      	bne.n	800608c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	091b      	lsrs	r3, r3, #4
 800603a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006042:	429a      	cmp	r2, r3
 8006044:	d122      	bne.n	800608c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006052:	429a      	cmp	r2, r3
 8006054:	d11a      	bne.n	800608c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	0a5b      	lsrs	r3, r3, #9
 800605a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d111      	bne.n	800608c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d108      	bne.n	800608c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0e1b      	lsrs	r3, r3, #24
 800607e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006086:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e02b      	b.n	80060e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006090:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 8006092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800609a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d01f      	beq.n	80060e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80060a6:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	4a11      	ldr	r2, [pc, #68]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b2:	f7fb ff99 	bl	8001fe8 <HAL_GetTick>
 80060b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80060b8:	bf00      	nop
 80060ba:	f7fb ff95 	bl	8001fe8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d0f9      	beq.n	80060ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060c6:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ca:	4b0a      	ldr	r3, [pc, #40]	@ (80060f4 <HAL_RCC_OscConfig+0x8b0>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060d2:	00d2      	lsls	r2, r2, #3
 80060d4:	4906      	ldr	r1, [pc, #24]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80060da:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	4a04      	ldr	r2, [pc, #16]	@ (80060f0 <HAL_RCC_OscConfig+0x8ac>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3730      	adds	r7, #48	@ 0x30
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	58024400 	.word	0x58024400
 80060f4:	ffff0007 	.word	0xffff0007

080060f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e19c      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800610c:	4b8a      	ldr	r3, [pc, #552]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d910      	bls.n	800613c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611a:	4b87      	ldr	r3, [pc, #540]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 020f 	bic.w	r2, r3, #15
 8006122:	4985      	ldr	r1, [pc, #532]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	4313      	orrs	r3, r2
 8006128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b83      	ldr	r3, [pc, #524]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e184      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d010      	beq.n	800616a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	4b7b      	ldr	r3, [pc, #492]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006154:	429a      	cmp	r2, r3
 8006156:	d908      	bls.n	800616a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006158:	4b78      	ldr	r3, [pc, #480]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4975      	ldr	r1, [pc, #468]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006166:	4313      	orrs	r3, r2
 8006168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	4b70      	ldr	r3, [pc, #448]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006182:	429a      	cmp	r2, r3
 8006184:	d908      	bls.n	8006198 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006186:	4b6d      	ldr	r3, [pc, #436]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	496a      	ldr	r1, [pc, #424]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006194:	4313      	orrs	r3, r2
 8006196:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	4b64      	ldr	r3, [pc, #400]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d908      	bls.n	80061c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061b4:	4b61      	ldr	r3, [pc, #388]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	495e      	ldr	r1, [pc, #376]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d010      	beq.n	80061f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	4b59      	ldr	r3, [pc, #356]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061de:	429a      	cmp	r2, r3
 80061e0:	d908      	bls.n	80061f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061e2:	4b56      	ldr	r3, [pc, #344]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	4953      	ldr	r1, [pc, #332]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	4b4d      	ldr	r3, [pc, #308]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	429a      	cmp	r2, r3
 800620e:	d908      	bls.n	8006222 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006210:	4b4a      	ldr	r3, [pc, #296]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f023 020f 	bic.w	r2, r3, #15
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4947      	ldr	r1, [pc, #284]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800621e:	4313      	orrs	r3, r2
 8006220:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d055      	beq.n	80062da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800622e:	4b43      	ldr	r3, [pc, #268]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	4940      	ldr	r1, [pc, #256]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800623c:	4313      	orrs	r3, r2
 800623e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d107      	bne.n	8006258 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006248:	4b3c      	ldr	r3, [pc, #240]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d121      	bne.n	8006298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0f6      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d107      	bne.n	8006270 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006260:	4b36      	ldr	r3, [pc, #216]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d115      	bne.n	8006298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0ea      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006278:	4b30      	ldr	r3, [pc, #192]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0de      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006288:	4b2c      	ldr	r3, [pc, #176]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0d6      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006298:	4b28      	ldr	r3, [pc, #160]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f023 0207 	bic.w	r2, r3, #7
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4925      	ldr	r1, [pc, #148]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062aa:	f7fb fe9d 	bl	8001fe8 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b2:	f7fb fe99 	bl	8001fe8 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0be      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c8:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d1eb      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	4b14      	ldr	r3, [pc, #80]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d208      	bcs.n	8006308 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f6:	4b11      	ldr	r3, [pc, #68]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f023 020f 	bic.w	r2, r3, #15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	490e      	ldr	r1, [pc, #56]	@ (800633c <HAL_RCC_ClockConfig+0x244>)
 8006304:	4313      	orrs	r3, r2
 8006306:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006308:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d214      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006316:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 020f 	bic.w	r2, r3, #15
 800631e:	4906      	ldr	r1, [pc, #24]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b04      	ldr	r3, [pc, #16]	@ (8006338 <HAL_RCC_ClockConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e086      	b.n	8006446 <HAL_RCC_ClockConfig+0x34e>
 8006338:	52002000 	.word	0x52002000
 800633c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	4b3f      	ldr	r3, [pc, #252]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006358:	429a      	cmp	r2, r3
 800635a:	d208      	bcs.n	800636e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800635c:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4939      	ldr	r1, [pc, #228]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 800636a:	4313      	orrs	r3, r2
 800636c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d010      	beq.n	800639c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	4b34      	ldr	r3, [pc, #208]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006386:	429a      	cmp	r2, r3
 8006388:	d208      	bcs.n	800639c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800638a:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	492e      	ldr	r1, [pc, #184]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 8006398:	4313      	orrs	r3, r2
 800639a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	4b28      	ldr	r3, [pc, #160]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d208      	bcs.n	80063ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063b8:	4b25      	ldr	r3, [pc, #148]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4922      	ldr	r1, [pc, #136]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	4b1d      	ldr	r3, [pc, #116]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d208      	bcs.n	80063f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4917      	ldr	r1, [pc, #92]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063f8:	f000 f834 	bl	8006464 <HAL_RCC_GetSysClockFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	4912      	ldr	r1, [pc, #72]	@ (8006454 <HAL_RCC_ClockConfig+0x35c>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006416:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <HAL_RCC_ClockConfig+0x358>)
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	4a0d      	ldr	r2, [pc, #52]	@ (8006454 <HAL_RCC_ClockConfig+0x35c>)
 8006420:	5cd3      	ldrb	r3, [r2, r3]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	4a0a      	ldr	r2, [pc, #40]	@ (8006458 <HAL_RCC_ClockConfig+0x360>)
 800642e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <HAL_RCC_ClockConfig+0x364>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006436:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <HAL_RCC_ClockConfig+0x368>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fb fd8a 	bl	8001f54 <HAL_InitTick>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
 8006454:	0800b24c 	.word	0x0800b24c
 8006458:	24000820 	.word	0x24000820
 800645c:	2400081c 	.word	0x2400081c
 8006460:	24000840 	.word	0x24000840

08006464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006464:	b480      	push	{r7}
 8006466:	b089      	sub	sp, #36	@ 0x24
 8006468:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800646a:	4bb3      	ldr	r3, [pc, #716]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006472:	2b18      	cmp	r3, #24
 8006474:	f200 8155 	bhi.w	8006722 <HAL_RCC_GetSysClockFreq+0x2be>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <HAL_RCC_GetSysClockFreq+0x1c>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	080064e5 	.word	0x080064e5
 8006484:	08006723 	.word	0x08006723
 8006488:	08006723 	.word	0x08006723
 800648c:	08006723 	.word	0x08006723
 8006490:	08006723 	.word	0x08006723
 8006494:	08006723 	.word	0x08006723
 8006498:	08006723 	.word	0x08006723
 800649c:	08006723 	.word	0x08006723
 80064a0:	0800650b 	.word	0x0800650b
 80064a4:	08006723 	.word	0x08006723
 80064a8:	08006723 	.word	0x08006723
 80064ac:	08006723 	.word	0x08006723
 80064b0:	08006723 	.word	0x08006723
 80064b4:	08006723 	.word	0x08006723
 80064b8:	08006723 	.word	0x08006723
 80064bc:	08006723 	.word	0x08006723
 80064c0:	08006511 	.word	0x08006511
 80064c4:	08006723 	.word	0x08006723
 80064c8:	08006723 	.word	0x08006723
 80064cc:	08006723 	.word	0x08006723
 80064d0:	08006723 	.word	0x08006723
 80064d4:	08006723 	.word	0x08006723
 80064d8:	08006723 	.word	0x08006723
 80064dc:	08006723 	.word	0x08006723
 80064e0:	08006517 	.word	0x08006517
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e4:	4b94      	ldr	r3, [pc, #592]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064f0:	4b91      	ldr	r3, [pc, #580]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	08db      	lsrs	r3, r3, #3
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	4a90      	ldr	r2, [pc, #576]	@ (800673c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006500:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006502:	e111      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006504:	4b8d      	ldr	r3, [pc, #564]	@ (800673c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006506:	61bb      	str	r3, [r7, #24]
      break;
 8006508:	e10e      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800650a:	4b8d      	ldr	r3, [pc, #564]	@ (8006740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800650c:	61bb      	str	r3, [r7, #24]
      break;
 800650e:	e10b      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006510:	4b8c      	ldr	r3, [pc, #560]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006512:	61bb      	str	r3, [r7, #24]
      break;
 8006514:	e108      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006516:	4b88      	ldr	r3, [pc, #544]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006520:	4b85      	ldr	r3, [pc, #532]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800652a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800652c:	4b82      	ldr	r3, [pc, #520]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006536:	4b80      	ldr	r3, [pc, #512]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80e1 	beq.w	800671c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f000 8083 	beq.w	8006668 <HAL_RCC_GetSysClockFreq+0x204>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b02      	cmp	r3, #2
 8006566:	f200 80a1 	bhi.w	80066ac <HAL_RCC_GetSysClockFreq+0x248>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0x114>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d056      	beq.n	8006624 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006576:	e099      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006578:	4b6f      	ldr	r3, [pc, #444]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02d      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006584:	4b6c      	ldr	r3, [pc, #432]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a6b      	ldr	r2, [pc, #428]	@ (800673c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b62      	ldr	r3, [pc, #392]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80065de:	e087      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800674c <HAL_RCC_GetSysClockFreq+0x2e8>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b51      	ldr	r3, [pc, #324]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a02 	vldr	s12, [r7, #8]
 8006606:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006622:	e065      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006750 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a02 	vldr	s12, [r7, #8]
 800664a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006666:	e043      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a02 	vldr	s12, [r7, #8]
 800668e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006748 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066aa:	e021      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006750 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066be:	4b1e      	ldr	r3, [pc, #120]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80066d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066f0:	4b11      	ldr	r3, [pc, #68]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f4:	0a5b      	lsrs	r3, r3, #9
 80066f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fa:	3301      	adds	r3, #1
 80066fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006708:	edd7 6a07 	vldr	s13, [r7, #28]
 800670c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006714:	ee17 3a90 	vmov	r3, s15
 8006718:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800671a:	e005      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]
      break;
 8006720:	e002      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006722:	4b07      	ldr	r3, [pc, #28]	@ (8006740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006724:	61bb      	str	r3, [r7, #24]
      break;
 8006726:	bf00      	nop
  }

  return sysclockfreq;
 8006728:	69bb      	ldr	r3, [r7, #24]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3724      	adds	r7, #36	@ 0x24
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	03d09000 	.word	0x03d09000
 8006740:	003d0900 	.word	0x003d0900
 8006744:	007a1200 	.word	0x007a1200
 8006748:	46000000 	.word	0x46000000
 800674c:	4c742400 	.word	0x4c742400
 8006750:	4a742400 	.word	0x4a742400
 8006754:	4af42400 	.word	0x4af42400

08006758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800675e:	f7ff fe81 	bl	8006464 <HAL_RCC_GetSysClockFreq>
 8006762:	4602      	mov	r2, r0
 8006764:	4b10      	ldr	r3, [pc, #64]	@ (80067a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	490f      	ldr	r1, [pc, #60]	@ (80067ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006770:	5ccb      	ldrb	r3, [r1, r3]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	fa22 f303 	lsr.w	r3, r2, r3
 800677a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800677c:	4b0a      	ldr	r3, [pc, #40]	@ (80067a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	4a09      	ldr	r2, [pc, #36]	@ (80067ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006786:	5cd3      	ldrb	r3, [r2, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	4a07      	ldr	r2, [pc, #28]	@ (80067b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006796:	4a07      	ldr	r2, [pc, #28]	@ (80067b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800679c:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	58024400 	.word	0x58024400
 80067ac:	0800b24c 	.word	0x0800b24c
 80067b0:	24000820 	.word	0x24000820
 80067b4:	2400081c 	.word	0x2400081c

080067b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80067bc:	f7ff ffcc 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	4904      	ldr	r1, [pc, #16]	@ (80067e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ce:	5ccb      	ldrb	r3, [r1, r3]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	58024400 	.word	0x58024400
 80067e0:	0800b24c 	.word	0x0800b24c

080067e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067e8:	f7ff ffb6 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 80067ec:	4602      	mov	r2, r0
 80067ee:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	4904      	ldr	r1, [pc, #16]	@ (800680c <HAL_RCC_GetPCLK2Freq+0x28>)
 80067fa:	5ccb      	ldrb	r3, [r1, r3]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd80      	pop	{r7, pc}
 8006808:	58024400 	.word	0x58024400
 800680c:	0800b24c 	.word	0x0800b24c

08006810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006814:	b0ca      	sub	sp, #296	@ 0x128
 8006816:	af00      	add	r7, sp, #0
 8006818:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800681c:	2300      	movs	r3, #0
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006834:	2500      	movs	r5, #0
 8006836:	ea54 0305 	orrs.w	r3, r4, r5
 800683a:	d049      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006842:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006846:	d02f      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006848:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800684c:	d828      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800684e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006852:	d01a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006858:	d822      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800685e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006862:	d007      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006864:	e01c      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006866:	4bb8      	ldr	r3, [pc, #736]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	4ab7      	ldr	r2, [pc, #732]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800686c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006872:	e01a      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	3308      	adds	r3, #8
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fc8f 	bl	80081a0 <RCCEx_PLL2_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006888:	e00f      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	3328      	adds	r3, #40	@ 0x28
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fd36 	bl	8008304 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800689e:	e004      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a6:	e000      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068b2:	4ba5      	ldr	r3, [pc, #660]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068c0:	4aa1      	ldr	r2, [pc, #644]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80068dc:	f04f 0900 	mov.w	r9, #0
 80068e0:	ea58 0309 	orrs.w	r3, r8, r9
 80068e4:	d047      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d82a      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068f0:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800690d 	.word	0x0800690d
 80068fc:	0800691b 	.word	0x0800691b
 8006900:	08006931 	.word	0x08006931
 8006904:	0800694f 	.word	0x0800694f
 8006908:	0800694f 	.word	0x0800694f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4b8e      	ldr	r3, [pc, #568]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a8d      	ldr	r2, [pc, #564]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006918:	e01a      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	3308      	adds	r3, #8
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fc3c 	bl	80081a0 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800692e:	e00f      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	3328      	adds	r3, #40	@ 0x28
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fce3 	bl	8008304 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006944:	e004      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800694c:	e000      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800694e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006958:	4b7b      	ldr	r3, [pc, #492]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800695a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695c:	f023 0107 	bic.w	r1, r3, #7
 8006960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	4a78      	ldr	r2, [pc, #480]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006968:	430b      	orrs	r3, r1
 800696a:	6513      	str	r3, [r2, #80]	@ 0x50
 800696c:	e003      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006982:	f04f 0b00 	mov.w	fp, #0
 8006986:	ea5a 030b 	orrs.w	r3, sl, fp
 800698a:	d04c      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006996:	d030      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699c:	d829      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800699e:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a0:	d02d      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80069a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a4:	d825      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069a6:	2b80      	cmp	r3, #128	@ 0x80
 80069a8:	d018      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d821      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80069b2:	2b40      	cmp	r3, #64	@ 0x40
 80069b4:	d007      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80069b6:	e01c      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4b63      	ldr	r3, [pc, #396]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	4a62      	ldr	r2, [pc, #392]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069c4:	e01c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ca:	3308      	adds	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fbe6 	bl	80081a0 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069da:	e011      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	3328      	adds	r3, #40	@ 0x28
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fc8d 	bl	8008304 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a08:	4b4f      	ldr	r3, [pc, #316]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a16:	4a4c      	ldr	r2, [pc, #304]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006a32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006a36:	2300      	movs	r3, #0
 8006a38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006a3c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d053      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a52:	d035      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a58:	d82e      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a5e:	d031      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a64:	d828      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6a:	d01a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a70:	d822      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a7c:	e01c      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7e:	4b32      	ldr	r3, [pc, #200]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	4a31      	ldr	r2, [pc, #196]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a8a:	e01c      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	3308      	adds	r3, #8
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fb83 	bl	80081a0 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006aa0:	e011      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fc2a 	bl	8008304 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ab6:	e006      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10b      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ace:	4b1e      	ldr	r3, [pc, #120]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ade:	4a1a      	ldr	r2, [pc, #104]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006afa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b04:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d056      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b1a:	d038      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b20:	d831      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b26:	d034      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006b28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b2c:	d82b      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b32:	d01d      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006b34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b38:	d825      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d006      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b44:	e01f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4ba2      	ldr	r3, [pc, #648]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	4aa1      	ldr	r2, [pc, #644]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b58:	e01c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	3308      	adds	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fb1c 	bl	80081a0 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3328      	adds	r3, #40	@ 0x28
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fbc3 	bl	8008304 <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b84:	e006      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8c:	e002      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b9c:	4b8e      	ldr	r3, [pc, #568]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006bac:	4a8a      	ldr	r2, [pc, #552]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bb2:	e003      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d03a      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	2b30      	cmp	r3, #48	@ 0x30
 8006be4:	d01f      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006be6:	2b30      	cmp	r3, #48	@ 0x30
 8006be8:	d819      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d00c      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d815      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d019      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d111      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfa:	4b77      	ldr	r3, [pc, #476]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4a76      	ldr	r2, [pc, #472]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c06:	e011      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	2102      	movs	r1, #2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fac5 	bl	80081a0 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c34:	4b68      	ldr	r3, [pc, #416]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c42:	4a65      	ldr	r2, [pc, #404]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c48:	e003      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	d051      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c7c:	d035      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c82:	d82e      	bhi.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c88:	d031      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c8e:	d828      	bhi.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c94:	d01a      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c9a:	d822      	bhi.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca4:	d007      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ca6:	e01c      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e01c      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3308      	adds	r3, #8
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fa6e 	bl	80081a0 <RCCEx_PLL2_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cca:	e011      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	3328      	adds	r3, #40	@ 0x28
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fb15 	bl	8008304 <RCCEx_PLL3_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ce0:	e006      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cf8:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d06:	4a34      	ldr	r2, [pc, #208]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d0c:	e003      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006d22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006d30:	460b      	mov	r3, r1
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d056      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d40:	d033      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d46:	d82c      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d4c:	d02f      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d52:	d826      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d58:	d02b      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d5e:	d820      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d64:	d012      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d6a:	d81a      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d022      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d74:	d115      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fa0e 	bl	80081a0 <RCCEx_PLL2_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d8a:	e015      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	3328      	adds	r3, #40	@ 0x28
 8006d92:	2101      	movs	r1, #1
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fab5 	bl	8008304 <RCCEx_PLL3_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006da0:	e00a      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006da8:	e006      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006daa:	bf00      	nop
 8006dac:	e004      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dce:	4a02      	ldr	r2, [pc, #8]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dfa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d055      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e10:	d033      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e16:	d82c      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1c:	d02f      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e22:	d826      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e28:	d02b      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006e2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e2e:	d820      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e34:	d012      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e3a:	d81a      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d022      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e44:	d115      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f001 f9a6 	bl	80081a0 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e5a:	e015      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	3328      	adds	r3, #40	@ 0x28
 8006e62:	2101      	movs	r1, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fa4d 	bl	8008304 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e70:	e00a      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e78:	e006      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e7a:	bf00      	nop
 8006e7c:	e004      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e7e:	bf00      	nop
 8006e80:	e002      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e82:	bf00      	nop
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e90:	4ba3      	ldr	r3, [pc, #652]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	d037      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eda:	d00e      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee0:	d816      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eea:	d111      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b8c      	ldr	r3, [pc, #560]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a8b      	ldr	r2, [pc, #556]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ef8:	e00f      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	3308      	adds	r3, #8
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f94c 	bl	80081a0 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f0e:	e004      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f16:	e000      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f22:	4b7f      	ldr	r3, [pc, #508]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f30:	4a7b      	ldr	r2, [pc, #492]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f32:	430b      	orrs	r3, r1
 8006f34:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f50:	2300      	movs	r3, #0
 8006f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	d039      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d81c      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006fad 	.word	0x08006fad
 8006f74:	08006f81 	.word	0x08006f81
 8006f78:	08006f8f 	.word	0x08006f8f
 8006f7c:	08006fad 	.word	0x08006fad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4b67      	ldr	r3, [pc, #412]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	4a66      	ldr	r2, [pc, #408]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f8c:	e00f      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	3308      	adds	r3, #8
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 f902 	bl	80081a0 <RCCEx_PLL2_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fba:	f023 0103 	bic.w	r1, r3, #3
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc4:	4a56      	ldr	r2, [pc, #344]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f000 809f 	beq.w	8007134 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007002:	f7fa fff1 	bl	8001fe8 <HAL_GetTick>
 8007006:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800700a:	e00b      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700c:	f7fa ffec 	bl	8001fe8 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b64      	cmp	r3, #100	@ 0x64
 800701a:	d903      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007022:	e005      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007024:	4b3f      	ldr	r3, [pc, #252]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0ed      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007034:	2b00      	cmp	r3, #0
 8007036:	d179      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007038:	4b39      	ldr	r3, [pc, #228]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007040:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007044:	4053      	eors	r3, r2
 8007046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800704a:	2b00      	cmp	r3, #0
 800704c:	d015      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800704e:	4b34      	ldr	r3, [pc, #208]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007056:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800705a:	4b31      	ldr	r3, [pc, #196]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705e:	4a30      	ldr	r2, [pc, #192]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007064:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007066:	4b2e      	ldr	r3, [pc, #184]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706a:	4a2d      	ldr	r2, [pc, #180]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007070:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007072:	4a2b      	ldr	r2, [pc, #172]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007078:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007086:	d118      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fa ffae 	bl	8001fe8 <HAL_GetTick>
 800708c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007090:	e00d      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fa ffa9 	bl	8001fe8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d903      	bls.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80070ac:	e005      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0eb      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80070ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d129      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070d2:	d10e      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80070d4:	4b12      	ldr	r3, [pc, #72]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070e4:	091a      	lsrs	r2, r3, #4
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ec:	430b      	orrs	r3, r1
 80070ee:	6113      	str	r3, [r2, #16]
 80070f0:	e005      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80070f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070fc:	6113      	str	r3, [r2, #16]
 80070fe:	4b08      	ldr	r3, [pc, #32]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007100:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800710a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710e:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6713      	str	r3, [r2, #112]	@ 0x70
 8007114:	e00e      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800711e:	e009      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007120:	58024400 	.word	0x58024400
 8007124:	58024800 	.word	0x58024800
 8007128:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f002 0301 	and.w	r3, r2, #1
 8007140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007144:	2300      	movs	r3, #0
 8007146:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800714a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	f000 8089 	beq.w	8007268 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800715c:	2b28      	cmp	r3, #40	@ 0x28
 800715e:	d86b      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	08007241 	.word	0x08007241
 800716c:	08007239 	.word	0x08007239
 8007170:	08007239 	.word	0x08007239
 8007174:	08007239 	.word	0x08007239
 8007178:	08007239 	.word	0x08007239
 800717c:	08007239 	.word	0x08007239
 8007180:	08007239 	.word	0x08007239
 8007184:	08007239 	.word	0x08007239
 8007188:	0800720d 	.word	0x0800720d
 800718c:	08007239 	.word	0x08007239
 8007190:	08007239 	.word	0x08007239
 8007194:	08007239 	.word	0x08007239
 8007198:	08007239 	.word	0x08007239
 800719c:	08007239 	.word	0x08007239
 80071a0:	08007239 	.word	0x08007239
 80071a4:	08007239 	.word	0x08007239
 80071a8:	08007223 	.word	0x08007223
 80071ac:	08007239 	.word	0x08007239
 80071b0:	08007239 	.word	0x08007239
 80071b4:	08007239 	.word	0x08007239
 80071b8:	08007239 	.word	0x08007239
 80071bc:	08007239 	.word	0x08007239
 80071c0:	08007239 	.word	0x08007239
 80071c4:	08007239 	.word	0x08007239
 80071c8:	08007241 	.word	0x08007241
 80071cc:	08007239 	.word	0x08007239
 80071d0:	08007239 	.word	0x08007239
 80071d4:	08007239 	.word	0x08007239
 80071d8:	08007239 	.word	0x08007239
 80071dc:	08007239 	.word	0x08007239
 80071e0:	08007239 	.word	0x08007239
 80071e4:	08007239 	.word	0x08007239
 80071e8:	08007241 	.word	0x08007241
 80071ec:	08007239 	.word	0x08007239
 80071f0:	08007239 	.word	0x08007239
 80071f4:	08007239 	.word	0x08007239
 80071f8:	08007239 	.word	0x08007239
 80071fc:	08007239 	.word	0x08007239
 8007200:	08007239 	.word	0x08007239
 8007204:	08007239 	.word	0x08007239
 8007208:	08007241 	.word	0x08007241
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	3308      	adds	r3, #8
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f000 ffc3 	bl	80081a0 <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007226:	3328      	adds	r3, #40	@ 0x28
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 f86a 	bl	8008304 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800724a:	4bbf      	ldr	r3, [pc, #764]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007258:	4abb      	ldr	r2, [pc, #748]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6553      	str	r3, [r2, #84]	@ 0x54
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f002 0302 	and.w	r3, r2, #2
 8007274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800727e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d041      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800728e:	2b05      	cmp	r3, #5
 8007290:	d824      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007292:	a201      	add	r2, pc, #4	@ (adr r2, 8007298 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072e5 	.word	0x080072e5
 800729c:	080072b1 	.word	0x080072b1
 80072a0:	080072c7 	.word	0x080072c7
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	080072e5 	.word	0x080072e5
 80072ac:	080072e5 	.word	0x080072e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b4:	3308      	adds	r3, #8
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 ff71 	bl	80081a0 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072c4:	e00f      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ca:	3328      	adds	r3, #40	@ 0x28
 80072cc:	2101      	movs	r1, #1
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f818 	bl	8008304 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072ee:	4b96      	ldr	r3, [pc, #600]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	f023 0107 	bic.w	r1, r3, #7
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072fc:	4a92      	ldr	r2, [pc, #584]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6553      	str	r3, [r2, #84]	@ 0x54
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f002 0304 	and.w	r3, r2, #4
 8007318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800731c:	2300      	movs	r3, #0
 800731e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007322:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007326:	460b      	mov	r3, r1
 8007328:	4313      	orrs	r3, r2
 800732a:	d044      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007334:	2b05      	cmp	r3, #5
 8007336:	d825      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007338:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	0800738d 	.word	0x0800738d
 8007344:	08007359 	.word	0x08007359
 8007348:	0800736f 	.word	0x0800736f
 800734c:	0800738d 	.word	0x0800738d
 8007350:	0800738d 	.word	0x0800738d
 8007354:	0800738d 	.word	0x0800738d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	3308      	adds	r3, #8
 800735e:	2101      	movs	r1, #1
 8007360:	4618      	mov	r0, r3
 8007362:	f000 ff1d 	bl	80081a0 <RCCEx_PLL2_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800736c:	e00f      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	3328      	adds	r3, #40	@ 0x28
 8007374:	2101      	movs	r1, #1
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ffc4 	bl	8008304 <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007382:	e004      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800738a:	e000      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800738c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007396:	4b6c      	ldr	r3, [pc, #432]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739a:	f023 0107 	bic.w	r1, r3, #7
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a6:	4a68      	ldr	r2, [pc, #416]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a8:	430b      	orrs	r3, r1
 80073aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f002 0320 	and.w	r3, r2, #32
 80073c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c6:	2300      	movs	r3, #0
 80073c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d055      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e2:	d033      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80073e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e8:	d82c      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ee:	d02f      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d826      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073fa:	d02b      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80073fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007400:	d820      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007406:	d012      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740c:	d81a      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d022      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007416:	d115      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741c:	3308      	adds	r3, #8
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f000 febd 	bl	80081a0 <RCCEx_PLL2_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800742c:	e015      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3328      	adds	r3, #40	@ 0x28
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f000 ff64 	bl	8008304 <RCCEx_PLL3_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007442:	e00a      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744a:	e006      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800744c:	bf00      	nop
 800744e:	e004      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007450:	bf00      	nop
 8007452:	e002      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007454:	bf00      	nop
 8007456:	e000      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007462:	4b39      	ldr	r3, [pc, #228]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007472:	4a35      	ldr	r2, [pc, #212]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007474:	430b      	orrs	r3, r1
 8007476:	6553      	str	r3, [r2, #84]	@ 0x54
 8007478:	e003      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800748e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007492:	2300      	movs	r3, #0
 8007494:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007498:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800749c:	460b      	mov	r3, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	d058      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074ae:	d033      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80074b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074b4:	d82c      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ba:	d02f      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c0:	d826      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c6:	d02b      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80074c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074cc:	d820      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d2:	d012      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80074d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d8:	d81a      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d022      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80074de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e2:	d115      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	3308      	adds	r3, #8
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fe57 	bl	80081a0 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074f8:	e015      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	3328      	adds	r3, #40	@ 0x28
 8007500:	2102      	movs	r1, #2
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fefe 	bl	8008304 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800750e:	e00a      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007516:	e006      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007518:	bf00      	nop
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10e      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800752e:	4b06      	ldr	r3, [pc, #24]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007532:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800753e:	4a02      	ldr	r2, [pc, #8]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007540:	430b      	orrs	r3, r1
 8007542:	6593      	str	r3, [r2, #88]	@ 0x58
 8007544:	e006      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007564:	2300      	movs	r3, #0
 8007566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800756a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800756e:	460b      	mov	r3, r1
 8007570:	4313      	orrs	r3, r2
 8007572:	d055      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800757c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007580:	d033      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007582:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007586:	d82c      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800758c:	d02f      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800758e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007592:	d826      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007594:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007598:	d02b      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800759a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800759e:	d820      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075a4:	d012      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80075a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075aa:	d81a      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d022      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80075b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b4:	d115      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	3308      	adds	r3, #8
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fdee 	bl	80081a0 <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075ca:	e015      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	3328      	adds	r3, #40	@ 0x28
 80075d2:	2102      	movs	r1, #2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fe95 	bl	8008304 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075e0:	e00a      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075e8:	e006      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ea:	bf00      	nop
 80075ec:	e004      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e002      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007600:	4ba1      	ldr	r3, [pc, #644]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007604:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007610:	4a9d      	ldr	r2, [pc, #628]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007612:	430b      	orrs	r3, r1
 8007614:	6593      	str	r3, [r2, #88]	@ 0x58
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f002 0308 	and.w	r3, r2, #8
 800762c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007630:	2300      	movs	r3, #0
 8007632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007636:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800763a:	460b      	mov	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	d01e      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764c:	d10c      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007652:	3328      	adds	r3, #40	@ 0x28
 8007654:	2102      	movs	r1, #2
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fe54 	bl	8008304 <RCCEx_PLL3_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007668:	4b87      	ldr	r3, [pc, #540]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007678:	4a83      	ldr	r2, [pc, #524]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800767a:	430b      	orrs	r3, r1
 800767c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f002 0310 	and.w	r3, r2, #16
 800768a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800768e:	2300      	movs	r3, #0
 8007690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007694:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007698:	460b      	mov	r3, r1
 800769a:	4313      	orrs	r3, r2
 800769c:	d01e      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076aa:	d10c      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	3328      	adds	r3, #40	@ 0x28
 80076b2:	2102      	movs	r1, #2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fe25 	bl	8008304 <RCCEx_PLL3_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076c6:	4b70      	ldr	r3, [pc, #448]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076d6:	4a6c      	ldr	r2, [pc, #432]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d8:	430b      	orrs	r3, r1
 80076da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076f6:	460b      	mov	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d03e      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007708:	d022      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800770a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770e:	d81b      	bhi.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007718:	d00b      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800771a:	e015      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	3308      	adds	r3, #8
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fd3b 	bl	80081a0 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007730:	e00f      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	3328      	adds	r3, #40	@ 0x28
 8007738:	2102      	movs	r1, #2
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fde2 	bl	8008304 <RCCEx_PLL3_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007746:	e004      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800774e:	e000      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10b      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800775a:	4b4b      	ldr	r3, [pc, #300]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800776a:	4a47      	ldr	r2, [pc, #284]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007770:	e003      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007786:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007788:	2300      	movs	r3, #0
 800778a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800778c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d03b      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077a2:	d01f      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80077a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077a8:	d818      	bhi.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80077aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ae:	d003      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80077b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077b4:	d007      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80077b6:	e011      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b8:	4b33      	ldr	r3, [pc, #204]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	4a32      	ldr	r2, [pc, #200]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80077c4:	e00f      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ca:	3328      	adds	r3, #40	@ 0x28
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fd98 	bl	8008304 <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80077da:	e004      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077e2:	e000      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80077e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077ee:	4b26      	ldr	r3, [pc, #152]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007800:	430b      	orrs	r3, r1
 8007802:	6553      	str	r3, [r2, #84]	@ 0x54
 8007804:	e003      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800780a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800781a:	673b      	str	r3, [r7, #112]	@ 0x70
 800781c:	2300      	movs	r3, #0
 800781e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007820:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007824:	460b      	mov	r3, r1
 8007826:	4313      	orrs	r3, r2
 8007828:	d034      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d007      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800783a:	e011      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783c:	4b12      	ldr	r3, [pc, #72]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	4a11      	ldr	r2, [pc, #68]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007848:	e00e      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	3308      	adds	r3, #8
 8007850:	2102      	movs	r1, #2
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fca4 	bl	80081a0 <RCCEx_PLL2_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007870:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007874:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787e:	4a02      	ldr	r2, [pc, #8]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007880:	430b      	orrs	r3, r1
 8007882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007886:	bf00      	nop
 8007888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80078a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078a2:	2300      	movs	r3, #0
 80078a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078aa:	460b      	mov	r3, r1
 80078ac:	4313      	orrs	r3, r2
 80078ae:	d00c      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	3328      	adds	r3, #40	@ 0x28
 80078b6:	2102      	movs	r1, #2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fd23 	bl	8008304 <RCCEx_PLL3_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80078d8:	2300      	movs	r3, #0
 80078da:	667b      	str	r3, [r7, #100]	@ 0x64
 80078dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80078e0:	460b      	mov	r3, r1
 80078e2:	4313      	orrs	r3, r2
 80078e4:	d038      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078f2:	d018      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80078f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078f8:	d811      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078fe:	d014      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007904:	d80b      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800790a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007910:	4bc3      	ldr	r3, [pc, #780]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	4ac2      	ldr	r2, [pc, #776]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800791a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800791c:	e008      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007924:	e004      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800792e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007938:	4bb9      	ldr	r3, [pc, #740]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800793a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007948:	4ab5      	ldr	r2, [pc, #724]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800794a:	430b      	orrs	r3, r1
 800794c:	6553      	str	r3, [r2, #84]	@ 0x54
 800794e:	e003      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007966:	2300      	movs	r3, #0
 8007968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800796a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800796e:	460b      	mov	r3, r1
 8007970:	4313      	orrs	r3, r2
 8007972:	d009      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800797c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007982:	4aa7      	ldr	r2, [pc, #668]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007994:	653b      	str	r3, [r7, #80]	@ 0x50
 8007996:	2300      	movs	r3, #0
 8007998:	657b      	str	r3, [r7, #84]	@ 0x54
 800799a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079a4:	4b9e      	ldr	r3, [pc, #632]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80079b4:	4a9a      	ldr	r2, [pc, #616]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b6:	430b      	orrs	r3, r1
 80079b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80079c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079c8:	2300      	movs	r3, #0
 80079ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079d0:	460b      	mov	r3, r1
 80079d2:	4313      	orrs	r3, r2
 80079d4:	d009      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d6:	4b92      	ldr	r3, [pc, #584]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f8:	2300      	movs	r3, #0
 80079fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80079fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a00:	460b      	mov	r3, r1
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a06:	4b86      	ldr	r3, [pc, #536]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	4a85      	ldr	r2, [pc, #532]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a10:	6113      	str	r3, [r2, #16]
 8007a12:	4b83      	ldr	r3, [pc, #524]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a14:	6919      	ldr	r1, [r3, #16]
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a1e:	4a80      	ldr	r2, [pc, #512]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a32:	2300      	movs	r3, #0
 8007a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a40:	4b77      	ldr	r3, [pc, #476]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a44:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	4a74      	ldr	r2, [pc, #464]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a62:	2300      	movs	r3, #0
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d00a      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a70:	4b6b      	ldr	r3, [pc, #428]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a74:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a80:	4a67      	ldr	r2, [pc, #412]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d011      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fb78 	bl	80081a0 <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6239      	str	r1, [r7, #32]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007adc:	460b      	mov	r3, r1
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	d011      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	2101      	movs	r1, #1
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fb58 	bl	80081a0 <RCCEx_PLL2_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	2100      	movs	r1, #0
 8007b10:	61b9      	str	r1, [r7, #24]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	d011      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	3308      	adds	r3, #8
 8007b28:	2102      	movs	r1, #2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fb38 	bl	80081a0 <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6139      	str	r1, [r7, #16]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	d011      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	3328      	adds	r3, #40	@ 0x28
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fbca 	bl	8008304 <RCCEx_PLL3_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	f003 0310 	and.w	r3, r3, #16
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	d011      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba6:	3328      	adds	r3, #40	@ 0x28
 8007ba8:	2101      	movs	r1, #1
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fbaa 	bl	8008304 <RCCEx_PLL3_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4313      	orrs	r3, r2
 8007be0:	d011      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	3328      	adds	r3, #40	@ 0x28
 8007be8:	2102      	movs	r1, #2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb8a 	bl	8008304 <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007c06:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c20:	58024400 	.word	0x58024400

08007c24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c28:	f7fe fd96 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	4904      	ldr	r1, [pc, #16]	@ (8007c4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c3a:	5ccb      	ldrb	r3, [r1, r3]
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	0800b24c 	.word	0x0800b24c

08007c50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	@ 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c58:	4ba1      	ldr	r3, [pc, #644]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c62:	4b9f      	ldr	r3, [pc, #636]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c66:	0b1b      	lsrs	r3, r3, #12
 8007c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c7a:	4b99      	ldr	r3, [pc, #612]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8111 	beq.w	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f000 8083 	beq.w	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f200 80a1 	bhi.w	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d056      	beq.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cba:	e099      	b.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbc:	4b88      	ldr	r3, [pc, #544]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02d      	beq.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cc8:	4b85      	ldr	r3, [pc, #532]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	08db      	lsrs	r3, r3, #3
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	4a84      	ldr	r2, [pc, #528]	@ (8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d22:	e087      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	e065      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b59      	ldr	r3, [pc, #356]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007daa:	e043      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b48      	ldr	r3, [pc, #288]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dee:	e021      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b37      	ldr	r3, [pc, #220]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e34:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e38:	0a5b      	lsrs	r3, r3, #9
 8007e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5a:	ee17 2a90 	vmov	r2, s15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e88:	ee17 2a90 	vmov	r2, s15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e90:	4b13      	ldr	r3, [pc, #76]	@ (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
}
 8007ed2:	bf00      	nop
 8007ed4:	3724      	adds	r7, #36	@ 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	46000000 	.word	0x46000000
 8007eec:	4c742400 	.word	0x4c742400
 8007ef0:	4a742400 	.word	0x4a742400
 8007ef4:	4af42400 	.word	0x4af42400

08007ef8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	@ 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f00:	4ba1      	ldr	r3, [pc, #644]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0e:	0d1b      	lsrs	r3, r3, #20
 8007f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f16:	4b9c      	ldr	r3, [pc, #624]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f22:	4b99      	ldr	r3, [pc, #612]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f26:	08db      	lsrs	r3, r3, #3
 8007f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8111 	beq.w	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	f000 8083 	beq.w	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f200 80a1 	bhi.w	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d056      	beq.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f62:	e099      	b.n	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f64:	4b88      	ldr	r3, [pc, #544]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02d      	beq.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f70:	4b85      	ldr	r3, [pc, #532]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	4a84      	ldr	r2, [pc, #528]	@ (800818c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fca:	e087      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b6a      	ldr	r3, [pc, #424]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800e:	e065      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b59      	ldr	r3, [pc, #356]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008052:	e043      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b48      	ldr	r3, [pc, #288]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008096:	e021      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b37      	ldr	r3, [pc, #220]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e0:	0a5b      	lsrs	r3, r3, #9
 80080e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008102:	ee17 2a90 	vmov	r2, s15
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800810a:	4b1f      	ldr	r3, [pc, #124]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	0c1b      	lsrs	r3, r3, #16
 8008110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008124:	edd7 6a07 	vldr	s13, [r7, #28]
 8008128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008130:	ee17 2a90 	vmov	r2, s15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008138:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813c:	0e1b      	lsrs	r3, r3, #24
 800813e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008166:	e008      	b.n	800817a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
}
 800817a:	bf00      	nop
 800817c:	3724      	adds	r7, #36	@ 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
 800818c:	03d09000 	.word	0x03d09000
 8008190:	46000000 	.word	0x46000000
 8008194:	4c742400 	.word	0x4c742400
 8008198:	4a742400 	.word	0x4a742400
 800819c:	4af42400 	.word	0x4af42400

080081a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081ae:	4b53      	ldr	r3, [pc, #332]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d101      	bne.n	80081be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e099      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081be:	4b4f      	ldr	r3, [pc, #316]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a4e      	ldr	r2, [pc, #312]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ca:	f7f9 ff0d 	bl	8001fe8 <HAL_GetTick>
 80081ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081d0:	e008      	b.n	80081e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081d2:	f7f9 ff09 	bl	8001fe8 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e086      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e4:	4b45      	ldr	r3, [pc, #276]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081f0:	4b42      	ldr	r3, [pc, #264]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	493f      	ldr	r1, [pc, #252]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	628b      	str	r3, [r1, #40]	@ 0x28
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	3b01      	subs	r3, #1
 800820a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	3b01      	subs	r3, #1
 8008214:	025b      	lsls	r3, r3, #9
 8008216:	b29b      	uxth	r3, r3
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	3b01      	subs	r3, #1
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	3b01      	subs	r3, #1
 800822e:	061b      	lsls	r3, r3, #24
 8008230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008234:	4931      	ldr	r1, [pc, #196]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008236:	4313      	orrs	r3, r2
 8008238:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800823a:	4b30      	ldr	r3, [pc, #192]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	492d      	ldr	r1, [pc, #180]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800824c:	4b2b      	ldr	r3, [pc, #172]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	f023 0220 	bic.w	r2, r3, #32
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4928      	ldr	r1, [pc, #160]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800825e:	4b27      	ldr	r3, [pc, #156]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	4a26      	ldr	r2, [pc, #152]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800826a:	4b24      	ldr	r3, [pc, #144]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 800826c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800826e:	4b24      	ldr	r3, [pc, #144]	@ (8008300 <RCCEx_PLL2_Config+0x160>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	69d2      	ldr	r2, [r2, #28]
 8008276:	00d2      	lsls	r2, r2, #3
 8008278:	4920      	ldr	r1, [pc, #128]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800827e:	4b1f      	ldr	r3, [pc, #124]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008282:	4a1e      	ldr	r2, [pc, #120]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008284:	f043 0310 	orr.w	r3, r3, #16
 8008288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008290:	4b1a      	ldr	r3, [pc, #104]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	4a19      	ldr	r2, [pc, #100]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800829a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800829c:	e00f      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d106      	bne.n	80082b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082a4:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	4a14      	ldr	r2, [pc, #80]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082b0:	e005      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082b2:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	4a11      	ldr	r2, [pc, #68]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082be:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a0e      	ldr	r2, [pc, #56]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ca:	f7f9 fe8d 	bl	8001fe8 <HAL_GetTick>
 80082ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082d2:	f7f9 fe89 	bl	8001fe8 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e006      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e4:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
 8008300:	ffff0007 	.word	0xffff0007

08008304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008312:	4b53      	ldr	r3, [pc, #332]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d101      	bne.n	8008322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e099      	b.n	8008456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008322:	4b4f      	ldr	r3, [pc, #316]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a4e      	ldr	r2, [pc, #312]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800832c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832e:	f7f9 fe5b 	bl	8001fe8 <HAL_GetTick>
 8008332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008334:	e008      	b.n	8008348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008336:	f7f9 fe57 	bl	8001fe8 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e086      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008348:	4b45      	ldr	r3, [pc, #276]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008354:	4b42      	ldr	r3, [pc, #264]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008358:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	051b      	lsls	r3, r3, #20
 8008362:	493f      	ldr	r1, [pc, #252]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	628b      	str	r3, [r1, #40]	@ 0x28
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	3b01      	subs	r3, #1
 800836e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	3b01      	subs	r3, #1
 8008378:	025b      	lsls	r3, r3, #9
 800837a:	b29b      	uxth	r3, r3
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	3b01      	subs	r3, #1
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	3b01      	subs	r3, #1
 8008392:	061b      	lsls	r3, r3, #24
 8008394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008398:	4931      	ldr	r1, [pc, #196]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800839e:	4b30      	ldr	r3, [pc, #192]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	492d      	ldr	r1, [pc, #180]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4928      	ldr	r1, [pc, #160]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083c2:	4b27      	ldr	r3, [pc, #156]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	4a26      	ldr	r2, [pc, #152]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ce:	4b24      	ldr	r3, [pc, #144]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083d2:	4b24      	ldr	r3, [pc, #144]	@ (8008464 <RCCEx_PLL3_Config+0x160>)
 80083d4:	4013      	ands	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	69d2      	ldr	r2, [r2, #28]
 80083da:	00d2      	lsls	r2, r2, #3
 80083dc:	4920      	ldr	r1, [pc, #128]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	4a19      	ldr	r2, [pc, #100]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008400:	e00f      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d106      	bne.n	8008416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008408:	4b15      	ldr	r3, [pc, #84]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	4a14      	ldr	r2, [pc, #80]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008414:	e005      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008416:	4b12      	ldr	r3, [pc, #72]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	4a11      	ldr	r2, [pc, #68]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800841c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008422:	4b0f      	ldr	r3, [pc, #60]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a0e      	ldr	r2, [pc, #56]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800842c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842e:	f7f9 fddb 	bl	8001fe8 <HAL_GetTick>
 8008432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008434:	e008      	b.n	8008448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008436:	f7f9 fdd7 	bl	8001fe8 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008448:	4b05      	ldr	r3, [pc, #20]	@ (8008460 <RCCEx_PLL3_Config+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	ffff0007 	.word	0xffff0007

08008468 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e10f      	b.n	800869a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a87      	ldr	r2, [pc, #540]	@ (80086a4 <HAL_SPI_Init+0x23c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00f      	beq.n	80084aa <HAL_SPI_Init+0x42>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a86      	ldr	r2, [pc, #536]	@ (80086a8 <HAL_SPI_Init+0x240>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00a      	beq.n	80084aa <HAL_SPI_Init+0x42>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a84      	ldr	r2, [pc, #528]	@ (80086ac <HAL_SPI_Init+0x244>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d005      	beq.n	80084aa <HAL_SPI_Init+0x42>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d901      	bls.n	80084aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e0f7      	b.n	800869a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f848 	bl	8009540 <SPI_GetPacketSize>
 80084b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a7b      	ldr	r2, [pc, #492]	@ (80086a4 <HAL_SPI_Init+0x23c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00c      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a79      	ldr	r2, [pc, #484]	@ (80086a8 <HAL_SPI_Init+0x240>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a78      	ldr	r2, [pc, #480]	@ (80086ac <HAL_SPI_Init+0x244>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d002      	beq.n	80084d6 <HAL_SPI_Init+0x6e>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d811      	bhi.n	80084fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084da:	4a72      	ldr	r2, [pc, #456]	@ (80086a4 <HAL_SPI_Init+0x23c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a70      	ldr	r2, [pc, #448]	@ (80086a8 <HAL_SPI_Init+0x240>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_SPI_Init+0x8c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a6f      	ldr	r2, [pc, #444]	@ (80086ac <HAL_SPI_Init+0x244>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d104      	bne.n	80084fe <HAL_SPI_Init+0x96>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b10      	cmp	r3, #16
 80084f8:	d901      	bls.n	80084fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e0cd      	b.n	800869a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f9 f84e 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800853a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008544:	d119      	bne.n	800857a <HAL_SPI_Init+0x112>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800854e:	d103      	bne.n	8008558 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008568:	d107      	bne.n	800857a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008578:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00f      	beq.n	80085a6 <HAL_SPI_Init+0x13e>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	2b06      	cmp	r3, #6
 800858c:	d90b      	bls.n	80085a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e007      	b.n	80085b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69da      	ldr	r2, [r3, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	431a      	orrs	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c8:	ea42 0103 	orr.w	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008616:	ea42 0103 	orr.w	r1, r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d113      	bne.n	8008656 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008640:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008654:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40013000 	.word	0x40013000
 80086a8:	40003800 	.word	0x40003800
 80086ac:	40003c00 	.word	0x40003c00

080086b0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3320      	adds	r3, #32
 80086c6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086c8:	f7f9 fc8e 	bl	8001fe8 <HAL_GetTick>
 80086cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d001      	beq.n	80086de <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80086da:	2302      	movs	r3, #2
 80086dc:	e1d1      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_SPI_Transmit+0x3a>
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e1c9      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_SPI_Transmit+0x4c>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e1c2      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2203      	movs	r2, #3
 8008708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	88fa      	ldrh	r2, [r7, #6]
 800871e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008754:	d108      	bne.n	8008768 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e009      	b.n	800877c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800877a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	4b96      	ldr	r3, [pc, #600]	@ (80089dc <HAL_SPI_Transmit+0x32c>)
 8008784:	4013      	ands	r3, r2
 8008786:	88f9      	ldrh	r1, [r7, #6]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	430b      	orrs	r3, r1
 800878e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0201 	orr.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a8:	d107      	bne.n	80087ba <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d947      	bls.n	8008852 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087c2:	e03f      	b.n	8008844 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d114      	bne.n	80087fc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e2:	1d1a      	adds	r2, r3, #4
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087fa:	e023      	b.n	8008844 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fc:	f7f9 fbf4 	bl	8001fe8 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d803      	bhi.n	8008814 <HAL_SPI_Transmit+0x164>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d102      	bne.n	800881a <HAL_SPI_Transmit+0x16a>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d114      	bne.n	8008844 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fdc2 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008826:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e11e      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1b9      	bne.n	80087c4 <HAL_SPI_Transmit+0x114>
 8008850:	e0f1      	b.n	8008a36 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	2b07      	cmp	r3, #7
 8008858:	f240 80e6 	bls.w	8008a28 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800885c:	e05d      	b.n	800891a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b02      	cmp	r3, #2
 800886a:	d132      	bne.n	80088d2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b01      	cmp	r3, #1
 8008876:	d918      	bls.n	80088aa <HAL_SPI_Transmit+0x1fa>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d014      	beq.n	80088aa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008890:	1d1a      	adds	r2, r3, #4
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b02      	subs	r3, #2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088a8:	e037      	b.n	800891a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ae:	881a      	ldrh	r2, [r3, #0]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b8:	1c9a      	adds	r2, r3, #2
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088d0:	e023      	b.n	800891a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d2:	f7f9 fb89 	bl	8001fe8 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d803      	bhi.n	80088ea <HAL_SPI_Transmit+0x23a>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d102      	bne.n	80088f0 <HAL_SPI_Transmit+0x240>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d114      	bne.n	800891a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fd57 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e0b3      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d19b      	bne.n	800885e <HAL_SPI_Transmit+0x1ae>
 8008926:	e086      	b.n	8008a36 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b02      	cmp	r3, #2
 8008934:	d154      	bne.n	80089e0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b03      	cmp	r3, #3
 8008940:	d918      	bls.n	8008974 <HAL_SPI_Transmit+0x2c4>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008946:	2b40      	cmp	r3, #64	@ 0x40
 8008948:	d914      	bls.n	8008974 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b04      	subs	r3, #4
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008972:	e059      	b.n	8008a28 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800897a:	b29b      	uxth	r3, r3
 800897c:	2b01      	cmp	r3, #1
 800897e:	d917      	bls.n	80089b0 <HAL_SPI_Transmit+0x300>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d013      	beq.n	80089b0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898c:	881a      	ldrh	r2, [r3, #0]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008996:	1c9a      	adds	r2, r3, #2
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b02      	subs	r3, #2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089ae:	e03b      	b.n	8008a28 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3320      	adds	r3, #32
 80089ba:	7812      	ldrb	r2, [r2, #0]
 80089bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089da:	e025      	b.n	8008a28 <HAL_SPI_Transmit+0x378>
 80089dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089e0:	f7f9 fb02 	bl	8001fe8 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d803      	bhi.n	80089f8 <HAL_SPI_Transmit+0x348>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d102      	bne.n	80089fe <HAL_SPI_Transmit+0x34e>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d114      	bne.n	8008a28 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fcd0 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e02c      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f af79 	bne.w	8008928 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2108      	movs	r1, #8
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fd4f 	bl	80094e4 <SPI_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a52:	f043 0220 	orr.w	r2, r3, #32
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fca1 	bl	80093a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a80:	2300      	movs	r3, #0
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop

08008a8c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3330      	adds	r3, #48	@ 0x30
 8008aae:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab0:	f7f9 fa9a 	bl	8001fe8 <HAL_GetTick>
 8008ab4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d001      	beq.n	8008ac6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e250      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <HAL_SPI_Receive+0x46>
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e248      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <HAL_SPI_Receive+0x58>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e241      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2204      	movs	r2, #4
 8008af0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008b3c:	d108      	bne.n	8008b50 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e009      	b.n	8008b64 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008b62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	4b95      	ldr	r3, [pc, #596]	@ (8008dc0 <HAL_SPI_Receive+0x334>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	88f9      	ldrh	r1, [r7, #6]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b90:	d107      	bne.n	8008ba2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d96c      	bls.n	8008c84 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008baa:	e064      	b.n	8008c76 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d114      	bne.n	8008bec <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bcc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bea:	e044      	b.n	8008c76 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	8bfa      	ldrh	r2, [r7, #30]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d919      	bls.n	8008c2e <HAL_SPI_Receive+0x1a2>
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d014      	beq.n	8008c2e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c0e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c2c:	e023      	b.n	8008c76 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c2e:	f7f9 f9db 	bl	8001fe8 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d803      	bhi.n	8008c46 <HAL_SPI_Receive+0x1ba>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d102      	bne.n	8008c4c <HAL_SPI_Receive+0x1c0>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d114      	bne.n	8008c76 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fba9 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e178      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d194      	bne.n	8008bac <HAL_SPI_Receive+0x120>
 8008c82:	e15e      	b.n	8008f42 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b07      	cmp	r3, #7
 8008c8a:	f240 8153 	bls.w	8008f34 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c8e:	e08f      	b.n	8008db0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d114      	bne.n	8008cd0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	8812      	ldrh	r2, [r2, #0]
 8008cae:	b292      	uxth	r2, r2
 8008cb0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cb6:	1c9a      	adds	r2, r3, #2
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cce:	e06f      	b.n	8008db0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8bfa      	ldrh	r2, [r7, #30]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d924      	bls.n	8008d28 <HAL_SPI_Receive+0x29c>
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01f      	beq.n	8008d28 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf8:	1c9a      	adds	r2, r3, #2
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	8812      	ldrh	r2, [r2, #0]
 8008d06:	b292      	uxth	r2, r2
 8008d08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0e:	1c9a      	adds	r2, r3, #2
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b02      	subs	r3, #2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d26:	e043      	b.n	8008db0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d119      	bne.n	8008d68 <HAL_SPI_Receive+0x2dc>
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d014      	beq.n	8008d68 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	8812      	ldrh	r2, [r2, #0]
 8008d46:	b292      	uxth	r2, r2
 8008d48:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4e:	1c9a      	adds	r2, r3, #2
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d66:	e023      	b.n	8008db0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d68:	f7f9 f93e 	bl	8001fe8 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d803      	bhi.n	8008d80 <HAL_SPI_Receive+0x2f4>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d102      	bne.n	8008d86 <HAL_SPI_Receive+0x2fa>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d114      	bne.n	8008db0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fb0c 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e0db      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f af69 	bne.w	8008c90 <HAL_SPI_Receive+0x204>
 8008dbe:	e0c0      	b.n	8008f42 <HAL_SPI_Receive+0x4b6>
 8008dc0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d117      	bne.n	8008e0a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e08:	e094      	b.n	8008f34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8bfa      	ldrh	r2, [r7, #30]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d946      	bls.n	8008ea6 <HAL_SPI_Receive+0x41a>
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d041      	beq.n	8008ea6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ea4:	e046      	b.n	8008f34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d81c      	bhi.n	8008eec <HAL_SPI_Receive+0x460>
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d017      	beq.n	8008eec <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eea:	e023      	b.n	8008f34 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eec:	f7f9 f87c 	bl	8001fe8 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d803      	bhi.n	8008f04 <HAL_SPI_Receive+0x478>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d102      	bne.n	8008f0a <HAL_SPI_Receive+0x47e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d114      	bne.n	8008f34 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fa4a 	bl	80093a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e019      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f47f af41 	bne.w	8008dc4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fa2e 	bl	80093a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e000      	b.n	8008f68 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008f66:	2300      	movs	r3, #0
  }
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	@ 0x28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fa2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3330      	adds	r3, #48	@ 0x30
 8008faa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d010      	beq.n	8008fd8 <HAL_SPI_IRQHandler+0x68>
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fce:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f9c3 	bl	800935c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008fd6:	e192      	b.n	80092fe <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d113      	bne.n	800900a <HAL_SPI_IRQHandler+0x9a>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10e      	bne.n	800900a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
    handled = 1UL;
 8009006:	2301      	movs	r3, #1
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10f      	bne.n	8009034 <HAL_SPI_IRQHandler+0xc4>
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
    handled = 1UL;
 8009030:	2301      	movs	r3, #1
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10f      	bne.n	800905e <HAL_SPI_IRQHandler+0xee>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
    handled = 1UL;
 800905a:	2301      	movs	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 8147 	bne.w	80092f4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 808b 	beq.w	8009188 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0208 	orr.w	r2, r2, #8
 8009080:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699a      	ldr	r2, [r3, #24]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0210 	orr.w	r2, r2, #16
 8009090:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090a0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f022 0208 	bic.w	r2, r2, #8
 80090b0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d13d      	bne.n	800913c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80090c0:	e036      	b.n	8009130 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	2b0f      	cmp	r3, #15
 80090c8:	d90b      	bls.n	80090e2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090d4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	665a      	str	r2, [r3, #100]	@ 0x64
 80090e0:	e01d      	b.n	800911e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b07      	cmp	r3, #7
 80090e8:	d90b      	bls.n	8009102 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	8812      	ldrh	r2, [r2, #0]
 80090f2:	b292      	uxth	r2, r2
 80090f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	665a      	str	r2, [r3, #100]	@ 0x64
 8009100:	e00d      	b.n	800911e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1c2      	bne.n	80090c2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f931 	bl	80093a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8f7 	bl	8009348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800915a:	e0d0      	b.n	80092fe <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800915c:	7cfb      	ldrb	r3, [r7, #19]
 800915e:	2b05      	cmp	r3, #5
 8009160:	d103      	bne.n	800916a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f8e6 	bl	8009334 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009168:	e0c6      	b.n	80092f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800916a:	7cfb      	ldrb	r3, [r7, #19]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d103      	bne.n	8009178 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f8d5 	bl	8009320 <HAL_SPI_RxCpltCallback>
    return;
 8009176:	e0bf      	b.n	80092f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009178:	7cfb      	ldrb	r3, [r7, #19]
 800917a:	2b03      	cmp	r3, #3
 800917c:	f040 80bc 	bne.w	80092f8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f8c3 	bl	800930c <HAL_SPI_TxCpltCallback>
    return;
 8009186:	e0b7      	b.n	80092f8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80b5 	beq.w	80092fe <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00f      	beq.n	80091be <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091a4:	f043 0204 	orr.w	r2, r3, #4
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00f      	beq.n	80091e8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ce:	f043 0201 	orr.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091e6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00f      	beq.n	8009212 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091f8:	f043 0208 	orr.w	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009210:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00f      	beq.n	800923c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009222:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699a      	ldr	r2, [r3, #24]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0220 	orr.w	r2, r2, #32
 800923a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009242:	2b00      	cmp	r3, #0
 8009244:	d05a      	beq.n	80092fc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0201 	bic.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6919      	ldr	r1, [r3, #16]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4b28      	ldr	r3, [pc, #160]	@ (8009304 <HAL_SPI_IRQHandler+0x394>)
 8009262:	400b      	ands	r3, r1
 8009264:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800926c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009270:	d138      	bne.n	80092e4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689a      	ldr	r2, [r3, #8]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009280:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d013      	beq.n	80092b2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800928e:	4a1e      	ldr	r2, [pc, #120]	@ (8009308 <HAL_SPI_IRQHandler+0x398>)
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009296:	4618      	mov	r0, r3
 8009298:	f7f9 fb4e 	bl	8002938 <HAL_DMA_Abort_IT>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d007      	beq.n	80092b2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d020      	beq.n	80092fc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092be:	4a12      	ldr	r2, [pc, #72]	@ (8009308 <HAL_SPI_IRQHandler+0x398>)
 80092c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7f9 fb36 	bl	8002938 <HAL_DMA_Abort_IT>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d014      	beq.n	80092fc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80092e2:	e00b      	b.n	80092fc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f82b 	bl	8009348 <HAL_SPI_ErrorCallback>
    return;
 80092f2:	e003      	b.n	80092fc <HAL_SPI_IRQHandler+0x38c>
    return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_SPI_IRQHandler+0x38e>
    return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_SPI_IRQHandler+0x38e>
    return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	3728      	adds	r7, #40	@ 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	fffffc94 	.word	0xfffffc94
 8009308:	08009371 	.word	0x08009371

0800930c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff ffd6 	bl	8009348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0208 	orr.w	r2, r2, #8
 80093c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0210 	orr.w	r2, r2, #16
 80093d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0201 	bic.w	r2, r2, #1
 80093e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6919      	ldr	r1, [r3, #16]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b3c      	ldr	r3, [pc, #240]	@ (80094e0 <SPI_CloseTransfer+0x13c>)
 80093f0:	400b      	ands	r3, r1
 80093f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009402:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b04      	cmp	r3, #4
 800940e:	d014      	beq.n	800943a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00f      	beq.n	800943a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009420:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699a      	ldr	r2, [r3, #24]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0220 	orr.w	r2, r2, #32
 8009438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b03      	cmp	r3, #3
 8009444:	d014      	beq.n	8009470 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00f      	beq.n	8009470 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009456:	f043 0204 	orr.w	r2, r3, #4
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800946e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00f      	beq.n	800949a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009480:	f043 0201 	orr.w	r2, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699a      	ldr	r2, [r3, #24]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009498:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00f      	beq.n	80094c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094aa:	f043 0208 	orr.w	r2, r3, #8
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	fffffc90 	.word	0xfffffc90

080094e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80094f4:	e010      	b.n	8009518 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f6:	f7f8 fd77 	bl	8001fe8 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d803      	bhi.n	800950e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d102      	bne.n	8009514 <SPI_WaitOnFlagUntilTimeout+0x30>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e00f      	b.n	8009538 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695a      	ldr	r2, [r3, #20]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	4013      	ands	r3, r2
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	461a      	mov	r2, r3
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	429a      	cmp	r2, r3
 8009534:	d0df      	beq.n	80094f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3307      	adds	r3, #7
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	fb02 f303 	mul.w	r3, r2, r3
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e042      	b.n	800960e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f83b 	bl	8009616 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2224      	movs	r2, #36	@ 0x24
 80095a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0201 	bic.w	r2, r2, #1
 80095b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fef1 	bl	800a3a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f986 	bl	80098d8 <UART_SetConfig>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e01b      	b.n	800960e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0201 	orr.w	r2, r2, #1
 8009604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 ff70 	bl	800a4ec <UART_CheckIdleState>
 800960c:	4603      	mov	r3, r0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800961e:	bf00      	nop
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b08a      	sub	sp, #40	@ 0x28
 800962e:	af02      	add	r7, sp, #8
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	603b      	str	r3, [r7, #0]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009640:	2b20      	cmp	r3, #32
 8009642:	d17b      	bne.n	800973c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_UART_Transmit+0x26>
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e074      	b.n	800973e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2221      	movs	r2, #33	@ 0x21
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009664:	f7f8 fcc0 	bl	8001fe8 <HAL_GetTick>
 8009668:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	88fa      	ldrh	r2, [r7, #6]
 8009676:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009682:	d108      	bne.n	8009696 <HAL_UART_Transmit+0x6c>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	e003      	b.n	800969e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800969e:	e030      	b.n	8009702 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2180      	movs	r1, #128	@ 0x80
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 ffc8 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e03d      	b.n	800973e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	3302      	adds	r3, #2
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e007      	b.n	80096f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3301      	adds	r3, #1
 80096ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009708:	b29b      	uxth	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1c8      	bne.n	80096a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2200      	movs	r2, #0
 8009716:	2140      	movs	r1, #64	@ 0x40
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 ff91 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e006      	b.n	800973e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	e000      	b.n	800973e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800973c:	2302      	movs	r3, #2
  }
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b08a      	sub	sp, #40	@ 0x28
 800974a:	af02      	add	r7, sp, #8
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800975c:	2b20      	cmp	r3, #32
 800975e:	f040 80b5 	bne.w	80098cc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_UART_Receive+0x28>
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e0ad      	b.n	80098ce <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2222      	movs	r2, #34	@ 0x22
 800977e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009788:	f7f8 fc2e 	bl	8001fe8 <HAL_GetTick>
 800978c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097a6:	d10e      	bne.n	80097c6 <HAL_UART_Receive+0x80>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <HAL_UART_Receive+0x76>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80097b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097ba:	e02d      	b.n	8009818 <HAL_UART_Receive+0xd2>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	22ff      	movs	r2, #255	@ 0xff
 80097c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097c4:	e028      	b.n	8009818 <HAL_UART_Receive+0xd2>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10d      	bne.n	80097ea <HAL_UART_Receive+0xa4>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_Receive+0x9a>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	22ff      	movs	r2, #255	@ 0xff
 80097da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097de:	e01b      	b.n	8009818 <HAL_UART_Receive+0xd2>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	227f      	movs	r2, #127	@ 0x7f
 80097e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097e8:	e016      	b.n	8009818 <HAL_UART_Receive+0xd2>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097f2:	d10d      	bne.n	8009810 <HAL_UART_Receive+0xca>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <HAL_UART_Receive+0xc0>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	227f      	movs	r2, #127	@ 0x7f
 8009800:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009804:	e008      	b.n	8009818 <HAL_UART_Receive+0xd2>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	223f      	movs	r2, #63	@ 0x3f
 800980a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800980e:	e003      	b.n	8009818 <HAL_UART_Receive+0xd2>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800981e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009828:	d108      	bne.n	800983c <HAL_UART_Receive+0xf6>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e003      	b.n	8009844 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009844:	e036      	b.n	80098b4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2200      	movs	r2, #0
 800984e:	2120      	movs	r1, #32
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fef5 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2220      	movs	r2, #32
 8009860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e032      	b.n	80098ce <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10c      	bne.n	8009888 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	b29a      	uxth	r2, r3
 8009876:	8a7b      	ldrh	r3, [r7, #18]
 8009878:	4013      	ands	r3, r2
 800987a:	b29a      	uxth	r2, r3
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	3302      	adds	r3, #2
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	e00c      	b.n	80098a2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	b2da      	uxtb	r2, r3
 8009890:	8a7b      	ldrh	r3, [r7, #18]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	4013      	ands	r3, r2
 8009896:	b2da      	uxtb	r2, r3
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	3301      	adds	r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1c2      	bne.n	8009846 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e000      	b.n	80098ce <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
  }
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098dc:	b092      	sub	sp, #72	@ 0x48
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4bbe      	ldr	r3, [pc, #760]	@ (8009c00 <UART_SetConfig+0x328>)
 8009908:	4013      	ands	r3, r2
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009910:	430b      	orrs	r3, r1
 8009912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4ab3      	ldr	r2, [pc, #716]	@ (8009c04 <UART_SetConfig+0x32c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009940:	4313      	orrs	r3, r2
 8009942:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	4baf      	ldr	r3, [pc, #700]	@ (8009c08 <UART_SetConfig+0x330>)
 800994c:	4013      	ands	r3, r2
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009954:	430b      	orrs	r3, r1
 8009956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	f023 010f 	bic.w	r1, r3, #15
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4aa6      	ldr	r2, [pc, #664]	@ (8009c0c <UART_SetConfig+0x334>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d177      	bne.n	8009a68 <UART_SetConfig+0x190>
 8009978:	4ba5      	ldr	r3, [pc, #660]	@ (8009c10 <UART_SetConfig+0x338>)
 800997a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009980:	2b28      	cmp	r3, #40	@ 0x28
 8009982:	d86d      	bhi.n	8009a60 <UART_SetConfig+0x188>
 8009984:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <UART_SetConfig+0xb4>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	08009a31 	.word	0x08009a31
 8009990:	08009a61 	.word	0x08009a61
 8009994:	08009a61 	.word	0x08009a61
 8009998:	08009a61 	.word	0x08009a61
 800999c:	08009a61 	.word	0x08009a61
 80099a0:	08009a61 	.word	0x08009a61
 80099a4:	08009a61 	.word	0x08009a61
 80099a8:	08009a61 	.word	0x08009a61
 80099ac:	08009a39 	.word	0x08009a39
 80099b0:	08009a61 	.word	0x08009a61
 80099b4:	08009a61 	.word	0x08009a61
 80099b8:	08009a61 	.word	0x08009a61
 80099bc:	08009a61 	.word	0x08009a61
 80099c0:	08009a61 	.word	0x08009a61
 80099c4:	08009a61 	.word	0x08009a61
 80099c8:	08009a61 	.word	0x08009a61
 80099cc:	08009a41 	.word	0x08009a41
 80099d0:	08009a61 	.word	0x08009a61
 80099d4:	08009a61 	.word	0x08009a61
 80099d8:	08009a61 	.word	0x08009a61
 80099dc:	08009a61 	.word	0x08009a61
 80099e0:	08009a61 	.word	0x08009a61
 80099e4:	08009a61 	.word	0x08009a61
 80099e8:	08009a61 	.word	0x08009a61
 80099ec:	08009a49 	.word	0x08009a49
 80099f0:	08009a61 	.word	0x08009a61
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009a61 	.word	0x08009a61
 8009a04:	08009a61 	.word	0x08009a61
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a51 	.word	0x08009a51
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a61 	.word	0x08009a61
 8009a18:	08009a61 	.word	0x08009a61
 8009a1c:	08009a61 	.word	0x08009a61
 8009a20:	08009a61 	.word	0x08009a61
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a61 	.word	0x08009a61
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a36:	e222      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3e:	e21e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a46:	e21a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4e:	e216      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a50:	2320      	movs	r3, #32
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a56:	e212      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a58:	2340      	movs	r3, #64	@ 0x40
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5e:	e20e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a60:	2380      	movs	r3, #128	@ 0x80
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a66:	e20a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a69      	ldr	r2, [pc, #420]	@ (8009c14 <UART_SetConfig+0x33c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d130      	bne.n	8009ad4 <UART_SetConfig+0x1fc>
 8009a72:	4b67      	ldr	r3, [pc, #412]	@ (8009c10 <UART_SetConfig+0x338>)
 8009a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	2b05      	cmp	r3, #5
 8009a7c:	d826      	bhi.n	8009acc <UART_SetConfig+0x1f4>
 8009a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <UART_SetConfig+0x1ac>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009aa5 	.word	0x08009aa5
 8009a8c:	08009aad 	.word	0x08009aad
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009ac5 	.word	0x08009ac5
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e1ec      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e1e8      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009aac:	2308      	movs	r3, #8
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e1e4      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e1e0      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009abc:	2320      	movs	r3, #32
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e1dc      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009ac4:	2340      	movs	r3, #64	@ 0x40
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e1d8      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009acc:	2380      	movs	r3, #128	@ 0x80
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e1d4      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8009c18 <UART_SetConfig+0x340>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d130      	bne.n	8009b40 <UART_SetConfig+0x268>
 8009ade:	4b4c      	ldr	r3, [pc, #304]	@ (8009c10 <UART_SetConfig+0x338>)
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d826      	bhi.n	8009b38 <UART_SetConfig+0x260>
 8009aea:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <UART_SetConfig+0x218>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b29 	.word	0x08009b29
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e1b6      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b10:	2304      	movs	r3, #4
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e1b2      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e1ae      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b20:	2310      	movs	r3, #16
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b26:	e1aa      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2e:	e1a6      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b30:	2340      	movs	r3, #64	@ 0x40
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b36:	e1a2      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b38:	2380      	movs	r3, #128	@ 0x80
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3e:	e19e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a35      	ldr	r2, [pc, #212]	@ (8009c1c <UART_SetConfig+0x344>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d130      	bne.n	8009bac <UART_SetConfig+0x2d4>
 8009b4a:	4b31      	ldr	r3, [pc, #196]	@ (8009c10 <UART_SetConfig+0x338>)
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d826      	bhi.n	8009ba4 <UART_SetConfig+0x2cc>
 8009b56:	a201      	add	r2, pc, #4	@ (adr r2, 8009b5c <UART_SetConfig+0x284>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b85 	.word	0x08009b85
 8009b68:	08009b8d 	.word	0x08009b8d
 8009b6c:	08009b95 	.word	0x08009b95
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e180      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e17c      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e178      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e174      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e170      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009b9c:	2340      	movs	r3, #64	@ 0x40
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e16c      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009ba4:	2380      	movs	r3, #128	@ 0x80
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e168      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8009c20 <UART_SetConfig+0x348>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d142      	bne.n	8009c3c <UART_SetConfig+0x364>
 8009bb6:	4b16      	ldr	r3, [pc, #88]	@ (8009c10 <UART_SetConfig+0x338>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d838      	bhi.n	8009c34 <UART_SetConfig+0x35c>
 8009bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x2f0>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009be9 	.word	0x08009be9
 8009bd0:	08009bf1 	.word	0x08009bf1
 8009bd4:	08009bf9 	.word	0x08009bf9
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c2d 	.word	0x08009c2d
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e14a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e146      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e142      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfe:	e13e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009c00:	cfff69f3 	.word	0xcfff69f3
 8009c04:	58000c00 	.word	0x58000c00
 8009c08:	11fff4ff 	.word	0x11fff4ff
 8009c0c:	40011000 	.word	0x40011000
 8009c10:	58024400 	.word	0x58024400
 8009c14:	40004400 	.word	0x40004400
 8009c18:	40004800 	.word	0x40004800
 8009c1c:	40004c00 	.word	0x40004c00
 8009c20:	40005000 	.word	0x40005000
 8009c24:	2320      	movs	r3, #32
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e128      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009c2c:	2340      	movs	r3, #64	@ 0x40
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e124      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009c34:	2380      	movs	r3, #128	@ 0x80
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e120      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4acb      	ldr	r2, [pc, #812]	@ (8009f70 <UART_SetConfig+0x698>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d176      	bne.n	8009d34 <UART_SetConfig+0x45c>
 8009c46:	4bcb      	ldr	r3, [pc, #812]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c4e:	2b28      	cmp	r3, #40	@ 0x28
 8009c50:	d86c      	bhi.n	8009d2c <UART_SetConfig+0x454>
 8009c52:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <UART_SetConfig+0x380>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009cfd 	.word	0x08009cfd
 8009c5c:	08009d2d 	.word	0x08009d2d
 8009c60:	08009d2d 	.word	0x08009d2d
 8009c64:	08009d2d 	.word	0x08009d2d
 8009c68:	08009d2d 	.word	0x08009d2d
 8009c6c:	08009d2d 	.word	0x08009d2d
 8009c70:	08009d2d 	.word	0x08009d2d
 8009c74:	08009d2d 	.word	0x08009d2d
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009d2d 	.word	0x08009d2d
 8009c80:	08009d2d 	.word	0x08009d2d
 8009c84:	08009d2d 	.word	0x08009d2d
 8009c88:	08009d2d 	.word	0x08009d2d
 8009c8c:	08009d2d 	.word	0x08009d2d
 8009c90:	08009d2d 	.word	0x08009d2d
 8009c94:	08009d2d 	.word	0x08009d2d
 8009c98:	08009d0d 	.word	0x08009d0d
 8009c9c:	08009d2d 	.word	0x08009d2d
 8009ca0:	08009d2d 	.word	0x08009d2d
 8009ca4:	08009d2d 	.word	0x08009d2d
 8009ca8:	08009d2d 	.word	0x08009d2d
 8009cac:	08009d2d 	.word	0x08009d2d
 8009cb0:	08009d2d 	.word	0x08009d2d
 8009cb4:	08009d2d 	.word	0x08009d2d
 8009cb8:	08009d15 	.word	0x08009d15
 8009cbc:	08009d2d 	.word	0x08009d2d
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009d2d 	.word	0x08009d2d
 8009cd0:	08009d2d 	.word	0x08009d2d
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d1d 	.word	0x08009d1d
 8009cdc:	08009d2d 	.word	0x08009d2d
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d2d 	.word	0x08009d2d
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d2d 	.word	0x08009d2d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e0bc      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e0b8      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e0b4      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e0b0      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e0ac      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d24:	2340      	movs	r3, #64	@ 0x40
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e0a8      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e0a4      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a8f      	ldr	r2, [pc, #572]	@ (8009f78 <UART_SetConfig+0x6a0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d130      	bne.n	8009da0 <UART_SetConfig+0x4c8>
 8009d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d826      	bhi.n	8009d98 <UART_SetConfig+0x4c0>
 8009d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <UART_SetConfig+0x478>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e086      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e082      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e07e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e07a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e076      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d90:	2340      	movs	r3, #64	@ 0x40
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e072      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e06e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a75      	ldr	r2, [pc, #468]	@ (8009f7c <UART_SetConfig+0x6a4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d130      	bne.n	8009e0c <UART_SetConfig+0x534>
 8009daa:	4b72      	ldr	r3, [pc, #456]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d826      	bhi.n	8009e04 <UART_SetConfig+0x52c>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x4e4>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009de5 	.word	0x08009de5
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009df5 	.word	0x08009df5
 8009dd0:	08009dfd 	.word	0x08009dfd
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e050      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e04c      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e048      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e044      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009df4:	2320      	movs	r3, #32
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e040      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009dfc:	2340      	movs	r3, #64	@ 0x40
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e03c      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e04:	2380      	movs	r3, #128	@ 0x80
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e038      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a5b      	ldr	r2, [pc, #364]	@ (8009f80 <UART_SetConfig+0x6a8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d130      	bne.n	8009e78 <UART_SetConfig+0x5a0>
 8009e16:	4b57      	ldr	r3, [pc, #348]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d826      	bhi.n	8009e70 <UART_SetConfig+0x598>
 8009e22:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <UART_SetConfig+0x550>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e41 	.word	0x08009e41
 8009e2c:	08009e49 	.word	0x08009e49
 8009e30:	08009e51 	.word	0x08009e51
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2302      	movs	r3, #2
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e01a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e016      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e012      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e00e      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e00a      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e68:	2340      	movs	r3, #64	@ 0x40
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e006      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e70:	2380      	movs	r3, #128	@ 0x80
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e002      	b.n	8009e7e <UART_SetConfig+0x5a6>
 8009e78:	2380      	movs	r3, #128	@ 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a3f      	ldr	r2, [pc, #252]	@ (8009f80 <UART_SetConfig+0x6a8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f040 80f8 	bne.w	800a07a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	dc46      	bgt.n	8009f20 <UART_SetConfig+0x648>
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	f2c0 8082 	blt.w	8009f9c <UART_SetConfig+0x6c4>
 8009e98:	3b02      	subs	r3, #2
 8009e9a:	2b1e      	cmp	r3, #30
 8009e9c:	d87e      	bhi.n	8009f9c <UART_SetConfig+0x6c4>
 8009e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <UART_SetConfig+0x5cc>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009f27 	.word	0x08009f27
 8009ea8:	08009f9d 	.word	0x08009f9d
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f9d 	.word	0x08009f9d
 8009eb4:	08009f9d 	.word	0x08009f9d
 8009eb8:	08009f9d 	.word	0x08009f9d
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f9d 	.word	0x08009f9d
 8009ec4:	08009f9d 	.word	0x08009f9d
 8009ec8:	08009f9d 	.word	0x08009f9d
 8009ecc:	08009f9d 	.word	0x08009f9d
 8009ed0:	08009f9d 	.word	0x08009f9d
 8009ed4:	08009f9d 	.word	0x08009f9d
 8009ed8:	08009f9d 	.word	0x08009f9d
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f9d 	.word	0x08009f9d
 8009ee4:	08009f9d 	.word	0x08009f9d
 8009ee8:	08009f9d 	.word	0x08009f9d
 8009eec:	08009f9d 	.word	0x08009f9d
 8009ef0:	08009f9d 	.word	0x08009f9d
 8009ef4:	08009f9d 	.word	0x08009f9d
 8009ef8:	08009f9d 	.word	0x08009f9d
 8009efc:	08009f9d 	.word	0x08009f9d
 8009f00:	08009f9d 	.word	0x08009f9d
 8009f04:	08009f9d 	.word	0x08009f9d
 8009f08:	08009f9d 	.word	0x08009f9d
 8009f0c:	08009f9d 	.word	0x08009f9d
 8009f10:	08009f9d 	.word	0x08009f9d
 8009f14:	08009f9d 	.word	0x08009f9d
 8009f18:	08009f9d 	.word	0x08009f9d
 8009f1c:	08009f8f 	.word	0x08009f8f
 8009f20:	2b40      	cmp	r3, #64	@ 0x40
 8009f22:	d037      	beq.n	8009f94 <UART_SetConfig+0x6bc>
 8009f24:	e03a      	b.n	8009f9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f26:	f7fd fe7d 	bl	8007c24 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e03c      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fd fe8c 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e034      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd ffd8 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e02c      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f4e:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d016      	beq.n	8009f88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5a:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <UART_SetConfig+0x69c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	08db      	lsrs	r3, r3, #3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	4a07      	ldr	r2, [pc, #28]	@ (8009f84 <UART_SetConfig+0x6ac>)
 8009f66:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f6c:	e01c      	b.n	8009fa8 <UART_SetConfig+0x6d0>
 8009f6e:	bf00      	nop
 8009f70:	40011400 	.word	0x40011400
 8009f74:	58024400 	.word	0x58024400
 8009f78:	40007800 	.word	0x40007800
 8009f7c:	40007c00 	.word	0x40007c00
 8009f80:	58000c00 	.word	0x58000c00
 8009f84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f88:	4b9d      	ldr	r3, [pc, #628]	@ (800a200 <UART_SetConfig+0x928>)
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8c:	e00c      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f8e:	4b9d      	ldr	r3, [pc, #628]	@ (800a204 <UART_SetConfig+0x92c>)
 8009f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f92:	e009      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9a:	e005      	b.n	8009fa8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 81de 	beq.w	800a36c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb4:	4a94      	ldr	r2, [pc, #592]	@ (800a208 <UART_SetConfig+0x930>)
 8009fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fc2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	4413      	add	r3, r2
 8009fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d305      	bcc.n	8009fe0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d903      	bls.n	8009fe8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fe6:	e1c1      	b.n	800a36c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fea:	2200      	movs	r2, #0
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	60fa      	str	r2, [r7, #12]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff4:	4a84      	ldr	r2, [pc, #528]	@ (800a208 <UART_SetConfig+0x930>)
 8009ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	607a      	str	r2, [r7, #4]
 800a002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a00a:	f7f6 f9c1 	bl	8000390 <__aeabi_uldivmod>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4610      	mov	r0, r2
 800a014:	4619      	mov	r1, r3
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	020b      	lsls	r3, r1, #8
 800a020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a024:	0202      	lsls	r2, r0, #8
 800a026:	6979      	ldr	r1, [r7, #20]
 800a028:	6849      	ldr	r1, [r1, #4]
 800a02a:	0849      	lsrs	r1, r1, #1
 800a02c:	2000      	movs	r0, #0
 800a02e:	460c      	mov	r4, r1
 800a030:	4605      	mov	r5, r0
 800a032:	eb12 0804 	adds.w	r8, r2, r4
 800a036:	eb43 0905 	adc.w	r9, r3, r5
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	469a      	mov	sl, r3
 800a042:	4693      	mov	fp, r2
 800a044:	4652      	mov	r2, sl
 800a046:	465b      	mov	r3, fp
 800a048:	4640      	mov	r0, r8
 800a04a:	4649      	mov	r1, r9
 800a04c:	f7f6 f9a0 	bl	8000390 <__aeabi_uldivmod>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4613      	mov	r3, r2
 800a056:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a05e:	d308      	bcc.n	800a072 <UART_SetConfig+0x79a>
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a066:	d204      	bcs.n	800a072 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	e17c      	b.n	800a36c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a078:	e178      	b.n	800a36c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a082:	f040 80c5 	bne.w	800a210 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a086:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	dc48      	bgt.n	800a120 <UART_SetConfig+0x848>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	db7b      	blt.n	800a18a <UART_SetConfig+0x8b2>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d879      	bhi.n	800a18a <UART_SetConfig+0x8b2>
 800a096:	a201      	add	r2, pc, #4	@ (adr r2, 800a09c <UART_SetConfig+0x7c4>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a127 	.word	0x0800a127
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a18b 	.word	0x0800a18b
 800a0a8:	0800a18b 	.word	0x0800a18b
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a18b 	.word	0x0800a18b
 800a0b4:	0800a18b 	.word	0x0800a18b
 800a0b8:	0800a18b 	.word	0x0800a18b
 800a0bc:	0800a147 	.word	0x0800a147
 800a0c0:	0800a18b 	.word	0x0800a18b
 800a0c4:	0800a18b 	.word	0x0800a18b
 800a0c8:	0800a18b 	.word	0x0800a18b
 800a0cc:	0800a18b 	.word	0x0800a18b
 800a0d0:	0800a18b 	.word	0x0800a18b
 800a0d4:	0800a18b 	.word	0x0800a18b
 800a0d8:	0800a18b 	.word	0x0800a18b
 800a0dc:	0800a157 	.word	0x0800a157
 800a0e0:	0800a18b 	.word	0x0800a18b
 800a0e4:	0800a18b 	.word	0x0800a18b
 800a0e8:	0800a18b 	.word	0x0800a18b
 800a0ec:	0800a18b 	.word	0x0800a18b
 800a0f0:	0800a18b 	.word	0x0800a18b
 800a0f4:	0800a18b 	.word	0x0800a18b
 800a0f8:	0800a18b 	.word	0x0800a18b
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a18b 	.word	0x0800a18b
 800a104:	0800a18b 	.word	0x0800a18b
 800a108:	0800a18b 	.word	0x0800a18b
 800a10c:	0800a18b 	.word	0x0800a18b
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a18b 	.word	0x0800a18b
 800a118:	0800a18b 	.word	0x0800a18b
 800a11c:	0800a17d 	.word	0x0800a17d
 800a120:	2b40      	cmp	r3, #64	@ 0x40
 800a122:	d02e      	beq.n	800a182 <UART_SetConfig+0x8aa>
 800a124:	e031      	b.n	800a18a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a126:	f7fc fb47 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 800a12a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a12c:	e033      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a12e:	f7fc fb59 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 800a132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a134:	e02f      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fd fd88 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a144:	e027      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fed4 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a154:	e01f      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a156:	4b2d      	ldr	r3, [pc, #180]	@ (800a20c <UART_SetConfig+0x934>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a162:	4b2a      	ldr	r3, [pc, #168]	@ (800a20c <UART_SetConfig+0x934>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a24      	ldr	r2, [pc, #144]	@ (800a200 <UART_SetConfig+0x928>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a174:	e00f      	b.n	800a196 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a176:	4b22      	ldr	r3, [pc, #136]	@ (800a200 <UART_SetConfig+0x928>)
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17a:	e00c      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a17c:	4b21      	ldr	r3, [pc, #132]	@ (800a204 <UART_SetConfig+0x92c>)
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80e7 	beq.w	800a36c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a2:	4a19      	ldr	r2, [pc, #100]	@ (800a208 <UART_SetConfig+0x930>)
 800a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b0:	005a      	lsls	r2, r3, #1
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d916      	bls.n	800a1f8 <UART_SetConfig+0x920>
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d0:	d212      	bcs.n	800a1f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f023 030f 	bic.w	r3, r3, #15
 800a1da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	e0b9      	b.n	800a36c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1fe:	e0b5      	b.n	800a36c <UART_SetConfig+0xa94>
 800a200:	03d09000 	.word	0x03d09000
 800a204:	003d0900 	.word	0x003d0900
 800a208:	0800b280 	.word	0x0800b280
 800a20c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a214:	2b20      	cmp	r3, #32
 800a216:	dc49      	bgt.n	800a2ac <UART_SetConfig+0x9d4>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	db7c      	blt.n	800a316 <UART_SetConfig+0xa3e>
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	d87a      	bhi.n	800a316 <UART_SetConfig+0xa3e>
 800a220:	a201      	add	r2, pc, #4	@ (adr r2, 800a228 <UART_SetConfig+0x950>)
 800a222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a226:	bf00      	nop
 800a228:	0800a2b3 	.word	0x0800a2b3
 800a22c:	0800a2bb 	.word	0x0800a2bb
 800a230:	0800a317 	.word	0x0800a317
 800a234:	0800a317 	.word	0x0800a317
 800a238:	0800a2c3 	.word	0x0800a2c3
 800a23c:	0800a317 	.word	0x0800a317
 800a240:	0800a317 	.word	0x0800a317
 800a244:	0800a317 	.word	0x0800a317
 800a248:	0800a2d3 	.word	0x0800a2d3
 800a24c:	0800a317 	.word	0x0800a317
 800a250:	0800a317 	.word	0x0800a317
 800a254:	0800a317 	.word	0x0800a317
 800a258:	0800a317 	.word	0x0800a317
 800a25c:	0800a317 	.word	0x0800a317
 800a260:	0800a317 	.word	0x0800a317
 800a264:	0800a317 	.word	0x0800a317
 800a268:	0800a2e3 	.word	0x0800a2e3
 800a26c:	0800a317 	.word	0x0800a317
 800a270:	0800a317 	.word	0x0800a317
 800a274:	0800a317 	.word	0x0800a317
 800a278:	0800a317 	.word	0x0800a317
 800a27c:	0800a317 	.word	0x0800a317
 800a280:	0800a317 	.word	0x0800a317
 800a284:	0800a317 	.word	0x0800a317
 800a288:	0800a317 	.word	0x0800a317
 800a28c:	0800a317 	.word	0x0800a317
 800a290:	0800a317 	.word	0x0800a317
 800a294:	0800a317 	.word	0x0800a317
 800a298:	0800a317 	.word	0x0800a317
 800a29c:	0800a317 	.word	0x0800a317
 800a2a0:	0800a317 	.word	0x0800a317
 800a2a4:	0800a317 	.word	0x0800a317
 800a2a8:	0800a309 	.word	0x0800a309
 800a2ac:	2b40      	cmp	r3, #64	@ 0x40
 800a2ae:	d02e      	beq.n	800a30e <UART_SetConfig+0xa36>
 800a2b0:	e031      	b.n	800a316 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b2:	f7fc fa81 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 800a2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e033      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ba:	f7fc fa93 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 800a2be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c0:	e02f      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd fcc2 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	e027      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d2:	f107 0318 	add.w	r3, r7, #24
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fd fe0e 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e0:	e01f      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a398 <UART_SetConfig+0xac0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a398 <UART_SetConfig+0xac0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	08db      	lsrs	r3, r3, #3
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	4a28      	ldr	r2, [pc, #160]	@ (800a39c <UART_SetConfig+0xac4>)
 800a2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a300:	e00f      	b.n	800a322 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a302:	4b26      	ldr	r3, [pc, #152]	@ (800a39c <UART_SetConfig+0xac4>)
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a306:	e00c      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a308:	4b25      	ldr	r3, [pc, #148]	@ (800a3a0 <UART_SetConfig+0xac8>)
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30c:	e009      	b.n	800a322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a30e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e005      	b.n	800a322 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a320:	bf00      	nop
    }

    if (pclk != 0U)
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d021      	beq.n	800a36c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32c:	4a1d      	ldr	r2, [pc, #116]	@ (800a3a4 <UART_SetConfig+0xacc>)
 800a32e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a332:	461a      	mov	r2, r3
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	fbb3 f2f2 	udiv	r2, r3, r2
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	085b      	lsrs	r3, r3, #1
 800a340:	441a      	add	r2, r3
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	fbb2 f3f3 	udiv	r3, r2, r3
 800a34a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d909      	bls.n	800a366 <UART_SetConfig+0xa8e>
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a358:	d205      	bcs.n	800a366 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60da      	str	r2, [r3, #12]
 800a364:	e002      	b.n	800a36c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2201      	movs	r2, #1
 800a370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2201      	movs	r2, #1
 800a378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2200      	movs	r2, #0
 800a380:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2200      	movs	r2, #0
 800a386:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a388:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3748      	adds	r7, #72	@ 0x48
 800a390:	46bd      	mov	sp, r7
 800a392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a396:	bf00      	nop
 800a398:	58024400 	.word	0x58024400
 800a39c:	03d09000 	.word	0x03d09000
 800a3a0:	003d0900 	.word	0x003d0900
 800a3a4:	0800b280 	.word	0x0800b280

0800a3a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41a:	f003 0304 	and.w	r3, r3, #4
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01a      	beq.n	800a4be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4a6:	d10a      	bne.n	800a4be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	605a      	str	r2, [r3, #4]
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b098      	sub	sp, #96	@ 0x60
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4fc:	f7f7 fd74 	bl	8001fe8 <HAL_GetTick>
 800a500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d12f      	bne.n	800a570 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f88e 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d022      	beq.n	800a570 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a53e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a548:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e6      	bne.n	800a52a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e063      	b.n	800a638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d149      	bne.n	800a612 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a57e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a586:	2200      	movs	r2, #0
 800a588:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f857 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d03c      	beq.n	800a612 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e6      	bne.n	800a598 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f023 0301 	bic.w	r3, r3, #1
 800a5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ea:	61fa      	str	r2, [r7, #28]
 800a5ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	69b9      	ldr	r1, [r7, #24]
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e5      	bne.n	800a5ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e012      	b.n	800a638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3758      	adds	r7, #88	@ 0x58
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4613      	mov	r3, r2
 800a64e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a650:	e04f      	b.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a658:	d04b      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65a:	f7f7 fcc5 	bl	8001fe8 <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <UART_WaitOnFlagUntilTimeout+0x30>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e04e      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d037      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b80      	cmp	r3, #128	@ 0x80
 800a686:	d034      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b40      	cmp	r3, #64	@ 0x40
 800a68c:	d031      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d110      	bne.n	800a6be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f839 	bl	800a71c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e029      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6cc:	d111      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f81f 	bl	800a71c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00f      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d0a0      	beq.n	800a652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b095      	sub	sp, #84	@ 0x54
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a742:	643b      	str	r3, [r7, #64]	@ 0x40
 800a744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e6      	bne.n	800a724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	61fb      	str	r3, [r7, #28]
   return(result);
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e4 <UART_EndRxTransfer+0xc8>)
 800a76a:	4013      	ands	r3, r2
 800a76c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a77c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e5      	bne.n	800a756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d118      	bne.n	800a7c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f023 0310 	bic.w	r3, r3, #16
 800a7a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7d8:	bf00      	nop
 800a7da:	3754      	adds	r7, #84	@ 0x54
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	effffffe 	.word	0xeffffffe

0800a7e8 <_vsniprintf_r>:
 800a7e8:	b530      	push	{r4, r5, lr}
 800a7ea:	4614      	mov	r4, r2
 800a7ec:	2c00      	cmp	r4, #0
 800a7ee:	b09b      	sub	sp, #108	@ 0x6c
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	da05      	bge.n	800a802 <_vsniprintf_r+0x1a>
 800a7f6:	238b      	movs	r3, #139	@ 0x8b
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	b01b      	add	sp, #108	@ 0x6c
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a806:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	9319      	str	r3, [sp, #100]	@ 0x64
 800a810:	bf14      	ite	ne
 800a812:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a816:	4623      	moveq	r3, r4
 800a818:	9302      	str	r3, [sp, #8]
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a820:	9100      	str	r1, [sp, #0]
 800a822:	9104      	str	r1, [sp, #16]
 800a824:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a828:	4669      	mov	r1, sp
 800a82a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a82c:	f000 f9ae 	bl	800ab8c <_svfiprintf_r>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	bfbc      	itt	lt
 800a834:	238b      	movlt	r3, #139	@ 0x8b
 800a836:	602b      	strlt	r3, [r5, #0]
 800a838:	2c00      	cmp	r4, #0
 800a83a:	d0e0      	beq.n	800a7fe <_vsniprintf_r+0x16>
 800a83c:	9b00      	ldr	r3, [sp, #0]
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	e7dc      	b.n	800a7fe <_vsniprintf_r+0x16>

0800a844 <vsniprintf>:
 800a844:	b507      	push	{r0, r1, r2, lr}
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	460a      	mov	r2, r1
 800a84c:	4601      	mov	r1, r0
 800a84e:	4803      	ldr	r0, [pc, #12]	@ (800a85c <vsniprintf+0x18>)
 800a850:	6800      	ldr	r0, [r0, #0]
 800a852:	f7ff ffc9 	bl	800a7e8 <_vsniprintf_r>
 800a856:	b003      	add	sp, #12
 800a858:	f85d fb04 	ldr.w	pc, [sp], #4
 800a85c:	24000848 	.word	0x24000848

0800a860 <memset>:
 800a860:	4402      	add	r2, r0
 800a862:	4603      	mov	r3, r0
 800a864:	4293      	cmp	r3, r2
 800a866:	d100      	bne.n	800a86a <memset+0xa>
 800a868:	4770      	bx	lr
 800a86a:	f803 1b01 	strb.w	r1, [r3], #1
 800a86e:	e7f9      	b.n	800a864 <memset+0x4>

0800a870 <__errno>:
 800a870:	4b01      	ldr	r3, [pc, #4]	@ (800a878 <__errno+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	24000848 	.word	0x24000848

0800a87c <__libc_init_array>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4d0d      	ldr	r5, [pc, #52]	@ (800a8b4 <__libc_init_array+0x38>)
 800a880:	4c0d      	ldr	r4, [pc, #52]	@ (800a8b8 <__libc_init_array+0x3c>)
 800a882:	1b64      	subs	r4, r4, r5
 800a884:	10a4      	asrs	r4, r4, #2
 800a886:	2600      	movs	r6, #0
 800a888:	42a6      	cmp	r6, r4
 800a88a:	d109      	bne.n	800a8a0 <__libc_init_array+0x24>
 800a88c:	4d0b      	ldr	r5, [pc, #44]	@ (800a8bc <__libc_init_array+0x40>)
 800a88e:	4c0c      	ldr	r4, [pc, #48]	@ (800a8c0 <__libc_init_array+0x44>)
 800a890:	f000 fc64 	bl	800b15c <_init>
 800a894:	1b64      	subs	r4, r4, r5
 800a896:	10a4      	asrs	r4, r4, #2
 800a898:	2600      	movs	r6, #0
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	d105      	bne.n	800a8aa <__libc_init_array+0x2e>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a4:	4798      	blx	r3
 800a8a6:	3601      	adds	r6, #1
 800a8a8:	e7ee      	b.n	800a888 <__libc_init_array+0xc>
 800a8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ae:	4798      	blx	r3
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	e7f2      	b.n	800a89a <__libc_init_array+0x1e>
 800a8b4:	0800b2d4 	.word	0x0800b2d4
 800a8b8:	0800b2d4 	.word	0x0800b2d4
 800a8bc:	0800b2d4 	.word	0x0800b2d4
 800a8c0:	0800b2d8 	.word	0x0800b2d8

0800a8c4 <__retarget_lock_acquire_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <__retarget_lock_release_recursive>:
 800a8c6:	4770      	bx	lr

0800a8c8 <memcpy>:
 800a8c8:	440a      	add	r2, r1
 800a8ca:	4291      	cmp	r1, r2
 800a8cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8d0:	d100      	bne.n	800a8d4 <memcpy+0xc>
 800a8d2:	4770      	bx	lr
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8de:	4291      	cmp	r1, r2
 800a8e0:	d1f9      	bne.n	800a8d6 <memcpy+0xe>
 800a8e2:	bd10      	pop	{r4, pc}

0800a8e4 <_free_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d041      	beq.n	800a970 <_free_r+0x8c>
 800a8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f0:	1f0c      	subs	r4, r1, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	bfb8      	it	lt
 800a8f6:	18e4      	addlt	r4, r4, r3
 800a8f8:	f000 f8e0 	bl	800aabc <__malloc_lock>
 800a8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a974 <_free_r+0x90>)
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	b933      	cbnz	r3, 800a910 <_free_r+0x2c>
 800a902:	6063      	str	r3, [r4, #4]
 800a904:	6014      	str	r4, [r2, #0]
 800a906:	4628      	mov	r0, r5
 800a908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90c:	f000 b8dc 	b.w	800aac8 <__malloc_unlock>
 800a910:	42a3      	cmp	r3, r4
 800a912:	d908      	bls.n	800a926 <_free_r+0x42>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	1821      	adds	r1, r4, r0
 800a918:	428b      	cmp	r3, r1
 800a91a:	bf01      	itttt	eq
 800a91c:	6819      	ldreq	r1, [r3, #0]
 800a91e:	685b      	ldreq	r3, [r3, #4]
 800a920:	1809      	addeq	r1, r1, r0
 800a922:	6021      	streq	r1, [r4, #0]
 800a924:	e7ed      	b.n	800a902 <_free_r+0x1e>
 800a926:	461a      	mov	r2, r3
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	b10b      	cbz	r3, 800a930 <_free_r+0x4c>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x42>
 800a930:	6811      	ldr	r1, [r2, #0]
 800a932:	1850      	adds	r0, r2, r1
 800a934:	42a0      	cmp	r0, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x6c>
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	4401      	add	r1, r0
 800a93c:	1850      	adds	r0, r2, r1
 800a93e:	4283      	cmp	r3, r0
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	d1e0      	bne.n	800a906 <_free_r+0x22>
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	6053      	str	r3, [r2, #4]
 800a94a:	4408      	add	r0, r1
 800a94c:	6010      	str	r0, [r2, #0]
 800a94e:	e7da      	b.n	800a906 <_free_r+0x22>
 800a950:	d902      	bls.n	800a958 <_free_r+0x74>
 800a952:	230c      	movs	r3, #12
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	e7d6      	b.n	800a906 <_free_r+0x22>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	1821      	adds	r1, r4, r0
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf04      	itt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	bf04      	itt	eq
 800a968:	1809      	addeq	r1, r1, r0
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	6054      	str	r4, [r2, #4]
 800a96e:	e7ca      	b.n	800a906 <_free_r+0x22>
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	24000cc4 	.word	0x24000cc4

0800a978 <sbrk_aligned>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4e0f      	ldr	r6, [pc, #60]	@ (800a9b8 <sbrk_aligned+0x40>)
 800a97c:	460c      	mov	r4, r1
 800a97e:	6831      	ldr	r1, [r6, #0]
 800a980:	4605      	mov	r5, r0
 800a982:	b911      	cbnz	r1, 800a98a <sbrk_aligned+0x12>
 800a984:	f000 fba4 	bl	800b0d0 <_sbrk_r>
 800a988:	6030      	str	r0, [r6, #0]
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	f000 fb9f 	bl	800b0d0 <_sbrk_r>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	d103      	bne.n	800a99e <sbrk_aligned+0x26>
 800a996:	f04f 34ff 	mov.w	r4, #4294967295
 800a99a:	4620      	mov	r0, r4
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	1cc4      	adds	r4, r0, #3
 800a9a0:	f024 0403 	bic.w	r4, r4, #3
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d0f8      	beq.n	800a99a <sbrk_aligned+0x22>
 800a9a8:	1a21      	subs	r1, r4, r0
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 fb90 	bl	800b0d0 <_sbrk_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d1f2      	bne.n	800a99a <sbrk_aligned+0x22>
 800a9b4:	e7ef      	b.n	800a996 <sbrk_aligned+0x1e>
 800a9b6:	bf00      	nop
 800a9b8:	24000cc0 	.word	0x24000cc0

0800a9bc <_malloc_r>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	1ccd      	adds	r5, r1, #3
 800a9c2:	f025 0503 	bic.w	r5, r5, #3
 800a9c6:	3508      	adds	r5, #8
 800a9c8:	2d0c      	cmp	r5, #12
 800a9ca:	bf38      	it	cc
 800a9cc:	250c      	movcc	r5, #12
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	db01      	blt.n	800a9d8 <_malloc_r+0x1c>
 800a9d4:	42a9      	cmp	r1, r5
 800a9d6:	d904      	bls.n	800a9e2 <_malloc_r+0x26>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aab8 <_malloc_r+0xfc>
 800a9e6:	f000 f869 	bl	800aabc <__malloc_lock>
 800a9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ee:	461c      	mov	r4, r3
 800a9f0:	bb44      	cbnz	r4, 800aa44 <_malloc_r+0x88>
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff ffbf 	bl	800a978 <sbrk_aligned>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d158      	bne.n	800aab2 <_malloc_r+0xf6>
 800aa00:	f8d8 4000 	ldr.w	r4, [r8]
 800aa04:	4627      	mov	r7, r4
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	d143      	bne.n	800aa92 <_malloc_r+0xd6>
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	d04b      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4639      	mov	r1, r7
 800aa12:	4630      	mov	r0, r6
 800aa14:	eb04 0903 	add.w	r9, r4, r3
 800aa18:	f000 fb5a 	bl	800b0d0 <_sbrk_r>
 800aa1c:	4581      	cmp	r9, r0
 800aa1e:	d142      	bne.n	800aaa6 <_malloc_r+0xea>
 800aa20:	6821      	ldr	r1, [r4, #0]
 800aa22:	1a6d      	subs	r5, r5, r1
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ffa6 	bl	800a978 <sbrk_aligned>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d03a      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	442b      	add	r3, r5
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	bb62      	cbnz	r2, 800aa98 <_malloc_r+0xdc>
 800aa3e:	f8c8 7000 	str.w	r7, [r8]
 800aa42:	e00f      	b.n	800aa64 <_malloc_r+0xa8>
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	1b52      	subs	r2, r2, r5
 800aa48:	d420      	bmi.n	800aa8c <_malloc_r+0xd0>
 800aa4a:	2a0b      	cmp	r2, #11
 800aa4c:	d917      	bls.n	800aa7e <_malloc_r+0xc2>
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	6025      	str	r5, [r4, #0]
 800aa54:	bf18      	it	ne
 800aa56:	6059      	strne	r1, [r3, #4]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	bf08      	it	eq
 800aa5c:	f8c8 1000 	streq.w	r1, [r8]
 800aa60:	5162      	str	r2, [r4, r5]
 800aa62:	604b      	str	r3, [r1, #4]
 800aa64:	4630      	mov	r0, r6
 800aa66:	f000 f82f 	bl	800aac8 <__malloc_unlock>
 800aa6a:	f104 000b 	add.w	r0, r4, #11
 800aa6e:	1d23      	adds	r3, r4, #4
 800aa70:	f020 0007 	bic.w	r0, r0, #7
 800aa74:	1ac2      	subs	r2, r0, r3
 800aa76:	bf1c      	itt	ne
 800aa78:	1a1b      	subne	r3, r3, r0
 800aa7a:	50a3      	strne	r3, [r4, r2]
 800aa7c:	e7af      	b.n	800a9de <_malloc_r+0x22>
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	bf0c      	ite	eq
 800aa84:	f8c8 2000 	streq.w	r2, [r8]
 800aa88:	605a      	strne	r2, [r3, #4]
 800aa8a:	e7eb      	b.n	800aa64 <_malloc_r+0xa8>
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	6864      	ldr	r4, [r4, #4]
 800aa90:	e7ae      	b.n	800a9f0 <_malloc_r+0x34>
 800aa92:	463c      	mov	r4, r7
 800aa94:	687f      	ldr	r7, [r7, #4]
 800aa96:	e7b6      	b.n	800aa06 <_malloc_r+0x4a>
 800aa98:	461a      	mov	r2, r3
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d1fb      	bne.n	800aa98 <_malloc_r+0xdc>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6053      	str	r3, [r2, #4]
 800aaa4:	e7de      	b.n	800aa64 <_malloc_r+0xa8>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	6033      	str	r3, [r6, #0]
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f000 f80c 	bl	800aac8 <__malloc_unlock>
 800aab0:	e794      	b.n	800a9dc <_malloc_r+0x20>
 800aab2:	6005      	str	r5, [r0, #0]
 800aab4:	e7d6      	b.n	800aa64 <_malloc_r+0xa8>
 800aab6:	bf00      	nop
 800aab8:	24000cc4 	.word	0x24000cc4

0800aabc <__malloc_lock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	@ (800aac4 <__malloc_lock+0x8>)
 800aabe:	f7ff bf01 	b.w	800a8c4 <__retarget_lock_acquire_recursive>
 800aac2:	bf00      	nop
 800aac4:	24000cbc 	.word	0x24000cbc

0800aac8 <__malloc_unlock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	@ (800aad0 <__malloc_unlock+0x8>)
 800aaca:	f7ff befc 	b.w	800a8c6 <__retarget_lock_release_recursive>
 800aace:	bf00      	nop
 800aad0:	24000cbc 	.word	0x24000cbc

0800aad4 <__ssputs_r>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	688e      	ldr	r6, [r1, #8]
 800aada:	461f      	mov	r7, r3
 800aadc:	42be      	cmp	r6, r7
 800aade:	680b      	ldr	r3, [r1, #0]
 800aae0:	4682      	mov	sl, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4690      	mov	r8, r2
 800aae6:	d82d      	bhi.n	800ab44 <__ssputs_r+0x70>
 800aae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aaf0:	d026      	beq.n	800ab40 <__ssputs_r+0x6c>
 800aaf2:	6965      	ldr	r5, [r4, #20]
 800aaf4:	6909      	ldr	r1, [r1, #16]
 800aaf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aafa:	eba3 0901 	sub.w	r9, r3, r1
 800aafe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab02:	1c7b      	adds	r3, r7, #1
 800ab04:	444b      	add	r3, r9
 800ab06:	106d      	asrs	r5, r5, #1
 800ab08:	429d      	cmp	r5, r3
 800ab0a:	bf38      	it	cc
 800ab0c:	461d      	movcc	r5, r3
 800ab0e:	0553      	lsls	r3, r2, #21
 800ab10:	d527      	bpl.n	800ab62 <__ssputs_r+0x8e>
 800ab12:	4629      	mov	r1, r5
 800ab14:	f7ff ff52 	bl	800a9bc <_malloc_r>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b360      	cbz	r0, 800ab76 <__ssputs_r+0xa2>
 800ab1c:	6921      	ldr	r1, [r4, #16]
 800ab1e:	464a      	mov	r2, r9
 800ab20:	f7ff fed2 	bl	800a8c8 <memcpy>
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	6126      	str	r6, [r4, #16]
 800ab32:	6165      	str	r5, [r4, #20]
 800ab34:	444e      	add	r6, r9
 800ab36:	eba5 0509 	sub.w	r5, r5, r9
 800ab3a:	6026      	str	r6, [r4, #0]
 800ab3c:	60a5      	str	r5, [r4, #8]
 800ab3e:	463e      	mov	r6, r7
 800ab40:	42be      	cmp	r6, r7
 800ab42:	d900      	bls.n	800ab46 <__ssputs_r+0x72>
 800ab44:	463e      	mov	r6, r7
 800ab46:	6820      	ldr	r0, [r4, #0]
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	f000 faa6 	bl	800b09c <memmove>
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	1b9b      	subs	r3, r3, r6
 800ab54:	60a3      	str	r3, [r4, #8]
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	4433      	add	r3, r6
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	462a      	mov	r2, r5
 800ab64:	f000 fac4 	bl	800b0f0 <_realloc_r>
 800ab68:	4606      	mov	r6, r0
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d1e0      	bne.n	800ab30 <__ssputs_r+0x5c>
 800ab6e:	6921      	ldr	r1, [r4, #16]
 800ab70:	4650      	mov	r0, sl
 800ab72:	f7ff feb7 	bl	800a8e4 <_free_r>
 800ab76:	230c      	movs	r3, #12
 800ab78:	f8ca 3000 	str.w	r3, [sl]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e7e9      	b.n	800ab5e <__ssputs_r+0x8a>
	...

0800ab8c <_svfiprintf_r>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	4698      	mov	r8, r3
 800ab92:	898b      	ldrh	r3, [r1, #12]
 800ab94:	061b      	lsls	r3, r3, #24
 800ab96:	b09d      	sub	sp, #116	@ 0x74
 800ab98:	4607      	mov	r7, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	d510      	bpl.n	800abc2 <_svfiprintf_r+0x36>
 800aba0:	690b      	ldr	r3, [r1, #16]
 800aba2:	b973      	cbnz	r3, 800abc2 <_svfiprintf_r+0x36>
 800aba4:	2140      	movs	r1, #64	@ 0x40
 800aba6:	f7ff ff09 	bl	800a9bc <_malloc_r>
 800abaa:	6028      	str	r0, [r5, #0]
 800abac:	6128      	str	r0, [r5, #16]
 800abae:	b930      	cbnz	r0, 800abbe <_svfiprintf_r+0x32>
 800abb0:	230c      	movs	r3, #12
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	b01d      	add	sp, #116	@ 0x74
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	2340      	movs	r3, #64	@ 0x40
 800abc0:	616b      	str	r3, [r5, #20]
 800abc2:	2300      	movs	r3, #0
 800abc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc6:	2320      	movs	r3, #32
 800abc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abd0:	2330      	movs	r3, #48	@ 0x30
 800abd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad70 <_svfiprintf_r+0x1e4>
 800abd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abda:	f04f 0901 	mov.w	r9, #1
 800abde:	4623      	mov	r3, r4
 800abe0:	469a      	mov	sl, r3
 800abe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe6:	b10a      	cbz	r2, 800abec <_svfiprintf_r+0x60>
 800abe8:	2a25      	cmp	r2, #37	@ 0x25
 800abea:	d1f9      	bne.n	800abe0 <_svfiprintf_r+0x54>
 800abec:	ebba 0b04 	subs.w	fp, sl, r4
 800abf0:	d00b      	beq.n	800ac0a <_svfiprintf_r+0x7e>
 800abf2:	465b      	mov	r3, fp
 800abf4:	4622      	mov	r2, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	4638      	mov	r0, r7
 800abfa:	f7ff ff6b 	bl	800aad4 <__ssputs_r>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f000 80a7 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac06:	445a      	add	r2, fp
 800ac08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 809f 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac1e:	f10a 0a01 	add.w	sl, sl, #1
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	9307      	str	r3, [sp, #28]
 800ac26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2205      	movs	r2, #5
 800ac30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac34:	484e      	ldr	r0, [pc, #312]	@ (800ad70 <_svfiprintf_r+0x1e4>)
 800ac36:	f7f5 fb5b 	bl	80002f0 <memchr>
 800ac3a:	9a04      	ldr	r2, [sp, #16]
 800ac3c:	b9d8      	cbnz	r0, 800ac76 <_svfiprintf_r+0xea>
 800ac3e:	06d0      	lsls	r0, r2, #27
 800ac40:	bf44      	itt	mi
 800ac42:	2320      	movmi	r3, #32
 800ac44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac48:	0711      	lsls	r1, r2, #28
 800ac4a:	bf44      	itt	mi
 800ac4c:	232b      	movmi	r3, #43	@ 0x2b
 800ac4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac52:	f89a 3000 	ldrb.w	r3, [sl]
 800ac56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac58:	d015      	beq.n	800ac86 <_svfiprintf_r+0xfa>
 800ac5a:	9a07      	ldr	r2, [sp, #28]
 800ac5c:	4654      	mov	r4, sl
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f04f 0c0a 	mov.w	ip, #10
 800ac64:	4621      	mov	r1, r4
 800ac66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac6a:	3b30      	subs	r3, #48	@ 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d94b      	bls.n	800ad08 <_svfiprintf_r+0x17c>
 800ac70:	b1b0      	cbz	r0, 800aca0 <_svfiprintf_r+0x114>
 800ac72:	9207      	str	r2, [sp, #28]
 800ac74:	e014      	b.n	800aca0 <_svfiprintf_r+0x114>
 800ac76:	eba0 0308 	sub.w	r3, r0, r8
 800ac7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	46a2      	mov	sl, r4
 800ac84:	e7d2      	b.n	800ac2c <_svfiprintf_r+0xa0>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	1d19      	adds	r1, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	9103      	str	r1, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfbb      	ittet	lt
 800ac92:	425b      	neglt	r3, r3
 800ac94:	f042 0202 	orrlt.w	r2, r2, #2
 800ac98:	9307      	strge	r3, [sp, #28]
 800ac9a:	9307      	strlt	r3, [sp, #28]
 800ac9c:	bfb8      	it	lt
 800ac9e:	9204      	strlt	r2, [sp, #16]
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aca4:	d10a      	bne.n	800acbc <_svfiprintf_r+0x130>
 800aca6:	7863      	ldrb	r3, [r4, #1]
 800aca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acaa:	d132      	bne.n	800ad12 <_svfiprintf_r+0x186>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	9203      	str	r2, [sp, #12]
 800acb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acb8:	3402      	adds	r4, #2
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad80 <_svfiprintf_r+0x1f4>
 800acc0:	7821      	ldrb	r1, [r4, #0]
 800acc2:	2203      	movs	r2, #3
 800acc4:	4650      	mov	r0, sl
 800acc6:	f7f5 fb13 	bl	80002f0 <memchr>
 800acca:	b138      	cbz	r0, 800acdc <_svfiprintf_r+0x150>
 800accc:	9b04      	ldr	r3, [sp, #16]
 800acce:	eba0 000a 	sub.w	r0, r0, sl
 800acd2:	2240      	movs	r2, #64	@ 0x40
 800acd4:	4082      	lsls	r2, r0
 800acd6:	4313      	orrs	r3, r2
 800acd8:	3401      	adds	r4, #1
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace0:	4824      	ldr	r0, [pc, #144]	@ (800ad74 <_svfiprintf_r+0x1e8>)
 800ace2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ace6:	2206      	movs	r2, #6
 800ace8:	f7f5 fb02 	bl	80002f0 <memchr>
 800acec:	2800      	cmp	r0, #0
 800acee:	d036      	beq.n	800ad5e <_svfiprintf_r+0x1d2>
 800acf0:	4b21      	ldr	r3, [pc, #132]	@ (800ad78 <_svfiprintf_r+0x1ec>)
 800acf2:	bb1b      	cbnz	r3, 800ad3c <_svfiprintf_r+0x1b0>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	3307      	adds	r3, #7
 800acf8:	f023 0307 	bic.w	r3, r3, #7
 800acfc:	3308      	adds	r3, #8
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad02:	4433      	add	r3, r6
 800ad04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad06:	e76a      	b.n	800abde <_svfiprintf_r+0x52>
 800ad08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	2001      	movs	r0, #1
 800ad10:	e7a8      	b.n	800ac64 <_svfiprintf_r+0xd8>
 800ad12:	2300      	movs	r3, #0
 800ad14:	3401      	adds	r4, #1
 800ad16:	9305      	str	r3, [sp, #20]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f04f 0c0a 	mov.w	ip, #10
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad24:	3a30      	subs	r2, #48	@ 0x30
 800ad26:	2a09      	cmp	r2, #9
 800ad28:	d903      	bls.n	800ad32 <_svfiprintf_r+0x1a6>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0c6      	beq.n	800acbc <_svfiprintf_r+0x130>
 800ad2e:	9105      	str	r1, [sp, #20]
 800ad30:	e7c4      	b.n	800acbc <_svfiprintf_r+0x130>
 800ad32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad36:	4604      	mov	r4, r0
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e7f0      	b.n	800ad1e <_svfiprintf_r+0x192>
 800ad3c:	ab03      	add	r3, sp, #12
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	462a      	mov	r2, r5
 800ad42:	4b0e      	ldr	r3, [pc, #56]	@ (800ad7c <_svfiprintf_r+0x1f0>)
 800ad44:	a904      	add	r1, sp, #16
 800ad46:	4638      	mov	r0, r7
 800ad48:	f3af 8000 	nop.w
 800ad4c:	1c42      	adds	r2, r0, #1
 800ad4e:	4606      	mov	r6, r0
 800ad50:	d1d6      	bne.n	800ad00 <_svfiprintf_r+0x174>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	065b      	lsls	r3, r3, #25
 800ad56:	f53f af2d 	bmi.w	800abb4 <_svfiprintf_r+0x28>
 800ad5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad5c:	e72c      	b.n	800abb8 <_svfiprintf_r+0x2c>
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	462a      	mov	r2, r5
 800ad64:	4b05      	ldr	r3, [pc, #20]	@ (800ad7c <_svfiprintf_r+0x1f0>)
 800ad66:	a904      	add	r1, sp, #16
 800ad68:	4638      	mov	r0, r7
 800ad6a:	f000 f879 	bl	800ae60 <_printf_i>
 800ad6e:	e7ed      	b.n	800ad4c <_svfiprintf_r+0x1c0>
 800ad70:	0800b298 	.word	0x0800b298
 800ad74:	0800b2a2 	.word	0x0800b2a2
 800ad78:	00000000 	.word	0x00000000
 800ad7c:	0800aad5 	.word	0x0800aad5
 800ad80:	0800b29e 	.word	0x0800b29e

0800ad84 <_printf_common>:
 800ad84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad88:	4616      	mov	r6, r2
 800ad8a:	4698      	mov	r8, r3
 800ad8c:	688a      	ldr	r2, [r1, #8]
 800ad8e:	690b      	ldr	r3, [r1, #16]
 800ad90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	bfb8      	it	lt
 800ad98:	4613      	movlt	r3, r2
 800ad9a:	6033      	str	r3, [r6, #0]
 800ad9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ada0:	4607      	mov	r7, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	b10a      	cbz	r2, 800adaa <_printf_common+0x26>
 800ada6:	3301      	adds	r3, #1
 800ada8:	6033      	str	r3, [r6, #0]
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	0699      	lsls	r1, r3, #26
 800adae:	bf42      	ittt	mi
 800adb0:	6833      	ldrmi	r3, [r6, #0]
 800adb2:	3302      	addmi	r3, #2
 800adb4:	6033      	strmi	r3, [r6, #0]
 800adb6:	6825      	ldr	r5, [r4, #0]
 800adb8:	f015 0506 	ands.w	r5, r5, #6
 800adbc:	d106      	bne.n	800adcc <_printf_common+0x48>
 800adbe:	f104 0a19 	add.w	sl, r4, #25
 800adc2:	68e3      	ldr	r3, [r4, #12]
 800adc4:	6832      	ldr	r2, [r6, #0]
 800adc6:	1a9b      	subs	r3, r3, r2
 800adc8:	42ab      	cmp	r3, r5
 800adca:	dc26      	bgt.n	800ae1a <_printf_common+0x96>
 800adcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800add0:	6822      	ldr	r2, [r4, #0]
 800add2:	3b00      	subs	r3, #0
 800add4:	bf18      	it	ne
 800add6:	2301      	movne	r3, #1
 800add8:	0692      	lsls	r2, r2, #26
 800adda:	d42b      	bmi.n	800ae34 <_printf_common+0xb0>
 800addc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ade0:	4641      	mov	r1, r8
 800ade2:	4638      	mov	r0, r7
 800ade4:	47c8      	blx	r9
 800ade6:	3001      	adds	r0, #1
 800ade8:	d01e      	beq.n	800ae28 <_printf_common+0xa4>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	6922      	ldr	r2, [r4, #16]
 800adee:	f003 0306 	and.w	r3, r3, #6
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	bf02      	ittt	eq
 800adf6:	68e5      	ldreq	r5, [r4, #12]
 800adf8:	6833      	ldreq	r3, [r6, #0]
 800adfa:	1aed      	subeq	r5, r5, r3
 800adfc:	68a3      	ldr	r3, [r4, #8]
 800adfe:	bf0c      	ite	eq
 800ae00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae04:	2500      	movne	r5, #0
 800ae06:	4293      	cmp	r3, r2
 800ae08:	bfc4      	itt	gt
 800ae0a:	1a9b      	subgt	r3, r3, r2
 800ae0c:	18ed      	addgt	r5, r5, r3
 800ae0e:	2600      	movs	r6, #0
 800ae10:	341a      	adds	r4, #26
 800ae12:	42b5      	cmp	r5, r6
 800ae14:	d11a      	bne.n	800ae4c <_printf_common+0xc8>
 800ae16:	2000      	movs	r0, #0
 800ae18:	e008      	b.n	800ae2c <_printf_common+0xa8>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	4641      	mov	r1, r8
 800ae20:	4638      	mov	r0, r7
 800ae22:	47c8      	blx	r9
 800ae24:	3001      	adds	r0, #1
 800ae26:	d103      	bne.n	800ae30 <_printf_common+0xac>
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae30:	3501      	adds	r5, #1
 800ae32:	e7c6      	b.n	800adc2 <_printf_common+0x3e>
 800ae34:	18e1      	adds	r1, r4, r3
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	2030      	movs	r0, #48	@ 0x30
 800ae3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae3e:	4422      	add	r2, r4
 800ae40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae48:	3302      	adds	r3, #2
 800ae4a:	e7c7      	b.n	800addc <_printf_common+0x58>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4641      	mov	r1, r8
 800ae52:	4638      	mov	r0, r7
 800ae54:	47c8      	blx	r9
 800ae56:	3001      	adds	r0, #1
 800ae58:	d0e6      	beq.n	800ae28 <_printf_common+0xa4>
 800ae5a:	3601      	adds	r6, #1
 800ae5c:	e7d9      	b.n	800ae12 <_printf_common+0x8e>
	...

0800ae60 <_printf_i>:
 800ae60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae64:	7e0f      	ldrb	r7, [r1, #24]
 800ae66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae68:	2f78      	cmp	r7, #120	@ 0x78
 800ae6a:	4691      	mov	r9, r2
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	469a      	mov	sl, r3
 800ae72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae76:	d807      	bhi.n	800ae88 <_printf_i+0x28>
 800ae78:	2f62      	cmp	r7, #98	@ 0x62
 800ae7a:	d80a      	bhi.n	800ae92 <_printf_i+0x32>
 800ae7c:	2f00      	cmp	r7, #0
 800ae7e:	f000 80d1 	beq.w	800b024 <_printf_i+0x1c4>
 800ae82:	2f58      	cmp	r7, #88	@ 0x58
 800ae84:	f000 80b8 	beq.w	800aff8 <_printf_i+0x198>
 800ae88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae90:	e03a      	b.n	800af08 <_printf_i+0xa8>
 800ae92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae96:	2b15      	cmp	r3, #21
 800ae98:	d8f6      	bhi.n	800ae88 <_printf_i+0x28>
 800ae9a:	a101      	add	r1, pc, #4	@ (adr r1, 800aea0 <_printf_i+0x40>)
 800ae9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aea0:	0800aef9 	.word	0x0800aef9
 800aea4:	0800af0d 	.word	0x0800af0d
 800aea8:	0800ae89 	.word	0x0800ae89
 800aeac:	0800ae89 	.word	0x0800ae89
 800aeb0:	0800ae89 	.word	0x0800ae89
 800aeb4:	0800ae89 	.word	0x0800ae89
 800aeb8:	0800af0d 	.word	0x0800af0d
 800aebc:	0800ae89 	.word	0x0800ae89
 800aec0:	0800ae89 	.word	0x0800ae89
 800aec4:	0800ae89 	.word	0x0800ae89
 800aec8:	0800ae89 	.word	0x0800ae89
 800aecc:	0800b00b 	.word	0x0800b00b
 800aed0:	0800af37 	.word	0x0800af37
 800aed4:	0800afc5 	.word	0x0800afc5
 800aed8:	0800ae89 	.word	0x0800ae89
 800aedc:	0800ae89 	.word	0x0800ae89
 800aee0:	0800b02d 	.word	0x0800b02d
 800aee4:	0800ae89 	.word	0x0800ae89
 800aee8:	0800af37 	.word	0x0800af37
 800aeec:	0800ae89 	.word	0x0800ae89
 800aef0:	0800ae89 	.word	0x0800ae89
 800aef4:	0800afcd 	.word	0x0800afcd
 800aef8:	6833      	ldr	r3, [r6, #0]
 800aefa:	1d1a      	adds	r2, r3, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6032      	str	r2, [r6, #0]
 800af00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af08:	2301      	movs	r3, #1
 800af0a:	e09c      	b.n	800b046 <_printf_i+0x1e6>
 800af0c:	6833      	ldr	r3, [r6, #0]
 800af0e:	6820      	ldr	r0, [r4, #0]
 800af10:	1d19      	adds	r1, r3, #4
 800af12:	6031      	str	r1, [r6, #0]
 800af14:	0606      	lsls	r6, r0, #24
 800af16:	d501      	bpl.n	800af1c <_printf_i+0xbc>
 800af18:	681d      	ldr	r5, [r3, #0]
 800af1a:	e003      	b.n	800af24 <_printf_i+0xc4>
 800af1c:	0645      	lsls	r5, r0, #25
 800af1e:	d5fb      	bpl.n	800af18 <_printf_i+0xb8>
 800af20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af24:	2d00      	cmp	r5, #0
 800af26:	da03      	bge.n	800af30 <_printf_i+0xd0>
 800af28:	232d      	movs	r3, #45	@ 0x2d
 800af2a:	426d      	negs	r5, r5
 800af2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af30:	4858      	ldr	r0, [pc, #352]	@ (800b094 <_printf_i+0x234>)
 800af32:	230a      	movs	r3, #10
 800af34:	e011      	b.n	800af5a <_printf_i+0xfa>
 800af36:	6821      	ldr	r1, [r4, #0]
 800af38:	6833      	ldr	r3, [r6, #0]
 800af3a:	0608      	lsls	r0, r1, #24
 800af3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800af40:	d402      	bmi.n	800af48 <_printf_i+0xe8>
 800af42:	0649      	lsls	r1, r1, #25
 800af44:	bf48      	it	mi
 800af46:	b2ad      	uxthmi	r5, r5
 800af48:	2f6f      	cmp	r7, #111	@ 0x6f
 800af4a:	4852      	ldr	r0, [pc, #328]	@ (800b094 <_printf_i+0x234>)
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	bf14      	ite	ne
 800af50:	230a      	movne	r3, #10
 800af52:	2308      	moveq	r3, #8
 800af54:	2100      	movs	r1, #0
 800af56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af5a:	6866      	ldr	r6, [r4, #4]
 800af5c:	60a6      	str	r6, [r4, #8]
 800af5e:	2e00      	cmp	r6, #0
 800af60:	db05      	blt.n	800af6e <_printf_i+0x10e>
 800af62:	6821      	ldr	r1, [r4, #0]
 800af64:	432e      	orrs	r6, r5
 800af66:	f021 0104 	bic.w	r1, r1, #4
 800af6a:	6021      	str	r1, [r4, #0]
 800af6c:	d04b      	beq.n	800b006 <_printf_i+0x1a6>
 800af6e:	4616      	mov	r6, r2
 800af70:	fbb5 f1f3 	udiv	r1, r5, r3
 800af74:	fb03 5711 	mls	r7, r3, r1, r5
 800af78:	5dc7      	ldrb	r7, [r0, r7]
 800af7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af7e:	462f      	mov	r7, r5
 800af80:	42bb      	cmp	r3, r7
 800af82:	460d      	mov	r5, r1
 800af84:	d9f4      	bls.n	800af70 <_printf_i+0x110>
 800af86:	2b08      	cmp	r3, #8
 800af88:	d10b      	bne.n	800afa2 <_printf_i+0x142>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	07df      	lsls	r7, r3, #31
 800af8e:	d508      	bpl.n	800afa2 <_printf_i+0x142>
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	6861      	ldr	r1, [r4, #4]
 800af94:	4299      	cmp	r1, r3
 800af96:	bfde      	ittt	le
 800af98:	2330      	movle	r3, #48	@ 0x30
 800af9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afa2:	1b92      	subs	r2, r2, r6
 800afa4:	6122      	str	r2, [r4, #16]
 800afa6:	f8cd a000 	str.w	sl, [sp]
 800afaa:	464b      	mov	r3, r9
 800afac:	aa03      	add	r2, sp, #12
 800afae:	4621      	mov	r1, r4
 800afb0:	4640      	mov	r0, r8
 800afb2:	f7ff fee7 	bl	800ad84 <_printf_common>
 800afb6:	3001      	adds	r0, #1
 800afb8:	d14a      	bne.n	800b050 <_printf_i+0x1f0>
 800afba:	f04f 30ff 	mov.w	r0, #4294967295
 800afbe:	b004      	add	sp, #16
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	f043 0320 	orr.w	r3, r3, #32
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	4832      	ldr	r0, [pc, #200]	@ (800b098 <_printf_i+0x238>)
 800afce:	2778      	movs	r7, #120	@ 0x78
 800afd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	6831      	ldr	r1, [r6, #0]
 800afd8:	061f      	lsls	r7, r3, #24
 800afda:	f851 5b04 	ldr.w	r5, [r1], #4
 800afde:	d402      	bmi.n	800afe6 <_printf_i+0x186>
 800afe0:	065f      	lsls	r7, r3, #25
 800afe2:	bf48      	it	mi
 800afe4:	b2ad      	uxthmi	r5, r5
 800afe6:	6031      	str	r1, [r6, #0]
 800afe8:	07d9      	lsls	r1, r3, #31
 800afea:	bf44      	itt	mi
 800afec:	f043 0320 	orrmi.w	r3, r3, #32
 800aff0:	6023      	strmi	r3, [r4, #0]
 800aff2:	b11d      	cbz	r5, 800affc <_printf_i+0x19c>
 800aff4:	2310      	movs	r3, #16
 800aff6:	e7ad      	b.n	800af54 <_printf_i+0xf4>
 800aff8:	4826      	ldr	r0, [pc, #152]	@ (800b094 <_printf_i+0x234>)
 800affa:	e7e9      	b.n	800afd0 <_printf_i+0x170>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	f023 0320 	bic.w	r3, r3, #32
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	e7f6      	b.n	800aff4 <_printf_i+0x194>
 800b006:	4616      	mov	r6, r2
 800b008:	e7bd      	b.n	800af86 <_printf_i+0x126>
 800b00a:	6833      	ldr	r3, [r6, #0]
 800b00c:	6825      	ldr	r5, [r4, #0]
 800b00e:	6961      	ldr	r1, [r4, #20]
 800b010:	1d18      	adds	r0, r3, #4
 800b012:	6030      	str	r0, [r6, #0]
 800b014:	062e      	lsls	r6, r5, #24
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	d501      	bpl.n	800b01e <_printf_i+0x1be>
 800b01a:	6019      	str	r1, [r3, #0]
 800b01c:	e002      	b.n	800b024 <_printf_i+0x1c4>
 800b01e:	0668      	lsls	r0, r5, #25
 800b020:	d5fb      	bpl.n	800b01a <_printf_i+0x1ba>
 800b022:	8019      	strh	r1, [r3, #0]
 800b024:	2300      	movs	r3, #0
 800b026:	6123      	str	r3, [r4, #16]
 800b028:	4616      	mov	r6, r2
 800b02a:	e7bc      	b.n	800afa6 <_printf_i+0x146>
 800b02c:	6833      	ldr	r3, [r6, #0]
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	6032      	str	r2, [r6, #0]
 800b032:	681e      	ldr	r6, [r3, #0]
 800b034:	6862      	ldr	r2, [r4, #4]
 800b036:	2100      	movs	r1, #0
 800b038:	4630      	mov	r0, r6
 800b03a:	f7f5 f959 	bl	80002f0 <memchr>
 800b03e:	b108      	cbz	r0, 800b044 <_printf_i+0x1e4>
 800b040:	1b80      	subs	r0, r0, r6
 800b042:	6060      	str	r0, [r4, #4]
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	6123      	str	r3, [r4, #16]
 800b048:	2300      	movs	r3, #0
 800b04a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b04e:	e7aa      	b.n	800afa6 <_printf_i+0x146>
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	4632      	mov	r2, r6
 800b054:	4649      	mov	r1, r9
 800b056:	4640      	mov	r0, r8
 800b058:	47d0      	blx	sl
 800b05a:	3001      	adds	r0, #1
 800b05c:	d0ad      	beq.n	800afba <_printf_i+0x15a>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	079b      	lsls	r3, r3, #30
 800b062:	d413      	bmi.n	800b08c <_printf_i+0x22c>
 800b064:	68e0      	ldr	r0, [r4, #12]
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	4298      	cmp	r0, r3
 800b06a:	bfb8      	it	lt
 800b06c:	4618      	movlt	r0, r3
 800b06e:	e7a6      	b.n	800afbe <_printf_i+0x15e>
 800b070:	2301      	movs	r3, #1
 800b072:	4632      	mov	r2, r6
 800b074:	4649      	mov	r1, r9
 800b076:	4640      	mov	r0, r8
 800b078:	47d0      	blx	sl
 800b07a:	3001      	adds	r0, #1
 800b07c:	d09d      	beq.n	800afba <_printf_i+0x15a>
 800b07e:	3501      	adds	r5, #1
 800b080:	68e3      	ldr	r3, [r4, #12]
 800b082:	9903      	ldr	r1, [sp, #12]
 800b084:	1a5b      	subs	r3, r3, r1
 800b086:	42ab      	cmp	r3, r5
 800b088:	dcf2      	bgt.n	800b070 <_printf_i+0x210>
 800b08a:	e7eb      	b.n	800b064 <_printf_i+0x204>
 800b08c:	2500      	movs	r5, #0
 800b08e:	f104 0619 	add.w	r6, r4, #25
 800b092:	e7f5      	b.n	800b080 <_printf_i+0x220>
 800b094:	0800b2a9 	.word	0x0800b2a9
 800b098:	0800b2ba 	.word	0x0800b2ba

0800b09c <memmove>:
 800b09c:	4288      	cmp	r0, r1
 800b09e:	b510      	push	{r4, lr}
 800b0a0:	eb01 0402 	add.w	r4, r1, r2
 800b0a4:	d902      	bls.n	800b0ac <memmove+0x10>
 800b0a6:	4284      	cmp	r4, r0
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	d807      	bhi.n	800b0bc <memmove+0x20>
 800b0ac:	1e43      	subs	r3, r0, #1
 800b0ae:	42a1      	cmp	r1, r4
 800b0b0:	d008      	beq.n	800b0c4 <memmove+0x28>
 800b0b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ba:	e7f8      	b.n	800b0ae <memmove+0x12>
 800b0bc:	4402      	add	r2, r0
 800b0be:	4601      	mov	r1, r0
 800b0c0:	428a      	cmp	r2, r1
 800b0c2:	d100      	bne.n	800b0c6 <memmove+0x2a>
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ce:	e7f7      	b.n	800b0c0 <memmove+0x24>

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d06      	ldr	r5, [pc, #24]	@ (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f6 fbf2 	bl	80018c4 <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	24000cb8 	.word	0x24000cb8

0800b0f0 <_realloc_r>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	b921      	cbnz	r1, 800b106 <_realloc_r+0x16>
 800b0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	4611      	mov	r1, r2
 800b102:	f7ff bc5b 	b.w	800a9bc <_malloc_r>
 800b106:	b92a      	cbnz	r2, 800b114 <_realloc_r+0x24>
 800b108:	f7ff fbec 	bl	800a8e4 <_free_r>
 800b10c:	4625      	mov	r5, r4
 800b10e:	4628      	mov	r0, r5
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	f000 f81a 	bl	800b14c <_malloc_usable_size_r>
 800b118:	4284      	cmp	r4, r0
 800b11a:	4606      	mov	r6, r0
 800b11c:	d802      	bhi.n	800b124 <_realloc_r+0x34>
 800b11e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b122:	d8f4      	bhi.n	800b10e <_realloc_r+0x1e>
 800b124:	4621      	mov	r1, r4
 800b126:	4638      	mov	r0, r7
 800b128:	f7ff fc48 	bl	800a9bc <_malloc_r>
 800b12c:	4680      	mov	r8, r0
 800b12e:	b908      	cbnz	r0, 800b134 <_realloc_r+0x44>
 800b130:	4645      	mov	r5, r8
 800b132:	e7ec      	b.n	800b10e <_realloc_r+0x1e>
 800b134:	42b4      	cmp	r4, r6
 800b136:	4622      	mov	r2, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	bf28      	it	cs
 800b13c:	4632      	movcs	r2, r6
 800b13e:	f7ff fbc3 	bl	800a8c8 <memcpy>
 800b142:	4629      	mov	r1, r5
 800b144:	4638      	mov	r0, r7
 800b146:	f7ff fbcd 	bl	800a8e4 <_free_r>
 800b14a:	e7f1      	b.n	800b130 <_realloc_r+0x40>

0800b14c <_malloc_usable_size_r>:
 800b14c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b150:	1f18      	subs	r0, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	bfbc      	itt	lt
 800b156:	580b      	ldrlt	r3, [r1, r0]
 800b158:	18c0      	addlt	r0, r0, r3
 800b15a:	4770      	bx	lr

0800b15c <_init>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	bf00      	nop
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr

0800b168 <_fini>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr
