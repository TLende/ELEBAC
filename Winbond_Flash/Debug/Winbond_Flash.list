
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800d1b8  0800d1b8  0000e1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d344  0800d344  0000e344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d34c  0800d34c  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d350  0800d350  0000e350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000008a0  24000000  0800d354  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000520  240008a0  0800dbf4  0000f8a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000dc0  0800dbf4  0000fdc0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f8a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c2d0  00000000  00000000  0000f8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003416  00000000  00000000  0002bb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001268  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e29  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2be  00000000  00000000  00031049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a0cd  00000000  00000000  0006b307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b2a7  00000000  00000000  000853d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f067b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052b8  00000000  00000000  001f06c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001f5978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240008a0 	.word	0x240008a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d1a0 	.word	0x0800d1a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240008a4 	.word	0x240008a4
 80002dc:	0800d1a0 	.word	0x0800d1a0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <Read_Register+0x50>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f985 	bl	80009d4 <Read_Status_Register>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <Read_Register+0x54>)
 80006d0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006d2:	2064      	movs	r0, #100	@ 0x64
 80006d4:	f000 fb7e 	bl	8000dd4 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <Read_Register+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f979 	bl	80009d4 <Read_Status_Register>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <Read_Register+0x5c>)
 80006e8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f000 fb72 	bl	8000dd4 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <Read_Register+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f96d 	bl	80009d4 <Read_Status_Register>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <Read_Register+0x64>)
 8000700:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f000 fb66 	bl	8000dd4 <delay_ns>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000808 	.word	0x24000808
 8000710:	240008bc 	.word	0x240008bc
 8000714:	24000809 	.word	0x24000809
 8000718:	240008bd 	.word	0x240008bd
 800071c:	2400080a 	.word	0x2400080a
 8000720:	240008be 	.word	0x240008be

08000724 <Write_Data>:

void Write_Data(uint8_t* data, uint16_t lenght){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <Write_Data+0x74>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <Write_Data+0x22>
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <Write_Data+0x78>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <Write_Data+0x22>
		Block_Erase(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fb11 	bl	8000d68 <Block_Erase>
	}
	uint16_t count=0;
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800074a:	e01c      	b.n	8000786 <Write_Data+0x62>
		*Buffer=*data;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <Write_Data+0x7c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
		Buffer++;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <Write_Data+0x7c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a10      	ldr	r2, [pc, #64]	@ (80007a0 <Write_Data+0x7c>)
 800075e:	6013      	str	r3, [r2, #0]
		data++;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <Write_Data+0x78>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <Write_Data+0x78>)
 8000770:	801a      	strh	r2, [r3, #0]
		count++;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	3301      	adds	r3, #1
 8000776:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Write_Data+0x78>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000780:	d301      	bcc.n	8000786 <Write_Data+0x62>
			Write_to_page();
 8000782:	f000 f80f 	bl	80007a4 <Write_to_page>
	while(count<lenght){
 8000786:	89fa      	ldrh	r2, [r7, #14]
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3de      	bcc.n	800074c <Write_Data+0x28>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240008c2 	.word	0x240008c2
 800079c:	240008c0 	.word	0x240008c0
 80007a0:	24000800 	.word	0x24000800

080007a4 <Write_to_page>:
			Write_to_page();
		}
	}
}

void Write_to_page(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <Write_to_page+0x50>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4912      	ldr	r1, [pc, #72]	@ (80007f8 <Write_to_page+0x54>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f99f 	bl	8000af4 <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <Write_to_page+0x58>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f9d8 	bl	8000b70 <Write_Data_Flash>
	Page_Index++;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <Write_to_page+0x58>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <Write_to_page+0x58>)
 80007ca:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <Write_to_page+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <Write_to_page+0x5c>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <Write_to_page+0x54>)
 80007d6:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 80007d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007dc:	21ff      	movs	r1, #255	@ 0xff
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <Write_to_page+0x54>)
 80007e0:	f00c f860 	bl	800c8a4 <memset>
	Automatic_Block_Managment(Page_Index);
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <Write_to_page+0x58>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f80b 	bl	8000804 <Automatic_Block_Managment>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	240008c0 	.word	0x240008c0
 80007f8:	24000000 	.word	0x24000000
 80007fc:	240008c2 	.word	0x240008c2
 8000800:	24000800 	.word	0x24000800

08000804 <Automatic_Block_Managment>:
void Read_Data(uint16_t page, uint8_t* data){
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

void Automatic_Block_Managment(uint16_t Page_Index){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	099b      	lsrs	r3, r3, #6
 8000812:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	89fa      	ldrh	r2, [r7, #14]
 800081a:	429a      	cmp	r2, r3
 800081c:	d007      	beq.n	800082e <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 faa1 	bl	8000d68 <Block_Erase>
		Block_Mem=Block;
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 800082c:	e002      	b.n	8000834 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 800082e:	4a03      	ldr	r2, [pc, #12]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	8013      	strh	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240008c4 	.word	0x240008c4

08000840 <Chip_Erase>:

void Chip_Erase(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000846:	4819      	ldr	r0, [pc, #100]	@ (80008ac <Chip_Erase+0x6c>)
 8000848:	f000 faee 	bl	8000e28 <USART1_Printf>
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
 800084c:	1cf9      	adds	r1, r7, #3
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	2201      	movs	r2, #1
 8000854:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <Chip_Erase+0x70>)
 8000856:	f009 ff58 	bl	800a70a <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b59      	cmp	r3, #89	@ 0x59
 800085e:	d11d      	bne.n	800089c <Chip_Erase+0x5c>
		USART1_Printf("Sletter minne...\r\n");
 8000860:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <Chip_Erase+0x74>)
 8000862:	f000 fae1 	bl	8000e28 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	e009      	b.n	8000880 <Chip_Erase+0x40>
			Block_Erase(i*64);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29b      	uxth	r3, r3
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	b29b      	uxth	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fa77 	bl	8000d68 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000886:	ddf1      	ble.n	800086c <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <Chip_Erase+0x78>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <Chip_Erase+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
		USART1_Printf("Ferdig\r\n");
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <Chip_Erase+0x80>)
 8000896:	f000 fac7 	bl	8000e28 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 800089a:	e002      	b.n	80008a2 <Chip_Erase+0x62>
		USART1_Printf("Sletter IKKE minne\r\n");
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <Chip_Erase+0x84>)
 800089e:	f000 fac3 	bl	8000e28 <USART1_Printf>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800d1b8 	.word	0x0800d1b8
 80008b0:	24000be0 	.word	0x24000be0
 80008b4:	0800d1ec 	.word	0x0800d1ec
 80008b8:	240008c0 	.word	0x240008c0
 80008bc:	240008c2 	.word	0x240008c2
 80008c0:	0800d200 	.word	0x0800d200
 80008c4:	0800d20c 	.word	0x0800d20c

080008c8 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80008cc:	2064      	movs	r0, #100	@ 0x64
 80008ce:	f000 fa81 	bl	8000dd4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80008d2:	e002      	b.n	80008da <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80008d4:	2064      	movs	r0, #100	@ 0x64
 80008d6:	f000 fa7d 	bl	8000dd4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <W25N_WaitForReady+0x2c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f878 	bl	80009d4 <Read_Status_Register>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f2      	bne.n	80008d4 <W25N_WaitForReady+0xc>
    }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2400080a 	.word	0x2400080a

080008f8 <Write_Enable>:

void Write_Enable(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	csLOW();
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <Write_Enable+0x30>)
 8000902:	f005 ff27 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	2201      	movs	r2, #1
 800090a:	4908      	ldr	r1, [pc, #32]	@ (800092c <Write_Enable+0x34>)
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <Write_Enable+0x38>)
 800090e:	f008 fec5 	bl	800969c <HAL_SPI_Transmit>
	csHIGH();
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <Write_Enable+0x30>)
 8000918:	f005 ff1c 	bl	8006754 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 800091c:	2064      	movs	r0, #100	@ 0x64
 800091e:	f000 fa59 	bl	8000dd4 <delay_ns>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	58020000 	.word	0x58020000
 800092c:	2400080b 	.word	0x2400080b
 8000930:	24000988 	.word	0x24000988

08000934 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000942:	f001 fceb 	bl	800231c <HAL_Delay>
	if(BUF){
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d012      	beq.n	8000972 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <Flash_Init+0x98>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f83f 	bl	80009d4 <Read_Status_Register>
 8000956:	4603      	mov	r3, r0
 8000958:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800095a:	7bbb      	ldrb	r3, [r7, #14]
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <Flash_Init+0x98>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	7bba      	ldrb	r2, [r7, #14]
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f864 	bl	8000a38 <Write_Status_Register>
 8000970:	e011      	b.n	8000996 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <Flash_Init+0x98>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f82c 	bl	80009d4 <Read_Status_Register>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f023 0308 	bic.w	r3, r3, #8
 8000986:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <Flash_Init+0x98>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f851 	bl	8000a38 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <Flash_Init+0x9c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f81a 	bl	80009d4 <Read_Status_Register>
 80009a0:	4603      	mov	r3, r0
 80009a2:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80009b2:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <Flash_Init+0x9c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	7b7a      	ldrb	r2, [r7, #13]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f83b 	bl	8000a38 <Write_Status_Register>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	24000809 	.word	0x24000809
 80009d0:	24000808 	.word	0x24000808

080009d4 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <Read_Status_Register+0x50>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <Read_Status_Register+0x54>)
 80009e4:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <Read_Status_Register+0x54>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	7053      	strb	r3, [r2, #1]
	csLOW();
 80009ec:	2200      	movs	r2, #0
 80009ee:	2110      	movs	r1, #16
 80009f0:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <Read_Status_Register+0x58>)
 80009f2:	f005 feaf 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 80009f6:	2364      	movs	r3, #100	@ 0x64
 80009f8:	2202      	movs	r2, #2
 80009fa:	490b      	ldr	r1, [pc, #44]	@ (8000a28 <Read_Status_Register+0x54>)
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <Read_Status_Register+0x5c>)
 80009fe:	f008 fe4d 	bl	800969c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000a02:	2364      	movs	r3, #100	@ 0x64
 8000a04:	2201      	movs	r2, #1
 8000a06:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <Read_Status_Register+0x60>)
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <Read_Status_Register+0x5c>)
 8000a0a:	f009 f835 	bl	8009a78 <HAL_SPI_Receive>
	csHIGH();
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <Read_Status_Register+0x58>)
 8000a14:	f005 fe9e 	bl	8006754 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <Read_Status_Register+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000806 	.word	0x24000806
 8000a28:	240008c8 	.word	0x240008c8
 8000a2c:	58020000 	.word	0x58020000
 8000a30:	24000988 	.word	0x24000988
 8000a34:	240008d0 	.word	0x240008d0

08000a38 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <Write_Status_Register+0x4c>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000a56:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <Write_Status_Register+0x54>)
 8000a62:	f005 fe77 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000a66:	2364      	movs	r3, #100	@ 0x64
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4907      	ldr	r1, [pc, #28]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <Write_Status_Register+0x58>)
 8000a6e:	f008 fe15 	bl	800969c <HAL_SPI_Transmit>
	csHIGH();
 8000a72:	2201      	movs	r2, #1
 8000a74:	2110      	movs	r1, #16
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <Write_Status_Register+0x54>)
 8000a78:	f005 fe6c 	bl	8006754 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000807 	.word	0x24000807
 8000a88:	240008c8 	.word	0x240008c8
 8000a8c:	58020000 	.word	0x58020000
 8000a90:	24000988 	.word	0x24000988

08000a94 <Read_ID>:

uint32_t Read_ID(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <Read_ID+0x54>)
 8000aac:	f005 fe52 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000ab0:	2364      	movs	r3, #100	@ 0x64
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <Read_ID+0x58>)
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <Read_ID+0x5c>)
 8000ab8:	f008 fdf0 	bl	800969c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000abc:	1d39      	adds	r1, r7, #4
 8000abe:	2364      	movs	r3, #100	@ 0x64
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <Read_ID+0x5c>)
 8000ac4:	f008 ffd8 	bl	8009a78 <HAL_SPI_Receive>
	csHIGH();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <Read_ID+0x54>)
 8000ace:	f005 fe41 	bl	8006754 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	041a      	lsls	r2, r3, #16
 8000ad6:	797b      	ldrb	r3, [r7, #5]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	79b9      	ldrb	r1, [r7, #6]
 8000adc:	430b      	orrs	r3, r1
 8000ade:	4313      	orrs	r3, r2
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	24000804 	.word	0x24000804
 8000af0:	24000988 	.word	0x24000988

08000af4 <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	4613      	mov	r3, r2
 8000b02:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000b04:	f7ff fef8 	bl	80008f8 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <Write_Data_Buffer+0x6c>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b1a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b22:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	480f      	ldr	r0, [pc, #60]	@ (8000b68 <Write_Data_Buffer+0x74>)
 8000b2a:	f005 fe13 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000b2e:	2364      	movs	r3, #100	@ 0x64
 8000b30:	2203      	movs	r2, #3
 8000b32:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <Write_Data_Buffer+0x78>)
 8000b36:	f008 fdb1 	bl	800969c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000b3a:	88ba      	ldrh	r2, [r7, #4]
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <Write_Data_Buffer+0x78>)
 8000b44:	f008 fdaa 	bl	800969c <HAL_SPI_Transmit>
//	SPI_BUSY = 1;
	csHIGH();
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <Write_Data_Buffer+0x74>)
 8000b4e:	f005 fe01 	bl	8006754 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000b52:	2064      	movs	r0, #100	@ 0x64
 8000b54:	f000 f93e 	bl	8000dd4 <delay_ns>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2400080d 	.word	0x2400080d
 8000b64:	240008c8 	.word	0x240008c8
 8000b68:	58020000 	.word	0x58020000
 8000b6c:	24000988 	.word	0x24000988

08000b70 <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <Write_Data_Flash+0x58>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b80:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b92:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b9a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <Write_Data_Flash+0x60>)
 8000ba2:	f005 fdd7 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <Write_Data_Flash+0x64>)
 8000bae:	f008 fd75 	bl	800969c <HAL_SPI_Transmit>
	csHIGH();
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <Write_Data_Flash+0x60>)
 8000bb8:	f005 fdcc 	bl	8006754 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000bbc:	f7ff fe84 	bl	80008c8 <W25N_WaitForReady>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400080e 	.word	0x2400080e
 8000bcc:	240008c8 	.word	0x240008c8
 8000bd0:	58020000 	.word	0x58020000
 8000bd4:	24000988 	.word	0x24000988

08000bd8 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <Select_Page_Read+0x58>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000be8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000bfa:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000c02:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <Select_Page_Read+0x60>)
 8000c0a:	f005 fda3 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	2204      	movs	r2, #4
 8000c12:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000c14:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <Select_Page_Read+0x64>)
 8000c16:	f008 fd41 	bl	800969c <HAL_SPI_Transmit>
	csHIGH();
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <Select_Page_Read+0x60>)
 8000c20:	f005 fd98 	bl	8006754 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000c24:	f7ff fe50 	bl	80008c8 <W25N_WaitForReady>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2400080f 	.word	0x2400080f
 8000c34:	240008c8 	.word	0x240008c8
 8000c38:	58020000 	.word	0x58020000
 8000c3c:	24000988 	.word	0x24000988

08000c40 <Read_Data_Cont>:
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
	csHIGH();
}

void Read_Data_Cont(uint16_t len){
 8000c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c44:	b089      	sub	sp, #36	@ 0x24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	466b      	mov	r3, sp
 8000c4e:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffc1 	bl	8000bd8 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000c56:	88f9      	ldrh	r1, [r7, #6]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	b28b      	uxth	r3, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	4698      	mov	r8, r3
 8000c64:	4691      	mov	r9, r2
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c7a:	b28b      	uxth	r3, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	00eb      	lsls	r3, r5, #3
 8000c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c90:	00e2      	lsls	r2, r4, #3
 8000c92:	460b      	mov	r3, r1
 8000c94:	3307      	adds	r3, #7
 8000c96:	08db      	lsrs	r3, r3, #3
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c9e:	466b      	mov	r3, sp
 8000ca0:	3300      	adds	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <Read_Data_Cont+0x114>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000caa:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <Read_Data_Cont+0x11c>)
 8000cc4:	f005 fd46 	bl	8006754 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000cc8:	2364      	movs	r3, #100	@ 0x64
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4922      	ldr	r1, [pc, #136]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cce:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000cd0:	f008 fce4 	bl	800969c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000cde:	f008 fecb 	bl	8009a78 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3303      	adds	r3, #3
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	330b      	adds	r3, #11
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000cfa:	e018      	b.n	8000d2e <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000cfc:	8bf9      	ldrh	r1, [r7, #30]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <Read_Data_Cont+0x124>)
 8000d04:	f000 f890 	bl	8000e28 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	68f9      	ldr	r1, [r7, #12]
 8000d10:	4813      	ldr	r0, [pc, #76]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000d12:	f008 feb1 	bl	8009a78 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3303      	adds	r3, #3
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	330b      	adds	r3, #11
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d103      	bne.n	8000d3e <Read_Data_Cont+0xfe>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	7bdb      	ldrb	r3, [r3, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0de      	beq.n	8000cfc <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <Read_Data_Cont+0x11c>)
 8000d44:	f005 fd06 	bl	8006754 <HAL_GPIO_WritePin>
 8000d48:	46b5      	mov	sp, r6
}
 8000d4a:	bf00      	nop
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d54:	24000810 	.word	0x24000810
 8000d58:	240008c8 	.word	0x240008c8
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	24000988 	.word	0x24000988
 8000d64:	0800d224 	.word	0x0800d224

08000d68 <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000d72:	f7ff fdc1 	bl	80008f8 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Block_Erase+0x5c>)
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <Block_Erase+0x60>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Block_Erase+0x60>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <Block_Erase+0x60>)
 8000d8e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <Block_Erase+0x60>)
 8000d96:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <Block_Erase+0x64>)
 8000d9e:	f005 fcd9 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000da2:	2364      	movs	r3, #100	@ 0x64
 8000da4:	2204      	movs	r2, #4
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <Block_Erase+0x60>)
 8000da8:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <Block_Erase+0x68>)
 8000daa:	f008 fc77 	bl	800969c <HAL_SPI_Transmit>
	csHIGH();
 8000dae:	2201      	movs	r2, #1
 8000db0:	2110      	movs	r1, #16
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <Block_Erase+0x64>)
 8000db4:	f005 fcce 	bl	8006754 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000db8:	f7ff fd86 	bl	80008c8 <W25N_WaitForReady>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400080c 	.word	0x2400080c
 8000dc8:	240008c8 	.word	0x240008c8
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	24000988 	.word	0x24000988

08000dd4 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <delay_ns+0x48>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0a5b      	lsrs	r3, r3, #9
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <delay_ns+0x4c>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	09db      	lsrs	r3, r3, #7
 8000dea:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <delay_ns+0x50>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000dfc:	bf00      	nop
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <delay_ns+0x50>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f8      	bhi.n	8000dfe <delay_ns+0x2a>
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	24000824 	.word	0x24000824
 8000e20:	00044b83 	.word	0x00044b83
 8000e24:	e0001000 	.word	0xe0001000

08000e28 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e28:	b40f      	push	{r0, r1, r2, r3}
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b0a2      	sub	sp, #136	@ 0x88
 8000e2e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e30:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e34:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e36:	f107 0008 	add.w	r0, r7, #8
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	f00b fd21 	bl	800c888 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fa48 	bl	80002e0 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f107 0108 	add.w	r1, r7, #8
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <USART1_Printf+0x48>)
 8000e5e:	f009 fbc6 	bl	800a5ee <HAL_UART_Transmit>
}
 8000e62:	bf00      	nop
 8000e64:	3788      	adds	r7, #136	@ 0x88
 8000e66:	46bd      	mov	sp, r7
 8000e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e6c:	b004      	add	sp, #16
 8000e6e:	4770      	bx	lr
 8000e70:	24000be0 	.word	0x24000be0

08000e74 <CAN_ReceiveMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CAN_ReceiveMessage(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <CAN_ReceiveMessage+0x50>)
 8000e7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <CAN_ReceiveMessage+0x54>)
 8000e7e:	2140      	movs	r1, #64	@ 0x40
 8000e80:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <CAN_ReceiveMessage+0x58>)
 8000e82:	f004 fc41 	bl	8005708 <HAL_FDCAN_GetRxMessage>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d116      	bne.n	8000eba <CAN_ReceiveMessage+0x46>
    	USART1_Printf("Received CAN Message: ");
 8000e8c:	4810      	ldr	r0, [pc, #64]	@ (8000ed0 <CAN_ReceiveMessage+0x5c>)
 8000e8e:	f7ff ffcb 	bl	8000e28 <USART1_Printf>
        for (int i = 0; i < 8; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	e00a      	b.n	8000eae <CAN_ReceiveMessage+0x3a>
        	USART1_Printf("%02X ", RxData[i]);
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <CAN_ReceiveMessage+0x50>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <CAN_ReceiveMessage+0x60>)
 8000ea4:	f7ff ffc0 	bl	8000e28 <USART1_Printf>
        for (int i = 0; i < 8; i++) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	ddf1      	ble.n	8000e98 <CAN_ReceiveMessage+0x24>
        }
        USART1_Printf("\r\n");
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <CAN_ReceiveMessage+0x64>)
 8000eb6:	f7ff ffb7 	bl	8000e28 <USART1_Printf>
    }
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000bc4 	.word	0x24000bc4
 8000ec8:	24000b9c 	.word	0x24000b9c
 8000ecc:	240008e8 	.word	0x240008e8
 8000ed0:	0800d244 	.word	0x0800d244
 8000ed4:	0800d25c 	.word	0x0800d25c
 8000ed8:	0800d264 	.word	0x0800d264

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f001 f98a 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f892 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa60 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000eec:	f000 fa36 	bl	800135c <MX_DMA_Init>
  MX_SPI1_Init();
 8000ef0:	f000 f992 	bl	8001218 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ef4:	f000 f9e6 	bl	80012c4 <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8000ef8:	f000 f904 	bl	8001104 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 ff89 	bl	8001e14 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 ff86 	bl	8001e14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f000 ff83 	bl	8001e14 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2000      	movs	r0, #0
 8000f12:	f001 f81f 	bl	8001f54 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f16:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <main+0x10c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f1e:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <main+0x10c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f24:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <main+0x10c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <main+0x10c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <main+0x10c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f36:	492c      	ldr	r1, [pc, #176]	@ (8000fe8 <main+0x10c>)
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f001 f89b 	bl	8002074 <BSP_COM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <main+0x6c>
  {
    Error_Handler();
 8000f44:	f000 fad4 	bl	80014f0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <main+0x110>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <main+0x110>)
 8000f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f52:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <main+0x114>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <main+0x114>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8000f60:	220a      	movs	r2, #10
 8000f62:	4924      	ldr	r1, [pc, #144]	@ (8000ff4 <main+0x118>)
 8000f64:	4824      	ldr	r0, [pc, #144]	@ (8000ff8 <main+0x11c>)
 8000f66:	f009 fc99 	bl	800a89c <HAL_UART_Receive_DMA>
  Flash_Init(0);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fce2 	bl	8000934 <Flash_Init>
  ID=Read_ID();
 8000f70:	f7ff fd90 	bl	8000a94 <Read_ID>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <main+0x120>)
 8000f78:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000f7a:	f7ff fb9f 	bl	80006bc <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000f7e:	2364      	movs	r3, #100	@ 0x64
 8000f80:	2201      	movs	r2, #1
 8000f82:	491f      	ldr	r1, [pc, #124]	@ (8001000 <main+0x124>)
 8000f84:	481f      	ldr	r0, [pc, #124]	@ (8001004 <main+0x128>)
 8000f86:	f009 fbc0 	bl	800a70a <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <main+0x124>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b31      	cmp	r3, #49	@ 0x31
 8000f90:	d105      	bne.n	8000f9e <main+0xc2>
		  Read_Data_Cont(16);
 8000f92:	2010      	movs	r0, #16
 8000f94:	f7ff fe54 	bl	8000c40 <Read_Data_Cont>
//		  Read_Data(15, Read_data);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
//		  Read_Data(1, &Read_data[0]);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
		  command = 0;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <main+0x124>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <main+0x124>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b32      	cmp	r3, #50	@ 0x32
 8000fa4:	d108      	bne.n	8000fb8 <main+0xdc>
		  Start_Flight_Recording=1;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <main+0x12c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 ffa7 	bl	8001f00 <BSP_LED_Toggle>
		  command=0;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <main+0x124>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <main+0x124>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b33      	cmp	r3, #51	@ 0x33
 8000fbe:	d108      	bne.n	8000fd2 <main+0xf6>
		  Start_Flight_Recording=0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <main+0x12c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 ff9a 	bl	8001f00 <BSP_LED_Toggle>
		  command=0;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <main+0x124>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <main+0x124>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b34      	cmp	r3, #52	@ 0x34
 8000fd8:	d1cf      	bne.n	8000f7a <main+0x9e>
		  Chip_Erase();
 8000fda:	f7ff fc31 	bl	8000840 <Chip_Erase>
		  command=0;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <main+0x124>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000fe4:	e7c9      	b.n	8000f7a <main+0x9e>
 8000fe6:	bf00      	nop
 8000fe8:	240008d8 	.word	0x240008d8
 8000fec:	e000edf0 	.word	0xe000edf0
 8000ff0:	e0001000 	.word	0xe0001000
 8000ff4:	24000814 	.word	0x24000814
 8000ff8:	24000a88 	.word	0x24000a88
 8000ffc:	24000b94 	.word	0x24000b94
 8001000:	24000b98 	.word	0x24000b98
 8001004:	24000be0 	.word	0x24000be0
 8001008:	24000b99 	.word	0x24000b99

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09c      	sub	sp, #112	@ 0x70
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	224c      	movs	r2, #76	@ 0x4c
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fc42 	bl	800c8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2220      	movs	r2, #32
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00b fc3c 	bl	800c8a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800102c:	2002      	movs	r0, #2
 800102e:	f005 fbc5 	bl	80067bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <SystemClock_Config+0xf0>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a30      	ldr	r2, [pc, #192]	@ (80010fc <SystemClock_Config+0xf0>)
 800103c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <SystemClock_Config+0xf0>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <SystemClock_Config+0xf4>)
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <SystemClock_Config+0xf4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <SystemClock_Config+0xf4>)
 800105a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001064:	bf00      	nop
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <SystemClock_Config+0xf0>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800106e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001072:	d1f8      	bne.n	8001066 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001078:	2301      	movs	r3, #1
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2340      	movs	r3, #64	@ 0x40
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800108c:	233c      	movs	r3, #60	@ 0x3c
 800108e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001094:	2305      	movs	r3, #5
 8001096:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800109c:	230c      	movs	r3, #12
 800109e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fbbf 	bl	8006830 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010b8:	f000 fa1a 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	233f      	movs	r3, #63	@ 0x3f
 80010be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010c8:	2308      	movs	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010cc:	2340      	movs	r3, #64	@ 0x40
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010d0:	2340      	movs	r3, #64	@ 0x40
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010da:	2340      	movs	r3, #64	@ 0x40
 80010dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 fffe 	bl	80070e4 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010ee:	f000 f9ff 	bl	80014f0 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3770      	adds	r7, #112	@ 0x70
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58024800 	.word	0x58024800
 8001100:	58000400 	.word	0x58000400

08001104 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800110a:	4b40      	ldr	r3, [pc, #256]	@ (800120c <MX_FDCAN1_Init+0x108>)
 800110c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001110:	4a3e      	ldr	r2, [pc, #248]	@ (800120c <MX_FDCAN1_Init+0x108>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <MX_FDCAN1_Init+0x108>)
 800111c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800112a:	4a3a      	ldr	r2, [pc, #232]	@ (8001214 <MX_FDCAN1_Init+0x110>)
 800112c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800113a:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800113c:	2200      	movs	r2, #0
 800113e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001140:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001142:	2200      	movs	r2, #0
 8001144:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001148:	2200      	movs	r2, #0
 800114a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800114c:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800114e:	2201      	movs	r2, #1
 8001150:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001152:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001154:	2202      	movs	r2, #2
 8001156:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001158:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800115a:	220d      	movs	r2, #13
 800115c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001160:	2202      	movs	r2, #2
 8001162:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001166:	2201      	movs	r2, #1
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800116c:	2207      	movs	r2, #7
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001172:	2208      	movs	r2, #8
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001178:	2207      	movs	r2, #7
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800117e:	2200      	movs	r2, #0
 8001180:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001184:	2200      	movs	r2, #0
 8001186:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800118a:	2200      	movs	r2, #0
 800118c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800118e:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001190:	2240      	movs	r2, #64	@ 0x40
 8001192:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001194:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 8001196:	2204      	movs	r2, #4
 8001198:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800119a:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 800119c:	2200      	movs	r2, #0
 800119e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011d0:	480f      	ldr	r0, [pc, #60]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011d2:	f004 f88f 	bl	80052f4 <HAL_FDCAN_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80011dc:	f000 f988 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011e2:	f004 fa65 	bl	80056b0 <HAL_FDCAN_Start>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80011ec:	f000 f980 	bl	80014f0 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80011f0:	2200      	movs	r2, #0
 80011f2:	2101      	movs	r1, #1
 80011f4:	4806      	ldr	r0, [pc, #24]	@ (8001210 <MX_FDCAN1_Init+0x10c>)
 80011f6:	f004 fbf3 	bl	80059e0 <HAL_FDCAN_ActivateNotification>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001200:	f000 f976 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	240008e8 	.word	0x240008e8
 8001214:	4000a000 	.word	0x4000a000

08001218 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800121e:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <MX_SPI1_Init+0xa8>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001224:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001232:	2207      	movs	r2, #7
 8001234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001244:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800124c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001250:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800126c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_SPI1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_SPI1_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_SPI1_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_SPI1_Init+0xa4>)
 80012aa:	f008 f8d3 	bl	8009454 <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012b4:	f000 f91c 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	24000988 	.word	0x24000988
 80012c0:	40013000 	.word	0x40013000

080012c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012ca:	4a23      	ldr	r2, [pc, #140]	@ (8001358 <MX_USART1_UART_Init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 800130e:	f009 f91e 	bl	800a54e <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001318:	f000 f8ea 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 8001320:	f00b f9b9 	bl	800c696 <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800132a:	f000 f8e1 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 8001332:	f00b f9ee 	bl	800c712 <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800133c:	f000 f8d8 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	@ (8001354 <MX_USART1_UART_Init+0x90>)
 8001342:	f00b f96f 	bl	800c624 <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800134c:	f000 f8d0 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000a88 	.word	0x24000a88
 8001358:	40011000 	.word	0x40011000

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_DMA_Init+0x4c>)
 8001364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001368:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <MX_DMA_Init+0x4c>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <MX_DMA_Init+0x4c>)
 8001374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	200b      	movs	r0, #11
 8001386:	f001 f8d4 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800138a:	200b      	movs	r0, #11
 800138c:	f001 f8eb 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	200c      	movs	r0, #12
 8001396:	f001 f8cc 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800139a:	200c      	movs	r0, #12
 800139c:	f001 f8e3 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58024400 	.word	0x58024400

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a40      	ldr	r2, [pc, #256]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e0:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a39      	ldr	r2, [pc, #228]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <MX_GPIO_Init+0x120>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_GPIO_Init+0x120>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <MX_GPIO_Init+0x120>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_GPIO_Init+0x120>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_GPIO_Init+0x120>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_GPIO_Init+0x120>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <MX_GPIO_Init+0x120>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_GPIO_Init+0x120>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	4815      	ldr	r0, [pc, #84]	@ (80014d0 <MX_GPIO_Init+0x124>)
 800147c:	f005 f96a 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2102      	movs	r1, #2
 8001484:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <MX_GPIO_Init+0x128>)
 8001486:	f005 f965 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 800148a:	2310      	movs	r3, #16
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <MX_GPIO_Init+0x124>)
 80014a2:	f004 ffa7 	bl	80063f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_GPIO_Init+0x128>)
 80014be:	f004 ff99 	bl	80063f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	@ 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020000 	.word	0x58020000
 80014d4:	58021000 	.word	0x58021000

080014d8 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	CAN_ReceiveMessage();
 80014e2:	f7ff fcc7 	bl	8000e74 <CAN_ReceiveMessage>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <Error_Handler+0x10>)
 80014f6:	f004 f8db 	bl	80056b0 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	240008e8 	.word	0x240008e8

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_MspInit+0x30>)
 800150c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001510:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x30>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x30>)
 800151c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58024400 	.word	0x58024400

08001538 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0ba      	sub	sp, #232	@ 0xe8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	22c0      	movs	r2, #192	@ 0xc0
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00b f9a3 	bl	800c8a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a33      	ldr	r2, [pc, #204]	@ (8001630 <HAL_FDCAN_MspInit+0xf8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d15e      	bne.n	8001626 <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001568:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001578:	230a      	movs	r3, #10
 800157a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001580:	2314      	movs	r3, #20
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001588:	23c0      	movs	r3, #192	@ 0xc0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800158c:	2320      	movs	r3, #32
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001594:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 f92b 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80015ac:	f7ff ffa0 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80015c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d4:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_FDCAN_MspInit+0xfc>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001604:	2309      	movs	r3, #9
 8001606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	@ (8001638 <HAL_FDCAN_MspInit+0x100>)
 8001612:	f004 feef 	bl	80063f4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2013      	movs	r0, #19
 800161c:	f000 ff89 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001620:	2013      	movs	r0, #19
 8001622:	f000 ffa0 	bl	8002566 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	37e8      	adds	r7, #232	@ 0xe8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	4000a000 	.word	0x4000a000
 8001634:	58024400 	.word	0x58024400
 8001638:	58020c00 	.word	0x58020c00

0800163c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0bc      	sub	sp, #240	@ 0xf0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	22c0      	movs	r2, #192	@ 0xc0
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00b f921 	bl	800c8a4 <memset>
  if(hspi->Instance==SPI1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <HAL_SPI_MspInit+0x178>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 809f 	bne.w	80017ac <HAL_SPI_MspInit+0x170>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800166e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f006 f8ba 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800168e:	f7ff ff2f 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001692:	4b49      	ldr	r3, [pc, #292]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001698:	4a47      	ldr	r2, [pc, #284]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 800169a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800169e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a40      	ldr	r2, [pc, #256]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b3a      	ldr	r3, [pc, #232]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a38      	ldr	r2, [pc, #224]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b36      	ldr	r3, [pc, #216]	@ (80017b8 <HAL_SPI_MspInit+0x17c>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ec:	2360      	movs	r3, #96	@ 0x60
 80016ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001704:	2305      	movs	r3, #5
 8001706:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800170e:	4619      	mov	r1, r3
 8001710:	482a      	ldr	r0, [pc, #168]	@ (80017bc <HAL_SPI_MspInit+0x180>)
 8001712:	f004 fe6f 	bl	80063f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001716:	2320      	movs	r3, #32
 8001718:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172e:	2305      	movs	r3, #5
 8001730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001738:	4619      	mov	r1, r3
 800173a:	4821      	ldr	r0, [pc, #132]	@ (80017c0 <HAL_SPI_MspInit+0x184>)
 800173c:	f004 fe5a 	bl	80063f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001740:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001742:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <HAL_SPI_MspInit+0x18c>)
 8001744:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001748:	2226      	movs	r2, #38	@ 0x26
 800174a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 800174e:	2240      	movs	r2, #64	@ 0x40
 8001750:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 800175a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800175e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001778:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001780:	4810      	ldr	r0, [pc, #64]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001782:	f000 ff0b 	bl	800259c <HAL_DMA_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 800178c:	f7ff feb0 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a0c      	ldr	r2, [pc, #48]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001794:	679a      	str	r2, [r3, #120]	@ 0x78
 8001796:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_SPI_MspInit+0x188>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2023      	movs	r0, #35	@ 0x23
 80017a2:	f000 fec6 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017a6:	2023      	movs	r0, #35	@ 0x23
 80017a8:	f000 fedd 	bl	8002566 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017ac:	bf00      	nop
 80017ae:	37f0      	adds	r7, #240	@ 0xf0
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40013000 	.word	0x40013000
 80017b8:	58024400 	.word	0x58024400
 80017bc:	58020000 	.word	0x58020000
 80017c0:	58020400 	.word	0x58020400
 80017c4:	24000a10 	.word	0x24000a10
 80017c8:	40020010 	.word	0x40020010

080017cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0bc      	sub	sp, #240	@ 0xf0
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	22c0      	movs	r2, #192	@ 0xc0
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00b f859 	bl	800c8a4 <memset>
  if(huart->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a55      	ldr	r2, [pc, #340]	@ (800194c <HAL_UART_MspInit+0x180>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f040 80a3 	bne.w	8001944 <HAL_UART_MspInit+0x178>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fe:	f04f 0201 	mov.w	r2, #1
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f005 fff1 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001820:	f7ff fe66 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001824:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800182a:	4a49      	ldr	r2, [pc, #292]	@ (8001950 <HAL_UART_MspInit+0x184>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001834:	4b46      	ldr	r3, [pc, #280]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b43      	ldr	r3, [pc, #268]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	4a41      	ldr	r2, [pc, #260]	@ (8001950 <HAL_UART_MspInit+0x184>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001852:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	4a3a      	ldr	r2, [pc, #232]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001870:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <HAL_UART_MspInit+0x184>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800187e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001898:	2304      	movs	r3, #4
 800189a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018a2:	4619      	mov	r1, r3
 80018a4:	482b      	ldr	r0, [pc, #172]	@ (8001954 <HAL_UART_MspInit+0x188>)
 80018a6:	f004 fda5 	bl	80063f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018ce:	4619      	mov	r1, r3
 80018d0:	4821      	ldr	r0, [pc, #132]	@ (8001958 <HAL_UART_MspInit+0x18c>)
 80018d2:	f004 fd8f 	bl	80063f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_UART_MspInit+0x194>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018de:	2229      	movs	r2, #41	@ 0x29
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_UART_MspInit+0x190>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_UART_MspInit+0x190>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_UART_MspInit+0x190>)
 800190a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_UART_MspInit+0x190>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001916:	4811      	ldr	r0, [pc, #68]	@ (800195c <HAL_UART_MspInit+0x190>)
 8001918:	f000 fe40 	bl	800259c <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8001922:	f7ff fde5 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <HAL_UART_MspInit+0x190>)
 800192a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800192e:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_UART_MspInit+0x190>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2025      	movs	r0, #37	@ 0x25
 800193a:	f000 fdfa 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800193e:	2025      	movs	r0, #37	@ 0x25
 8001940:	f000 fe11 	bl	8002566 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001944:	bf00      	nop
 8001946:	37f0      	adds	r7, #240	@ 0xf0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40011000 	.word	0x40011000
 8001950:	58024400 	.word	0x58024400
 8001954:	58020400 	.word	0x58020400
 8001958:	58020000 	.word	0x58020000
 800195c:	24000b1c 	.word	0x24000b1c
 8001960:	40020028 	.word	0x40020028

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 fc8e 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <SysTick_Handler+0x48>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <SysTick_Handler+0x3c>
	  CLK_SIM++;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <SysTick_Handler+0x4c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <SysTick_Handler+0x4c>)
 80019d0:	6013      	str	r3, [r2, #0]
	  Time++;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <SysTick_Handler+0x50>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <SysTick_Handler+0x50>)
 80019dc:	801a      	strh	r2, [r3, #0]
	  if(Time>=100){
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <SysTick_Handler+0x50>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b63      	cmp	r3, #99	@ 0x63
 80019e4:	d909      	bls.n	80019fa <SysTick_Handler+0x42>
	    	Write_To_Flightdata=1;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <SysTick_Handler+0x54>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
	    	Time=0;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <SysTick_Handler+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80019f2:	e002      	b.n	80019fa <SysTick_Handler+0x42>
	  Time=0;
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <SysTick_Handler+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000b99 	.word	0x24000b99
 8001a04:	24000bd0 	.word	0x24000bd0
 8001a08:	24000bcc 	.word	0x24000bcc
 8001a0c:	24000b9a 	.word	0x24000b9a

08001a10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <DMA1_Stream0_IRQHandler+0x10>)
 8001a16:	f002 f8eb 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000a10 	.word	0x24000a10

08001a24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA1_Stream1_IRQHandler+0x10>)
 8001a2a:	f002 f8e1 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000b1c 	.word	0x24000b1c

08001a38 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a3e:	f004 f849 	bl	8005ad4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	240008e8 	.word	0x240008e8

08001a4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <SPI1_IRQHandler+0x10>)
 8001a52:	f008 fa83 	bl	8009f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24000988 	.word	0x24000988

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <USART1_IRQHandler+0x10>)
 8001a66:	f009 f81b 	bl	800aaa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	24000a88 	.word	0x24000a88

08001a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 fadd 	bl	8002038 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_UART_RxCpltCallback>:
//		BSP_LED_Toggle(LED_RED);
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_UART_RxCpltCallback+0xd8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d15d      	bne.n	8001b52 <HAL_UART_RxCpltCallback+0xce>
		uint8_t Temp[16];

		Temp[0]=0xFF;
 8001a96:	23ff      	movs	r3, #255	@ 0xff
 8001a98:	733b      	strb	r3, [r7, #12]
		Temp[1]=Rx_buffer[0];
 8001a9a:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	737b      	strb	r3, [r7, #13]
		Temp[2]=Rx_buffer[1];
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	73bb      	strb	r3, [r7, #14]
		Temp[3]=Rx_buffer[2];
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	73fb      	strb	r3, [r7, #15]
		Temp[4]=Rx_buffer[3];
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001aae:	78db      	ldrb	r3, [r3, #3]
 8001ab0:	743b      	strb	r3, [r7, #16]
		Temp[5]=Rx_buffer[4];
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	747b      	strb	r3, [r7, #17]
		Temp[6]=Rx_buffer[5];
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001aba:	795b      	ldrb	r3, [r3, #5]
 8001abc:	74bb      	strb	r3, [r7, #18]
		Temp[7]=Rx_buffer[6];
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001ac0:	799b      	ldrb	r3, [r3, #6]
 8001ac2:	74fb      	strb	r3, [r7, #19]
		Temp[8]=Rx_buffer[7];
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001ac6:	79db      	ldrb	r3, [r3, #7]
 8001ac8:	753b      	strb	r3, [r7, #20]
		Temp[9]=Rx_buffer[8];
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001acc:	7a1b      	ldrb	r3, [r3, #8]
 8001ace:	757b      	strb	r3, [r7, #21]
		Temp[10]=Rx_buffer[9];
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001ad2:	7a5b      	ldrb	r3, [r3, #9]
 8001ad4:	75bb      	strb	r3, [r7, #22]
		Temp[11]=(uint8_t)(CLK_SIM);
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_UART_RxCpltCallback+0xe0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	75fb      	strb	r3, [r7, #23]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_UART_RxCpltCallback+0xe0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	763b      	strb	r3, [r7, #24]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_UART_RxCpltCallback+0xe0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	767b      	strb	r3, [r7, #25]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_UART_RxCpltCallback+0xe0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0e1b      	lsrs	r3, r3, #24
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	76bb      	strb	r3, [r7, #26]
		Temp[15]=0x00;
 8001afc:	2300      	movs	r3, #0
 8001afe:	76fb      	strb	r3, [r7, #27]

		if((Start_Flight_Recording==1)&&(Temp[1]==100)){
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_UART_RxCpltCallback+0xe4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d109      	bne.n	8001b1c <HAL_UART_RxCpltCallback+0x98>
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d106      	bne.n	8001b1c <HAL_UART_RxCpltCallback+0x98>
			Write_Data(&Temp[0], sizeof(Temp));
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	2110      	movs	r1, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fe05 	bl	8000724 <Write_Data>
 8001b1a:	e012      	b.n	8001b42 <HAL_UART_RxCpltCallback+0xbe>
		}
		else{
			HAL_UART_AbortReceive(&huart1);
 8001b1c:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <HAL_UART_RxCpltCallback+0xe8>)
 8001b1e:	f008 ff09 	bl	800a934 <HAL_UART_AbortReceive>
			while(huart1.Instance->ISR&0x0020){
 8001b22:	e007      	b.n	8001b34 <HAL_UART_RxCpltCallback+0xb0>
				uint8_t trash = huart1.Instance->RDR;
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_UART_RxCpltCallback+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	77fb      	strb	r3, [r7, #31]
				trash = huart1.Instance->ISR;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_UART_RxCpltCallback+0xe8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	77fb      	strb	r3, [r7, #31]
			while(huart1.Instance->ISR&0x0020){
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_UART_RxCpltCallback+0xe8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_UART_RxCpltCallback+0xa0>
				(void)trash;
			}
		}

		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8001b42:	220a      	movs	r2, #10
 8001b44:	4906      	ldr	r1, [pc, #24]	@ (8001b60 <HAL_UART_RxCpltCallback+0xdc>)
 8001b46:	4809      	ldr	r0, [pc, #36]	@ (8001b6c <HAL_UART_RxCpltCallback+0xe8>)
 8001b48:	f008 fea8 	bl	800a89c <HAL_UART_Receive_DMA>
		BSP_LED_Toggle(LED_RED);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f000 f9d7 	bl	8001f00 <BSP_LED_Toggle>
	}
}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	24000814 	.word	0x24000814
 8001b64:	24000bd0 	.word	0x24000bd0
 8001b68:	24000b99 	.word	0x24000b99
 8001b6c:	24000a88 	.word	0x24000a88

08001b70 <HAL_UART_ErrorCallback>:

/* USART1 Error Callback */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_UART_ErrorCallback+0x50>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d119      	bne.n	8001bb6 <HAL_UART_ErrorCallback+0x46>
        uint32_t error = HAL_UART_GetError(huart);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f009 fb82 	bl	800b28c <HAL_UART_GetError>
 8001b88:	60f8      	str	r0, [r7, #12]

        if (error & HAL_UART_ERROR_ORE) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_UART_ErrorCallback+0x2c>
            // Overrun error occurred
            __HAL_UART_CLEAR_OREFLAG(huart);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	621a      	str	r2, [r3, #32]
        if (error & HAL_UART_ERROR_PE) {
            // Parity error occurred
        }

        // Restart USART1 DMA Reception in case of an error
        memset(Rx_buffer, 0x00, sizeof(Rx_buffer));
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <HAL_UART_ErrorCallback+0x54>)
 8001ba2:	f00a fe7f 	bl	800c8a4 <memset>
        HAL_UART_AbortReceive(&huart1); // Abort current RX DMA transfer
 8001ba6:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <HAL_UART_ErrorCallback+0x58>)
 8001ba8:	f008 fec4 	bl	800a934 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], sizeof(Rx_buffer));
 8001bac:	220f      	movs	r2, #15
 8001bae:	4905      	ldr	r1, [pc, #20]	@ (8001bc4 <HAL_UART_ErrorCallback+0x54>)
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <HAL_UART_ErrorCallback+0x58>)
 8001bb2:	f008 fe73 	bl	800a89c <HAL_UART_Receive_DMA>
    }
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	24000814 	.word	0x24000814
 8001bc8:	24000a88 	.word	0x24000a88

08001bcc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
//	if(hspi->Instance == SPI1){
//		csHIGH();
//		SPI_BUSY = 0;
//		delay_ns(DELAY_NS);
//	}
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f00a fe50 	bl	800c8b4 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24080000 	.word	0x24080000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	24000bd4 	.word	0x24000bd4
 8001c48:	24000dc0 	.word	0x24000dc0

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c50:	4b43      	ldr	r3, [pc, #268]	@ (8001d60 <SystemInit+0x114>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a42      	ldr	r2, [pc, #264]	@ (8001d60 <SystemInit+0x114>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c60:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <SystemInit+0x118>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d807      	bhi.n	8001c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d64 <SystemInit+0x118>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 030f 	bic.w	r3, r3, #15
 8001c74:	4a3b      	ldr	r2, [pc, #236]	@ (8001d64 <SystemInit+0x118>)
 8001c76:	f043 0307 	orr.w	r3, r3, #7
 8001c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <SystemInit+0x11c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a39      	ldr	r2, [pc, #228]	@ (8001d68 <SystemInit+0x11c>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c88:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <SystemInit+0x11c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c8e:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <SystemInit+0x11c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4935      	ldr	r1, [pc, #212]	@ (8001d68 <SystemInit+0x11c>)
 8001c94:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <SystemInit+0x120>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c9a:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <SystemInit+0x118>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <SystemInit+0x118>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	4a2d      	ldr	r2, [pc, #180]	@ (8001d64 <SystemInit+0x118>)
 8001cb0:	f043 0307 	orr.w	r3, r3, #7
 8001cb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <SystemInit+0x11c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <SystemInit+0x11c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <SystemInit+0x11c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <SystemInit+0x11c>)
 8001cca:	4a29      	ldr	r2, [pc, #164]	@ (8001d70 <SystemInit+0x124>)
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cce:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <SystemInit+0x11c>)
 8001cd0:	4a28      	ldr	r2, [pc, #160]	@ (8001d74 <SystemInit+0x128>)
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <SystemInit+0x11c>)
 8001cd6:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <SystemInit+0x12c>)
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <SystemInit+0x11c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <SystemInit+0x11c>)
 8001ce2:	4a25      	ldr	r2, [pc, #148]	@ (8001d78 <SystemInit+0x12c>)
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <SystemInit+0x11c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <SystemInit+0x11c>)
 8001cee:	4a22      	ldr	r2, [pc, #136]	@ (8001d78 <SystemInit+0x12c>)
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <SystemInit+0x11c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <SystemInit+0x11c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d68 <SystemInit+0x11c>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d04:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <SystemInit+0x11c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <SystemInit+0x130>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <SystemInit+0x134>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d16:	d202      	bcs.n	8001d1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <SystemInit+0x138>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <SystemInit+0x11c>)
 8001d20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d113      	bne.n	8001d54 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <SystemInit+0x11c>)
 8001d2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d32:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <SystemInit+0x11c>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <SystemInit+0x13c>)
 8001d3e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d42:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <SystemInit+0x11c>)
 8001d46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <SystemInit+0x11c>)
 8001d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d50:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00
 8001d64:	52002000 	.word	0x52002000
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d70:	02020200 	.word	0x02020200
 8001d74:	01ff0000 	.word	0x01ff0000
 8001d78:	01010280 	.word	0x01010280
 8001d7c:	5c001000 	.word	0x5c001000
 8001d80:	ffff0000 	.word	0xffff0000
 8001d84:	51008108 	.word	0x51008108
 8001d88:	52004000 	.word	0x52004000

08001d8c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <ExitRun0Mode+0x2c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <ExitRun0Mode+0x2c>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d9c:	bf00      	nop
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <ExitRun0Mode+0x2c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f9      	beq.n	8001d9e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	58024800 	.word	0x58024800

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001df8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001dc0:	f7ff ffe4 	bl	8001d8c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc4:	f7ff ff42 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dca:	490d      	ldr	r1, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dee:	f00a fd67 	bl	800c8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff f873 	bl	8000edc <main>
  bx  lr
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e00:	240008a0 	.word	0x240008a0
  ldr r2, =_sidata
 8001e04:	0800d354 	.word	0x0800d354
  ldr r2, =_sbss
 8001e08:	240008a0 	.word	0x240008a0
  ldr r4, =_ebss
 8001e0c:	24000dc0 	.word	0x24000dc0

08001e10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC3_IRQHandler>
	...

08001e14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	@ 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <BSP_LED_Init+0x28>
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d006      	beq.n	8001e3c <BSP_LED_Init+0x28>
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d003      	beq.n	8001e3c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e34:	f06f 0301 	mvn.w	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3a:	e055      	b.n	8001ee8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	e021      	b.n	8001ea6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10f      	bne.n	8001e88 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	e00e      	b.n	8001ea6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <BSP_LED_Init+0xe0>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <BSP_LED_Init+0xe4>)
 8001eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <BSP_LED_Init+0xe8>)
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	f107 0218 	add.w	r2, r7, #24
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fa92 	bl	80063f4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <BSP_LED_Init+0xe8>)
 8001ed4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <BSP_LED_Init+0xe4>)
 8001edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f004 fc36 	bl	8006754 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3730      	adds	r7, #48	@ 0x30
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	0800d2c4 	.word	0x0800d2c4
 8001efc:	24000830 	.word	0x24000830

08001f00 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <BSP_LED_Toggle+0x28>
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d006      	beq.n	8001f28 <BSP_LED_Toggle+0x28>
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e00b      	b.n	8001f40 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <BSP_LED_Toggle+0x4c>)
 8001f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4907      	ldr	r1, [pc, #28]	@ (8001f50 <BSP_LED_Toggle+0x50>)
 8001f34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f004 fc23 	bl	8006786 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001f40:	68fb      	ldr	r3, [r7, #12]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	24000830 	.word	0x24000830
 8001f50:	0800d2c4 	.word	0x0800d2c4

08001f54 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <BSP_PB_Init+0xcc>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002020 <BSP_PB_Init+0xcc>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <BSP_PB_Init+0xcc>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <BSP_PB_Init+0xd0>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fa23 	bl	80063f4 <HAL_GPIO_Init>
 8001fae:	e031      	b.n	8002014 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001fb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fb4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <BSP_PB_Init+0xd0>)
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	f107 020c 	add.w	r2, r7, #12
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fa15 	bl	80063f4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4a16      	ldr	r2, [pc, #88]	@ (8002028 <BSP_PB_Init+0xd4>)
 8001fd0:	441a      	add	r2, r3
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4915      	ldr	r1, [pc, #84]	@ (800202c <BSP_PB_Init+0xd8>)
 8001fd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f003 f944 	bl	800526a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <BSP_PB_Init+0xd4>)
 8001fe8:	1898      	adds	r0, r3, r2
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <BSP_PB_Init+0xdc>)
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f003 f919 	bl	800522c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ffa:	2028      	movs	r0, #40	@ 0x28
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <BSP_PB_Init+0xe0>)
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	f000 fa93 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800200c:	2328      	movs	r3, #40	@ 0x28
 800200e:	4618      	mov	r0, r3
 8002010:	f000 faa9 	bl	8002566 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58024400 	.word	0x58024400
 8002024:	2400083c 	.word	0x2400083c
 8002028:	24000bd8 	.word	0x24000bd8
 800202c:	0800d2cc 	.word	0x0800d2cc
 8002030:	24000840 	.word	0x24000840
 8002034:	24000844 	.word	0x24000844

08002038 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <BSP_PB_IRQHandler+0x20>)
 8002048:	4413      	add	r3, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f922 	bl	8005294 <HAL_EXTI_IRQHandler>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	24000bd8 	.word	0x24000bd8

0800205c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800208a:	f06f 0301 	mvn.w	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e018      	b.n	80020c4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2294      	movs	r2, #148	@ 0x94
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <BSP_COM_Init+0x5c>)
 800209c:	4413      	add	r3, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f852 	bl	8002148 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	2294      	movs	r2, #148	@ 0x94
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <BSP_COM_Init+0x5c>)
 80020ae:	4413      	add	r3, r2
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f80e 	bl	80020d4 <MX_USART3_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020be:	f06f 0303 	mvn.w	r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24000be0 	.word	0x24000be0

080020d4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <MX_USART3_Init+0x60>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	220c      	movs	r2, #12
 80020f2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	895b      	ldrh	r3, [r3, #10]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	891b      	ldrh	r3, [r3, #8]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	899b      	ldrh	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002120:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f008 fa13 	bl	800a54e <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2400082c 	.word	0x2400082c

08002138 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff ff8d 	bl	800205c <BSP_PB_Callback>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002156:	4a26      	ldr	r2, [pc, #152]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002160:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <COM1_MspInit+0xa8>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002192:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <COM1_MspInit+0xa8>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002198:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <COM1_MspInit+0xa8>)
 800219e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80021aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80021bc:	2307      	movs	r3, #7
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	480b      	ldr	r0, [pc, #44]	@ (80021f4 <COM1_MspInit+0xac>)
 80021c8:	f004 f914 	bl	80063f4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80021cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80021d6:	2307      	movs	r3, #7
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <COM1_MspInit+0xac>)
 80021e2:	f004 f907 	bl	80063f4 <HAL_GPIO_Init>
}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020c00 	.word	0x58020c00

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fe:	2003      	movs	r0, #3
 8002200:	f000 f98c 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002204:	f005 f924 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_Init+0x68>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	4913      	ldr	r1, [pc, #76]	@ (8002264 <HAL_Init+0x6c>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002222:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <HAL_Init+0x68>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <HAL_Init+0x6c>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_Init+0x70>)
 800223a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800223c:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_Init+0x74>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f814 	bl	8002270 <HAL_InitTick>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e002      	b.n	8002258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002252:	f7ff f957 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	58024400 	.word	0x58024400
 8002264:	0800d2b4 	.word	0x0800d2b4
 8002268:	24000828 	.word	0x24000828
 800226c:	24000824 	.word	0x24000824

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_InitTick+0x60>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <HAL_InitTick+0x64>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_InitTick+0x60>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f971 	bl	8002582 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f93b 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <HAL_InitTick+0x68>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2400084c 	.word	0x2400084c
 80022d4:	24000824 	.word	0x24000824
 80022d8:	24000848 	.word	0x24000848

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	2400084c 	.word	0x2400084c
 8002300:	24000c74 	.word	0x24000c74

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	24000c74 	.word	0x24000c74

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2400084c 	.word	0x2400084c

08002364 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_GetREVID+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0c1b      	lsrs	r3, r3, #16
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	5c001000 	.word	0x5c001000

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <__NVIC_SetPriorityGrouping+0x40>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x40>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	05fa0000 	.word	0x05fa0000

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	@ (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	@ (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	@ (800246c <__NVIC_SetPriority+0x50>)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff40 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff90 	bl	8002470 <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5f 	bl	800241c <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff33 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa4 	bl	80024d8 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff feae 	bl	8002304 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e316      	b.n	8002be2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a66      	ldr	r2, [pc, #408]	@ (8002754 <HAL_DMA_Init+0x1b8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_DMA_Init+0x1bc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a63      	ldr	r2, [pc, #396]	@ (800275c <HAL_DMA_Init+0x1c0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a62      	ldr	r2, [pc, #392]	@ (8002760 <HAL_DMA_Init+0x1c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a60      	ldr	r2, [pc, #384]	@ (8002764 <HAL_DMA_Init+0x1c8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_DMA_Init+0x1cc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_DMA_Init+0x1d0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <HAL_DMA_Init+0x1d4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5a      	ldr	r2, [pc, #360]	@ (8002774 <HAL_DMA_Init+0x1d8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a59      	ldr	r2, [pc, #356]	@ (8002778 <HAL_DMA_Init+0x1dc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a57      	ldr	r2, [pc, #348]	@ (800277c <HAL_DMA_Init+0x1e0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <HAL_DMA_Init+0x1e4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a54      	ldr	r2, [pc, #336]	@ (8002784 <HAL_DMA_Init+0x1e8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a53      	ldr	r2, [pc, #332]	@ (8002788 <HAL_DMA_Init+0x1ec>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a51      	ldr	r2, [pc, #324]	@ (800278c <HAL_DMA_Init+0x1f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_DMA_Init+0x1f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Init+0xbc>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_Init+0xbe>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 813b 	beq.w	80028d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a37      	ldr	r2, [pc, #220]	@ (8002754 <HAL_DMA_Init+0x1b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Init+0x174>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a36      	ldr	r2, [pc, #216]	@ (8002758 <HAL_DMA_Init+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_DMA_Init+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Init+0x174>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a33      	ldr	r2, [pc, #204]	@ (8002760 <HAL_DMA_Init+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a31      	ldr	r2, [pc, #196]	@ (8002764 <HAL_DMA_Init+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <HAL_DMA_Init+0x1cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2e      	ldr	r2, [pc, #184]	@ (800276c <HAL_DMA_Init+0x1d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002770 <HAL_DMA_Init+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002774 <HAL_DMA_Init+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002778 <HAL_DMA_Init+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a28      	ldr	r2, [pc, #160]	@ (800277c <HAL_DMA_Init+0x1e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <HAL_DMA_Init+0x1e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_DMA_Init+0x1e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_DMA_Init+0x1ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a22      	ldr	r2, [pc, #136]	@ (800278c <HAL_DMA_Init+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_DMA_Init+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d108      	bne.n	8002722 <HAL_DMA_Init+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_DMA_Init+0x196>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002732:	e02f      	b.n	8002794 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002734:	f7ff fde6 	bl	8002304 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b05      	cmp	r3, #5
 8002740:	d928      	bls.n	8002794 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e246      	b.n	8002be2 <HAL_DMA_Init+0x646>
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1c8      	bne.n	8002734 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4b83      	ldr	r3, [pc, #524]	@ (80029bc <HAL_DMA_Init+0x420>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80027ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80027f8:	4b71      	ldr	r3, [pc, #452]	@ (80029c0 <HAL_DMA_Init+0x424>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b71      	ldr	r3, [pc, #452]	@ (80029c4 <HAL_DMA_Init+0x428>)
 80027fe:	4013      	ands	r3, r2
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d328      	bcc.n	8002858 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b28      	cmp	r3, #40	@ 0x28
 800280c:	d903      	bls.n	8002816 <HAL_DMA_Init+0x27a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b2e      	cmp	r3, #46	@ 0x2e
 8002814:	d917      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b3e      	cmp	r3, #62	@ 0x3e
 800281c:	d903      	bls.n	8002826 <HAL_DMA_Init+0x28a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b42      	cmp	r3, #66	@ 0x42
 8002824:	d90f      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b46      	cmp	r3, #70	@ 0x46
 800282c:	d903      	bls.n	8002836 <HAL_DMA_Init+0x29a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b48      	cmp	r3, #72	@ 0x48
 8002834:	d907      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b4e      	cmp	r3, #78	@ 0x4e
 800283c:	d905      	bls.n	800284a <HAL_DMA_Init+0x2ae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b52      	cmp	r3, #82	@ 0x52
 8002844:	d801      	bhi.n	800284a <HAL_DMA_Init+0x2ae>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_DMA_Init+0x2b0>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002856:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0307 	bic.w	r3, r3, #7
 800286e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	2b04      	cmp	r3, #4
 8002880:	d117      	bne.n	80028b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f002 fb3f 	bl	8004f18 <DMA_CheckFifoParam>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2240      	movs	r2, #64	@ 0x40
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e197      	b.n	8002be2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f002 fa7a 	bl	8004db4 <DMA_CalcBaseAndBitshift>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	223f      	movs	r2, #63	@ 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e0cd      	b.n	8002a72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_DMA_Init+0x42c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a39      	ldr	r2, [pc, #228]	@ (80029cc <HAL_DMA_Init+0x430>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a38      	ldr	r2, [pc, #224]	@ (80029d0 <HAL_DMA_Init+0x434>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a36      	ldr	r2, [pc, #216]	@ (80029d4 <HAL_DMA_Init+0x438>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a35      	ldr	r2, [pc, #212]	@ (80029d8 <HAL_DMA_Init+0x43c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a33      	ldr	r2, [pc, #204]	@ (80029dc <HAL_DMA_Init+0x440>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <HAL_DMA_Init+0x444>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a30      	ldr	r2, [pc, #192]	@ (80029e4 <HAL_DMA_Init+0x448>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_DMA_Init+0x38e>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_DMA_Init+0x390>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <HAL_DMA_Init+0x42c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d021      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <HAL_DMA_Init+0x430>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01c      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <HAL_DMA_Init+0x434>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d017      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_DMA_Init+0x438>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d012      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_DMA_Init+0x43c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_DMA_Init+0x440>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d008      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_DMA_Init+0x444>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_DMA_Init+0x448>)
 800297e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <HAL_DMA_Init+0x44c>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b40      	cmp	r3, #64	@ 0x40
 80029a6:	d021      	beq.n	80029ec <HAL_DMA_Init+0x450>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b80      	cmp	r3, #128	@ 0x80
 80029ae:	d102      	bne.n	80029b6 <HAL_DMA_Init+0x41a>
 80029b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029b4:	e01b      	b.n	80029ee <HAL_DMA_Init+0x452>
 80029b6:	2300      	movs	r3, #0
 80029b8:	e019      	b.n	80029ee <HAL_DMA_Init+0x452>
 80029ba:	bf00      	nop
 80029bc:	fe10803f 	.word	0xfe10803f
 80029c0:	5c001000 	.word	0x5c001000
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	58025408 	.word	0x58025408
 80029cc:	5802541c 	.word	0x5802541c
 80029d0:	58025430 	.word	0x58025430
 80029d4:	58025444 	.word	0x58025444
 80029d8:	58025458 	.word	0x58025458
 80029dc:	5802546c 	.word	0x5802546c
 80029e0:	58025480 	.word	0x58025480
 80029e4:	58025494 	.word	0x58025494
 80029e8:	fffe000f 	.word	0xfffe000f
 80029ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_DMA_Init+0x650>)
 8002a34:	4413      	add	r3, r2
 8002a36:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf0 <HAL_DMA_Init+0x654>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	009a      	lsls	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f002 f9b5 	bl	8004db4 <DMA_CalcBaseAndBitshift>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2201      	movs	r2, #1
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e008      	b.n	8002a72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0b7      	b.n	8002be2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf4 <HAL_DMA_Init+0x658>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d072      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <HAL_DMA_Init+0x65c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d06d      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bfc <HAL_DMA_Init+0x660>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d068      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_DMA_Init+0x664>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d063      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a59      	ldr	r2, [pc, #356]	@ (8002c04 <HAL_DMA_Init+0x668>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d05e      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	@ (8002c08 <HAL_DMA_Init+0x66c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d059      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <HAL_DMA_Init+0x670>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d054      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	@ (8002c10 <HAL_DMA_Init+0x674>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04f      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	@ (8002c14 <HAL_DMA_Init+0x678>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	@ (8002c18 <HAL_DMA_Init+0x67c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_DMA_Init+0x680>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c20 <HAL_DMA_Init+0x684>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	@ (8002c24 <HAL_DMA_Init+0x688>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_DMA_Init+0x68c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4a      	ldr	r2, [pc, #296]	@ (8002c2c <HAL_DMA_Init+0x690>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	@ (8002c30 <HAL_DMA_Init+0x694>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a47      	ldr	r2, [pc, #284]	@ (8002c34 <HAL_DMA_Init+0x698>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a45      	ldr	r2, [pc, #276]	@ (8002c38 <HAL_DMA_Init+0x69c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a44      	ldr	r2, [pc, #272]	@ (8002c3c <HAL_DMA_Init+0x6a0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a42      	ldr	r2, [pc, #264]	@ (8002c40 <HAL_DMA_Init+0x6a4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a41      	ldr	r2, [pc, #260]	@ (8002c44 <HAL_DMA_Init+0x6a8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3f      	ldr	r2, [pc, #252]	@ (8002c48 <HAL_DMA_Init+0x6ac>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3e      	ldr	r2, [pc, #248]	@ (8002c4c <HAL_DMA_Init+0x6b0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c50 <HAL_DMA_Init+0x6b4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Init+0x5ca>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_Init+0x5cc>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d032      	beq.n	8002bd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f002 fa4f 	bl	8005010 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b80      	cmp	r3, #128	@ 0x80
 8002b78:	d102      	bne.n	8002b80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_DMA_Init+0x624>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d80c      	bhi.n	8002bc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f002 facc 	bl	8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e008      	b.n	8002bd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	a7fdabf8 	.word	0xa7fdabf8
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	58025408 	.word	0x58025408
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025430 	.word	0x58025430
 8002c40:	58025444 	.word	0x58025444
 8002c44:	58025458 	.word	0x58025458
 8002c48:	5802546c 	.word	0x5802546c
 8002c4c:	58025480 	.word	0x58025480
 8002c50:	58025494 	.word	0x58025494

08002c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e226      	b.n	80030be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Start_IT+0x2a>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e21f      	b.n	80030be <HAL_DMA_Start_IT+0x46a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	f040 820a 	bne.w	80030a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a68      	ldr	r2, [pc, #416]	@ (8002e48 <HAL_DMA_Start_IT+0x1f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a66      	ldr	r2, [pc, #408]	@ (8002e4c <HAL_DMA_Start_IT+0x1f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a65      	ldr	r2, [pc, #404]	@ (8002e50 <HAL_DMA_Start_IT+0x1fc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a63      	ldr	r2, [pc, #396]	@ (8002e54 <HAL_DMA_Start_IT+0x200>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a62      	ldr	r2, [pc, #392]	@ (8002e58 <HAL_DMA_Start_IT+0x204>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_DMA_Start_IT+0x208>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e60 <HAL_DMA_Start_IT+0x20c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_DMA_Start_IT+0x210>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e68 <HAL_DMA_Start_IT+0x214>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5a      	ldr	r2, [pc, #360]	@ (8002e6c <HAL_DMA_Start_IT+0x218>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a59      	ldr	r2, [pc, #356]	@ (8002e70 <HAL_DMA_Start_IT+0x21c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_DMA_Start_IT+0x220>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_DMA_Start_IT+0x224>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a54      	ldr	r2, [pc, #336]	@ (8002e7c <HAL_DMA_Start_IT+0x228>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a53      	ldr	r2, [pc, #332]	@ (8002e80 <HAL_DMA_Start_IT+0x22c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a51      	ldr	r2, [pc, #324]	@ (8002e84 <HAL_DMA_Start_IT+0x230>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <HAL_DMA_Start_IT+0x100>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_DMA_Start_IT+0x110>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 fe76 	bl	8004a5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a34      	ldr	r2, [pc, #208]	@ (8002e48 <HAL_DMA_Start_IT+0x1f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d04a      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <HAL_DMA_Start_IT+0x1f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d045      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a31      	ldr	r2, [pc, #196]	@ (8002e50 <HAL_DMA_Start_IT+0x1fc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d040      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a30      	ldr	r2, [pc, #192]	@ (8002e54 <HAL_DMA_Start_IT+0x200>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d03b      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e58 <HAL_DMA_Start_IT+0x204>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d036      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e5c <HAL_DMA_Start_IT+0x208>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_DMA_Start_IT+0x20c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02c      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <HAL_DMA_Start_IT+0x210>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d027      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_DMA_Start_IT+0x214>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d022      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_DMA_Start_IT+0x218>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d01d      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	@ (8002e70 <HAL_DMA_Start_IT+0x21c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d018      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <HAL_DMA_Start_IT+0x220>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a22      	ldr	r2, [pc, #136]	@ (8002e78 <HAL_DMA_Start_IT+0x224>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_DMA_Start_IT+0x228>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <HAL_DMA_Start_IT+0x22c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e84 <HAL_DMA_Start_IT+0x230>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Start_IT+0x1c0>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_Start_IT+0x1c2>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d036      	beq.n	8002e88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 021e 	bic.w	r2, r3, #30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0216 	orr.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d03e      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0208 	orr.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e035      	b.n	8002eb4 <HAL_DMA_Start_IT+0x260>
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020e 	bic.w	r2, r3, #14
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 020a 	orr.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0204 	orr.w	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a83      	ldr	r2, [pc, #524]	@ (80030c8 <HAL_DMA_Start_IT+0x474>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d072      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a82      	ldr	r2, [pc, #520]	@ (80030cc <HAL_DMA_Start_IT+0x478>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d06d      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a80      	ldr	r2, [pc, #512]	@ (80030d0 <HAL_DMA_Start_IT+0x47c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d068      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7f      	ldr	r2, [pc, #508]	@ (80030d4 <HAL_DMA_Start_IT+0x480>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d063      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80030d8 <HAL_DMA_Start_IT+0x484>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d05e      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7c      	ldr	r2, [pc, #496]	@ (80030dc <HAL_DMA_Start_IT+0x488>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d059      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80030e0 <HAL_DMA_Start_IT+0x48c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d054      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a79      	ldr	r2, [pc, #484]	@ (80030e4 <HAL_DMA_Start_IT+0x490>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04f      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a77      	ldr	r2, [pc, #476]	@ (80030e8 <HAL_DMA_Start_IT+0x494>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04a      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a76      	ldr	r2, [pc, #472]	@ (80030ec <HAL_DMA_Start_IT+0x498>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d045      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a74      	ldr	r2, [pc, #464]	@ (80030f0 <HAL_DMA_Start_IT+0x49c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d040      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	@ (80030f4 <HAL_DMA_Start_IT+0x4a0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d03b      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a71      	ldr	r2, [pc, #452]	@ (80030f8 <HAL_DMA_Start_IT+0x4a4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d036      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a70      	ldr	r2, [pc, #448]	@ (80030fc <HAL_DMA_Start_IT+0x4a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d031      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6e      	ldr	r2, [pc, #440]	@ (8003100 <HAL_DMA_Start_IT+0x4ac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02c      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003104 <HAL_DMA_Start_IT+0x4b0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d027      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6b      	ldr	r2, [pc, #428]	@ (8003108 <HAL_DMA_Start_IT+0x4b4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6a      	ldr	r2, [pc, #424]	@ (800310c <HAL_DMA_Start_IT+0x4b8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01d      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	@ (8003110 <HAL_DMA_Start_IT+0x4bc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_DMA_Start_IT+0x4c0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_DMA_Start_IT+0x4c4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a64      	ldr	r2, [pc, #400]	@ (800311c <HAL_DMA_Start_IT+0x4c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a62      	ldr	r2, [pc, #392]	@ (8003120 <HAL_DMA_Start_IT+0x4cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a61      	ldr	r2, [pc, #388]	@ (8003124 <HAL_DMA_Start_IT+0x4d0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Start_IT+0x354>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_Start_IT+0x356>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01a      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a37      	ldr	r2, [pc, #220]	@ (80030c8 <HAL_DMA_Start_IT+0x474>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04a      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a36      	ldr	r2, [pc, #216]	@ (80030cc <HAL_DMA_Start_IT+0x478>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d045      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	@ (80030d0 <HAL_DMA_Start_IT+0x47c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d040      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a33      	ldr	r2, [pc, #204]	@ (80030d4 <HAL_DMA_Start_IT+0x480>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d03b      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a31      	ldr	r2, [pc, #196]	@ (80030d8 <HAL_DMA_Start_IT+0x484>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d036      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a30      	ldr	r2, [pc, #192]	@ (80030dc <HAL_DMA_Start_IT+0x488>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d031      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2e      	ldr	r2, [pc, #184]	@ (80030e0 <HAL_DMA_Start_IT+0x48c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02c      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_DMA_Start_IT+0x490>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d027      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_DMA_Start_IT+0x494>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_DMA_Start_IT+0x498>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d01d      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	@ (80030f0 <HAL_DMA_Start_IT+0x49c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_DMA_Start_IT+0x4a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a25      	ldr	r2, [pc, #148]	@ (80030f8 <HAL_DMA_Start_IT+0x4a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <HAL_DMA_Start_IT+0x4a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <HAL_DMA_Start_IT+0x4ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_DMA_Start_IT+0x4b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d108      	bne.n	8003096 <HAL_DMA_Start_IT+0x442>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e012      	b.n	80030bc <HAL_DMA_Start_IT+0x468>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e009      	b.n	80030bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	58025408 	.word	0x58025408
 800310c:	5802541c 	.word	0x5802541c
 8003110:	58025430 	.word	0x58025430
 8003114:	58025444 	.word	0x58025444
 8003118:	58025458 	.word	0x58025458
 800311c:	5802546c 	.word	0x5802546c
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494

08003128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff f8e8 	bl	8002304 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e2dc      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d008      	beq.n	800315e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2280      	movs	r2, #128	@ 0x80
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2cd      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a76      	ldr	r2, [pc, #472]	@ (800333c <HAL_DMA_Abort+0x214>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a74      	ldr	r2, [pc, #464]	@ (8003340 <HAL_DMA_Abort+0x218>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	@ (8003344 <HAL_DMA_Abort+0x21c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a71      	ldr	r2, [pc, #452]	@ (8003348 <HAL_DMA_Abort+0x220>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a70      	ldr	r2, [pc, #448]	@ (800334c <HAL_DMA_Abort+0x224>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_DMA_Abort+0x228>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	@ (8003354 <HAL_DMA_Abort+0x22c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003358 <HAL_DMA_Abort+0x230>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6a      	ldr	r2, [pc, #424]	@ (800335c <HAL_DMA_Abort+0x234>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a68      	ldr	r2, [pc, #416]	@ (8003360 <HAL_DMA_Abort+0x238>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a67      	ldr	r2, [pc, #412]	@ (8003364 <HAL_DMA_Abort+0x23c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a65      	ldr	r2, [pc, #404]	@ (8003368 <HAL_DMA_Abort+0x240>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a64      	ldr	r2, [pc, #400]	@ (800336c <HAL_DMA_Abort+0x244>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a62      	ldr	r2, [pc, #392]	@ (8003370 <HAL_DMA_Abort+0x248>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a61      	ldr	r2, [pc, #388]	@ (8003374 <HAL_DMA_Abort+0x24c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003378 <HAL_DMA_Abort+0x250>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Abort+0xda>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_DMA_Abort+0xdc>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 021e 	bic.w	r2, r2, #30
 8003216:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003226:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e00a      	b.n	8003246 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 020e 	bic.w	r2, r2, #14
 800323e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3c      	ldr	r2, [pc, #240]	@ (800333c <HAL_DMA_Abort+0x214>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d072      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3a      	ldr	r2, [pc, #232]	@ (8003340 <HAL_DMA_Abort+0x218>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d06d      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a39      	ldr	r2, [pc, #228]	@ (8003344 <HAL_DMA_Abort+0x21c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d068      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a37      	ldr	r2, [pc, #220]	@ (8003348 <HAL_DMA_Abort+0x220>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a36      	ldr	r2, [pc, #216]	@ (800334c <HAL_DMA_Abort+0x224>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_DMA_Abort+0x228>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d059      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <HAL_DMA_Abort+0x22c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d054      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a31      	ldr	r2, [pc, #196]	@ (8003358 <HAL_DMA_Abort+0x230>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04f      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_DMA_Abort+0x234>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <HAL_DMA_Abort+0x238>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_DMA_Abort+0x23c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <HAL_DMA_Abort+0x240>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <HAL_DMA_Abort+0x244>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <HAL_DMA_Abort+0x248>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <HAL_DMA_Abort+0x24c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <HAL_DMA_Abort+0x250>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	@ (800337c <HAL_DMA_Abort+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_DMA_Abort+0x258>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_DMA_Abort+0x25c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	@ (8003388 <HAL_DMA_Abort+0x260>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	@ (800338c <HAL_DMA_Abort+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_DMA_Abort+0x268>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <HAL_DMA_Abort+0x26c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <HAL_DMA_Abort+0x270>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d132      	bne.n	800339c <HAL_DMA_Abort+0x274>
 8003336:	2301      	movs	r3, #1
 8003338:	e031      	b.n	800339e <HAL_DMA_Abort+0x276>
 800333a:	bf00      	nop
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
 800337c:	58025408 	.word	0x58025408
 8003380:	5802541c 	.word	0x5802541c
 8003384:	58025430 	.word	0x58025430
 8003388:	58025444 	.word	0x58025444
 800338c:	58025458 	.word	0x58025458
 8003390:	5802546c 	.word	0x5802546c
 8003394:	58025480 	.word	0x58025480
 8003398:	58025494 	.word	0x58025494
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6d      	ldr	r2, [pc, #436]	@ (800356c <HAL_DMA_Abort+0x444>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003570 <HAL_DMA_Abort+0x448>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003574 <HAL_DMA_Abort+0x44c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a68      	ldr	r2, [pc, #416]	@ (8003578 <HAL_DMA_Abort+0x450>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a67      	ldr	r2, [pc, #412]	@ (800357c <HAL_DMA_Abort+0x454>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a65      	ldr	r2, [pc, #404]	@ (8003580 <HAL_DMA_Abort+0x458>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a64      	ldr	r2, [pc, #400]	@ (8003584 <HAL_DMA_Abort+0x45c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a62      	ldr	r2, [pc, #392]	@ (8003588 <HAL_DMA_Abort+0x460>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a61      	ldr	r2, [pc, #388]	@ (800358c <HAL_DMA_Abort+0x464>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <HAL_DMA_Abort+0x468>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5e      	ldr	r2, [pc, #376]	@ (8003594 <HAL_DMA_Abort+0x46c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5c      	ldr	r2, [pc, #368]	@ (8003598 <HAL_DMA_Abort+0x470>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5b      	ldr	r2, [pc, #364]	@ (800359c <HAL_DMA_Abort+0x474>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a59      	ldr	r2, [pc, #356]	@ (80035a0 <HAL_DMA_Abort+0x478>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <HAL_DMA_Abort+0x47c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a56      	ldr	r2, [pc, #344]	@ (80035a8 <HAL_DMA_Abort+0x480>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <HAL_DMA_Abort+0x33c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e007      	b.n	8003474 <HAL_DMA_Abort+0x34c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003474:	e013      	b.n	800349e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003476:	f7fe ff45 	bl	8002304 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b05      	cmp	r3, #5
 8003482:	d90c      	bls.n	800349e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e12d      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2f      	ldr	r2, [pc, #188]	@ (800356c <HAL_DMA_Abort+0x444>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04a      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <HAL_DMA_Abort+0x448>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d045      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <HAL_DMA_Abort+0x44c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <HAL_DMA_Abort+0x450>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d03b      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_DMA_Abort+0x454>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d036      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <HAL_DMA_Abort+0x458>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d031      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <HAL_DMA_Abort+0x45c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d02c      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_DMA_Abort+0x460>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d027      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a23      	ldr	r2, [pc, #140]	@ (800358c <HAL_DMA_Abort+0x464>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_DMA_Abort+0x468>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01d      	beq.n	800354a <HAL_DMA_Abort+0x422>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_DMA_Abort+0x46c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_DMA_Abort+0x470>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_DMA_Abort+0x474>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_DMA_Abort+0x422>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_DMA_Abort+0x478>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <HAL_DMA_Abort+0x47c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_DMA_Abort+0x480>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_DMA_Abort+0x426>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_DMA_Abort+0x428>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02b      	beq.n	80035ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	223f      	movs	r2, #63	@ 0x3f
 8003564:	409a      	lsls	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	e02a      	b.n	80035c2 <HAL_DMA_Abort+0x49a>
 800356c:	40020010 	.word	0x40020010
 8003570:	40020028 	.word	0x40020028
 8003574:	40020040 	.word	0x40020040
 8003578:	40020058 	.word	0x40020058
 800357c:	40020070 	.word	0x40020070
 8003580:	40020088 	.word	0x40020088
 8003584:	400200a0 	.word	0x400200a0
 8003588:	400200b8 	.word	0x400200b8
 800358c:	40020410 	.word	0x40020410
 8003590:	40020428 	.word	0x40020428
 8003594:	40020440 	.word	0x40020440
 8003598:	40020458 	.word	0x40020458
 800359c:	40020470 	.word	0x40020470
 80035a0:	40020488 	.word	0x40020488
 80035a4:	400204a0 	.word	0x400204a0
 80035a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <HAL_DMA_Abort+0x5dc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d072      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <HAL_DMA_Abort+0x5e0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d06d      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_DMA_Abort+0x5e4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d068      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003710 <HAL_DMA_Abort+0x5e8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d063      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a49      	ldr	r2, [pc, #292]	@ (8003714 <HAL_DMA_Abort+0x5ec>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d05e      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a47      	ldr	r2, [pc, #284]	@ (8003718 <HAL_DMA_Abort+0x5f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d059      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a46      	ldr	r2, [pc, #280]	@ (800371c <HAL_DMA_Abort+0x5f4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d054      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a44      	ldr	r2, [pc, #272]	@ (8003720 <HAL_DMA_Abort+0x5f8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04f      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a43      	ldr	r2, [pc, #268]	@ (8003724 <HAL_DMA_Abort+0x5fc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a41      	ldr	r2, [pc, #260]	@ (8003728 <HAL_DMA_Abort+0x600>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a40      	ldr	r2, [pc, #256]	@ (800372c <HAL_DMA_Abort+0x604>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	@ (8003730 <HAL_DMA_Abort+0x608>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3d      	ldr	r2, [pc, #244]	@ (8003734 <HAL_DMA_Abort+0x60c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <HAL_DMA_Abort+0x610>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_DMA_Abort+0x614>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	@ (8003740 <HAL_DMA_Abort+0x618>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a37      	ldr	r2, [pc, #220]	@ (8003744 <HAL_DMA_Abort+0x61c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a35      	ldr	r2, [pc, #212]	@ (8003748 <HAL_DMA_Abort+0x620>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a34      	ldr	r2, [pc, #208]	@ (800374c <HAL_DMA_Abort+0x624>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a32      	ldr	r2, [pc, #200]	@ (8003750 <HAL_DMA_Abort+0x628>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a31      	ldr	r2, [pc, #196]	@ (8003754 <HAL_DMA_Abort+0x62c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <HAL_DMA_Abort+0x630>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <HAL_DMA_Abort+0x634>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <HAL_DMA_Abort+0x638>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort+0x58e>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_Abort+0x590>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e237      	b.n	8003be6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d004      	beq.n	800378c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e22c      	b.n	8003be6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5c      	ldr	r2, [pc, #368]	@ (8003904 <HAL_DMA_Abort_IT+0x1a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04a      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5b      	ldr	r2, [pc, #364]	@ (8003908 <HAL_DMA_Abort_IT+0x1a4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d045      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a59      	ldr	r2, [pc, #356]	@ (800390c <HAL_DMA_Abort_IT+0x1a8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d040      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_DMA_Abort_IT+0x1ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d03b      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a56      	ldr	r2, [pc, #344]	@ (8003914 <HAL_DMA_Abort_IT+0x1b0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d036      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a55      	ldr	r2, [pc, #340]	@ (8003918 <HAL_DMA_Abort_IT+0x1b4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d031      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a53      	ldr	r2, [pc, #332]	@ (800391c <HAL_DMA_Abort_IT+0x1b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02c      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a52      	ldr	r2, [pc, #328]	@ (8003920 <HAL_DMA_Abort_IT+0x1bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d027      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a50      	ldr	r2, [pc, #320]	@ (8003924 <HAL_DMA_Abort_IT+0x1c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003928 <HAL_DMA_Abort_IT+0x1c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <HAL_DMA_Abort_IT+0x1c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003930 <HAL_DMA_Abort_IT+0x1cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4a      	ldr	r2, [pc, #296]	@ (8003934 <HAL_DMA_Abort_IT+0x1d0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a49      	ldr	r2, [pc, #292]	@ (8003938 <HAL_DMA_Abort_IT+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a47      	ldr	r2, [pc, #284]	@ (800393c <HAL_DMA_Abort_IT+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a46      	ldr	r2, [pc, #280]	@ (8003940 <HAL_DMA_Abort_IT+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Abort_IT+0xcc>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_DMA_Abort_IT+0xce>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8086 	beq.w	8003944 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2f      	ldr	r2, [pc, #188]	@ (8003904 <HAL_DMA_Abort_IT+0x1a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2e      	ldr	r2, [pc, #184]	@ (8003908 <HAL_DMA_Abort_IT+0x1a4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2c      	ldr	r2, [pc, #176]	@ (800390c <HAL_DMA_Abort_IT+0x1a8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_DMA_Abort_IT+0x1ac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <HAL_DMA_Abort_IT+0x1b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_DMA_Abort_IT+0x1b4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_DMA_Abort_IT+0x1b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <HAL_DMA_Abort_IT+0x1bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <HAL_DMA_Abort_IT+0x1c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <HAL_DMA_Abort_IT+0x1c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a20      	ldr	r2, [pc, #128]	@ (800392c <HAL_DMA_Abort_IT+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <HAL_DMA_Abort_IT+0x1cc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_DMA_Abort_IT+0x1d0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <HAL_DMA_Abort_IT+0x1d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	@ (800393c <HAL_DMA_Abort_IT+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a19      	ldr	r2, [pc, #100]	@ (8003940 <HAL_DMA_Abort_IT+0x1dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <HAL_DMA_Abort_IT+0x18e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e178      	b.n	8003be4 <HAL_DMA_Abort_IT+0x480>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e16f      	b.n	8003be4 <HAL_DMA_Abort_IT+0x480>
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020e 	bic.w	r2, r2, #14
 8003952:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6c      	ldr	r2, [pc, #432]	@ (8003b0c <HAL_DMA_Abort_IT+0x3a8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d04a      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <HAL_DMA_Abort_IT+0x3ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d045      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a69      	ldr	r2, [pc, #420]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d040      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a68      	ldr	r2, [pc, #416]	@ (8003b18 <HAL_DMA_Abort_IT+0x3b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d03b      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a66      	ldr	r2, [pc, #408]	@ (8003b1c <HAL_DMA_Abort_IT+0x3b8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d036      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_DMA_Abort_IT+0x3bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d031      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a63      	ldr	r2, [pc, #396]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02c      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a62      	ldr	r2, [pc, #392]	@ (8003b28 <HAL_DMA_Abort_IT+0x3c4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d027      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <HAL_DMA_Abort_IT+0x3c8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b30 <HAL_DMA_Abort_IT+0x3cc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d01d      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <HAL_DMA_Abort_IT+0x3d4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b3c <HAL_DMA_Abort_IT+0x3d8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a59      	ldr	r2, [pc, #356]	@ (8003b40 <HAL_DMA_Abort_IT+0x3dc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_DMA_Abort_IT+0x3e0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_DMA_Abort_IT+0x3e4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <HAL_DMA_Abort_IT+0x2a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e007      	b.n	8003a16 <HAL_DMA_Abort_IT+0x2b2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b0c <HAL_DMA_Abort_IT+0x3a8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d072      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a3a      	ldr	r2, [pc, #232]	@ (8003b10 <HAL_DMA_Abort_IT+0x3ac>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d06d      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a39      	ldr	r2, [pc, #228]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d068      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a37      	ldr	r2, [pc, #220]	@ (8003b18 <HAL_DMA_Abort_IT+0x3b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d063      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a36      	ldr	r2, [pc, #216]	@ (8003b1c <HAL_DMA_Abort_IT+0x3b8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d05e      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a34      	ldr	r2, [pc, #208]	@ (8003b20 <HAL_DMA_Abort_IT+0x3bc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d059      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a33      	ldr	r2, [pc, #204]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d054      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <HAL_DMA_Abort_IT+0x3c4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04f      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <HAL_DMA_Abort_IT+0x3c8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04a      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2e      	ldr	r2, [pc, #184]	@ (8003b30 <HAL_DMA_Abort_IT+0x3cc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d045      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d040      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <HAL_DMA_Abort_IT+0x3d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d03b      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <HAL_DMA_Abort_IT+0x3d8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d036      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	@ (8003b40 <HAL_DMA_Abort_IT+0x3dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	@ (8003b44 <HAL_DMA_Abort_IT+0x3e0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02c      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <HAL_DMA_Abort_IT+0x3e4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d027      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	@ (8003b4c <HAL_DMA_Abort_IT+0x3e8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_DMA_Abort_IT+0x3ec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01d      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <HAL_DMA_Abort_IT+0x3f0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_DMA_Abort_IT+0x3f4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b5c <HAL_DMA_Abort_IT+0x3f8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_DMA_Abort_IT+0x3fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_DMA_Abort_IT+0x400>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_DMA_Abort_IT+0x404>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d132      	bne.n	8003b6c <HAL_DMA_Abort_IT+0x408>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e031      	b.n	8003b6e <HAL_DMA_Abort_IT+0x40a>
 8003b0a:	bf00      	nop
 8003b0c:	40020010 	.word	0x40020010
 8003b10:	40020028 	.word	0x40020028
 8003b14:	40020040 	.word	0x40020040
 8003b18:	40020058 	.word	0x40020058
 8003b1c:	40020070 	.word	0x40020070
 8003b20:	40020088 	.word	0x40020088
 8003b24:	400200a0 	.word	0x400200a0
 8003b28:	400200b8 	.word	0x400200b8
 8003b2c:	40020410 	.word	0x40020410
 8003b30:	40020428 	.word	0x40020428
 8003b34:	40020440 	.word	0x40020440
 8003b38:	40020458 	.word	0x40020458
 8003b3c:	40020470 	.word	0x40020470
 8003b40:	40020488 	.word	0x40020488
 8003b44:	400204a0 	.word	0x400204a0
 8003b48:	400204b8 	.word	0x400204b8
 8003b4c:	58025408 	.word	0x58025408
 8003b50:	5802541c 	.word	0x5802541c
 8003b54:	58025430 	.word	0x58025430
 8003b58:	58025444 	.word	0x58025444
 8003b5c:	58025458 	.word	0x58025458
 8003b60:	5802546c 	.word	0x5802546c
 8003b64:	58025480 	.word	0x58025480
 8003b68:	58025494 	.word	0x58025494
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d028      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ba0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bfc:	4b67      	ldr	r3, [pc, #412]	@ (8003d9c <HAL_DMA_IRQHandler+0x1ac>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a67      	ldr	r2, [pc, #412]	@ (8003da0 <HAL_DMA_IRQHandler+0x1b0>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5f      	ldr	r2, [pc, #380]	@ (8003da4 <HAL_DMA_IRQHandler+0x1b4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5d      	ldr	r2, [pc, #372]	@ (8003da8 <HAL_DMA_IRQHandler+0x1b8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_DMA_IRQHandler+0x1bc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d040      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <HAL_DMA_IRQHandler+0x1c0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <HAL_DMA_IRQHandler+0x1c4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d036      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a57      	ldr	r2, [pc, #348]	@ (8003db8 <HAL_DMA_IRQHandler+0x1c8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d031      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a56      	ldr	r2, [pc, #344]	@ (8003dbc <HAL_DMA_IRQHandler+0x1cc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d02c      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1d0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d027      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1d4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_DMA_IRQHandler+0x1dc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_DMA_IRQHandler+0x1ec>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a48      	ldr	r2, [pc, #288]	@ (8003de0 <HAL_DMA_IRQHandler+0x1f0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0xd6>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 842b 	beq.w	8004524 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a2 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8003da4 <HAL_DMA_IRQHandler+0x1b4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <HAL_DMA_IRQHandler+0x1b8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_DMA_IRQHandler+0x1bc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <HAL_DMA_IRQHandler+0x1c0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a28      	ldr	r2, [pc, #160]	@ (8003db4 <HAL_DMA_IRQHandler+0x1c4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a27      	ldr	r2, [pc, #156]	@ (8003db8 <HAL_DMA_IRQHandler+0x1c8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_DMA_IRQHandler+0x1cc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1d0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1d4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_DMA_IRQHandler+0x1dc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_DMA_IRQHandler+0x1ec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	@ (8003de0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d12f      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x1f4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e02e      	b.n	8003df8 <HAL_DMA_IRQHandler+0x208>
 8003d9a:	bf00      	nop
 8003d9c:	24000824 	.word	0x24000824
 8003da0:	1b4e81b5 	.word	0x1b4e81b5
 8003da4:	40020010 	.word	0x40020010
 8003da8:	40020028 	.word	0x40020028
 8003dac:	40020040 	.word	0x40020040
 8003db0:	40020058 	.word	0x40020058
 8003db4:	40020070 	.word	0x40020070
 8003db8:	40020088 	.word	0x40020088
 8003dbc:	400200a0 	.word	0x400200a0
 8003dc0:	400200b8 	.word	0x400200b8
 8003dc4:	40020410 	.word	0x40020410
 8003dc8:	40020428 	.word	0x40020428
 8003dcc:	40020440 	.word	0x40020440
 8003dd0:	40020458 	.word	0x40020458
 8003dd4:	40020470 	.word	0x40020470
 8003dd8:	40020488 	.word	0x40020488
 8003ddc:	400204a0 	.word	0x400204a0
 8003de0:	400204b8 	.word	0x400204b8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0204 	bic.w	r2, r2, #4
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2208      	movs	r2, #8
 8003e16:	409a      	lsls	r2, r3
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d06e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_DMA_IRQHandler+0x3f8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d04a      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a67      	ldr	r2, [pc, #412]	@ (8003fec <HAL_DMA_IRQHandler+0x3fc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d045      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a66      	ldr	r2, [pc, #408]	@ (8003ff0 <HAL_DMA_IRQHandler+0x400>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d040      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a64      	ldr	r2, [pc, #400]	@ (8003ff4 <HAL_DMA_IRQHandler+0x404>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d03b      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a63      	ldr	r2, [pc, #396]	@ (8003ff8 <HAL_DMA_IRQHandler+0x408>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d036      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a61      	ldr	r2, [pc, #388]	@ (8003ffc <HAL_DMA_IRQHandler+0x40c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a60      	ldr	r2, [pc, #384]	@ (8004000 <HAL_DMA_IRQHandler+0x410>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d02c      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5e      	ldr	r2, [pc, #376]	@ (8004004 <HAL_DMA_IRQHandler+0x414>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d027      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5d      	ldr	r2, [pc, #372]	@ (8004008 <HAL_DMA_IRQHandler+0x418>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5b      	ldr	r2, [pc, #364]	@ (800400c <HAL_DMA_IRQHandler+0x41c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	@ (8004010 <HAL_DMA_IRQHandler+0x420>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_DMA_IRQHandler+0x424>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a57      	ldr	r2, [pc, #348]	@ (8004018 <HAL_DMA_IRQHandler+0x428>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a55      	ldr	r2, [pc, #340]	@ (800401c <HAL_DMA_IRQHandler+0x42c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a54      	ldr	r2, [pc, #336]	@ (8004020 <HAL_DMA_IRQHandler+0x430>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_DMA_IRQHandler+0x434>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10a      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x304>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e003      	b.n	8003efc <HAL_DMA_IRQHandler+0x30c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	f043 0202 	orr.w	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2204      	movs	r2, #4
 8003f26:	409a      	lsls	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808f 	beq.w	8004050 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <HAL_DMA_IRQHandler+0x3f8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	@ (8003fec <HAL_DMA_IRQHandler+0x3fc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <HAL_DMA_IRQHandler+0x400>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <HAL_DMA_IRQHandler+0x404>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <HAL_DMA_IRQHandler+0x408>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <HAL_DMA_IRQHandler+0x40c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a23      	ldr	r2, [pc, #140]	@ (8004000 <HAL_DMA_IRQHandler+0x410>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <HAL_DMA_IRQHandler+0x414>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a20      	ldr	r2, [pc, #128]	@ (8004008 <HAL_DMA_IRQHandler+0x418>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_DMA_IRQHandler+0x41c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <HAL_DMA_IRQHandler+0x420>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <HAL_DMA_IRQHandler+0x424>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	@ (8004018 <HAL_DMA_IRQHandler+0x428>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_DMA_IRQHandler+0x42c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <HAL_DMA_IRQHandler+0x430>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	@ (8004024 <HAL_DMA_IRQHandler+0x434>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d12a      	bne.n	8004028 <HAL_DMA_IRQHandler+0x438>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e023      	b.n	8004030 <HAL_DMA_IRQHandler+0x440>
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2204      	movs	r2, #4
 800403e:	409a      	lsls	r2, r3
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2210      	movs	r2, #16
 800405a:	409a      	lsls	r2, r3
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a6 	beq.w	80041b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a85      	ldr	r2, [pc, #532]	@ (8004280 <HAL_DMA_IRQHandler+0x690>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_DMA_IRQHandler+0x694>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a82      	ldr	r2, [pc, #520]	@ (8004288 <HAL_DMA_IRQHandler+0x698>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a80      	ldr	r2, [pc, #512]	@ (800428c <HAL_DMA_IRQHandler+0x69c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7f      	ldr	r2, [pc, #508]	@ (8004290 <HAL_DMA_IRQHandler+0x6a0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a7d      	ldr	r2, [pc, #500]	@ (8004294 <HAL_DMA_IRQHandler+0x6a4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004298 <HAL_DMA_IRQHandler+0x6a8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7a      	ldr	r2, [pc, #488]	@ (800429c <HAL_DMA_IRQHandler+0x6ac>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a79      	ldr	r2, [pc, #484]	@ (80042a0 <HAL_DMA_IRQHandler+0x6b0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a77      	ldr	r2, [pc, #476]	@ (80042a4 <HAL_DMA_IRQHandler+0x6b4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	@ (80042a8 <HAL_DMA_IRQHandler+0x6b8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	@ (80042ac <HAL_DMA_IRQHandler+0x6bc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	@ (80042b0 <HAL_DMA_IRQHandler+0x6c0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a71      	ldr	r2, [pc, #452]	@ (80042b4 <HAL_DMA_IRQHandler+0x6c4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a70      	ldr	r2, [pc, #448]	@ (80042b8 <HAL_DMA_IRQHandler+0x6c8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_DMA_IRQHandler+0x6cc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10a      	bne.n	800411c <HAL_DMA_IRQHandler+0x52c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e009      	b.n	8004130 <HAL_DMA_IRQHandler+0x540>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d03e      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2210      	movs	r2, #16
 800413e:	409a      	lsls	r2, r3
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d024      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
 8004170:	e01f      	b.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	e016      	b.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d107      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2220      	movs	r2, #32
 80041bc:	409a      	lsls	r2, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8110 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004280 <HAL_DMA_IRQHandler+0x690>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d04a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_DMA_IRQHandler+0x694>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d045      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a29      	ldr	r2, [pc, #164]	@ (8004288 <HAL_DMA_IRQHandler+0x698>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d040      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_DMA_IRQHandler+0x69c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d03b      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <HAL_DMA_IRQHandler+0x6a0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d036      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_DMA_IRQHandler+0x6a4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d031      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <HAL_DMA_IRQHandler+0x6a8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02c      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_DMA_IRQHandler+0x6ac>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d027      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <HAL_DMA_IRQHandler+0x6b0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_DMA_IRQHandler+0x6b4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_DMA_IRQHandler+0x6b8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_DMA_IRQHandler+0x6bc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_DMA_IRQHandler+0x6c0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	@ (80042b4 <HAL_DMA_IRQHandler+0x6c4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <HAL_DMA_IRQHandler+0x6c8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <HAL_DMA_IRQHandler+0x6cc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d12b      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x6d0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e02a      	b.n	80042d4 <HAL_DMA_IRQHandler+0x6e4>
 800427e:	bf00      	nop
 8004280:	40020010 	.word	0x40020010
 8004284:	40020028 	.word	0x40020028
 8004288:	40020040 	.word	0x40020040
 800428c:	40020058 	.word	0x40020058
 8004290:	40020070 	.word	0x40020070
 8004294:	40020088 	.word	0x40020088
 8004298:	400200a0 	.word	0x400200a0
 800429c:	400200b8 	.word	0x400200b8
 80042a0:	40020410 	.word	0x40020410
 80042a4:	40020428 	.word	0x40020428
 80042a8:	40020440 	.word	0x40020440
 80042ac:	40020458 	.word	0x40020458
 80042b0:	40020470 	.word	0x40020470
 80042b4:	40020488 	.word	0x40020488
 80042b8:	400204a0 	.word	0x400204a0
 80042bc:	400204b8 	.word	0x400204b8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8087 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2220      	movs	r2, #32
 80042e4:	409a      	lsls	r2, r3
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d139      	bne.n	800436a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0216 	bic.w	r2, r2, #22
 8004304:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004314:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_DMA_IRQHandler+0x736>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	223f      	movs	r2, #63	@ 0x3f
 8004340:	409a      	lsls	r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 834a 	beq.w	80049f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
          }
          return;
 8004368:	e344      	b.n	80049f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e027      	b.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d023      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e01e      	b.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0210 	bic.w	r2, r2, #16
 80043c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8306 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8088 	beq.w	8004510 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7a      	ldr	r2, [pc, #488]	@ (80045f8 <HAL_DMA_IRQHandler+0xa08>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d04a      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a79      	ldr	r2, [pc, #484]	@ (80045fc <HAL_DMA_IRQHandler+0xa0c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d045      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a77      	ldr	r2, [pc, #476]	@ (8004600 <HAL_DMA_IRQHandler+0xa10>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a76      	ldr	r2, [pc, #472]	@ (8004604 <HAL_DMA_IRQHandler+0xa14>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d03b      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a74      	ldr	r2, [pc, #464]	@ (8004608 <HAL_DMA_IRQHandler+0xa18>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a73      	ldr	r2, [pc, #460]	@ (800460c <HAL_DMA_IRQHandler+0xa1c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a71      	ldr	r2, [pc, #452]	@ (8004610 <HAL_DMA_IRQHandler+0xa20>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a70      	ldr	r2, [pc, #448]	@ (8004614 <HAL_DMA_IRQHandler+0xa24>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d027      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6e      	ldr	r2, [pc, #440]	@ (8004618 <HAL_DMA_IRQHandler+0xa28>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6d      	ldr	r2, [pc, #436]	@ (800461c <HAL_DMA_IRQHandler+0xa2c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6b      	ldr	r2, [pc, #428]	@ (8004620 <HAL_DMA_IRQHandler+0xa30>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6a      	ldr	r2, [pc, #424]	@ (8004624 <HAL_DMA_IRQHandler+0xa34>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a68      	ldr	r2, [pc, #416]	@ (8004628 <HAL_DMA_IRQHandler+0xa38>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a67      	ldr	r2, [pc, #412]	@ (800462c <HAL_DMA_IRQHandler+0xa3c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a65      	ldr	r2, [pc, #404]	@ (8004630 <HAL_DMA_IRQHandler+0xa40>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a64      	ldr	r2, [pc, #400]	@ (8004634 <HAL_DMA_IRQHandler+0xa44>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_DMA_IRQHandler+0x8ca>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e007      	b.n	80044ca <HAL_DMA_IRQHandler+0x8da>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d307      	bcc.n	80044e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f2      	bne.n	80044ca <HAL_DMA_IRQHandler+0x8da>
 80044e4:	e000      	b.n	80044e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80044fe:	e003      	b.n	8004508 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8272 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e26c      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a43      	ldr	r2, [pc, #268]	@ (8004638 <HAL_DMA_IRQHandler+0xa48>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_IRQHandler+0xa4c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <HAL_DMA_IRQHandler+0xa50>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <HAL_DMA_IRQHandler+0xa54>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3d      	ldr	r2, [pc, #244]	@ (8004648 <HAL_DMA_IRQHandler+0xa58>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3c      	ldr	r2, [pc, #240]	@ (800464c <HAL_DMA_IRQHandler+0xa5c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3a      	ldr	r2, [pc, #232]	@ (8004650 <HAL_DMA_IRQHandler+0xa60>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a39      	ldr	r2, [pc, #228]	@ (8004654 <HAL_DMA_IRQHandler+0xa64>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_DMA_IRQHandler+0x988>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_DMA_IRQHandler+0x98a>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 823f 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2204      	movs	r2, #4
 8004592:	409a      	lsls	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80cd 	beq.w	8004738 <HAL_DMA_IRQHandler+0xb48>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80c7 	beq.w	8004738 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d049      	beq.n	8004658 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8210 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e0:	e20a      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8206 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f4:	e200      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
 80045f6:	bf00      	nop
 80045f8:	40020010 	.word	0x40020010
 80045fc:	40020028 	.word	0x40020028
 8004600:	40020040 	.word	0x40020040
 8004604:	40020058 	.word	0x40020058
 8004608:	40020070 	.word	0x40020070
 800460c:	40020088 	.word	0x40020088
 8004610:	400200a0 	.word	0x400200a0
 8004614:	400200b8 	.word	0x400200b8
 8004618:	40020410 	.word	0x40020410
 800461c:	40020428 	.word	0x40020428
 8004620:	40020440 	.word	0x40020440
 8004624:	40020458 	.word	0x40020458
 8004628:	40020470 	.word	0x40020470
 800462c:	40020488 	.word	0x40020488
 8004630:	400204a0 	.word	0x400204a0
 8004634:	400204b8 	.word	0x400204b8
 8004638:	58025408 	.word	0x58025408
 800463c:	5802541c 	.word	0x5802541c
 8004640:	58025430 	.word	0x58025430
 8004644:	58025444 	.word	0x58025444
 8004648:	58025458 	.word	0x58025458
 800464c:	5802546c 	.word	0x5802546c
 8004650:	58025480 	.word	0x58025480
 8004654:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d160      	bne.n	8004724 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7f      	ldr	r2, [pc, #508]	@ (8004864 <HAL_DMA_IRQHandler+0xc74>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a7d      	ldr	r2, [pc, #500]	@ (8004868 <HAL_DMA_IRQHandler+0xc78>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7c      	ldr	r2, [pc, #496]	@ (800486c <HAL_DMA_IRQHandler+0xc7c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7a      	ldr	r2, [pc, #488]	@ (8004870 <HAL_DMA_IRQHandler+0xc80>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a79      	ldr	r2, [pc, #484]	@ (8004874 <HAL_DMA_IRQHandler+0xc84>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a77      	ldr	r2, [pc, #476]	@ (8004878 <HAL_DMA_IRQHandler+0xc88>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a76      	ldr	r2, [pc, #472]	@ (800487c <HAL_DMA_IRQHandler+0xc8c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a74      	ldr	r2, [pc, #464]	@ (8004880 <HAL_DMA_IRQHandler+0xc90>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	@ (8004884 <HAL_DMA_IRQHandler+0xc94>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a71      	ldr	r2, [pc, #452]	@ (8004888 <HAL_DMA_IRQHandler+0xc98>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a70      	ldr	r2, [pc, #448]	@ (800488c <HAL_DMA_IRQHandler+0xc9c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004890 <HAL_DMA_IRQHandler+0xca0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6d      	ldr	r2, [pc, #436]	@ (8004894 <HAL_DMA_IRQHandler+0xca4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004898 <HAL_DMA_IRQHandler+0xca8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6a      	ldr	r2, [pc, #424]	@ (800489c <HAL_DMA_IRQHandler+0xcac>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a68      	ldr	r2, [pc, #416]	@ (80048a0 <HAL_DMA_IRQHandler+0xcb0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_DMA_IRQHandler+0xb24>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0208 	bic.w	r2, r2, #8
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <HAL_DMA_IRQHandler+0xb34>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8165 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004736:	e15f      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2202      	movs	r2, #2
 8004742:	409a      	lsls	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80c5 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xce8>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80bf 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2202      	movs	r2, #2
 8004764:	409a      	lsls	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813a 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004790:	e134      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8130 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a4:	e12a      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8089 	bne.w	80048c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004864 <HAL_DMA_IRQHandler+0xc74>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_DMA_IRQHandler+0xc78>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_DMA_IRQHandler+0xc7c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <HAL_DMA_IRQHandler+0xc80>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a25      	ldr	r2, [pc, #148]	@ (8004874 <HAL_DMA_IRQHandler+0xc84>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_DMA_IRQHandler+0xc88>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a22      	ldr	r2, [pc, #136]	@ (800487c <HAL_DMA_IRQHandler+0xc8c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <HAL_DMA_IRQHandler+0xc90>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <HAL_DMA_IRQHandler+0xc94>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <HAL_DMA_IRQHandler+0xc98>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <HAL_DMA_IRQHandler+0xc9c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1a      	ldr	r2, [pc, #104]	@ (8004890 <HAL_DMA_IRQHandler+0xca0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <HAL_DMA_IRQHandler+0xca4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <HAL_DMA_IRQHandler+0xca8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a16      	ldr	r2, [pc, #88]	@ (800489c <HAL_DMA_IRQHandler+0xcac>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	@ (80048a0 <HAL_DMA_IRQHandler+0xcb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d128      	bne.n	80048a4 <HAL_DMA_IRQHandler+0xcb4>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0214 	bic.w	r2, r2, #20
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e027      	b.n	80048b4 <HAL_DMA_IRQHandler+0xcc4>
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 020a 	bic.w	r2, r2, #10
 80048b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8097 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d6:	e091      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8088 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8082 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a41      	ldr	r2, [pc, #260]	@ (8004a04 <HAL_DMA_IRQHandler+0xe14>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04a      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3f      	ldr	r2, [pc, #252]	@ (8004a08 <HAL_DMA_IRQHandler+0xe18>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d045      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3e      	ldr	r2, [pc, #248]	@ (8004a0c <HAL_DMA_IRQHandler+0xe1c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <HAL_DMA_IRQHandler+0xe20>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d03b      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3b      	ldr	r2, [pc, #236]	@ (8004a14 <HAL_DMA_IRQHandler+0xe24>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d036      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a39      	ldr	r2, [pc, #228]	@ (8004a18 <HAL_DMA_IRQHandler+0xe28>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a38      	ldr	r2, [pc, #224]	@ (8004a1c <HAL_DMA_IRQHandler+0xe2c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02c      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a36      	ldr	r2, [pc, #216]	@ (8004a20 <HAL_DMA_IRQHandler+0xe30>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <HAL_DMA_IRQHandler+0xe34>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d022      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <HAL_DMA_IRQHandler+0xe38>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	@ (8004a2c <HAL_DMA_IRQHandler+0xe3c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <HAL_DMA_IRQHandler+0xe40>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <HAL_DMA_IRQHandler+0xe44>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2d      	ldr	r2, [pc, #180]	@ (8004a38 <HAL_DMA_IRQHandler+0xe48>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a3c <HAL_DMA_IRQHandler+0xe4c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <HAL_DMA_IRQHandler+0xe50>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_DMA_IRQHandler+0xdbc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 021c 	bic.w	r2, r2, #28
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e007      	b.n	80049bc <HAL_DMA_IRQHandler+0xdcc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 020e 	bic.w	r2, r2, #14
 80049ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2201      	movs	r2, #1
 80049c6:	409a      	lsls	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e004      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8

08004a44 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c78 <DMA_SetConfig+0x21c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d072      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7d      	ldr	r2, [pc, #500]	@ (8004c7c <DMA_SetConfig+0x220>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d06d      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c80 <DMA_SetConfig+0x224>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d068      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7a      	ldr	r2, [pc, #488]	@ (8004c84 <DMA_SetConfig+0x228>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d063      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a79      	ldr	r2, [pc, #484]	@ (8004c88 <DMA_SetConfig+0x22c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d05e      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a77      	ldr	r2, [pc, #476]	@ (8004c8c <DMA_SetConfig+0x230>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d059      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a76      	ldr	r2, [pc, #472]	@ (8004c90 <DMA_SetConfig+0x234>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d054      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a74      	ldr	r2, [pc, #464]	@ (8004c94 <DMA_SetConfig+0x238>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04f      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <DMA_SetConfig+0x23c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d04a      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a71      	ldr	r2, [pc, #452]	@ (8004c9c <DMA_SetConfig+0x240>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d045      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a70      	ldr	r2, [pc, #448]	@ (8004ca0 <DMA_SetConfig+0x244>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d040      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca4 <DMA_SetConfig+0x248>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d03b      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca8 <DMA_SetConfig+0x24c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d036      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6b      	ldr	r2, [pc, #428]	@ (8004cac <DMA_SetConfig+0x250>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d031      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb0 <DMA_SetConfig+0x254>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d02c      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a68      	ldr	r2, [pc, #416]	@ (8004cb4 <DMA_SetConfig+0x258>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d027      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a67      	ldr	r2, [pc, #412]	@ (8004cb8 <DMA_SetConfig+0x25c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d022      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a65      	ldr	r2, [pc, #404]	@ (8004cbc <DMA_SetConfig+0x260>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01d      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a64      	ldr	r2, [pc, #400]	@ (8004cc0 <DMA_SetConfig+0x264>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d018      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a62      	ldr	r2, [pc, #392]	@ (8004cc4 <DMA_SetConfig+0x268>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a61      	ldr	r2, [pc, #388]	@ (8004cc8 <DMA_SetConfig+0x26c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00e      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ccc <DMA_SetConfig+0x270>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd0 <DMA_SetConfig+0x274>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <DMA_SetConfig+0x278>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <DMA_SetConfig+0x10e>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <DMA_SetConfig+0x110>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	@ (8004c78 <DMA_SetConfig+0x21c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	@ (8004c7c <DMA_SetConfig+0x220>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	@ (8004c80 <DMA_SetConfig+0x224>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	@ (8004c84 <DMA_SetConfig+0x228>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <DMA_SetConfig+0x22c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	@ (8004c8c <DMA_SetConfig+0x230>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	@ (8004c90 <DMA_SetConfig+0x234>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c94 <DMA_SetConfig+0x238>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <DMA_SetConfig+0x23c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <DMA_SetConfig+0x240>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <DMA_SetConfig+0x244>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <DMA_SetConfig+0x248>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a27      	ldr	r2, [pc, #156]	@ (8004ca8 <DMA_SetConfig+0x24c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <DMA_SetConfig+0x250>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	@ (8004cb0 <DMA_SetConfig+0x254>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <DMA_SetConfig+0x258>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <DMA_SetConfig+0x1d4>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <DMA_SetConfig+0x1d6>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d059      	beq.n	8004cea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	223f      	movs	r2, #63	@ 0x3f
 8004c40:	409a      	lsls	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d138      	bne.n	8004cd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c76:	e086      	b.n	8004d86 <DMA_SetConfig+0x32a>
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
}
 8004ce8:	e04d      	b.n	8004d86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a29      	ldr	r2, [pc, #164]	@ (8004d94 <DMA_SetConfig+0x338>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	@ (8004d98 <DMA_SetConfig+0x33c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a26      	ldr	r2, [pc, #152]	@ (8004d9c <DMA_SetConfig+0x340>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a24      	ldr	r2, [pc, #144]	@ (8004da0 <DMA_SetConfig+0x344>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a23      	ldr	r2, [pc, #140]	@ (8004da4 <DMA_SetConfig+0x348>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <DMA_SetConfig+0x34c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <DMA_SetConfig+0x350>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	@ (8004db0 <DMA_SetConfig+0x354>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <DMA_SetConfig+0x2e2>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <DMA_SetConfig+0x2e4>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d108      	bne.n	8004d76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	e007      	b.n	8004d86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	58025408 	.word	0x58025408
 8004d98:	5802541c 	.word	0x5802541c
 8004d9c:	58025430 	.word	0x58025430
 8004da0:	58025444 	.word	0x58025444
 8004da4:	58025458 	.word	0x58025458
 8004da8:	5802546c 	.word	0x5802546c
 8004dac:	58025480 	.word	0x58025480
 8004db0:	58025494 	.word	0x58025494

08004db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ecc <DMA_CalcBaseAndBitshift+0x118>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d04a      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a41      	ldr	r2, [pc, #260]	@ (8004ed0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d045      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed4 <DMA_CalcBaseAndBitshift+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d040      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed8 <DMA_CalcBaseAndBitshift+0x124>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d03b      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3c      	ldr	r2, [pc, #240]	@ (8004edc <DMA_CalcBaseAndBitshift+0x128>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d036      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d031      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a39      	ldr	r2, [pc, #228]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x130>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02c      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a38      	ldr	r2, [pc, #224]	@ (8004ee8 <DMA_CalcBaseAndBitshift+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d027      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a36      	ldr	r2, [pc, #216]	@ (8004eec <DMA_CalcBaseAndBitshift+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a35      	ldr	r2, [pc, #212]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d01d      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a33      	ldr	r2, [pc, #204]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x140>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x144>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a30      	ldr	r2, [pc, #192]	@ (8004efc <DMA_CalcBaseAndBitshift+0x148>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2f      	ldr	r2, [pc, #188]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x150>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x154>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <DMA_CalcBaseAndBitshift+0xac>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <DMA_CalcBaseAndBitshift+0xae>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d024      	beq.n	8004eb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3b10      	subs	r3, #16
 8004e6e:	4a27      	ldr	r2, [pc, #156]	@ (8004f0c <DMA_CalcBaseAndBitshift+0x158>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	4a24      	ldr	r2, [pc, #144]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e80:	5cd3      	ldrb	r3, [r2, r3]
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d908      	bls.n	8004ea0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x160>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	1d1a      	adds	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e9e:	e00d      	b.n	8004ebc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x160>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eae:	e005      	b.n	8004ebc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	aaaaaaab 	.word	0xaaaaaaab
 8004f10:	0800d2d0 	.word	0x0800d2d0
 8004f14:	fffffc00 	.word	0xfffffc00

08004f18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d120      	bne.n	8004f6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d858      	bhi.n	8004fe6 <DMA_CheckFifoParam+0xce>
 8004f34:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <DMA_CheckFifoParam+0x24>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5f 	.word	0x08004f5f
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	08004fe7 	.word	0x08004fe7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d048      	beq.n	8004fea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f5c:	e045      	b.n	8004fea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f66:	d142      	bne.n	8004fee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f6c:	e03f      	b.n	8004fee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	d123      	bne.n	8004fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d838      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xda>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <DMA_CheckFifoParam+0x70>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004f9f 	.word	0x08004f9f
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	08004fb1 	.word	0x08004fb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f9c:	e030      	b.n	8005000 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d025      	beq.n	8004ff6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fae:	e022      	b.n	8004ff6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fb8:	d11f      	bne.n	8004ffa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fbe:	e01c      	b.n	8004ffa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d902      	bls.n	8004fce <DMA_CheckFifoParam+0xb6>
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d003      	beq.n	8004fd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fcc:	e018      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fd2:	e015      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8004fe4:	e00b      	b.n	8004ffe <DMA_CheckFifoParam+0xe6>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e00a      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004fea:	bf00      	nop
 8004fec:	e008      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e006      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e004      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
    break;
 8004ffe:	bf00      	nop
    }
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a38      	ldr	r2, [pc, #224]	@ (8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d022      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a36      	ldr	r2, [pc, #216]	@ (8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01d      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a35      	ldr	r2, [pc, #212]	@ (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	@ (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2d      	ldr	r2, [pc, #180]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	3b08      	subs	r3, #8
 8005080:	4a28      	ldr	r2, [pc, #160]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4b26      	ldr	r3, [pc, #152]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a24      	ldr	r2, [pc, #144]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800509c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050ac:	e024      	b.n	80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3b10      	subs	r3, #16
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d806      	bhi.n	80050d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d902      	bls.n	80050d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3308      	adds	r3, #8
 80050d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4b18      	ldr	r3, [pc, #96]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58025408 	.word	0x58025408
 8005108:	5802541c 	.word	0x5802541c
 800510c:	58025430 	.word	0x58025430
 8005110:	58025444 	.word	0x58025444
 8005114:	58025458 	.word	0x58025458
 8005118:	5802546c 	.word	0x5802546c
 800511c:	58025480 	.word	0x58025480
 8005120:	58025494 	.word	0x58025494
 8005124:	cccccccd 	.word	0xcccccccd
 8005128:	16009600 	.word	0x16009600
 800512c:	58025880 	.word	0x58025880
 8005130:	aaaaaaab 	.word	0xaaaaaaab
 8005134:	400204b8 	.word	0x400204b8
 8005138:	4002040f 	.word	0x4002040f
 800513c:	10008200 	.word	0x10008200
 8005140:	40020880 	.word	0x40020880

08005144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04a      	beq.n	80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d847      	bhi.n	80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a25      	ldr	r2, [pc, #148]	@ (80051fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a24      	ldr	r2, [pc, #144]	@ (8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01d      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a22      	ldr	r2, [pc, #136]	@ (8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	@ (8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4b17      	ldr	r3, [pc, #92]	@ (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80051ce:	e009      	b.n	80051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	58025408 	.word	0x58025408
 8005200:	5802541c 	.word	0x5802541c
 8005204:	58025430 	.word	0x58025430
 8005208:	58025444 	.word	0x58025444
 800520c:	58025458 	.word	0x58025458
 8005210:	5802546c 	.word	0x5802546c
 8005214:	58025480 	.word	0x58025480
 8005218:	58025494 	.word	0x58025494
 800521c:	1600963f 	.word	0x1600963f
 8005220:	58025940 	.word	0x58025940
 8005224:	1000823f 	.word	0x1000823f
 8005228:	40020940 	.word	0x40020940

0800522c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	460b      	mov	r3, r1
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e00a      	b.n	800525e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	605a      	str	r2, [r3, #4]
      break;
 8005254:	e002      	b.n	800525c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
      break;
 800525a:	bf00      	nop
  }

  return status;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e003      	b.n	8005286 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005284:	2300      	movs	r3, #0
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2201      	movs	r2, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <HAL_EXTI_IRQHandler+0x5c>)
 80052be:	4413      	add	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4013      	ands	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4798      	blx	r3
    }
  }
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	58000088 	.word	0x58000088

080052f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b098      	sub	sp, #96	@ 0x60
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80052fc:	4a84      	ldr	r2, [pc, #528]	@ (8005510 <HAL_FDCAN_Init+0x21c>)
 80052fe:	f107 030c 	add.w	r3, r7, #12
 8005302:	4611      	mov	r1, r2
 8005304:	224c      	movs	r2, #76	@ 0x4c
 8005306:	4618      	mov	r0, r3
 8005308:	f007 fb00 	bl	800c90c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e1c6      	b.n	80056a4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7e      	ldr	r2, [pc, #504]	@ (8005514 <HAL_FDCAN_Init+0x220>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d106      	bne.n	800532e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc f8f8 	bl	8001538 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0210 	bic.w	r2, r2, #16
 8005356:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005358:	f7fc ffd4 	bl	8002304 <HAL_GetTick>
 800535c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800535e:	e014      	b.n	800538a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005360:	f7fc ffd0 	bl	8002304 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b0a      	cmp	r3, #10
 800536c:	d90d      	bls.n	800538a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e18c      	b.n	80056a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d0e3      	beq.n	8005360 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053a8:	f7fc ffac 	bl	8002304 <HAL_GetTick>
 80053ac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053ae:	e014      	b.n	80053da <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053b0:	f7fc ffa8 	bl	8002304 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b0a      	cmp	r3, #10
 80053bc:	d90d      	bls.n	80053da <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053c4:	f043 0201 	orr.w	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e164      	b.n	80056a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0e3      	beq.n	80053b0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0202 	orr.w	r2, r2, #2
 80053f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7c1b      	ldrb	r3, [r3, #16]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800540e:	619a      	str	r2, [r3, #24]
 8005410:	e007      	b.n	8005422 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005420:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c5b      	ldrb	r3, [r3, #17]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d108      	bne.n	800543c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005438:	619a      	str	r2, [r3, #24]
 800543a:	e007      	b.n	800544c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800544a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7c9b      	ldrb	r3, [r3, #18]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005462:	619a      	str	r2, [r3, #24]
 8005464:	e007      	b.n	8005476 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005474:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800549a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0210 	bic.w	r2, r2, #16
 80054aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d108      	bne.n	80054c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0204 	orr.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
 80054c4:	e030      	b.n	8005528 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d02c      	beq.n	8005528 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d020      	beq.n	8005518 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0210 	orr.w	r2, r2, #16
 80054f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d114      	bne.n	8005528 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0220 	orr.w	r2, r2, #32
 800550c:	619a      	str	r2, [r3, #24]
 800550e:	e00b      	b.n	8005528 <HAL_FDCAN_Init+0x234>
 8005510:	0800d268 	.word	0x0800d268
 8005514:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0220 	orr.w	r2, r2, #32
 8005526:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	3b01      	subs	r3, #1
 800552e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	3b01      	subs	r3, #1
 8005536:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005538:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005540:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	3b01      	subs	r3, #1
 800554a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005550:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005552:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800555c:	d115      	bne.n	800558a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	3b01      	subs	r3, #1
 800556a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800556c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	3b01      	subs	r3, #1
 8005574:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005576:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	3b01      	subs	r3, #1
 8005580:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005586:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005588:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b0:	4413      	add	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d011      	beq.n	80055da <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80055be:	f023 0107 	bic.w	r1, r3, #7
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	3360      	adds	r3, #96	@ 0x60
 80055ca:	443b      	add	r3, r7
 80055cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d011      	beq.n	8005606 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055ea:	f023 0107 	bic.w	r1, r3, #7
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	3360      	adds	r3, #96	@ 0x60
 80055f6:	443b      	add	r3, r7
 80055f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005616:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3360      	adds	r3, #96	@ 0x60
 8005622:	443b      	add	r3, r7
 8005624:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	2b00      	cmp	r3, #0
 800563a:	d012      	beq.n	8005662 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005644:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	3360      	adds	r3, #96	@ 0x60
 8005650:	443b      	add	r3, r7
 8005652:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <HAL_FDCAN_Init+0x3b8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d107      	bne.n	800567c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f022 0203 	bic.w	r2, r2, #3
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fd27 	bl	80060e8 <FDCAN_CalcultateRamBlockAddresses>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80056a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3760      	adds	r7, #96	@ 0x60
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	4000a000 	.word	0x4000a000

080056b0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d111      	bne.n	80056e8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e008      	b.n	80056fa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005708:	b480      	push	{r7}
 800570a:	b08b      	sub	sp, #44	@ 0x2c
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005720:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f040 8149 	bne.w	80059bc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	d14c      	bne.n	80057ca <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005738:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e13c      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800575c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e12a      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005788:	d10a      	bne.n	80057a0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579a:	d101      	bne.n	80057a0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057bc:	69f9      	ldr	r1, [r7, #28]
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	e068      	b.n	800589c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b41      	cmp	r3, #65	@ 0x41
 80057ce:	d14c      	bne.n	800586a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0ec      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0da      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005828:	d10a      	bne.n	8005840 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800583a:	d101      	bne.n	8005840 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800583c:	2301      	movs	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
 8005868:	e018      	b.n	800589c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	429a      	cmp	r2, r3
 8005872:	d309      	bcc.n	8005888 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0a2      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d107      	bne.n	80058c0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0c9b      	lsrs	r3, r3, #18
 80058b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e005      	b.n	80058cc <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	3304      	adds	r3, #4
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	0e1b      	lsrs	r3, r3, #24
 8005920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0fda      	lsrs	r2, r3, #31
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	3304      	adds	r3, #4
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	e00a      	b.n	8005958 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	441a      	add	r2, r3
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	440b      	add	r3, r1
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	3301      	adds	r3, #1
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a1f      	ldr	r2, [pc, #124]	@ (80059dc <HAL_FDCAN_GetRxMessage+0x2d4>)
 800595e:	5cd3      	ldrb	r3, [r2, r3]
 8005960:	461a      	mov	r2, r3
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	4293      	cmp	r3, r2
 8005966:	d3ec      	bcc.n	8005942 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b40      	cmp	r3, #64	@ 0x40
 800596c:	d105      	bne.n	800597a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005978:	e01e      	b.n	80059b8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b41      	cmp	r3, #65	@ 0x41
 800597e:	d105      	bne.n	800598c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800598a:	e015      	b.n	80059b8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b1f      	cmp	r3, #31
 8005990:	d808      	bhi.n	80059a4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	fa01 f202 	lsl.w	r2, r1, r2
 800599e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80059a2:	e009      	b.n	80059b8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 021f 	and.w	r2, r3, #31
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	fa01 f202 	lsl.w	r2, r1, r2
 80059b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e008      	b.n	80059ce <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c2:	f043 0208 	orr.w	r2, r3, #8
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	372c      	adds	r7, #44	@ 0x2c
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	0800d2d8 	.word	0x0800d2d8

080059e0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059f2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d002      	beq.n	8005a00 <HAL_FDCAN_ActivateNotification+0x20>
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d155      	bne.n	8005aac <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a1e:	e014      	b.n	8005a4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d108      	bne.n	8005a42 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0202 	orr.w	r2, r2, #2
 8005a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a40:	e003      	b.n	8005a4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2203      	movs	r2, #3
 8005a48:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005acc <HAL_FDCAN_ActivateNotification+0xec>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0f9b      	lsrs	r3, r3, #30
 8005aa2:	490b      	ldr	r1, [pc, #44]	@ (8005ad0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e008      	b.n	8005abe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	3fcfffff 	.word	0x3fcfffff
 8005ad0:	4000a800 	.word	0x4000a800

08005ad4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b096      	sub	sp, #88	@ 0x58
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005adc:	4b9a      	ldr	r3, [pc, #616]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	079b      	lsls	r3, r3, #30
 8005ae2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005ae4:	4b98      	ldr	r3, [pc, #608]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	079b      	lsls	r3, r3, #30
 8005aea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005aec:	4013      	ands	r3, r2
 8005aee:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005afa:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b04:	4013      	ands	r3, r2
 8005b06:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b34:	4013      	ands	r3, r2
 8005b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005b42:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b56:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b64:	4013      	ands	r3, r2
 8005b66:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa54 	bl	800604e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba8:	0a9b      	lsrs	r3, r3, #10
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01d      	beq.n	8005bee <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	0a9b      	lsrs	r3, r3, #10
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d017      	beq.n	8005bee <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bde:	651a      	str	r2, [r3, #80]	@ 0x50
 8005be0:	4b59      	ldr	r3, [pc, #356]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005be6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa07 	bl	8005ffc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfa:	4b54      	ldr	r3, [pc, #336]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x278>)
 8005bfc:	400b      	ands	r3, r1
 8005bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c00:	4a51      	ldr	r2, [pc, #324]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c04:	0f9b      	lsrs	r3, r3, #30
 8005c06:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005c08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9c0 	bl	8005f90 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x278>)
 8005c1e:	400b      	ands	r3, r1
 8005c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c22:	4a49      	ldr	r2, [pc, #292]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c26:	0f9b      	lsrs	r3, r3, #30
 8005c28:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005c2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9ba 	bl	8005fa6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c3e:	4b43      	ldr	r3, [pc, #268]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x278>)
 8005c40:	400b      	ands	r3, r1
 8005c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c44:	4a40      	ldr	r2, [pc, #256]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c48:	0f9b      	lsrs	r3, r3, #30
 8005c4a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c4c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb fc42 	bl	80014d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00d      	beq.n	8005c76 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c60:	4b3a      	ldr	r3, [pc, #232]	@ (8005d4c <HAL_FDCAN_IRQHandler+0x278>)
 8005c62:	400b      	ands	r3, r1
 8005c64:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c66:	4a38      	ldr	r2, [pc, #224]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6a:	0f9b      	lsrs	r3, r3, #30
 8005c6c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9a3 	bl	8005fbc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c78:	0adb      	lsrs	r3, r3, #11
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	0adb      	lsrs	r3, r3, #11
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c98:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f997 	bl	8005fd2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca6:	0a5b      	lsrs	r3, r3, #9
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01d      	beq.n	8005cec <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb2:	0a5b      	lsrs	r3, r3, #9
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d017      	beq.n	8005cec <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cc4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cdc:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cde:	4b1a      	ldr	r3, [pc, #104]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ce4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f97d 	bl	8005fe6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cee:	0cdb      	lsrs	r3, r3, #19
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	0cdb      	lsrs	r3, r3, #19
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f97c 	bl	8006012 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <HAL_FDCAN_IRQHandler+0x274>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	e004      	b.n	8005d50 <HAL_FDCAN_IRQHandler+0x27c>
 8005d46:	bf00      	nop
 8005d48:	4000a800 	.word	0x4000a800
 8005d4c:	3fcfffff 	.word	0x3fcfffff
 8005d50:	f000 f969 	bl	8006026 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d56:	0c9b      	lsrs	r3, r3, #18
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	0c9b      	lsrs	r3, r3, #18
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d74:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d76:	4b83      	ldr	r3, [pc, #524]	@ (8005f84 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f95c 	bl	800603a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	0c5b      	lsrs	r3, r3, #17
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d015      	beq.n	8005dba <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	0c5b      	lsrs	r3, r3, #17
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005da4:	4b77      	ldr	r3, [pc, #476]	@ (8005f84 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dc6:	4b70      	ldr	r3, [pc, #448]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dc8:	400b      	ands	r3, r1
 8005dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dcc:	4a6d      	ldr	r2, [pc, #436]	@ (8005f84 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd0:	0f9b      	lsrs	r3, r3, #30
 8005dd2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f94d 	bl	8006076 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005de8:	4b67      	ldr	r3, [pc, #412]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005dea:	400b      	ands	r3, r1
 8005dec:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dee:	4a65      	ldr	r2, [pc, #404]	@ (8005f84 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df2:	0f9b      	lsrs	r3, r3, #30
 8005df4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a60      	ldr	r2, [pc, #384]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x4b8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	f040 80ac 	bne.w	8005f6a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80a4 	beq.w	8005f6a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e36:	4013      	ands	r3, r2
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e44:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e4e:	4013      	ands	r3, r2
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e66:	4013      	ands	r3, r2
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005e74:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005e8c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8e6 	bl	800608c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ecc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8e6 	bl	80060a2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	099b      	lsrs	r3, r3, #6
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01a      	beq.n	8005f18 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d014      	beq.n	8005f18 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f04:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2240      	movs	r2, #64	@ 0x40
 8005f0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6939      	ldr	r1, [r7, #16]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8d0 	bl	80060b8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f8d1 	bl	80060d0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f874 	bl	8006062 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3758      	adds	r7, #88	@ 0x58
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	4000a800 	.word	0x4000a800
 8005f88:	3fcfffff 	.word	0x3fcfffff
 8005f8c:	4000a000 	.word	0x4000a000

08005f90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80060fe:	4ba7      	ldr	r3, [pc, #668]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006100:	4013      	ands	r3, r2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	0091      	lsls	r1, r2, #2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	430b      	orrs	r3, r1
 800610c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006118:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	041a      	lsls	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4413      	add	r3, r2
 8006134:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800613e:	4b97      	ldr	r3, [pc, #604]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006140:	4013      	ands	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0091      	lsls	r1, r2, #2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	430b      	orrs	r3, r1
 800614c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006160:	041a      	lsls	r2, r3, #16
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006180:	4b86      	ldr	r3, [pc, #536]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006182:	4013      	ands	r3, r2
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	0091      	lsls	r1, r2, #2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	430b      	orrs	r3, r1
 800618e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800619a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	041a      	lsls	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80061c8:	4b74      	ldr	r3, [pc, #464]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0091      	lsls	r1, r2, #2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	430b      	orrs	r3, r1
 80061d6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061e2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ea:	041a      	lsls	r2, r3, #16
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4413      	add	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006210:	4b62      	ldr	r3, [pc, #392]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006212:	4013      	ands	r3, r2
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	0091      	lsls	r1, r2, #2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	430b      	orrs	r3, r1
 800621e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800623c:	4b57      	ldr	r3, [pc, #348]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800623e:	4013      	ands	r3, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	0091      	lsls	r1, r2, #2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	430b      	orrs	r3, r1
 800624a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006256:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625e:	041a      	lsls	r2, r3, #16
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006280:	4013      	ands	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0091      	lsls	r1, r2, #2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	430b      	orrs	r3, r1
 800628c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006298:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a0:	041a      	lsls	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062b4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062bc:	061a      	lsls	r2, r3, #24
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062cc:	4b34      	ldr	r3, [pc, #208]	@ (80063a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80062ce:	4413      	add	r3, r2
 80062d0:	009a      	lsls	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006308:	441a      	add	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006392:	4a04      	ldr	r2, [pc, #16]	@ (80063a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d915      	bls.n	80063c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006398:	e006      	b.n	80063a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800639a:	bf00      	nop
 800639c:	ffff0003 	.word	0xffff0003
 80063a0:	10002b00 	.word	0x10002b00
 80063a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2203      	movs	r2, #3
 80063bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e010      	b.n	80063e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e005      	b.n	80063d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3304      	adds	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d3f3      	bcc.n	80063cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop

080063f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	@ 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006402:	4b89      	ldr	r3, [pc, #548]	@ (8006628 <HAL_GPIO_Init+0x234>)
 8006404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006406:	e194      	b.n	8006732 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	2101      	movs	r1, #1
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	4013      	ands	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8186 	beq.w	800672c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d005      	beq.n	8006438 <HAL_GPIO_Init+0x44>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d130      	bne.n	800649a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	2203      	movs	r2, #3
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	4013      	ands	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800646e:	2201      	movs	r2, #1
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4013      	ands	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	091b      	lsrs	r3, r3, #4
 8006484:	f003 0201 	and.w	r2, r3, #1
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4313      	orrs	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d017      	beq.n	80064d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	2203      	movs	r2, #3
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4013      	ands	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d123      	bne.n	800652a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	08da      	lsrs	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3208      	adds	r2, #8
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	08da      	lsrs	r2, r3, #3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3208      	adds	r2, #8
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	2203      	movs	r2, #3
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4013      	ands	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 0203 	and.w	r2, r3, #3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80e0 	beq.w	800672c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800656c:	4b2f      	ldr	r3, [pc, #188]	@ (800662c <HAL_GPIO_Init+0x238>)
 800656e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006572:	4a2e      	ldr	r2, [pc, #184]	@ (800662c <HAL_GPIO_Init+0x238>)
 8006574:	f043 0302 	orr.w	r3, r3, #2
 8006578:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800657c:	4b2b      	ldr	r3, [pc, #172]	@ (800662c <HAL_GPIO_Init+0x238>)
 800657e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800658a:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <HAL_GPIO_Init+0x23c>)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	3302      	adds	r3, #2
 8006592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	220f      	movs	r2, #15
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43db      	mvns	r3, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a20      	ldr	r2, [pc, #128]	@ (8006634 <HAL_GPIO_Init+0x240>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d052      	beq.n	800665c <HAL_GPIO_Init+0x268>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006638 <HAL_GPIO_Init+0x244>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d031      	beq.n	8006622 <HAL_GPIO_Init+0x22e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1e      	ldr	r2, [pc, #120]	@ (800663c <HAL_GPIO_Init+0x248>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02b      	beq.n	800661e <HAL_GPIO_Init+0x22a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <HAL_GPIO_Init+0x24c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d025      	beq.n	800661a <HAL_GPIO_Init+0x226>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <HAL_GPIO_Init+0x250>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01f      	beq.n	8006616 <HAL_GPIO_Init+0x222>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <HAL_GPIO_Init+0x254>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d019      	beq.n	8006612 <HAL_GPIO_Init+0x21e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1a      	ldr	r2, [pc, #104]	@ (800664c <HAL_GPIO_Init+0x258>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_GPIO_Init+0x21a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a19      	ldr	r2, [pc, #100]	@ (8006650 <HAL_GPIO_Init+0x25c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00d      	beq.n	800660a <HAL_GPIO_Init+0x216>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_GPIO_Init+0x260>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <HAL_GPIO_Init+0x212>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <HAL_GPIO_Init+0x264>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <HAL_GPIO_Init+0x20e>
 80065fe:	2309      	movs	r3, #9
 8006600:	e02d      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006602:	230a      	movs	r3, #10
 8006604:	e02b      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006606:	2308      	movs	r3, #8
 8006608:	e029      	b.n	800665e <HAL_GPIO_Init+0x26a>
 800660a:	2307      	movs	r3, #7
 800660c:	e027      	b.n	800665e <HAL_GPIO_Init+0x26a>
 800660e:	2306      	movs	r3, #6
 8006610:	e025      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006612:	2305      	movs	r3, #5
 8006614:	e023      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006616:	2304      	movs	r3, #4
 8006618:	e021      	b.n	800665e <HAL_GPIO_Init+0x26a>
 800661a:	2303      	movs	r3, #3
 800661c:	e01f      	b.n	800665e <HAL_GPIO_Init+0x26a>
 800661e:	2302      	movs	r3, #2
 8006620:	e01d      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006622:	2301      	movs	r3, #1
 8006624:	e01b      	b.n	800665e <HAL_GPIO_Init+0x26a>
 8006626:	bf00      	nop
 8006628:	58000080 	.word	0x58000080
 800662c:	58024400 	.word	0x58024400
 8006630:	58000400 	.word	0x58000400
 8006634:	58020000 	.word	0x58020000
 8006638:	58020400 	.word	0x58020400
 800663c:	58020800 	.word	0x58020800
 8006640:	58020c00 	.word	0x58020c00
 8006644:	58021000 	.word	0x58021000
 8006648:	58021400 	.word	0x58021400
 800664c:	58021800 	.word	0x58021800
 8006650:	58021c00 	.word	0x58021c00
 8006654:	58022000 	.word	0x58022000
 8006658:	58022400 	.word	0x58022400
 800665c:	2300      	movs	r3, #0
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	f002 0203 	and.w	r2, r2, #3
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	4093      	lsls	r3, r2
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4313      	orrs	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800666e:	4938      	ldr	r1, [pc, #224]	@ (8006750 <HAL_GPIO_Init+0x35c>)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	3302      	adds	r3, #2
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800667c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	f47f ae63 	bne.w	8006408 <HAL_GPIO_Init+0x14>
  }
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	3724      	adds	r7, #36	@ 0x24
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	58000400 	.word	0x58000400

08006754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
 8006760:	4613      	mov	r3, r2
 8006762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006764:	787b      	ldrb	r3, [r7, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006770:	e003      	b.n	800677a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	041a      	lsls	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	619a      	str	r2, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006798:	887a      	ldrh	r2, [r7, #2]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4013      	ands	r3, r2
 800679e:	041a      	lsls	r2, r3, #16
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	43d9      	mvns	r1, r3
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	400b      	ands	r3, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	619a      	str	r2, [r3, #24]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_PWREx_ConfigSupply+0x70>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d00a      	beq.n	80067e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067d0:	4b16      	ldr	r3, [pc, #88]	@ (800682c <HAL_PWREx_ConfigSupply+0x70>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d001      	beq.n	80067e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e01f      	b.n	8006822 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e01d      	b.n	8006822 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067e6:	4b11      	ldr	r3, [pc, #68]	@ (800682c <HAL_PWREx_ConfigSupply+0x70>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f023 0207 	bic.w	r2, r3, #7
 80067ee:	490f      	ldr	r1, [pc, #60]	@ (800682c <HAL_PWREx_ConfigSupply+0x70>)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067f6:	f7fb fd85 	bl	8002304 <HAL_GetTick>
 80067fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067fc:	e009      	b.n	8006812 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067fe:	f7fb fd81 	bl	8002304 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800680c:	d901      	bls.n	8006812 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e007      	b.n	8006822 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <HAL_PWREx_ConfigSupply+0x70>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800681a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681e:	d1ee      	bne.n	80067fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	58024800 	.word	0x58024800

08006830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f000 bc48 	b.w	80070d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8088 	beq.w	8006962 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006852:	4b99      	ldr	r3, [pc, #612]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800685a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800685c:	4b96      	ldr	r3, [pc, #600]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	2b10      	cmp	r3, #16
 8006866:	d007      	beq.n	8006878 <HAL_RCC_OscConfig+0x48>
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	2b18      	cmp	r3, #24
 800686c:	d111      	bne.n	8006892 <HAL_RCC_OscConfig+0x62>
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d10c      	bne.n	8006892 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006878:	4b8f      	ldr	r3, [pc, #572]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d06d      	beq.n	8006960 <HAL_RCC_OscConfig+0x130>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d169      	bne.n	8006960 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f000 bc21 	b.w	80070d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x7a>
 800689c:	4b86      	ldr	r3, [pc, #536]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a85      	ldr	r2, [pc, #532]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e02e      	b.n	8006908 <HAL_RCC_OscConfig+0xd8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10c      	bne.n	80068cc <HAL_RCC_OscConfig+0x9c>
 80068b2:	4b81      	ldr	r3, [pc, #516]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a80      	ldr	r2, [pc, #512]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a7d      	ldr	r2, [pc, #500]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e01d      	b.n	8006908 <HAL_RCC_OscConfig+0xd8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCC_OscConfig+0xc0>
 80068d6:	4b78      	ldr	r3, [pc, #480]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a77      	ldr	r2, [pc, #476]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4b75      	ldr	r3, [pc, #468]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a74      	ldr	r2, [pc, #464]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e00b      	b.n	8006908 <HAL_RCC_OscConfig+0xd8>
 80068f0:	4b71      	ldr	r3, [pc, #452]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a70      	ldr	r2, [pc, #448]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	4b6e      	ldr	r3, [pc, #440]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a6d      	ldr	r2, [pc, #436]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fb fcf8 	bl	8002304 <HAL_GetTick>
 8006914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006918:	f7fb fcf4 	bl	8002304 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	@ 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e3d4      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800692a:	4b63      	ldr	r3, [pc, #396]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0xe8>
 8006936:	e014      	b.n	8006962 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fb fce4 	bl	8002304 <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006940:	f7fb fce0 	bl	8002304 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	@ 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e3c0      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006952:	4b59      	ldr	r3, [pc, #356]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x110>
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80ca 	beq.w	8006b04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006970:	4b51      	ldr	r3, [pc, #324]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006978:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800697a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 800697c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_RCC_OscConfig+0x166>
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	2b18      	cmp	r3, #24
 800698a:	d156      	bne.n	8006a3a <HAL_RCC_OscConfig+0x20a>
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d151      	bne.n	8006a3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006996:	4b48      	ldr	r3, [pc, #288]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_RCC_OscConfig+0x17e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e392      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069ae:	4b42      	ldr	r3, [pc, #264]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0219 	bic.w	r2, r3, #25
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	493f      	ldr	r1, [pc, #252]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fb fca0 	bl	8002304 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c8:	f7fb fc9c 	bl	8002304 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e37c      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069da:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e6:	f7fb fcbd 	bl	8002364 <HAL_GetREVID>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d817      	bhi.n	8006a24 <HAL_RCC_OscConfig+0x1f4>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d108      	bne.n	8006a0e <HAL_RCC_OscConfig+0x1de>
 80069fc:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a04:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a0c:	e07a      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	4926      	ldr	r1, [pc, #152]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a22:	e06f      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a24:	4b24      	ldr	r3, [pc, #144]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	4921      	ldr	r1, [pc, #132]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a38:	e064      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d047      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a42:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 0219 	bic.w	r2, r3, #25
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	491a      	ldr	r1, [pc, #104]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fb fc56 	bl	8002304 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5c:	f7fb fc52 	bl	8002304 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e332      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7a:	f7fb fc73 	bl	8002364 <HAL_GetREVID>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d819      	bhi.n	8006abc <HAL_RCC_OscConfig+0x28c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b40      	cmp	r3, #64	@ 0x40
 8006a8e:	d108      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x272>
 8006a90:	4b09      	ldr	r3, [pc, #36]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a98:	4a07      	ldr	r2, [pc, #28]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a9e:	6053      	str	r3, [r2, #4]
 8006aa0:	e030      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
 8006aa2:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	4901      	ldr	r1, [pc, #4]	@ (8006ab8 <HAL_RCC_OscConfig+0x288>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	604b      	str	r3, [r1, #4]
 8006ab6:	e025      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	4b9a      	ldr	r3, [pc, #616]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	4997      	ldr	r1, [pc, #604]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	604b      	str	r3, [r1, #4]
 8006ad0:	e018      	b.n	8006b04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ad2:	4b95      	ldr	r3, [pc, #596]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a94      	ldr	r2, [pc, #592]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fb fc11 	bl	8002304 <HAL_GetTick>
 8006ae2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae6:	f7fb fc0d 	bl	8002304 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e2ed      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af8:	4b8b      	ldr	r3, [pc, #556]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80a9 	beq.w	8006c64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b12:	4b85      	ldr	r3, [pc, #532]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b1c:	4b82      	ldr	r3, [pc, #520]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d007      	beq.n	8006b38 <HAL_RCC_OscConfig+0x308>
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b18      	cmp	r3, #24
 8006b2c:	d13a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x374>
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d135      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b38:	4b7b      	ldr	r3, [pc, #492]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_RCC_OscConfig+0x320>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b80      	cmp	r3, #128	@ 0x80
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e2c1      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b50:	f7fb fc08 	bl	8002364 <HAL_GetREVID>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d817      	bhi.n	8006b8e <HAL_RCC_OscConfig+0x35e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d108      	bne.n	8006b78 <HAL_RCC_OscConfig+0x348>
 8006b66:	4b70      	ldr	r3, [pc, #448]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b76:	e075      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b78:	4b6b      	ldr	r3, [pc, #428]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	069b      	lsls	r3, r3, #26
 8006b86:	4968      	ldr	r1, [pc, #416]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b8c:	e06a      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b8e:	4b66      	ldr	r3, [pc, #408]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	4962      	ldr	r1, [pc, #392]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ba2:	e05f      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d042      	beq.n	8006c32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bac:	4b5e      	ldr	r3, [pc, #376]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a5d      	ldr	r2, [pc, #372]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fb fba4 	bl	8002304 <HAL_GetTick>
 8006bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bc0:	f7fb fba0 	bl	8002304 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e280      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bd2:	4b55      	ldr	r3, [pc, #340]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bde:	f7fb fbc1 	bl	8002364 <HAL_GetREVID>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d817      	bhi.n	8006c1c <HAL_RCC_OscConfig+0x3ec>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d108      	bne.n	8006c06 <HAL_RCC_OscConfig+0x3d6>
 8006bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c02:	6053      	str	r3, [r2, #4]
 8006c04:	e02e      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
 8006c06:	4b48      	ldr	r3, [pc, #288]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	069b      	lsls	r3, r3, #26
 8006c14:	4944      	ldr	r1, [pc, #272]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
 8006c1a:	e023      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
 8006c1c:	4b42      	ldr	r3, [pc, #264]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	493f      	ldr	r1, [pc, #252]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60cb      	str	r3, [r1, #12]
 8006c30:	e018      	b.n	8006c64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c32:	4b3d      	ldr	r3, [pc, #244]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3e:	f7fb fb61 	bl	8002304 <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c46:	f7fb fb5d 	bl	8002304 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e23d      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c58:	4b33      	ldr	r3, [pc, #204]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f0      	bne.n	8006c46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d036      	beq.n	8006cde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d019      	beq.n	8006cac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c78:	4b2b      	ldr	r3, [pc, #172]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fb fb3e 	bl	8002304 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c8c:	f7fb fb3a 	bl	8002304 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e21a      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c9e:	4b22      	ldr	r3, [pc, #136]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x45c>
 8006caa:	e018      	b.n	8006cde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cac:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fb fb24 	bl	8002304 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fb fb20 	bl	8002304 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e200      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cd2:	4b15      	ldr	r3, [pc, #84]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d039      	beq.n	8006d5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01c      	beq.n	8006d2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cfe:	f7fb fb01 	bl	8002304 <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d06:	f7fb fafd 	bl	8002304 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e1dd      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d18:	4b03      	ldr	r3, [pc, #12]	@ (8006d28 <HAL_RCC_OscConfig+0x4f8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x4d6>
 8006d24:	e01b      	b.n	8006d5e <HAL_RCC_OscConfig+0x52e>
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d2c:	4b9b      	ldr	r3, [pc, #620]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a9a      	ldr	r2, [pc, #616]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d38:	f7fb fae4 	bl	8002304 <HAL_GetTick>
 8006d3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d40:	f7fb fae0 	bl	8002304 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e1c0      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d52:	4b92      	ldr	r3, [pc, #584]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f0      	bne.n	8006d40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8081 	beq.w	8006e6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa0 <HAL_RCC_OscConfig+0x770>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a8b      	ldr	r2, [pc, #556]	@ (8006fa0 <HAL_RCC_OscConfig+0x770>)
 8006d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d78:	f7fb fac4 	bl	8002304 <HAL_GetTick>
 8006d7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d80:	f7fb fac0 	bl	8002304 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	@ 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e1a0      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d92:	4b83      	ldr	r3, [pc, #524]	@ (8006fa0 <HAL_RCC_OscConfig+0x770>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d106      	bne.n	8006db4 <HAL_RCC_OscConfig+0x584>
 8006da6:	4b7d      	ldr	r3, [pc, #500]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	4a7c      	ldr	r2, [pc, #496]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db2:	e02d      	b.n	8006e10 <HAL_RCC_OscConfig+0x5e0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10c      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x5a6>
 8006dbc:	4b77      	ldr	r3, [pc, #476]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc0:	4a76      	ldr	r2, [pc, #472]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc8:	4b74      	ldr	r3, [pc, #464]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dcc:	4a73      	ldr	r2, [pc, #460]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dce:	f023 0304 	bic.w	r3, r3, #4
 8006dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd4:	e01c      	b.n	8006e10 <HAL_RCC_OscConfig+0x5e0>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x5c8>
 8006dde:	4b6f      	ldr	r3, [pc, #444]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de2:	4a6e      	ldr	r2, [pc, #440]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dea:	4b6c      	ldr	r3, [pc, #432]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	4a6b      	ldr	r2, [pc, #428]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df6:	e00b      	b.n	8006e10 <HAL_RCC_OscConfig+0x5e0>
 8006df8:	4b68      	ldr	r3, [pc, #416]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfc:	4a67      	ldr	r2, [pc, #412]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e04:	4b65      	ldr	r3, [pc, #404]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e08:	4a64      	ldr	r2, [pc, #400]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e0a:	f023 0304 	bic.w	r3, r3, #4
 8006e0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d015      	beq.n	8006e44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e18:	f7fb fa74 	bl	8002304 <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fb fa70 	bl	8002304 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e14e      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e36:	4b59      	ldr	r3, [pc, #356]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <HAL_RCC_OscConfig+0x5f0>
 8006e42:	e014      	b.n	8006e6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e44:	f7fb fa5e 	bl	8002304 <HAL_GetTick>
 8006e48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e4a:	e00a      	b.n	8006e62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4c:	f7fb fa5a 	bl	8002304 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e138      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e62:	4b4e      	ldr	r3, [pc, #312]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ee      	bne.n	8006e4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 812d 	beq.w	80070d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e78:	4b48      	ldr	r3, [pc, #288]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e80:	2b18      	cmp	r3, #24
 8006e82:	f000 80bd 	beq.w	8007000 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	f040 809e 	bne.w	8006fcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e90:	4b42      	ldr	r3, [pc, #264]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a41      	ldr	r2, [pc, #260]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fb fa32 	bl	8002304 <HAL_GetTick>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fb fa2e 	bl	8002304 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e10e      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eb6:	4b39      	ldr	r3, [pc, #228]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ec2:	4b36      	ldr	r3, [pc, #216]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ec6:	4b37      	ldr	r3, [pc, #220]	@ (8006fa4 <HAL_RCC_OscConfig+0x774>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ed2:	0112      	lsls	r2, r2, #4
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	4931      	ldr	r1, [pc, #196]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	628b      	str	r3, [r1, #40]	@ 0x28
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eea:	3b01      	subs	r3, #1
 8006eec:	025b      	lsls	r3, r3, #9
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	3b01      	subs	r3, #1
 8006f06:	061b      	lsls	r3, r3, #24
 8006f08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f0c:	4923      	ldr	r1, [pc, #140]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f12:	4b22      	ldr	r3, [pc, #136]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	4a21      	ldr	r2, [pc, #132]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f22:	4b21      	ldr	r3, [pc, #132]	@ (8006fa8 <HAL_RCC_OscConfig+0x778>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f2a:	00d2      	lsls	r2, r2, #3
 8006f2c:	491b      	ldr	r1, [pc, #108]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f32:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	f023 020c 	bic.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	4917      	ldr	r1, [pc, #92]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f44:	4b15      	ldr	r3, [pc, #84]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	f023 0202 	bic.w	r2, r3, #2
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f50:	4912      	ldr	r1, [pc, #72]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f56:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f62:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	4a0d      	ldr	r2, [pc, #52]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a0a      	ldr	r2, [pc, #40]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f7a:	4b08      	ldr	r3, [pc, #32]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	4a07      	ldr	r2, [pc, #28]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f86:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a04      	ldr	r2, [pc, #16]	@ (8006f9c <HAL_RCC_OscConfig+0x76c>)
 8006f8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f92:	f7fb f9b7 	bl	8002304 <HAL_GetTick>
 8006f96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f98:	e011      	b.n	8006fbe <HAL_RCC_OscConfig+0x78e>
 8006f9a:	bf00      	nop
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	58024800 	.word	0x58024800
 8006fa4:	fffffc0c 	.word	0xfffffc0c
 8006fa8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fac:	f7fb f9aa 	bl	8002304 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e08a      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fbe:	4b47      	ldr	r3, [pc, #284]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0x77c>
 8006fca:	e082      	b.n	80070d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fcc:	4b43      	ldr	r3, [pc, #268]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a42      	ldr	r2, [pc, #264]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8006fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fb f994 	bl	8002304 <HAL_GetTick>
 8006fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe0:	f7fb f990 	bl	8002304 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e070      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1f0      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x7b0>
 8006ffe:	e068      	b.n	80070d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007000:	4b36      	ldr	r3, [pc, #216]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007006:	4b35      	ldr	r3, [pc, #212]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	2b01      	cmp	r3, #1
 8007012:	d031      	beq.n	8007078 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f003 0203 	and.w	r2, r3, #3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800701e:	429a      	cmp	r2, r3
 8007020:	d12a      	bne.n	8007078 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d122      	bne.n	8007078 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d11a      	bne.n	8007078 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007050:	429a      	cmp	r2, r3
 8007052:	d111      	bne.n	8007078 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007062:	429a      	cmp	r2, r3
 8007064:	d108      	bne.n	8007078 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	0e1b      	lsrs	r3, r3, #24
 800706a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d001      	beq.n	800707c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e02b      	b.n	80070d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800707c:	4b17      	ldr	r3, [pc, #92]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 800707e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007086:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d01f      	beq.n	80070d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007092:	4b12      	ldr	r3, [pc, #72]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8007094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007096:	4a11      	ldr	r2, [pc, #68]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800709e:	f7fb f931 	bl	8002304 <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070a4:	bf00      	nop
 80070a6:	f7fb f92d 	bl	8002304 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d0f9      	beq.n	80070a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 80070b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b6:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <HAL_RCC_OscConfig+0x8b0>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070be:	00d2      	lsls	r2, r2, #3
 80070c0:	4906      	ldr	r1, [pc, #24]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80070c6:	4b05      	ldr	r3, [pc, #20]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <HAL_RCC_OscConfig+0x8ac>)
 80070cc:	f043 0301 	orr.w	r3, r3, #1
 80070d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	@ 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	58024400 	.word	0x58024400
 80070e0:	ffff0007 	.word	0xffff0007

080070e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e19c      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070f8:	4b8a      	ldr	r3, [pc, #552]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d910      	bls.n	8007128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007106:	4b87      	ldr	r3, [pc, #540]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f023 020f 	bic.w	r2, r3, #15
 800710e:	4985      	ldr	r1, [pc, #532]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b83      	ldr	r3, [pc, #524]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e184      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d010      	beq.n	8007156 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	4b7b      	ldr	r3, [pc, #492]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007140:	429a      	cmp	r2, r3
 8007142:	d908      	bls.n	8007156 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007144:	4b78      	ldr	r3, [pc, #480]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	4975      	ldr	r1, [pc, #468]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007152:	4313      	orrs	r3, r2
 8007154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d010      	beq.n	8007184 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695a      	ldr	r2, [r3, #20]
 8007166:	4b70      	ldr	r3, [pc, #448]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800716e:	429a      	cmp	r2, r3
 8007170:	d908      	bls.n	8007184 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007172:	4b6d      	ldr	r3, [pc, #436]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	496a      	ldr	r1, [pc, #424]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007180:	4313      	orrs	r3, r2
 8007182:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b00      	cmp	r3, #0
 800718e:	d010      	beq.n	80071b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	4b64      	ldr	r3, [pc, #400]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800719c:	429a      	cmp	r2, r3
 800719e:	d908      	bls.n	80071b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071a0:	4b61      	ldr	r3, [pc, #388]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	495e      	ldr	r1, [pc, #376]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d010      	beq.n	80071e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	4b59      	ldr	r3, [pc, #356]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d908      	bls.n	80071e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071ce:	4b56      	ldr	r3, [pc, #344]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4953      	ldr	r1, [pc, #332]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d908      	bls.n	800720e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f023 020f 	bic.w	r2, r3, #15
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4947      	ldr	r1, [pc, #284]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 800720a:	4313      	orrs	r3, r2
 800720c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d055      	beq.n	80072c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800721a:	4b43      	ldr	r3, [pc, #268]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	4940      	ldr	r1, [pc, #256]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007228:	4313      	orrs	r3, r2
 800722a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d107      	bne.n	8007244 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007234:	4b3c      	ldr	r3, [pc, #240]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d121      	bne.n	8007284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0f6      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d107      	bne.n	800725c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800724c:	4b36      	ldr	r3, [pc, #216]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d115      	bne.n	8007284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0ea      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d107      	bne.n	8007274 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007264:	4b30      	ldr	r3, [pc, #192]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0de      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007274:	4b2c      	ldr	r3, [pc, #176]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e0d6      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007284:	4b28      	ldr	r3, [pc, #160]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f023 0207 	bic.w	r2, r3, #7
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4925      	ldr	r1, [pc, #148]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 8007292:	4313      	orrs	r3, r2
 8007294:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007296:	f7fb f835 	bl	8002304 <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729c:	e00a      	b.n	80072b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800729e:	f7fb f831 	bl	8002304 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0be      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d1eb      	bne.n	800729e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d010      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	429a      	cmp	r2, r3
 80072e0:	d208      	bcs.n	80072f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e2:	4b11      	ldr	r3, [pc, #68]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f023 020f 	bic.w	r2, r3, #15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	490e      	ldr	r1, [pc, #56]	@ (8007328 <HAL_RCC_ClockConfig+0x244>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d214      	bcs.n	800732c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007302:	4b08      	ldr	r3, [pc, #32]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 020f 	bic.w	r2, r3, #15
 800730a:	4906      	ldr	r1, [pc, #24]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	4313      	orrs	r3, r2
 8007310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007312:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <HAL_RCC_ClockConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d005      	beq.n	800732c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e086      	b.n	8007432 <HAL_RCC_ClockConfig+0x34e>
 8007324:	52002000 	.word	0x52002000
 8007328:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d010      	beq.n	800735a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	4b3f      	ldr	r3, [pc, #252]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007344:	429a      	cmp	r2, r3
 8007346:	d208      	bcs.n	800735a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007348:	4b3c      	ldr	r3, [pc, #240]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	4939      	ldr	r1, [pc, #228]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 8007356:	4313      	orrs	r3, r2
 8007358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d010      	beq.n	8007388 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695a      	ldr	r2, [r3, #20]
 800736a:	4b34      	ldr	r3, [pc, #208]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007372:	429a      	cmp	r2, r3
 8007374:	d208      	bcs.n	8007388 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007376:	4b31      	ldr	r3, [pc, #196]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	492e      	ldr	r1, [pc, #184]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 8007384:	4313      	orrs	r3, r2
 8007386:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0310 	and.w	r3, r3, #16
 8007390:	2b00      	cmp	r3, #0
 8007392:	d010      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	4b28      	ldr	r3, [pc, #160]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d208      	bcs.n	80073b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073a4:	4b25      	ldr	r3, [pc, #148]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	4922      	ldr	r1, [pc, #136]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	4b1d      	ldr	r3, [pc, #116]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d208      	bcs.n	80073e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073d2:	4b1a      	ldr	r3, [pc, #104]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	4917      	ldr	r1, [pc, #92]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073e4:	f000 f834 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b14      	ldr	r3, [pc, #80]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	4912      	ldr	r1, [pc, #72]	@ (8007440 <HAL_RCC_ClockConfig+0x35c>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007400:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007402:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <HAL_RCC_ClockConfig+0x358>)
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	4a0d      	ldr	r2, [pc, #52]	@ (8007440 <HAL_RCC_ClockConfig+0x35c>)
 800740c:	5cd3      	ldrb	r3, [r2, r3]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
 8007418:	4a0a      	ldr	r2, [pc, #40]	@ (8007444 <HAL_RCC_ClockConfig+0x360>)
 800741a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800741c:	4a0a      	ldr	r2, [pc, #40]	@ (8007448 <HAL_RCC_ClockConfig+0x364>)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007422:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <HAL_RCC_ClockConfig+0x368>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fa ff22 	bl	8002270 <HAL_InitTick>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	58024400 	.word	0x58024400
 8007440:	0800d2b4 	.word	0x0800d2b4
 8007444:	24000828 	.word	0x24000828
 8007448:	24000824 	.word	0x24000824
 800744c:	24000848 	.word	0x24000848

08007450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	@ 0x24
 8007454:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007456:	4bb3      	ldr	r3, [pc, #716]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800745e:	2b18      	cmp	r3, #24
 8007460:	f200 8155 	bhi.w	800770e <HAL_RCC_GetSysClockFreq+0x2be>
 8007464:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	080074d1 	.word	0x080074d1
 8007470:	0800770f 	.word	0x0800770f
 8007474:	0800770f 	.word	0x0800770f
 8007478:	0800770f 	.word	0x0800770f
 800747c:	0800770f 	.word	0x0800770f
 8007480:	0800770f 	.word	0x0800770f
 8007484:	0800770f 	.word	0x0800770f
 8007488:	0800770f 	.word	0x0800770f
 800748c:	080074f7 	.word	0x080074f7
 8007490:	0800770f 	.word	0x0800770f
 8007494:	0800770f 	.word	0x0800770f
 8007498:	0800770f 	.word	0x0800770f
 800749c:	0800770f 	.word	0x0800770f
 80074a0:	0800770f 	.word	0x0800770f
 80074a4:	0800770f 	.word	0x0800770f
 80074a8:	0800770f 	.word	0x0800770f
 80074ac:	080074fd 	.word	0x080074fd
 80074b0:	0800770f 	.word	0x0800770f
 80074b4:	0800770f 	.word	0x0800770f
 80074b8:	0800770f 	.word	0x0800770f
 80074bc:	0800770f 	.word	0x0800770f
 80074c0:	0800770f 	.word	0x0800770f
 80074c4:	0800770f 	.word	0x0800770f
 80074c8:	0800770f 	.word	0x0800770f
 80074cc:	08007503 	.word	0x08007503
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d0:	4b94      	ldr	r3, [pc, #592]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074dc:	4b91      	ldr	r3, [pc, #580]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	4a90      	ldr	r2, [pc, #576]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80074ee:	e111      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074f2:	61bb      	str	r3, [r7, #24]
      break;
 80074f4:	e10e      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80074f6:	4b8d      	ldr	r3, [pc, #564]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074f8:	61bb      	str	r3, [r7, #24]
      break;
 80074fa:	e10b      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80074fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074fe:	61bb      	str	r3, [r7, #24]
      break;
 8007500:	e108      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007502:	4b88      	ldr	r3, [pc, #544]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800750c:	4b85      	ldr	r3, [pc, #532]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007516:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007518:	4b82      	ldr	r3, [pc, #520]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007522:	4b80      	ldr	r3, [pc, #512]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80e1 	beq.w	8007708 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b02      	cmp	r3, #2
 800754a:	f000 8083 	beq.w	8007654 <HAL_RCC_GetSysClockFreq+0x204>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b02      	cmp	r3, #2
 8007552:	f200 80a1 	bhi.w	8007698 <HAL_RCC_GetSysClockFreq+0x248>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0x114>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d056      	beq.n	8007610 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007562:	e099      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007564:	4b6f      	ldr	r3, [pc, #444]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02d      	beq.n	80075cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007570:	4b6c      	ldr	r3, [pc, #432]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	08db      	lsrs	r3, r3, #3
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	4a6b      	ldr	r2, [pc, #428]	@ (8007728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b62      	ldr	r3, [pc, #392]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80075ca:	e087      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007738 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b51      	ldr	r3, [pc, #324]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800760e:	e065      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2ec>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b40      	ldr	r3, [pc, #256]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a02 	vldr	s12, [r7, #8]
 8007636:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007652:	e043      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007740 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b2f      	ldr	r3, [pc, #188]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a02 	vldr	s12, [r7, #8]
 800767a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007696:	e021      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2ec>
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80076be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80076dc:	4b11      	ldr	r3, [pc, #68]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	0a5b      	lsrs	r3, r3, #9
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	3301      	adds	r3, #1
 80076e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007700:	ee17 3a90 	vmov	r3, s15
 8007704:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007706:	e005      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	61bb      	str	r3, [r7, #24]
      break;
 800770c:	e002      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800770e:	4b07      	ldr	r3, [pc, #28]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007710:	61bb      	str	r3, [r7, #24]
      break;
 8007712:	bf00      	nop
  }

  return sysclockfreq;
 8007714:	69bb      	ldr	r3, [r7, #24]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3724      	adds	r7, #36	@ 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400
 8007728:	03d09000 	.word	0x03d09000
 800772c:	003d0900 	.word	0x003d0900
 8007730:	007a1200 	.word	0x007a1200
 8007734:	46000000 	.word	0x46000000
 8007738:	4c742400 	.word	0x4c742400
 800773c:	4a742400 	.word	0x4a742400
 8007740:	4af42400 	.word	0x4af42400

08007744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800774a:	f7ff fe81 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 800774e:	4602      	mov	r2, r0
 8007750:	4b10      	ldr	r3, [pc, #64]	@ (8007794 <HAL_RCC_GetHCLKFreq+0x50>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	490f      	ldr	r1, [pc, #60]	@ (8007798 <HAL_RCC_GetHCLKFreq+0x54>)
 800775c:	5ccb      	ldrb	r3, [r1, r3]
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	fa22 f303 	lsr.w	r3, r2, r3
 8007766:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <HAL_RCC_GetHCLKFreq+0x50>)
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	4a09      	ldr	r2, [pc, #36]	@ (8007798 <HAL_RCC_GetHCLKFreq+0x54>)
 8007772:	5cd3      	ldrb	r3, [r2, r3]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	4a07      	ldr	r2, [pc, #28]	@ (800779c <HAL_RCC_GetHCLKFreq+0x58>)
 8007780:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007782:	4a07      	ldr	r2, [pc, #28]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <HAL_RCC_GetHCLKFreq+0x58>)
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	58024400 	.word	0x58024400
 8007798:	0800d2b4 	.word	0x0800d2b4
 800779c:	24000828 	.word	0x24000828
 80077a0:	24000824 	.word	0x24000824

080077a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077a8:	f7ff ffcc 	bl	8007744 <HAL_RCC_GetHCLKFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	091b      	lsrs	r3, r3, #4
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4904      	ldr	r1, [pc, #16]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	58024400 	.word	0x58024400
 80077cc:	0800d2b4 	.word	0x0800d2b4

080077d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077d4:	f7ff ffb6 	bl	8007744 <HAL_RCC_GetHCLKFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4904      	ldr	r1, [pc, #16]	@ (80077f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	58024400 	.word	0x58024400
 80077f8:	0800d2b4 	.word	0x0800d2b4

080077fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007800:	b0ca      	sub	sp, #296	@ 0x128
 8007802:	af00      	add	r7, sp, #0
 8007804:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800780e:	2300      	movs	r3, #0
 8007810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007820:	2500      	movs	r5, #0
 8007822:	ea54 0305 	orrs.w	r3, r4, r5
 8007826:	d049      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800782e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007832:	d02f      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007834:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007838:	d828      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800783a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800783e:	d01a      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007844:	d822      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d007      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007850:	e01c      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007852:	4bb8      	ldr	r3, [pc, #736]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	4ab7      	ldr	r2, [pc, #732]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800785e:	e01a      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	3308      	adds	r3, #8
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f001 fc8f 	bl	800918c <RCCEx_PLL2_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007874:	e00f      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fd36 	bl	80092f0 <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007892:	e000      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800789e:	4ba5      	ldr	r3, [pc, #660]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80078c8:	f04f 0900 	mov.w	r9, #0
 80078cc:	ea58 0309 	orrs.w	r3, r8, r9
 80078d0:	d047      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d82a      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078dc:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	080078f9 	.word	0x080078f9
 80078e8:	08007907 	.word	0x08007907
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	0800793b 	.word	0x0800793b
 80078f4:	0800793b 	.word	0x0800793b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	4a8d      	ldr	r2, [pc, #564]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007904:	e01a      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	3308      	adds	r3, #8
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fc3c 	bl	800918c <RCCEx_PLL2_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791a:	e00f      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	3328      	adds	r3, #40	@ 0x28
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fce3 	bl	80092f0 <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007930:	e004      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007938:	e000      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800793a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007944:	4b7b      	ldr	r3, [pc, #492]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007948:	f023 0107 	bic.w	r1, r3, #7
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007952:	4a78      	ldr	r2, [pc, #480]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007954:	430b      	orrs	r3, r1
 8007956:	6513      	str	r3, [r2, #80]	@ 0x50
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800796e:	f04f 0b00 	mov.w	fp, #0
 8007972:	ea5a 030b 	orrs.w	r3, sl, fp
 8007976:	d04c      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800797e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007982:	d030      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007988:	d829      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800798a:	2bc0      	cmp	r3, #192	@ 0xc0
 800798c:	d02d      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800798e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007990:	d825      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007992:	2b80      	cmp	r3, #128	@ 0x80
 8007994:	d018      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007996:	2b80      	cmp	r3, #128	@ 0x80
 8007998:	d821      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d007      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80079a2:	e01c      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a4:	4b63      	ldr	r3, [pc, #396]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	4a62      	ldr	r2, [pc, #392]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079b0:	e01c      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	3308      	adds	r3, #8
 80079b8:	2100      	movs	r1, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 fbe6 	bl	800918c <RCCEx_PLL2_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079c6:	e011      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	3328      	adds	r3, #40	@ 0x28
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fc8d 	bl	80092f0 <RCCEx_PLL3_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079dc:	e006      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079e4:	e002      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80079ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a02:	4a4c      	ldr	r2, [pc, #304]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a08:	e003      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007a1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	d053      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a3e:	d035      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a44:	d82e      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a4a:	d031      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a50:	d828      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a56:	d01a      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a5c:	d822      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a66:	d007      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007a68:	e01c      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6a:	4b32      	ldr	r3, [pc, #200]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6e:	4a31      	ldr	r2, [pc, #196]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a76:	e01c      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fb83 	bl	800918c <RCCEx_PLL2_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e011      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	3328      	adds	r3, #40	@ 0x28
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 fc2a 	bl	80092f0 <RCCEx_PLL3_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e006      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aaa:	e002      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007aba:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007aca:	4a1a      	ldr	r2, [pc, #104]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007acc:	430b      	orrs	r3, r1
 8007ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ad0:	e003      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007ae6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007aea:	2300      	movs	r3, #0
 8007aec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007af0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007af4:	460b      	mov	r3, r1
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d056      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b06:	d038      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b0c:	d831      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b12:	d034      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b18:	d82b      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b1e:	d01d      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b24:	d825      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d006      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2e:	d00a      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b30:	e01f      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b32:	bf00      	nop
 8007b34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4ba2      	ldr	r3, [pc, #648]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	4aa1      	ldr	r2, [pc, #644]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b44:	e01c      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fb1c 	bl	800918c <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e011      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	3328      	adds	r3, #40	@ 0x28
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 fbc3 	bl	80092f0 <RCCEx_PLL3_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b70:	e006      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b78:	e002      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b7a:	bf00      	nop
 8007b7c:	e000      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b88:	4b8e      	ldr	r3, [pc, #568]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b98:	4a8a      	ldr	r2, [pc, #552]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b9e:	e003      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	d03a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bce:	2b30      	cmp	r3, #48	@ 0x30
 8007bd0:	d01f      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007bd2:	2b30      	cmp	r3, #48	@ 0x30
 8007bd4:	d819      	bhi.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d815      	bhi.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d019      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d111      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be6:	4b77      	ldr	r3, [pc, #476]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bea:	4a76      	ldr	r2, [pc, #472]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007bf2:	e011      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fac5 	bl	800918c <RCCEx_PLL2_Config>
 8007c02:	4603      	mov	r3, r0
 8007c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c20:	4b68      	ldr	r3, [pc, #416]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c2e:	4a65      	ldr	r2, [pc, #404]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c30:	430b      	orrs	r3, r1
 8007c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d051      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c68:	d035      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c6e:	d82e      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c74:	d031      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c7a:	d828      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c80:	d01a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c86:	d822      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c90:	d007      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007c92:	e01c      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c94:	4b4b      	ldr	r3, [pc, #300]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	4a4a      	ldr	r2, [pc, #296]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ca0:	e01c      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fa6e 	bl	800918c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cb6:	e011      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	3328      	adds	r3, #40	@ 0x28
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 fb15 	bl	80092f0 <RCCEx_PLL3_Config>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ccc:	e006      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd4:	e002      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ce4:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf2:	4a34      	ldr	r2, [pc, #208]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d056      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d2c:	d033      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d32:	d82c      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d38:	d02f      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d3e:	d826      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d44:	d02b      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d4a:	d820      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d50:	d012      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007d52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d56:	d81a      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d022      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d60:	d115      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	3308      	adds	r3, #8
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fa0e 	bl	800918c <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d76:	e015      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7c:	3328      	adds	r3, #40	@ 0x28
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fab5 	bl	80092f0 <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00a      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d96:	bf00      	nop
 8007d98:	e004      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e002      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10d      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dba:	4a02      	ldr	r2, [pc, #8]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dc0:	e006      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007dc2:	bf00      	nop
 8007dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007de6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d055      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dfc:	d033      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e02:	d82c      	bhi.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e08:	d02f      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	d826      	bhi.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e14:	d02b      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e1a:	d820      	bhi.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e20:	d012      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e26:	d81a      	bhi.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d022      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e30:	d115      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	3308      	adds	r3, #8
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 f9a6 	bl	800918c <RCCEx_PLL2_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e46:	e015      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	3328      	adds	r3, #40	@ 0x28
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 fa4d 	bl	80092f0 <RCCEx_PLL3_Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e64:	e006      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e66:	bf00      	nop
 8007e68:	e004      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e002      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e6e:	bf00      	nop
 8007e70:	e000      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e7c:	4ba3      	ldr	r3, [pc, #652]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e8c:	4a9f      	ldr	r2, [pc, #636]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d037      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ecc:	d816      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d018      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ed6:	d111      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007edc:	4a8b      	ldr	r2, [pc, #556]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ee4:	e00f      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	3308      	adds	r3, #8
 8007eec:	2101      	movs	r1, #1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 f94c 	bl	800918c <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1c:	4a7b      	ldr	r2, [pc, #492]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f22:	e003      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d039      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d81c      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007f56:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f6d 	.word	0x08007f6d
 8007f64:	08007f7b 	.word	0x08007f7b
 8007f68:	08007f99 	.word	0x08007f99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6c:	4b67      	ldr	r3, [pc, #412]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	4a66      	ldr	r2, [pc, #408]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f78:	e00f      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7e:	3308      	adds	r3, #8
 8007f80:	2102      	movs	r1, #2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 f902 	bl	800918c <RCCEx_PLL2_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f8e:	e004      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f96:	e000      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa6:	f023 0103 	bic.w	r1, r3, #3
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb0:	4a56      	ldr	r2, [pc, #344]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fb6:	e003      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f000 809f 	beq.w	8008120 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fee:	f7fa f989 	bl	8002304 <HAL_GetTick>
 8007ff2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ff6:	e00b      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff8:	f7fa f984 	bl	8002304 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b64      	cmp	r3, #100	@ 0x64
 8008006:	d903      	bls.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800800e:	e005      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008010:	4b3f      	ldr	r3, [pc, #252]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0ed      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800801c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008020:	2b00      	cmp	r3, #0
 8008022:	d179      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008024:	4b39      	ldr	r3, [pc, #228]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008026:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008030:	4053      	eors	r3, r2
 8008032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d015      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800803a:	4b34      	ldr	r3, [pc, #208]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008042:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008046:	4b31      	ldr	r3, [pc, #196]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804a:	4a30      	ldr	r2, [pc, #192]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800804c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008050:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008052:	4b2e      	ldr	r3, [pc, #184]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008056:	4a2d      	ldr	r2, [pc, #180]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800805c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800805e:	4a2b      	ldr	r2, [pc, #172]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008064:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800806e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008072:	d118      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008074:	f7fa f946 	bl	8002304 <HAL_GetTick>
 8008078:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800807c:	e00d      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800807e:	f7fa f941 	bl	8002304 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800808e:	429a      	cmp	r2, r3
 8008090:	d903      	bls.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008098:	e005      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809a:	4b1c      	ldr	r3, [pc, #112]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0eb      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d129      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080be:	d10e      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80080c0:	4b12      	ldr	r3, [pc, #72]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080d0:	091a      	lsrs	r2, r3, #4
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	4a0d      	ldr	r2, [pc, #52]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d8:	430b      	orrs	r3, r1
 80080da:	6113      	str	r3, [r2, #16]
 80080dc:	e005      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80080de:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080e8:	6113      	str	r3, [r2, #16]
 80080ea:	4b08      	ldr	r3, [pc, #32]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fa:	4a04      	ldr	r2, [pc, #16]	@ (800810c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008100:	e00e      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800810a:	e009      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800810c:	58024400 	.word	0x58024400
 8008110:	58024800 	.word	0x58024800
 8008114:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f002 0301 	and.w	r3, r2, #1
 800812c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008130:	2300      	movs	r3, #0
 8008132:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008136:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800813a:	460b      	mov	r3, r1
 800813c:	4313      	orrs	r3, r2
 800813e:	f000 8089 	beq.w	8008254 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008148:	2b28      	cmp	r3, #40	@ 0x28
 800814a:	d86b      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800814c:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	0800822d 	.word	0x0800822d
 8008158:	08008225 	.word	0x08008225
 800815c:	08008225 	.word	0x08008225
 8008160:	08008225 	.word	0x08008225
 8008164:	08008225 	.word	0x08008225
 8008168:	08008225 	.word	0x08008225
 800816c:	08008225 	.word	0x08008225
 8008170:	08008225 	.word	0x08008225
 8008174:	080081f9 	.word	0x080081f9
 8008178:	08008225 	.word	0x08008225
 800817c:	08008225 	.word	0x08008225
 8008180:	08008225 	.word	0x08008225
 8008184:	08008225 	.word	0x08008225
 8008188:	08008225 	.word	0x08008225
 800818c:	08008225 	.word	0x08008225
 8008190:	08008225 	.word	0x08008225
 8008194:	0800820f 	.word	0x0800820f
 8008198:	08008225 	.word	0x08008225
 800819c:	08008225 	.word	0x08008225
 80081a0:	08008225 	.word	0x08008225
 80081a4:	08008225 	.word	0x08008225
 80081a8:	08008225 	.word	0x08008225
 80081ac:	08008225 	.word	0x08008225
 80081b0:	08008225 	.word	0x08008225
 80081b4:	0800822d 	.word	0x0800822d
 80081b8:	08008225 	.word	0x08008225
 80081bc:	08008225 	.word	0x08008225
 80081c0:	08008225 	.word	0x08008225
 80081c4:	08008225 	.word	0x08008225
 80081c8:	08008225 	.word	0x08008225
 80081cc:	08008225 	.word	0x08008225
 80081d0:	08008225 	.word	0x08008225
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	08008225 	.word	0x08008225
 80081e4:	08008225 	.word	0x08008225
 80081e8:	08008225 	.word	0x08008225
 80081ec:	08008225 	.word	0x08008225
 80081f0:	08008225 	.word	0x08008225
 80081f4:	0800822d 	.word	0x0800822d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fc:	3308      	adds	r3, #8
 80081fe:	2101      	movs	r1, #1
 8008200:	4618      	mov	r0, r3
 8008202:	f000 ffc3 	bl	800918c <RCCEx_PLL2_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800820c:	e00f      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	3328      	adds	r3, #40	@ 0x28
 8008214:	2101      	movs	r1, #1
 8008216:	4618      	mov	r0, r3
 8008218:	f001 f86a 	bl	80092f0 <RCCEx_PLL3_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008222:	e004      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800822c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008236:	4bbf      	ldr	r3, [pc, #764]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008244:	4abb      	ldr	r2, [pc, #748]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008246:	430b      	orrs	r3, r1
 8008248:	6553      	str	r3, [r2, #84]	@ 0x54
 800824a:	e003      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f002 0302 	and.w	r3, r2, #2
 8008260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800826a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d041      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800827a:	2b05      	cmp	r3, #5
 800827c:	d824      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082d1 	.word	0x080082d1
 8008288:	0800829d 	.word	0x0800829d
 800828c:	080082b3 	.word	0x080082b3
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a0:	3308      	adds	r3, #8
 80082a2:	2101      	movs	r1, #1
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 ff71 	bl	800918c <RCCEx_PLL2_Config>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082b0:	e00f      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	3328      	adds	r3, #40	@ 0x28
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f818 	bl	80092f0 <RCCEx_PLL3_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082c6:	e004      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ce:	e000      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80082d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082da:	4b96      	ldr	r3, [pc, #600]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082de:	f023 0107 	bic.w	r1, r3, #7
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e8:	4a92      	ldr	r2, [pc, #584]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80082ee:	e003      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f002 0304 	and.w	r3, r2, #4
 8008304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008308:	2300      	movs	r3, #0
 800830a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800830e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008312:	460b      	mov	r3, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	d044      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008320:	2b05      	cmp	r3, #5
 8008322:	d825      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008324:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008379 	.word	0x08008379
 8008330:	08008345 	.word	0x08008345
 8008334:	0800835b 	.word	0x0800835b
 8008338:	08008379 	.word	0x08008379
 800833c:	08008379 	.word	0x08008379
 8008340:	08008379 	.word	0x08008379
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	3308      	adds	r3, #8
 800834a:	2101      	movs	r1, #1
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ff1d 	bl	800918c <RCCEx_PLL2_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008358:	e00f      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	3328      	adds	r3, #40	@ 0x28
 8008360:	2101      	movs	r1, #1
 8008362:	4618      	mov	r0, r3
 8008364:	f000 ffc4 	bl	80092f0 <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800836e:	e004      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008376:	e000      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008382:	4b6c      	ldr	r3, [pc, #432]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008386:	f023 0107 	bic.w	r1, r3, #7
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008392:	4a68      	ldr	r2, [pc, #416]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008394:	430b      	orrs	r3, r1
 8008396:	6593      	str	r3, [r2, #88]	@ 0x58
 8008398:	e003      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f002 0320 	and.w	r3, r2, #32
 80083ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b2:	2300      	movs	r3, #0
 80083b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083bc:	460b      	mov	r3, r1
 80083be:	4313      	orrs	r3, r2
 80083c0:	d055      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ce:	d033      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80083d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083d4:	d82c      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083da:	d02f      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e0:	d826      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083e6:	d02b      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80083e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083ec:	d820      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f2:	d012      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80083f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f8:	d81a      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d022      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80083fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008402:	d115      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008408:	3308      	adds	r3, #8
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f000 febd 	bl	800918c <RCCEx_PLL2_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008418:	e015      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	3328      	adds	r3, #40	@ 0x28
 8008420:	2102      	movs	r1, #2
 8008422:	4618      	mov	r0, r3
 8008424:	f000 ff64 	bl	80092f0 <RCCEx_PLL3_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800842e:	e00a      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008436:	e006      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008438:	bf00      	nop
 800843a:	e004      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800843c:	bf00      	nop
 800843e:	e002      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008440:	bf00      	nop
 8008442:	e000      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800844e:	4b39      	ldr	r3, [pc, #228]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845e:	4a35      	ldr	r2, [pc, #212]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008460:	430b      	orrs	r3, r1
 8008462:	6553      	str	r3, [r2, #84]	@ 0x54
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800847a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008484:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008488:	460b      	mov	r3, r1
 800848a:	4313      	orrs	r3, r2
 800848c:	d058      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008496:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800849a:	d033      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800849c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084a0:	d82c      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a6:	d02f      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80084a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ac:	d826      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084b2:	d02b      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80084b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084b8:	d820      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084be:	d012      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80084c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084c4:	d81a      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d022      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80084ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ce:	d115      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	3308      	adds	r3, #8
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fe57 	bl	800918c <RCCEx_PLL2_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084e4:	e015      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	3328      	adds	r3, #40	@ 0x28
 80084ec:	2102      	movs	r1, #2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fefe 	bl	80092f0 <RCCEx_PLL3_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084fa:	e00a      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008502:	e006      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008504:	bf00      	nop
 8008506:	e004      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008508:	bf00      	nop
 800850a:	e002      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800850c:	bf00      	nop
 800850e:	e000      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10e      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800851a:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800851c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800852a:	4a02      	ldr	r2, [pc, #8]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800852c:	430b      	orrs	r3, r1
 800852e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008530:	e006      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008550:	2300      	movs	r3, #0
 8008552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008556:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d055      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008568:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800856c:	d033      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800856e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008572:	d82c      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008578:	d02f      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800857a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857e:	d826      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008580:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008584:	d02b      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008586:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800858a:	d820      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800858c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008590:	d012      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008596:	d81a      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d022      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800859c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a0:	d115      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a6:	3308      	adds	r3, #8
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fdee 	bl	800918c <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085b6:	e015      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085bc:	3328      	adds	r3, #40	@ 0x28
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fe95 	bl	80092f0 <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085cc:	e00a      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085d4:	e006      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085d6:	bf00      	nop
 80085d8:	e004      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10b      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80085f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085fc:	4a9d      	ldr	r2, [pc, #628]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085fe:	430b      	orrs	r3, r1
 8008600:	6593      	str	r3, [r2, #88]	@ 0x58
 8008602:	e003      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f002 0308 	and.w	r3, r2, #8
 8008618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800861c:	2300      	movs	r3, #0
 800861e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008622:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008626:	460b      	mov	r3, r1
 8008628:	4313      	orrs	r3, r2
 800862a:	d01e      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008638:	d10c      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	3328      	adds	r3, #40	@ 0x28
 8008640:	2102      	movs	r1, #2
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fe54 	bl	80092f0 <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008654:	4b87      	ldr	r3, [pc, #540]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008658:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008664:	4a83      	ldr	r2, [pc, #524]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008666:	430b      	orrs	r3, r1
 8008668:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f002 0310 	and.w	r3, r2, #16
 8008676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800867a:	2300      	movs	r3, #0
 800867c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008680:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008684:	460b      	mov	r3, r1
 8008686:	4313      	orrs	r3, r2
 8008688:	d01e      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008696:	d10c      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	3328      	adds	r3, #40	@ 0x28
 800869e:	2102      	movs	r1, #2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fe25 	bl	80092f0 <RCCEx_PLL3_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086b2:	4b70      	ldr	r3, [pc, #448]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d03e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80086f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f4:	d022      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086fa:	d81b      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008704:	d00b      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008706:	e015      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870c:	3308      	adds	r3, #8
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fd3b 	bl	800918c <RCCEx_PLL2_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800871c:	e00f      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800871e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008722:	3328      	adds	r3, #40	@ 0x28
 8008724:	2102      	movs	r1, #2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fde2 	bl	80092f0 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800873c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008746:	4b4b      	ldr	r3, [pc, #300]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008756:	4a47      	ldr	r2, [pc, #284]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008758:	430b      	orrs	r3, r1
 800875a:	6593      	str	r3, [r2, #88]	@ 0x58
 800875c:	e003      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008772:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008774:	2300      	movs	r3, #0
 8008776:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008778:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800877c:	460b      	mov	r3, r1
 800877e:	4313      	orrs	r3, r2
 8008780:	d03b      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800878e:	d01f      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008790:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008794:	d818      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879a:	d003      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800879c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a0:	d007      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80087a2:	e011      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a4:	4b33      	ldr	r3, [pc, #204]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	4a32      	ldr	r2, [pc, #200]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087b0:	e00f      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	3328      	adds	r3, #40	@ 0x28
 80087b8:	2101      	movs	r1, #1
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fd98 	bl	80092f0 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80087c6:	e004      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80087d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087da:	4b26      	ldr	r3, [pc, #152]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ea:	4a22      	ldr	r2, [pc, #136]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80087f0:	e003      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008806:	673b      	str	r3, [r7, #112]	@ 0x70
 8008808:	2300      	movs	r3, #0
 800880a:	677b      	str	r3, [r7, #116]	@ 0x74
 800880c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008810:	460b      	mov	r3, r1
 8008812:	4313      	orrs	r3, r2
 8008814:	d034      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008824:	d007      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008826:	e011      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	4a11      	ldr	r2, [pc, #68]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008834:	e00e      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883a:	3308      	adds	r3, #8
 800883c:	2102      	movs	r1, #2
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fca4 	bl	800918c <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800884a:	e003      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10d      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800885e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008860:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886a:	4a02      	ldr	r2, [pc, #8]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800886c:	430b      	orrs	r3, r1
 800886e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008870:	e006      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008872:	bf00      	nop
 8008874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800888c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800888e:	2300      	movs	r3, #0
 8008890:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008892:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008896:	460b      	mov	r3, r1
 8008898:	4313      	orrs	r3, r2
 800889a:	d00c      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a0:	3328      	adds	r3, #40	@ 0x28
 80088a2:	2102      	movs	r1, #2
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 fd23 	bl	80092f0 <RCCEx_PLL3_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80088c4:	2300      	movs	r3, #0
 80088c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80088c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80088cc:	460b      	mov	r3, r1
 80088ce:	4313      	orrs	r3, r2
 80088d0:	d038      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088de:	d018      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80088e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088e4:	d811      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80088e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ea:	d014      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80088ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f0:	d80b      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d011      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088fa:	d106      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088fc:	4bc3      	ldr	r3, [pc, #780]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	4ac2      	ldr	r2, [pc, #776]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008908:	e008      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008910:	e004      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800891a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008924:	4bb9      	ldr	r3, [pc, #740]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008928:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008934:	4ab5      	ldr	r2, [pc, #724]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008936:	430b      	orrs	r3, r1
 8008938:	6553      	str	r3, [r2, #84]	@ 0x54
 800893a:	e003      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008950:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008952:	2300      	movs	r3, #0
 8008954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008956:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800895a:	460b      	mov	r3, r1
 800895c:	4313      	orrs	r3, r2
 800895e:	d009      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008960:	4baa      	ldr	r3, [pc, #680]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008964:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800896e:	4aa7      	ldr	r2, [pc, #668]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008970:	430b      	orrs	r3, r1
 8008972:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008980:	653b      	str	r3, [r7, #80]	@ 0x50
 8008982:	2300      	movs	r3, #0
 8008984:	657b      	str	r3, [r7, #84]	@ 0x54
 8008986:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800898a:	460b      	mov	r3, r1
 800898c:	4313      	orrs	r3, r2
 800898e:	d00a      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008990:	4b9e      	ldr	r3, [pc, #632]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089a0:	4a9a      	ldr	r2, [pc, #616]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089a2:	430b      	orrs	r3, r1
 80089a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80089b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089b4:	2300      	movs	r3, #0
 80089b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089bc:	460b      	mov	r3, r1
 80089be:	4313      	orrs	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089c2:	4b92      	ldr	r3, [pc, #584]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d0:	4a8e      	ldr	r2, [pc, #568]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089d2:	430b      	orrs	r3, r1
 80089d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80089e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e4:	2300      	movs	r3, #0
 80089e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80089e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089ec:	460b      	mov	r3, r1
 80089ee:	4313      	orrs	r3, r2
 80089f0:	d00e      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089f2:	4b86      	ldr	r3, [pc, #536]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	4a85      	ldr	r2, [pc, #532]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089fc:	6113      	str	r3, [r2, #16]
 80089fe:	4b83      	ldr	r3, [pc, #524]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a00:	6919      	ldr	r1, [r3, #16]
 8008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a0a:	4a80      	ldr	r2, [pc, #512]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a26:	460b      	mov	r3, r1
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a2c:	4b77      	ldr	r3, [pc, #476]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a30:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3a:	4a74      	ldr	r2, [pc, #464]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a4e:	2300      	movs	r3, #0
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a56:	460b      	mov	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a60:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a6c:	4a67      	ldr	r2, [pc, #412]	@ (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a6e:	430b      	orrs	r3, r1
 8008a70:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	d011      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	3308      	adds	r3, #8
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fb78 	bl	800918c <RCCEx_PLL2_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	2100      	movs	r1, #0
 8008abc:	6239      	str	r1, [r7, #32]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ac4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4313      	orrs	r3, r2
 8008acc:	d011      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fb58 	bl	800918c <RCCEx_PLL2_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	2100      	movs	r1, #0
 8008afc:	61b9      	str	r1, [r7, #24]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	d011      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	3308      	adds	r3, #8
 8008b14:	2102      	movs	r1, #2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fb38 	bl	800918c <RCCEx_PLL2_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6139      	str	r1, [r7, #16]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	d011      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	3328      	adds	r3, #40	@ 0x28
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fbca 	bl	80092f0 <RCCEx_PLL3_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d011      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b92:	3328      	adds	r3, #40	@ 0x28
 8008b94:	2101      	movs	r1, #1
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fbaa 	bl	80092f0 <RCCEx_PLL3_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	d011      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	3328      	adds	r3, #40	@ 0x28
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fb8a 	bl	80092f0 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008bf2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c06:	46bd      	mov	sp, r7
 8008c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c0c:	58024400 	.word	0x58024400

08008c10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c14:	f7fe fd96 	bl	8007744 <HAL_RCC_GetHCLKFreq>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	091b      	lsrs	r3, r3, #4
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	4904      	ldr	r1, [pc, #16]	@ (8008c38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c26:	5ccb      	ldrb	r3, [r1, r3]
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	58024400 	.word	0x58024400
 8008c38:	0800d2b4 	.word	0x0800d2b4

08008c3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b089      	sub	sp, #36	@ 0x24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c44:	4ba1      	ldr	r3, [pc, #644]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c4e:	4b9f      	ldr	r3, [pc, #636]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c52:	0b1b      	lsrs	r3, r3, #12
 8008c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c5a:	4b9c      	ldr	r3, [pc, #624]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c66:	4b99      	ldr	r3, [pc, #612]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6a:	08db      	lsrs	r3, r3, #3
 8008c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8111 	beq.w	8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	f000 8083 	beq.w	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	f200 80a1 	bhi.w	8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d056      	beq.n	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ca6:	e099      	b.n	8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca8:	4b88      	ldr	r3, [pc, #544]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02d      	beq.n	8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cb4:	4b85      	ldr	r3, [pc, #532]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	08db      	lsrs	r3, r3, #3
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	4a84      	ldr	r2, [pc, #528]	@ (8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	ee07 3a90 	vmov	s15, r3
 8008ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b7b      	ldr	r3, [pc, #492]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d0e:	e087      	b.n	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b6a      	ldr	r3, [pc, #424]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d52:	e065      	b.n	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b59      	ldr	r3, [pc, #356]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d96:	e043      	b.n	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b48      	ldr	r3, [pc, #288]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dda:	e021      	b.n	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dee:	4b37      	ldr	r3, [pc, #220]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e20:	4b2a      	ldr	r3, [pc, #168]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	0a5b      	lsrs	r3, r3, #9
 8008e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e46:	ee17 2a90 	vmov	r2, s15
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	0c1b      	lsrs	r3, r3, #16
 8008e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e58:	ee07 3a90 	vmov	s15, r3
 8008e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e74:	ee17 2a90 	vmov	r2, s15
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e80:	0e1b      	lsrs	r3, r3, #24
 8008e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea2:	ee17 2a90 	vmov	r2, s15
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008eaa:	e008      	b.n	8008ebe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	609a      	str	r2, [r3, #8]
}
 8008ebe:	bf00      	nop
 8008ec0:	3724      	adds	r7, #36	@ 0x24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	03d09000 	.word	0x03d09000
 8008ed4:	46000000 	.word	0x46000000
 8008ed8:	4c742400 	.word	0x4c742400
 8008edc:	4a742400 	.word	0x4a742400
 8008ee0:	4af42400 	.word	0x4af42400

08008ee4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b089      	sub	sp, #36	@ 0x24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eec:	4ba1      	ldr	r3, [pc, #644]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ef6:	4b9f      	ldr	r3, [pc, #636]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efa:	0d1b      	lsrs	r3, r3, #20
 8008efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f02:	4b9c      	ldr	r3, [pc, #624]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f0e:	4b99      	ldr	r3, [pc, #612]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8111 	beq.w	8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	f000 8083 	beq.w	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	f200 80a1 	bhi.w	8009084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d056      	beq.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f4e:	e099      	b.n	8009084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f50:	4b88      	ldr	r3, [pc, #544]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0320 	and.w	r3, r3, #32
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d02d      	beq.n	8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f5c:	4b85      	ldr	r3, [pc, #532]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	08db      	lsrs	r3, r3, #3
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	4a84      	ldr	r2, [pc, #528]	@ (8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f68:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f86:	4b7b      	ldr	r3, [pc, #492]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fb6:	e087      	b.n	80090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fca:	4b6a      	ldr	r3, [pc, #424]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ffa:	e065      	b.n	80090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800900a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900e:	4b59      	ldr	r3, [pc, #356]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009022:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903e:	e043      	b.n	80090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b48      	ldr	r3, [pc, #288]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009062:	ed97 6a03 	vldr	s12, [r7, #12]
 8009066:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009082:	e021      	b.n	80090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b37      	ldr	r3, [pc, #220]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090cc:	0a5b      	lsrs	r3, r3, #9
 80090ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ee:	ee17 2a90 	vmov	r2, s15
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fa:	0c1b      	lsrs	r3, r3, #16
 80090fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800910c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009110:	edd7 6a07 	vldr	s13, [r7, #28]
 8009114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911c:	ee17 2a90 	vmov	r2, s15
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009124:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009128:	0e1b      	lsrs	r3, r3, #24
 800912a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800913a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914a:	ee17 2a90 	vmov	r2, s15
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009152:	e008      	b.n	8009166 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	609a      	str	r2, [r3, #8]
}
 8009166:	bf00      	nop
 8009168:	3724      	adds	r7, #36	@ 0x24
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	58024400 	.word	0x58024400
 8009178:	03d09000 	.word	0x03d09000
 800917c:	46000000 	.word	0x46000000
 8009180:	4c742400 	.word	0x4c742400
 8009184:	4a742400 	.word	0x4a742400
 8009188:	4af42400 	.word	0x4af42400

0800918c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800919a:	4b53      	ldr	r3, [pc, #332]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 800919c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d101      	bne.n	80091aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e099      	b.n	80092de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091aa:	4b4f      	ldr	r3, [pc, #316]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a4e      	ldr	r2, [pc, #312]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80091b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b6:	f7f9 f8a5 	bl	8002304 <HAL_GetTick>
 80091ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091bc:	e008      	b.n	80091d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091be:	f7f9 f8a1 	bl	8002304 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e086      	b.n	80092de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091d0:	4b45      	ldr	r3, [pc, #276]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091dc:	4b42      	ldr	r3, [pc, #264]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	031b      	lsls	r3, r3, #12
 80091ea:	493f      	ldr	r1, [pc, #252]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	3b01      	subs	r3, #1
 8009200:	025b      	lsls	r3, r3, #9
 8009202:	b29b      	uxth	r3, r3
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	3b01      	subs	r3, #1
 800920c:	041b      	lsls	r3, r3, #16
 800920e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	3b01      	subs	r3, #1
 800921a:	061b      	lsls	r3, r3, #24
 800921c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009220:	4931      	ldr	r1, [pc, #196]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009222:	4313      	orrs	r3, r2
 8009224:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009226:	4b30      	ldr	r3, [pc, #192]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	492d      	ldr	r1, [pc, #180]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009234:	4313      	orrs	r3, r2
 8009236:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009238:	4b2b      	ldr	r3, [pc, #172]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	f023 0220 	bic.w	r2, r3, #32
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	4928      	ldr	r1, [pc, #160]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009246:	4313      	orrs	r3, r2
 8009248:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800924a:	4b27      	ldr	r3, [pc, #156]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924e:	4a26      	ldr	r2, [pc, #152]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009250:	f023 0310 	bic.w	r3, r3, #16
 8009254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009256:	4b24      	ldr	r3, [pc, #144]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800925a:	4b24      	ldr	r3, [pc, #144]	@ (80092ec <RCCEx_PLL2_Config+0x160>)
 800925c:	4013      	ands	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	69d2      	ldr	r2, [r2, #28]
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	4920      	ldr	r1, [pc, #128]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009266:	4313      	orrs	r3, r2
 8009268:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800926a:	4b1f      	ldr	r3, [pc, #124]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a1e      	ldr	r2, [pc, #120]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009270:	f043 0310 	orr.w	r3, r3, #16
 8009274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800927c:	4b1a      	ldr	r3, [pc, #104]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009288:	e00f      	b.n	80092aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d106      	bne.n	800929e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009290:	4b15      	ldr	r3, [pc, #84]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	4a14      	ldr	r2, [pc, #80]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 8009296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800929a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800929c:	e005      	b.n	80092aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800929e:	4b12      	ldr	r3, [pc, #72]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	4a11      	ldr	r2, [pc, #68]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80092a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092aa:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a0e      	ldr	r2, [pc, #56]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b6:	f7f9 f825 	bl	8002304 <HAL_GetTick>
 80092ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092bc:	e008      	b.n	80092d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092be:	f7f9 f821 	bl	8002304 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e006      	b.n	80092de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092d0:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
 80092ec:	ffff0007 	.word	0xffff0007

080092f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092fe:	4b53      	ldr	r3, [pc, #332]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	2b03      	cmp	r3, #3
 8009308:	d101      	bne.n	800930e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e099      	b.n	8009442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800930e:	4b4f      	ldr	r3, [pc, #316]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a4e      	ldr	r2, [pc, #312]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800931a:	f7f8 fff3 	bl	8002304 <HAL_GetTick>
 800931e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009320:	e008      	b.n	8009334 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009322:	f7f8 ffef 	bl	8002304 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	2b02      	cmp	r3, #2
 800932e:	d901      	bls.n	8009334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e086      	b.n	8009442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009334:	4b45      	ldr	r3, [pc, #276]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f0      	bne.n	8009322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009340:	4b42      	ldr	r3, [pc, #264]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009344:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	051b      	lsls	r3, r3, #20
 800934e:	493f      	ldr	r1, [pc, #252]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009350:	4313      	orrs	r3, r2
 8009352:	628b      	str	r3, [r1, #40]	@ 0x28
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	3b01      	subs	r3, #1
 800935a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	3b01      	subs	r3, #1
 8009364:	025b      	lsls	r3, r3, #9
 8009366:	b29b      	uxth	r3, r3
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	3b01      	subs	r3, #1
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	3b01      	subs	r3, #1
 800937e:	061b      	lsls	r3, r3, #24
 8009380:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009384:	4931      	ldr	r1, [pc, #196]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009386:	4313      	orrs	r3, r2
 8009388:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800938a:	4b30      	ldr	r3, [pc, #192]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 800938c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	492d      	ldr	r1, [pc, #180]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009398:	4313      	orrs	r3, r2
 800939a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800939c:	4b2b      	ldr	r3, [pc, #172]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	4928      	ldr	r1, [pc, #160]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ae:	4b27      	ldr	r3, [pc, #156]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b2:	4a26      	ldr	r2, [pc, #152]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093ba:	4b24      	ldr	r3, [pc, #144]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093be:	4b24      	ldr	r3, [pc, #144]	@ (8009450 <RCCEx_PLL3_Config+0x160>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	69d2      	ldr	r2, [r2, #28]
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	4920      	ldr	r1, [pc, #128]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093ce:	4b1f      	ldr	r3, [pc, #124]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d2:	4a1e      	ldr	r2, [pc, #120]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d106      	bne.n	80093ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093e0:	4b1a      	ldr	r3, [pc, #104]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	4a19      	ldr	r2, [pc, #100]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80093ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093ec:	e00f      	b.n	800940e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d106      	bne.n	8009402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093f4:	4b15      	ldr	r3, [pc, #84]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	4a14      	ldr	r2, [pc, #80]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 80093fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80093fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009400:	e005      	b.n	800940e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009402:	4b12      	ldr	r3, [pc, #72]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	4a11      	ldr	r2, [pc, #68]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800940c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800940e:	4b0f      	ldr	r3, [pc, #60]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a0e      	ldr	r2, [pc, #56]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800941a:	f7f8 ff73 	bl	8002304 <HAL_GetTick>
 800941e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009420:	e008      	b.n	8009434 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009422:	f7f8 ff6f 	bl	8002304 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b02      	cmp	r3, #2
 800942e:	d901      	bls.n	8009434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e006      	b.n	8009442 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <RCCEx_PLL3_Config+0x15c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0f0      	beq.n	8009422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009440:	7bfb      	ldrb	r3, [r7, #15]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	58024400 	.word	0x58024400
 8009450:	ffff0007 	.word	0xffff0007

08009454 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e10f      	b.n	8009686 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a87      	ldr	r2, [pc, #540]	@ (8009690 <HAL_SPI_Init+0x23c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00f      	beq.n	8009496 <HAL_SPI_Init+0x42>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a86      	ldr	r2, [pc, #536]	@ (8009694 <HAL_SPI_Init+0x240>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00a      	beq.n	8009496 <HAL_SPI_Init+0x42>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a84      	ldr	r2, [pc, #528]	@ (8009698 <HAL_SPI_Init+0x244>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d005      	beq.n	8009496 <HAL_SPI_Init+0x42>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	2b0f      	cmp	r3, #15
 8009490:	d901      	bls.n	8009496 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e0f7      	b.n	8009686 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f83e 	bl	800a518 <SPI_GetPacketSize>
 800949c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a7b      	ldr	r2, [pc, #492]	@ (8009690 <HAL_SPI_Init+0x23c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00c      	beq.n	80094c2 <HAL_SPI_Init+0x6e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a79      	ldr	r2, [pc, #484]	@ (8009694 <HAL_SPI_Init+0x240>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d007      	beq.n	80094c2 <HAL_SPI_Init+0x6e>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a78      	ldr	r2, [pc, #480]	@ (8009698 <HAL_SPI_Init+0x244>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d002      	beq.n	80094c2 <HAL_SPI_Init+0x6e>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b08      	cmp	r3, #8
 80094c0:	d811      	bhi.n	80094e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80094c6:	4a72      	ldr	r2, [pc, #456]	@ (8009690 <HAL_SPI_Init+0x23c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d009      	beq.n	80094e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a70      	ldr	r2, [pc, #448]	@ (8009694 <HAL_SPI_Init+0x240>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_SPI_Init+0x8c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a6f      	ldr	r2, [pc, #444]	@ (8009698 <HAL_SPI_Init+0x244>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d104      	bne.n	80094ea <HAL_SPI_Init+0x96>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b10      	cmp	r3, #16
 80094e4:	d901      	bls.n	80094ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e0cd      	b.n	8009686 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7f8 f89c 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0201 	bic.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009526:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009530:	d119      	bne.n	8009566 <HAL_SPI_Init+0x112>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800953a:	d103      	bne.n	8009544 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10c      	bne.n	8009566 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009554:	d107      	bne.n	8009566 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009564:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00f      	beq.n	8009592 <HAL_SPI_Init+0x13e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b06      	cmp	r3, #6
 8009578:	d90b      	bls.n	8009592 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e007      	b.n	80095a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69da      	ldr	r2, [r3, #28]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095aa:	431a      	orrs	r2, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b4:	ea42 0103 	orr.w	r1, r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	431a      	orrs	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009602:	ea42 0103 	orr.w	r1, r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d113      	bne.n	8009642 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800962c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009640:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	40013000 	.word	0x40013000
 8009694:	40003800 	.word	0x40003800
 8009698:	40003c00 	.word	0x40003c00

0800969c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3320      	adds	r3, #32
 80096b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096b4:	f7f8 fe26 	bl	8002304 <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d001      	beq.n	80096ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80096c6:	2302      	movs	r3, #2
 80096c8:	e1d1      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <HAL_SPI_Transmit+0x3a>
 80096d0:	88fb      	ldrh	r3, [r7, #6]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e1c9      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_SPI_Transmit+0x4c>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e1c2      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2203      	movs	r2, #3
 80096f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	88fa      	ldrh	r2, [r7, #6]
 800970a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	88fa      	ldrh	r2, [r7, #6]
 8009712:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009740:	d108      	bne.n	8009754 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	e009      	b.n	8009768 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009766:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	4b96      	ldr	r3, [pc, #600]	@ (80099c8 <HAL_SPI_Transmit+0x32c>)
 8009770:	4013      	ands	r3, r2
 8009772:	88f9      	ldrh	r1, [r7, #6]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	6812      	ldr	r2, [r2, #0]
 8009778:	430b      	orrs	r3, r1
 800977a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009794:	d107      	bne.n	80097a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	2b0f      	cmp	r3, #15
 80097ac:	d947      	bls.n	800983e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80097ae:	e03f      	b.n	8009830 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d114      	bne.n	80097e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80097e6:	e023      	b.n	8009830 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097e8:	f7f8 fd8c 	bl	8002304 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d803      	bhi.n	8009800 <HAL_SPI_Transmit+0x164>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fe:	d102      	bne.n	8009806 <HAL_SPI_Transmit+0x16a>
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d114      	bne.n	8009830 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fdb8 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e11e      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009836:	b29b      	uxth	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1b9      	bne.n	80097b0 <HAL_SPI_Transmit+0x114>
 800983c:	e0f1      	b.n	8009a22 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2b07      	cmp	r3, #7
 8009844:	f240 80e6 	bls.w	8009a14 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009848:	e05d      	b.n	8009906 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b02      	cmp	r3, #2
 8009856:	d132      	bne.n	80098be <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	d918      	bls.n	8009896 <HAL_SPI_Transmit+0x1fa>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d014      	beq.n	8009896 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b02      	subs	r3, #2
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009894:	e037      	b.n	8009906 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800989a:	881a      	ldrh	r2, [r3, #0]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a4:	1c9a      	adds	r2, r3, #2
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80098bc:	e023      	b.n	8009906 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098be:	f7f8 fd21 	bl	8002304 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d803      	bhi.n	80098d6 <HAL_SPI_Transmit+0x23a>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d102      	bne.n	80098dc <HAL_SPI_Transmit+0x240>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d114      	bne.n	8009906 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fd4d 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e0b3      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d19b      	bne.n	800984a <HAL_SPI_Transmit+0x1ae>
 8009912:	e086      	b.n	8009a22 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b02      	cmp	r3, #2
 8009920:	d154      	bne.n	80099cc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009928:	b29b      	uxth	r3, r3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d918      	bls.n	8009960 <HAL_SPI_Transmit+0x2c4>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009932:	2b40      	cmp	r3, #64	@ 0x40
 8009934:	d914      	bls.n	8009960 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009952:	b29b      	uxth	r3, r3
 8009954:	3b04      	subs	r3, #4
 8009956:	b29a      	uxth	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800995e:	e059      	b.n	8009a14 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	d917      	bls.n	800999c <HAL_SPI_Transmit+0x300>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d013      	beq.n	800999c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009978:	881a      	ldrh	r2, [r3, #0]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009982:	1c9a      	adds	r2, r3, #2
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b02      	subs	r3, #2
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800999a:	e03b      	b.n	8009a14 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3320      	adds	r3, #32
 80099a6:	7812      	ldrb	r2, [r2, #0]
 80099a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	3b01      	subs	r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80099c6:	e025      	b.n	8009a14 <HAL_SPI_Transmit+0x378>
 80099c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099cc:	f7f8 fc9a 	bl	8002304 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d803      	bhi.n	80099e4 <HAL_SPI_Transmit+0x348>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d102      	bne.n	80099ea <HAL_SPI_Transmit+0x34e>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d114      	bne.n	8009a14 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fcc6 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e02c      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f af79 	bne.w	8009914 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2108      	movs	r1, #8
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fd45 	bl	800a4bc <SPI_WaitOnFlagUntilTimeout>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a3e:	f043 0220 	orr.w	r2, r3, #32
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fc97 	bl	800a37c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
  }
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop

08009a78 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3301      	adds	r3, #1
 8009a92:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3330      	adds	r3, #48	@ 0x30
 8009a9a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a9c:	f7f8 fc32 	bl	8002304 <HAL_GetTick>
 8009aa0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d001      	beq.n	8009ab2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e250      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_SPI_Receive+0x46>
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e248      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_SPI_Receive+0x58>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e241      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2204      	movs	r2, #4
 8009adc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	88fa      	ldrh	r2, [r7, #6]
 8009afa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009b28:	d108      	bne.n	8009b3c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e009      	b.n	8009b50 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009b4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	4b95      	ldr	r3, [pc, #596]	@ (8009dac <HAL_SPI_Receive+0x334>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	88f9      	ldrh	r1, [r7, #6]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0201 	orr.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b7c:	d107      	bne.n	8009b8e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	2b0f      	cmp	r3, #15
 8009b94:	d96c      	bls.n	8009c70 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009b96:	e064      	b.n	8009c62 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d114      	bne.n	8009bd8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bb6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bb8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009bd6:	e044      	b.n	8009c62 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	8bfa      	ldrh	r2, [r7, #30]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d919      	bls.n	8009c1a <HAL_SPI_Receive+0x1a2>
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d014      	beq.n	8009c1a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bfa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c00:	1d1a      	adds	r2, r3, #4
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c18:	e023      	b.n	8009c62 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c1a:	f7f8 fb73 	bl	8002304 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d803      	bhi.n	8009c32 <HAL_SPI_Receive+0x1ba>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d102      	bne.n	8009c38 <HAL_SPI_Receive+0x1c0>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d114      	bne.n	8009c62 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fb9f 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e178      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d194      	bne.n	8009b98 <HAL_SPI_Receive+0x120>
 8009c6e:	e15e      	b.n	8009f2e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	2b07      	cmp	r3, #7
 8009c76:	f240 8153 	bls.w	8009f20 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009c7a:	e08f      	b.n	8009d9c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d114      	bne.n	8009cbc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	8812      	ldrh	r2, [r2, #0]
 8009c9a:	b292      	uxth	r2, r2
 8009c9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca2:	1c9a      	adds	r2, r3, #2
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009cba:	e06f      	b.n	8009d9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8bfa      	ldrh	r2, [r7, #30]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d924      	bls.n	8009d14 <HAL_SPI_Receive+0x29c>
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01f      	beq.n	8009d14 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	8812      	ldrh	r2, [r2, #0]
 8009cdc:	b292      	uxth	r2, r2
 8009cde:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ce4:	1c9a      	adds	r2, r3, #2
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	8812      	ldrh	r2, [r2, #0]
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfa:	1c9a      	adds	r2, r3, #2
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	3b02      	subs	r3, #2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d12:	e043      	b.n	8009d9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d119      	bne.n	8009d54 <HAL_SPI_Receive+0x2dc>
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d014      	beq.n	8009d54 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	8812      	ldrh	r2, [r2, #0]
 8009d32:	b292      	uxth	r2, r2
 8009d34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d3a:	1c9a      	adds	r2, r3, #2
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d52:	e023      	b.n	8009d9c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d54:	f7f8 fad6 	bl	8002304 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d803      	bhi.n	8009d6c <HAL_SPI_Receive+0x2f4>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d102      	bne.n	8009d72 <HAL_SPI_Receive+0x2fa>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d114      	bne.n	8009d9c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fb02 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e0db      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f47f af69 	bne.w	8009c7c <HAL_SPI_Receive+0x204>
 8009daa:	e0c0      	b.n	8009f2e <HAL_SPI_Receive+0x4b6>
 8009dac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d117      	bne.n	8009df6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dd2:	7812      	ldrb	r2, [r2, #0]
 8009dd4:	b2d2      	uxtb	r2, r2
 8009dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009df4:	e094      	b.n	8009f20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	8bfa      	ldrh	r2, [r7, #30]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d946      	bls.n	8009e92 <HAL_SPI_Receive+0x41a>
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d041      	beq.n	8009e92 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e52:	7812      	ldrb	r2, [r2, #0]
 8009e54:	b2d2      	uxtb	r2, r2
 8009e56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	b2d2      	uxtb	r2, r2
 8009e72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	3b04      	subs	r3, #4
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009e90:	e046      	b.n	8009f20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d81c      	bhi.n	8009ed8 <HAL_SPI_Receive+0x460>
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d017      	beq.n	8009ed8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ed6:	e023      	b.n	8009f20 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ed8:	f7f8 fa14 	bl	8002304 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d803      	bhi.n	8009ef0 <HAL_SPI_Receive+0x478>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eee:	d102      	bne.n	8009ef6 <HAL_SPI_Receive+0x47e>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d114      	bne.n	8009f20 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fa40 	bl	800a37c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e019      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f47f af41 	bne.w	8009db0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fa24 	bl	800a37c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009f52:	2300      	movs	r3, #0
  }
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3720      	adds	r7, #32
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	@ 0x28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009f74:	6a3a      	ldr	r2, [r7, #32]
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3330      	adds	r3, #48	@ 0x30
 8009f96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <HAL_SPI_IRQHandler+0x68>
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	f003 0308 	and.w	r3, r3, #8
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f9b9 	bl	800a334 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009fc2:	e192      	b.n	800a2ea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d113      	bne.n	8009ff6 <HAL_SPI_IRQHandler+0x9a>
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10e      	bne.n	8009ff6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
    handled = 1UL;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10f      	bne.n	800a020 <HAL_SPI_IRQHandler+0xc4>
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
    handled = 1UL;
 800a01c:	2301      	movs	r3, #1
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10f      	bne.n	800a04a <HAL_SPI_IRQHandler+0xee>
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
    handled = 1UL;
 800a046:	2301      	movs	r3, #1
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f040 8147 	bne.w	800a2e0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	f003 0308 	and.w	r3, r3, #8
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 808b 	beq.w	800a174 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	699a      	ldr	r2, [r3, #24]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0208 	orr.w	r2, r2, #8
 800a06c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0210 	orr.w	r2, r2, #16
 800a07c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	699a      	ldr	r2, [r3, #24]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a08c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691a      	ldr	r2, [r3, #16]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0208 	bic.w	r2, r2, #8
 800a09c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d13d      	bne.n	800a128 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a0ac:	e036      	b.n	800a11c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	2b0f      	cmp	r3, #15
 800a0b4:	d90b      	bls.n	800a0ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a0c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	665a      	str	r2, [r3, #100]	@ 0x64
 800a0cc:	e01d      	b.n	800a10a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	2b07      	cmp	r3, #7
 800a0d4:	d90b      	bls.n	800a0ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	8812      	ldrh	r2, [r2, #0]
 800a0de:	b292      	uxth	r2, r2
 800a0e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e6:	1c9a      	adds	r2, r3, #2
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	665a      	str	r2, [r3, #100]	@ 0x64
 800a0ec:	e00d      	b.n	800a10a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a110:	b29b      	uxth	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a122:	b29b      	uxth	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1c2      	bne.n	800a0ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f927 	bl	800a37c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8ed 	bl	800a320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a146:	e0d0      	b.n	800a2ea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a148:	7cfb      	ldrb	r3, [r7, #19]
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d103      	bne.n	800a156 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f8dc 	bl	800a30c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a154:	e0c6      	b.n	800a2e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a156:	7cfb      	ldrb	r3, [r7, #19]
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d103      	bne.n	800a164 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f8cb 	bl	800a2f8 <HAL_SPI_RxCpltCallback>
    return;
 800a162:	e0bf      	b.n	800a2e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a164:	7cfb      	ldrb	r3, [r7, #19]
 800a166:	2b03      	cmp	r3, #3
 800a168:	f040 80bc 	bne.w	800a2e4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7f7 fd2d 	bl	8001bcc <HAL_SPI_TxCpltCallback>
    return;
 800a172:	e0b7      	b.n	800a2e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 80b5 	beq.w	800a2ea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00f      	beq.n	800a1aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a190:	f043 0204 	orr.w	r2, r3, #4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	699a      	ldr	r2, [r3, #24]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00f      	beq.n	800a1d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ba:	f043 0201 	orr.w	r2, r3, #1
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00f      	beq.n	800a1fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e4:	f043 0208 	orr.w	r2, r3, #8
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	699a      	ldr	r2, [r3, #24]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00f      	beq.n	800a228 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a20e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699a      	ldr	r2, [r3, #24]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0220 	orr.w	r2, r2, #32
 800a226:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d05a      	beq.n	800a2e8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0201 	bic.w	r2, r2, #1
 800a240:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6919      	ldr	r1, [r3, #16]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b28      	ldr	r3, [pc, #160]	@ (800a2f0 <HAL_SPI_IRQHandler+0x394>)
 800a24e:	400b      	ands	r3, r1
 800a250:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a258:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a25c:	d138      	bne.n	800a2d0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a26c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d013      	beq.n	800a29e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a27a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2f4 <HAL_SPI_IRQHandler+0x398>)
 800a27c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a282:	4618      	mov	r0, r3
 800a284:	f7f9 fa6e 	bl	8003764 <HAL_DMA_Abort_IT>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a294:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d020      	beq.n	800a2e8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2aa:	4a12      	ldr	r2, [pc, #72]	@ (800a2f4 <HAL_SPI_IRQHandler+0x398>)
 800a2ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7f9 fa56 	bl	8003764 <HAL_DMA_Abort_IT>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d014      	beq.n	800a2e8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a2ce:	e00b      	b.n	800a2e8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f821 	bl	800a320 <HAL_SPI_ErrorCallback>
    return;
 800a2de:	e003      	b.n	800a2e8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a2e0:	bf00      	nop
 800a2e2:	e002      	b.n	800a2ea <HAL_SPI_IRQHandler+0x38e>
    return;
 800a2e4:	bf00      	nop
 800a2e6:	e000      	b.n	800a2ea <HAL_SPI_IRQHandler+0x38e>
    return;
 800a2e8:	bf00      	nop
  }
}
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	fffffc94 	.word	0xfffffc94
 800a2f4:	0800a349 	.word	0x0800a349

0800a2f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a354:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff ffd6 	bl	800a320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a374:	bf00      	nop
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0208 	orr.w	r2, r2, #8
 800a39a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	699a      	ldr	r2, [r3, #24]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0210 	orr.w	r2, r2, #16
 800a3aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f022 0201 	bic.w	r2, r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6919      	ldr	r1, [r3, #16]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a4b8 <SPI_CloseTransfer+0x13c>)
 800a3c8:	400b      	ands	r3, r1
 800a3ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a3da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d014      	beq.n	800a412 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00f      	beq.n	800a412 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f042 0220 	orr.w	r2, r2, #32
 800a410:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d014      	beq.n	800a448 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00f      	beq.n	800a448 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a42e:	f043 0204 	orr.w	r2, r3, #4
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a446:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00f      	beq.n	800a472 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a458:	f043 0201 	orr.w	r2, r3, #1
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a470:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00f      	beq.n	800a49c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a482:	f043 0208 	orr.w	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	699a      	ldr	r2, [r3, #24]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a49a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	fffffc90 	.word	0xfffffc90

0800a4bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a4cc:	e010      	b.n	800a4f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ce:	f7f7 ff19 	bl	8002304 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d803      	bhi.n	800a4e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d102      	bne.n	800a4ec <SPI_WaitOnFlagUntilTimeout+0x30>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e00f      	b.n	800a510 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	695a      	ldr	r2, [r3, #20]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	bf0c      	ite	eq
 800a500:	2301      	moveq	r3, #1
 800a502:	2300      	movne	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d0df      	beq.n	800a4ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a524:	095b      	lsrs	r3, r3, #5
 800a526:	3301      	adds	r3, #1
 800a528:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	3301      	adds	r3, #1
 800a530:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3307      	adds	r3, #7
 800a536:	08db      	lsrs	r3, r3, #3
 800a538:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d101      	bne.n	800a560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e042      	b.n	800a5e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7f7 f92a 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2224      	movs	r2, #36	@ 0x24
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0201 	bic.w	r2, r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fbed 	bl	800bd78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fe82 	bl	800b2a8 <UART_SetConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d101      	bne.n	800a5ae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e01b      	b.n	800a5e6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0201 	orr.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fc6c 	bl	800bebc <UART_CheckIdleState>
 800a5e4:	4603      	mov	r3, r0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b08a      	sub	sp, #40	@ 0x28
 800a5f2:	af02      	add	r7, sp, #8
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a604:	2b20      	cmp	r3, #32
 800a606:	d17b      	bne.n	800a700 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <HAL_UART_Transmit+0x26>
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e074      	b.n	800a702 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2221      	movs	r2, #33	@ 0x21
 800a624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a628:	f7f7 fe6c 	bl	8002304 <HAL_GetTick>
 800a62c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	88fa      	ldrh	r2, [r7, #6]
 800a632:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	88fa      	ldrh	r2, [r7, #6]
 800a63a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a646:	d108      	bne.n	800a65a <HAL_UART_Transmit+0x6c>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d104      	bne.n	800a65a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	61bb      	str	r3, [r7, #24]
 800a658:	e003      	b.n	800a662 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a662:	e030      	b.n	800a6c6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	2200      	movs	r2, #0
 800a66c:	2180      	movs	r1, #128	@ 0x80
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f001 fcce 	bl	800c010 <UART_WaitOnFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e03d      	b.n	800a702 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10b      	bne.n	800a6a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a69a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	3302      	adds	r3, #2
 800a6a0:	61bb      	str	r3, [r7, #24]
 800a6a2:	e007      	b.n	800a6b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1c8      	bne.n	800a664 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2140      	movs	r1, #64	@ 0x40
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f001 fc97 	bl	800c010 <UART_WaitOnFlagUntilTimeout>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e006      	b.n	800a702 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e000      	b.n	800a702 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b08a      	sub	sp, #40	@ 0x28
 800a70e:	af02      	add	r7, sp, #8
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a720:	2b20      	cmp	r3, #32
 800a722:	f040 80b5 	bne.w	800a890 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <HAL_UART_Receive+0x28>
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e0ad      	b.n	800a892 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2222      	movs	r2, #34	@ 0x22
 800a742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a74c:	f7f7 fdda 	bl	8002304 <HAL_GetTick>
 800a750:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	88fa      	ldrh	r2, [r7, #6]
 800a756:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	88fa      	ldrh	r2, [r7, #6]
 800a75e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a76a:	d10e      	bne.n	800a78a <HAL_UART_Receive+0x80>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d105      	bne.n	800a780 <HAL_UART_Receive+0x76>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a77a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a77e:	e02d      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	22ff      	movs	r2, #255	@ 0xff
 800a784:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a788:	e028      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10d      	bne.n	800a7ae <HAL_UART_Receive+0xa4>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d104      	bne.n	800a7a4 <HAL_UART_Receive+0x9a>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	22ff      	movs	r2, #255	@ 0xff
 800a79e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7a2:	e01b      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	227f      	movs	r2, #127	@ 0x7f
 800a7a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7ac:	e016      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b6:	d10d      	bne.n	800a7d4 <HAL_UART_Receive+0xca>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <HAL_UART_Receive+0xc0>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	227f      	movs	r2, #127	@ 0x7f
 800a7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7c8:	e008      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	223f      	movs	r2, #63	@ 0x3f
 800a7ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7d2:	e003      	b.n	800a7dc <HAL_UART_Receive+0xd2>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7ec:	d108      	bne.n	800a800 <HAL_UART_Receive+0xf6>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d104      	bne.n	800a800 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	61bb      	str	r3, [r7, #24]
 800a7fe:	e003      	b.n	800a808 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a808:	e036      	b.n	800a878 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2200      	movs	r2, #0
 800a812:	2120      	movs	r1, #32
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f001 fbfb 	bl	800c010 <UART_WaitOnFlagUntilTimeout>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e032      	b.n	800a892 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10c      	bne.n	800a84c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a838:	b29a      	uxth	r2, r3
 800a83a:	8a7b      	ldrh	r3, [r7, #18]
 800a83c:	4013      	ands	r3, r2
 800a83e:	b29a      	uxth	r2, r3
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	3302      	adds	r3, #2
 800a848:	61bb      	str	r3, [r7, #24]
 800a84a:	e00c      	b.n	800a866 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	b2da      	uxtb	r2, r3
 800a854:	8a7b      	ldrh	r3, [r7, #18]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	4013      	ands	r3, r2
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	3301      	adds	r3, #1
 800a864:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	3b01      	subs	r3, #1
 800a870:	b29a      	uxth	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a87e:	b29b      	uxth	r3, r3
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1c2      	bne.n	800a80a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	e000      	b.n	800a892 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a890:	2302      	movs	r3, #2
  }
}
 800a892:	4618      	mov	r0, r3
 800a894:	3720      	adds	r7, #32
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	@ 0x28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d137      	bne.n	800a924 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <HAL_UART_Receive_DMA+0x24>
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e030      	b.n	800a926 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a18      	ldr	r2, [pc, #96]	@ (800a930 <HAL_UART_Receive_DMA+0x94>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d01f      	beq.n	800a914 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d018      	beq.n	800a914 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	623b      	str	r3, [r7, #32]
 800a902:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	69f9      	ldr	r1, [r7, #28]
 800a906:	6a3a      	ldr	r2, [r7, #32]
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e6      	bne.n	800a8e2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a914:	88fb      	ldrh	r3, [r7, #6]
 800a916:	461a      	mov	r2, r3
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 fbe6 	bl	800c0ec <UART_Start_Receive_DMA>
 800a920:	4603      	mov	r3, r0
 800a922:	e000      	b.n	800a926 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a924:	2302      	movs	r3, #2
  }
}
 800a926:	4618      	mov	r0, r3
 800a928:	3728      	adds	r7, #40	@ 0x28
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	58000c00 	.word	0x58000c00

0800a934 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b09a      	sub	sp, #104	@ 0x68
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a94c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a950:	667b      	str	r3, [r7, #100]	@ 0x64
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a95a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a95c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e6      	bne.n	800a93c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a980:	4b46      	ldr	r3, [pc, #280]	@ (800aa9c <HAL_UART_AbortReceive+0x168>)
 800a982:	4013      	ands	r3, r2
 800a984:	663b      	str	r3, [r7, #96]	@ 0x60
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3308      	adds	r3, #8
 800a98c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a98e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e5      	bne.n	800a96e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d118      	bne.n	800a9dc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	f023 0310 	bic.w	r3, r3, #16
 800a9be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e6      	bne.n	800a9aa <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e6:	2b40      	cmp	r3, #64	@ 0x40
 800a9e8:	d13b      	bne.n	800aa62 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa00:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3308      	adds	r3, #8
 800aa08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa0a:	61ba      	str	r2, [r7, #24]
 800aa0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6979      	ldr	r1, [r7, #20]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	613b      	str	r3, [r7, #16]
   return(result);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e5      	bne.n	800a9ea <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01c      	beq.n	800aa62 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2e:	2200      	movs	r2, #0
 800aa30:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f8 fb75 	bl	8003128 <HAL_DMA_Abort>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00e      	beq.n	800aa62 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f9 fffa 	bl	8004a44 <HAL_DMA_GetError>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b20      	cmp	r3, #32
 800aa54:	d105      	bne.n	800aa62 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2210      	movs	r2, #16
 800aa5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e017      	b.n	800aa92 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	220f      	movs	r2, #15
 800aa70:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	699a      	ldr	r2, [r3, #24]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0208 	orr.w	r2, r2, #8
 800aa80:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3768      	adds	r7, #104	@ 0x68
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	effffffe 	.word	0xeffffffe

0800aaa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b0ba      	sub	sp, #232	@ 0xe8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aaca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aace:	4013      	ands	r3, r2
 800aad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d11b      	bne.n	800ab14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d015      	beq.n	800ab14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaec:	f003 0320 	and.w	r3, r3, #32
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8393 	beq.w	800b230 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
      }
      return;
 800ab12:	e38d      	b.n	800b230 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 8123 	beq.w	800ad64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab22:	4b8d      	ldr	r3, [pc, #564]	@ (800ad58 <HAL_UART_IRQHandler+0x2b8>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ab2e:	4b8b      	ldr	r3, [pc, #556]	@ (800ad5c <HAL_UART_IRQHandler+0x2bc>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 8116 	beq.w	800ad64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d011      	beq.n	800ab68 <HAL_UART_IRQHandler+0xc8>
 800ab44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2201      	movs	r2, #1
 800ab56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5e:	f043 0201 	orr.w	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d011      	beq.n	800ab98 <HAL_UART_IRQHandler+0xf8>
 800ab74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2202      	movs	r2, #2
 800ab86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab8e:	f043 0204 	orr.w	r2, r3, #4
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d011      	beq.n	800abc8 <HAL_UART_IRQHandler+0x128>
 800aba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2204      	movs	r2, #4
 800abb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abbe:	f043 0202 	orr.w	r2, r3, #2
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d017      	beq.n	800ac04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800abe0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800abe4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad58 <HAL_UART_IRQHandler+0x2b8>)
 800abe6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2208      	movs	r2, #8
 800abf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abfa:	f043 0208 	orr.w	r2, r3, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d012      	beq.n	800ac36 <HAL_UART_IRQHandler+0x196>
 800ac10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00c      	beq.n	800ac36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2c:	f043 0220 	orr.w	r2, r3, #32
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 82f9 	beq.w	800b234 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d013      	beq.n	800ac76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8a:	2b40      	cmp	r3, #64	@ 0x40
 800ac8c:	d005      	beq.n	800ac9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d054      	beq.n	800ad44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 fb0e 	bl	800c2bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acaa:	2b40      	cmp	r3, #64	@ 0x40
 800acac:	d146      	bne.n	800ad3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3308      	adds	r3, #8
 800acb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800acc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800accc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3308      	adds	r3, #8
 800acd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800acda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800acde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ace6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1d9      	bne.n	800acae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d017      	beq.n	800ad34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad0a:	4a15      	ldr	r2, [pc, #84]	@ (800ad60 <HAL_UART_IRQHandler+0x2c0>)
 800ad0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f8 fd25 	bl	8003764 <HAL_DMA_Abort_IT>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d019      	beq.n	800ad54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad32:	e00f      	b.n	800ad54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7f6 ff1b 	bl	8001b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad3a:	e00b      	b.n	800ad54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7f6 ff17 	bl	8001b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad42:	e007      	b.n	800ad54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7f6 ff13 	bl	8001b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ad52:	e26f      	b.n	800b234 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad54:	bf00      	nop
    return;
 800ad56:	e26d      	b.n	800b234 <HAL_UART_IRQHandler+0x794>
 800ad58:	10000001 	.word	0x10000001
 800ad5c:	04000120 	.word	0x04000120
 800ad60:	0800c56f 	.word	0x0800c56f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	f040 8203 	bne.w	800b174 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad72:	f003 0310 	and.w	r3, r3, #16
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 81fc 	beq.w	800b174 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 81f5 	beq.w	800b174 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2210      	movs	r2, #16
 800ad90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9c:	2b40      	cmp	r3, #64	@ 0x40
 800ad9e:	f040 816d 	bne.w	800b07c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4aa4      	ldr	r2, [pc, #656]	@ (800b03c <HAL_UART_IRQHandler+0x59c>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d068      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4aa1      	ldr	r2, [pc, #644]	@ (800b040 <HAL_UART_IRQHandler+0x5a0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d061      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a9f      	ldr	r2, [pc, #636]	@ (800b044 <HAL_UART_IRQHandler+0x5a4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d05a      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a9c      	ldr	r2, [pc, #624]	@ (800b048 <HAL_UART_IRQHandler+0x5a8>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d053      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a9a      	ldr	r2, [pc, #616]	@ (800b04c <HAL_UART_IRQHandler+0x5ac>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d04c      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a97      	ldr	r2, [pc, #604]	@ (800b050 <HAL_UART_IRQHandler+0x5b0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d045      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a95      	ldr	r2, [pc, #596]	@ (800b054 <HAL_UART_IRQHandler+0x5b4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d03e      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a92      	ldr	r2, [pc, #584]	@ (800b058 <HAL_UART_IRQHandler+0x5b8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d037      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a90      	ldr	r2, [pc, #576]	@ (800b05c <HAL_UART_IRQHandler+0x5bc>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d030      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a8d      	ldr	r2, [pc, #564]	@ (800b060 <HAL_UART_IRQHandler+0x5c0>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d029      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a8b      	ldr	r2, [pc, #556]	@ (800b064 <HAL_UART_IRQHandler+0x5c4>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d022      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a88      	ldr	r2, [pc, #544]	@ (800b068 <HAL_UART_IRQHandler+0x5c8>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d01b      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a86      	ldr	r2, [pc, #536]	@ (800b06c <HAL_UART_IRQHandler+0x5cc>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d014      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a83      	ldr	r2, [pc, #524]	@ (800b070 <HAL_UART_IRQHandler+0x5d0>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00d      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a81      	ldr	r2, [pc, #516]	@ (800b074 <HAL_UART_IRQHandler+0x5d4>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d006      	beq.n	800ae82 <HAL_UART_IRQHandler+0x3e2>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a7e      	ldr	r2, [pc, #504]	@ (800b078 <HAL_UART_IRQHandler+0x5d8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d106      	bne.n	800ae90 <HAL_UART_IRQHandler+0x3f0>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	e005      	b.n	800ae9c <HAL_UART_IRQHandler+0x3fc>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80ad 	beq.w	800b004 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aeb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	f080 80a5 	bcs.w	800b004 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aec0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aed0:	f000 8087 	beq.w	800afe2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aeec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aefe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1da      	bne.n	800aed4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3308      	adds	r3, #8
 800af24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af30:	f023 0301 	bic.w	r3, r3, #1
 800af34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3308      	adds	r3, #8
 800af3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e1      	bne.n	800af1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3308      	adds	r3, #8
 800af7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e3      	bne.n	800af5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afb0:	f023 0310 	bic.w	r3, r3, #16
 800afb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e4      	bne.n	800afa0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f8 f8a3 	bl	8003128 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2202      	movs	r2, #2
 800afe6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f939 	bl	800b274 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b002:	e119      	b.n	800b238 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b00a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b00e:	429a      	cmp	r2, r3
 800b010:	f040 8112 	bne.w	800b238 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b020:	f040 810a 	bne.w	800b238 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f91e 	bl	800b274 <HAL_UARTEx_RxEventCallback>
      return;
 800b038:	e0fe      	b.n	800b238 <HAL_UART_IRQHandler+0x798>
 800b03a:	bf00      	nop
 800b03c:	40020010 	.word	0x40020010
 800b040:	40020028 	.word	0x40020028
 800b044:	40020040 	.word	0x40020040
 800b048:	40020058 	.word	0x40020058
 800b04c:	40020070 	.word	0x40020070
 800b050:	40020088 	.word	0x40020088
 800b054:	400200a0 	.word	0x400200a0
 800b058:	400200b8 	.word	0x400200b8
 800b05c:	40020410 	.word	0x40020410
 800b060:	40020428 	.word	0x40020428
 800b064:	40020440 	.word	0x40020440
 800b068:	40020458 	.word	0x40020458
 800b06c:	40020470 	.word	0x40020470
 800b070:	40020488 	.word	0x40020488
 800b074:	400204a0 	.word	0x400204a0
 800b078:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b088:	b29b      	uxth	r3, r3
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b096:	b29b      	uxth	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80cf 	beq.w	800b23c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b09e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80ca 	beq.w	800b23c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e4      	bne.n	800b0a8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ee:	6a3a      	ldr	r2, [r7, #32]
 800b0f0:	4b55      	ldr	r3, [pc, #340]	@ (800b248 <HAL_UART_IRQHandler+0x7a8>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b102:	633a      	str	r2, [r7, #48]	@ 0x30
 800b104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e3      	bne.n	800b0de <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2220      	movs	r2, #32
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	60fb      	str	r3, [r7, #12]
   return(result);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 0310 	bic.w	r3, r3, #16
 800b13e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b14c:	61fb      	str	r3, [r7, #28]
 800b14e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	69b9      	ldr	r1, [r7, #24]
 800b152:	69fa      	ldr	r2, [r7, #28]
 800b154:	e841 2300 	strex	r3, r2, [r1]
 800b158:	617b      	str	r3, [r7, #20]
   return(result);
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e4      	bne.n	800b12a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f881 	bl	800b274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b172:	e063      	b.n	800b23c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00e      	beq.n	800b19e <HAL_UART_IRQHandler+0x6fe>
 800b180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d008      	beq.n	800b19e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fa26 	bl	800c5e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b19c:	e051      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d014      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d105      	bne.n	800b1c2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d008      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d03a      	beq.n	800b240 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	4798      	blx	r3
    }
    return;
 800b1d2:	e035      	b.n	800b240 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d009      	beq.n	800b1f4 <HAL_UART_IRQHandler+0x754>
 800b1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 f9d0 	bl	800c592 <UART_EndTransmit_IT>
    return;
 800b1f2:	e026      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d009      	beq.n	800b214 <HAL_UART_IRQHandler+0x774>
 800b200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b204:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 f9ff 	bl	800c610 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b212:	e016      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <HAL_UART_IRQHandler+0x7a2>
 800b220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b224:	2b00      	cmp	r3, #0
 800b226:	da0c      	bge.n	800b242 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 f9e7 	bl	800c5fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b22e:	e008      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b230:	bf00      	nop
 800b232:	e006      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
    return;
 800b234:	bf00      	nop
 800b236:	e004      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b238:	bf00      	nop
 800b23a:	e002      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b23c:	bf00      	nop
 800b23e:	e000      	b.n	800b242 <HAL_UART_IRQHandler+0x7a2>
    return;
 800b240:	bf00      	nop
  }
}
 800b242:	37e8      	adds	r7, #232	@ 0xe8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	effffffe 	.word	0xeffffffe

0800b24c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ac:	b092      	sub	sp, #72	@ 0x48
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4bbe      	ldr	r3, [pc, #760]	@ (800b5d0 <UART_SetConfig+0x328>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4ab3      	ldr	r2, [pc, #716]	@ (800b5d4 <UART_SetConfig+0x32c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d004      	beq.n	800b314 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b310:	4313      	orrs	r3, r2
 800b312:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689a      	ldr	r2, [r3, #8]
 800b31a:	4baf      	ldr	r3, [pc, #700]	@ (800b5d8 <UART_SetConfig+0x330>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b324:	430b      	orrs	r3, r1
 800b326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	f023 010f 	bic.w	r1, r3, #15
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4aa6      	ldr	r2, [pc, #664]	@ (800b5dc <UART_SetConfig+0x334>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d177      	bne.n	800b438 <UART_SetConfig+0x190>
 800b348:	4ba5      	ldr	r3, [pc, #660]	@ (800b5e0 <UART_SetConfig+0x338>)
 800b34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b34c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b350:	2b28      	cmp	r3, #40	@ 0x28
 800b352:	d86d      	bhi.n	800b430 <UART_SetConfig+0x188>
 800b354:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <UART_SetConfig+0xb4>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b401 	.word	0x0800b401
 800b360:	0800b431 	.word	0x0800b431
 800b364:	0800b431 	.word	0x0800b431
 800b368:	0800b431 	.word	0x0800b431
 800b36c:	0800b431 	.word	0x0800b431
 800b370:	0800b431 	.word	0x0800b431
 800b374:	0800b431 	.word	0x0800b431
 800b378:	0800b431 	.word	0x0800b431
 800b37c:	0800b409 	.word	0x0800b409
 800b380:	0800b431 	.word	0x0800b431
 800b384:	0800b431 	.word	0x0800b431
 800b388:	0800b431 	.word	0x0800b431
 800b38c:	0800b431 	.word	0x0800b431
 800b390:	0800b431 	.word	0x0800b431
 800b394:	0800b431 	.word	0x0800b431
 800b398:	0800b431 	.word	0x0800b431
 800b39c:	0800b411 	.word	0x0800b411
 800b3a0:	0800b431 	.word	0x0800b431
 800b3a4:	0800b431 	.word	0x0800b431
 800b3a8:	0800b431 	.word	0x0800b431
 800b3ac:	0800b431 	.word	0x0800b431
 800b3b0:	0800b431 	.word	0x0800b431
 800b3b4:	0800b431 	.word	0x0800b431
 800b3b8:	0800b431 	.word	0x0800b431
 800b3bc:	0800b419 	.word	0x0800b419
 800b3c0:	0800b431 	.word	0x0800b431
 800b3c4:	0800b431 	.word	0x0800b431
 800b3c8:	0800b431 	.word	0x0800b431
 800b3cc:	0800b431 	.word	0x0800b431
 800b3d0:	0800b431 	.word	0x0800b431
 800b3d4:	0800b431 	.word	0x0800b431
 800b3d8:	0800b431 	.word	0x0800b431
 800b3dc:	0800b421 	.word	0x0800b421
 800b3e0:	0800b431 	.word	0x0800b431
 800b3e4:	0800b431 	.word	0x0800b431
 800b3e8:	0800b431 	.word	0x0800b431
 800b3ec:	0800b431 	.word	0x0800b431
 800b3f0:	0800b431 	.word	0x0800b431
 800b3f4:	0800b431 	.word	0x0800b431
 800b3f8:	0800b431 	.word	0x0800b431
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e222      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b408:	2304      	movs	r3, #4
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e21e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b410:	2308      	movs	r3, #8
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e21a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b418:	2310      	movs	r3, #16
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e216      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b420:	2320      	movs	r3, #32
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e212      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b428:	2340      	movs	r3, #64	@ 0x40
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e20e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b430:	2380      	movs	r3, #128	@ 0x80
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e20a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a69      	ldr	r2, [pc, #420]	@ (800b5e4 <UART_SetConfig+0x33c>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d130      	bne.n	800b4a4 <UART_SetConfig+0x1fc>
 800b442:	4b67      	ldr	r3, [pc, #412]	@ (800b5e0 <UART_SetConfig+0x338>)
 800b444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b05      	cmp	r3, #5
 800b44c:	d826      	bhi.n	800b49c <UART_SetConfig+0x1f4>
 800b44e:	a201      	add	r2, pc, #4	@ (adr r2, 800b454 <UART_SetConfig+0x1ac>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b475 	.word	0x0800b475
 800b45c:	0800b47d 	.word	0x0800b47d
 800b460:	0800b485 	.word	0x0800b485
 800b464:	0800b48d 	.word	0x0800b48d
 800b468:	0800b495 	.word	0x0800b495
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e1ec      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b474:	2304      	movs	r3, #4
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e1e8      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b47c:	2308      	movs	r3, #8
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e1e4      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b484:	2310      	movs	r3, #16
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e1e0      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b48c:	2320      	movs	r3, #32
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e1dc      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b494:	2340      	movs	r3, #64	@ 0x40
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e1d8      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e1d4      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a4f      	ldr	r2, [pc, #316]	@ (800b5e8 <UART_SetConfig+0x340>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d130      	bne.n	800b510 <UART_SetConfig+0x268>
 800b4ae:	4b4c      	ldr	r3, [pc, #304]	@ (800b5e0 <UART_SetConfig+0x338>)
 800b4b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d826      	bhi.n	800b508 <UART_SetConfig+0x260>
 800b4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c0 <UART_SetConfig+0x218>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4e1 	.word	0x0800b4e1
 800b4c8:	0800b4e9 	.word	0x0800b4e9
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e1b6      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e1b2      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e1ae      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e1aa      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e1a6      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b500:	2340      	movs	r3, #64	@ 0x40
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e1a2      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b508:	2380      	movs	r3, #128	@ 0x80
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50e:	e19e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a35      	ldr	r2, [pc, #212]	@ (800b5ec <UART_SetConfig+0x344>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d130      	bne.n	800b57c <UART_SetConfig+0x2d4>
 800b51a:	4b31      	ldr	r3, [pc, #196]	@ (800b5e0 <UART_SetConfig+0x338>)
 800b51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	2b05      	cmp	r3, #5
 800b524:	d826      	bhi.n	800b574 <UART_SetConfig+0x2cc>
 800b526:	a201      	add	r2, pc, #4	@ (adr r2, 800b52c <UART_SetConfig+0x284>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b545 	.word	0x0800b545
 800b530:	0800b54d 	.word	0x0800b54d
 800b534:	0800b555 	.word	0x0800b555
 800b538:	0800b55d 	.word	0x0800b55d
 800b53c:	0800b565 	.word	0x0800b565
 800b540:	0800b56d 	.word	0x0800b56d
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e180      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e17c      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b554:	2308      	movs	r3, #8
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e178      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b562:	e174      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b564:	2320      	movs	r3, #32
 800b566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56a:	e170      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b56c:	2340      	movs	r3, #64	@ 0x40
 800b56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b572:	e16c      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b574:	2380      	movs	r3, #128	@ 0x80
 800b576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57a:	e168      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a1b      	ldr	r2, [pc, #108]	@ (800b5f0 <UART_SetConfig+0x348>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d142      	bne.n	800b60c <UART_SetConfig+0x364>
 800b586:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <UART_SetConfig+0x338>)
 800b588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b58a:	f003 0307 	and.w	r3, r3, #7
 800b58e:	2b05      	cmp	r3, #5
 800b590:	d838      	bhi.n	800b604 <UART_SetConfig+0x35c>
 800b592:	a201      	add	r2, pc, #4	@ (adr r2, 800b598 <UART_SetConfig+0x2f0>)
 800b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b598:	0800b5b1 	.word	0x0800b5b1
 800b59c:	0800b5b9 	.word	0x0800b5b9
 800b5a0:	0800b5c1 	.word	0x0800b5c1
 800b5a4:	0800b5c9 	.word	0x0800b5c9
 800b5a8:	0800b5f5 	.word	0x0800b5f5
 800b5ac:	0800b5fd 	.word	0x0800b5fd
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b6:	e14a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b5b8:	2304      	movs	r3, #4
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5be:	e146      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b5c0:	2308      	movs	r3, #8
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c6:	e142      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b5c8:	2310      	movs	r3, #16
 800b5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ce:	e13e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b5d0:	cfff69f3 	.word	0xcfff69f3
 800b5d4:	58000c00 	.word	0x58000c00
 800b5d8:	11fff4ff 	.word	0x11fff4ff
 800b5dc:	40011000 	.word	0x40011000
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	40004400 	.word	0x40004400
 800b5e8:	40004800 	.word	0x40004800
 800b5ec:	40004c00 	.word	0x40004c00
 800b5f0:	40005000 	.word	0x40005000
 800b5f4:	2320      	movs	r3, #32
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e128      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b5fc:	2340      	movs	r3, #64	@ 0x40
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e124      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b604:	2380      	movs	r3, #128	@ 0x80
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e120      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4acb      	ldr	r2, [pc, #812]	@ (800b940 <UART_SetConfig+0x698>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d176      	bne.n	800b704 <UART_SetConfig+0x45c>
 800b616:	4bcb      	ldr	r3, [pc, #812]	@ (800b944 <UART_SetConfig+0x69c>)
 800b618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b61a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b61e:	2b28      	cmp	r3, #40	@ 0x28
 800b620:	d86c      	bhi.n	800b6fc <UART_SetConfig+0x454>
 800b622:	a201      	add	r2, pc, #4	@ (adr r2, 800b628 <UART_SetConfig+0x380>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b6cd 	.word	0x0800b6cd
 800b62c:	0800b6fd 	.word	0x0800b6fd
 800b630:	0800b6fd 	.word	0x0800b6fd
 800b634:	0800b6fd 	.word	0x0800b6fd
 800b638:	0800b6fd 	.word	0x0800b6fd
 800b63c:	0800b6fd 	.word	0x0800b6fd
 800b640:	0800b6fd 	.word	0x0800b6fd
 800b644:	0800b6fd 	.word	0x0800b6fd
 800b648:	0800b6d5 	.word	0x0800b6d5
 800b64c:	0800b6fd 	.word	0x0800b6fd
 800b650:	0800b6fd 	.word	0x0800b6fd
 800b654:	0800b6fd 	.word	0x0800b6fd
 800b658:	0800b6fd 	.word	0x0800b6fd
 800b65c:	0800b6fd 	.word	0x0800b6fd
 800b660:	0800b6fd 	.word	0x0800b6fd
 800b664:	0800b6fd 	.word	0x0800b6fd
 800b668:	0800b6dd 	.word	0x0800b6dd
 800b66c:	0800b6fd 	.word	0x0800b6fd
 800b670:	0800b6fd 	.word	0x0800b6fd
 800b674:	0800b6fd 	.word	0x0800b6fd
 800b678:	0800b6fd 	.word	0x0800b6fd
 800b67c:	0800b6fd 	.word	0x0800b6fd
 800b680:	0800b6fd 	.word	0x0800b6fd
 800b684:	0800b6fd 	.word	0x0800b6fd
 800b688:	0800b6e5 	.word	0x0800b6e5
 800b68c:	0800b6fd 	.word	0x0800b6fd
 800b690:	0800b6fd 	.word	0x0800b6fd
 800b694:	0800b6fd 	.word	0x0800b6fd
 800b698:	0800b6fd 	.word	0x0800b6fd
 800b69c:	0800b6fd 	.word	0x0800b6fd
 800b6a0:	0800b6fd 	.word	0x0800b6fd
 800b6a4:	0800b6fd 	.word	0x0800b6fd
 800b6a8:	0800b6ed 	.word	0x0800b6ed
 800b6ac:	0800b6fd 	.word	0x0800b6fd
 800b6b0:	0800b6fd 	.word	0x0800b6fd
 800b6b4:	0800b6fd 	.word	0x0800b6fd
 800b6b8:	0800b6fd 	.word	0x0800b6fd
 800b6bc:	0800b6fd 	.word	0x0800b6fd
 800b6c0:	0800b6fd 	.word	0x0800b6fd
 800b6c4:	0800b6fd 	.word	0x0800b6fd
 800b6c8:	0800b6f5 	.word	0x0800b6f5
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e0bc      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6d4:	2304      	movs	r3, #4
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e0b8      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6dc:	2308      	movs	r3, #8
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e0b4      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e0b0      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6ec:	2320      	movs	r3, #32
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e0ac      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6f4:	2340      	movs	r3, #64	@ 0x40
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e0a8      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b6fc:	2380      	movs	r3, #128	@ 0x80
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e0a4      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a8f      	ldr	r2, [pc, #572]	@ (800b948 <UART_SetConfig+0x6a0>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d130      	bne.n	800b770 <UART_SetConfig+0x4c8>
 800b70e:	4b8d      	ldr	r3, [pc, #564]	@ (800b944 <UART_SetConfig+0x69c>)
 800b710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b05      	cmp	r3, #5
 800b718:	d826      	bhi.n	800b768 <UART_SetConfig+0x4c0>
 800b71a:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <UART_SetConfig+0x478>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b739 	.word	0x0800b739
 800b724:	0800b741 	.word	0x0800b741
 800b728:	0800b749 	.word	0x0800b749
 800b72c:	0800b751 	.word	0x0800b751
 800b730:	0800b759 	.word	0x0800b759
 800b734:	0800b761 	.word	0x0800b761
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e086      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b740:	2304      	movs	r3, #4
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e082      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b748:	2308      	movs	r3, #8
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e07e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b750:	2310      	movs	r3, #16
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e07a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b758:	2320      	movs	r3, #32
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e076      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b760:	2340      	movs	r3, #64	@ 0x40
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b766:	e072      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b768:	2380      	movs	r3, #128	@ 0x80
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76e:	e06e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a75      	ldr	r2, [pc, #468]	@ (800b94c <UART_SetConfig+0x6a4>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d130      	bne.n	800b7dc <UART_SetConfig+0x534>
 800b77a:	4b72      	ldr	r3, [pc, #456]	@ (800b944 <UART_SetConfig+0x69c>)
 800b77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	2b05      	cmp	r3, #5
 800b784:	d826      	bhi.n	800b7d4 <UART_SetConfig+0x52c>
 800b786:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <UART_SetConfig+0x4e4>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b7ad 	.word	0x0800b7ad
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b7bd 	.word	0x0800b7bd
 800b79c:	0800b7c5 	.word	0x0800b7c5
 800b7a0:	0800b7cd 	.word	0x0800b7cd
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e050      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7ac:	2304      	movs	r3, #4
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e04c      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ba:	e048      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7bc:	2310      	movs	r3, #16
 800b7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c2:	e044      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7c4:	2320      	movs	r3, #32
 800b7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ca:	e040      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7cc:	2340      	movs	r3, #64	@ 0x40
 800b7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d2:	e03c      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7d4:	2380      	movs	r3, #128	@ 0x80
 800b7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7da:	e038      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a5b      	ldr	r2, [pc, #364]	@ (800b950 <UART_SetConfig+0x6a8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d130      	bne.n	800b848 <UART_SetConfig+0x5a0>
 800b7e6:	4b57      	ldr	r3, [pc, #348]	@ (800b944 <UART_SetConfig+0x69c>)
 800b7e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7ea:	f003 0307 	and.w	r3, r3, #7
 800b7ee:	2b05      	cmp	r3, #5
 800b7f0:	d826      	bhi.n	800b840 <UART_SetConfig+0x598>
 800b7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f8 <UART_SetConfig+0x550>)
 800b7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f8:	0800b811 	.word	0x0800b811
 800b7fc:	0800b819 	.word	0x0800b819
 800b800:	0800b821 	.word	0x0800b821
 800b804:	0800b829 	.word	0x0800b829
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	2302      	movs	r3, #2
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e01a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b818:	2304      	movs	r3, #4
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e016      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b820:	2308      	movs	r3, #8
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e012      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b828:	2310      	movs	r3, #16
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e00e      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b830:	2320      	movs	r3, #32
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e00a      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b838:	2340      	movs	r3, #64	@ 0x40
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83e:	e006      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b840:	2380      	movs	r3, #128	@ 0x80
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b846:	e002      	b.n	800b84e <UART_SetConfig+0x5a6>
 800b848:	2380      	movs	r3, #128	@ 0x80
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a3f      	ldr	r2, [pc, #252]	@ (800b950 <UART_SetConfig+0x6a8>)
 800b854:	4293      	cmp	r3, r2
 800b856:	f040 80f8 	bne.w	800ba4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b85a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b85e:	2b20      	cmp	r3, #32
 800b860:	dc46      	bgt.n	800b8f0 <UART_SetConfig+0x648>
 800b862:	2b02      	cmp	r3, #2
 800b864:	f2c0 8082 	blt.w	800b96c <UART_SetConfig+0x6c4>
 800b868:	3b02      	subs	r3, #2
 800b86a:	2b1e      	cmp	r3, #30
 800b86c:	d87e      	bhi.n	800b96c <UART_SetConfig+0x6c4>
 800b86e:	a201      	add	r2, pc, #4	@ (adr r2, 800b874 <UART_SetConfig+0x5cc>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b8f7 	.word	0x0800b8f7
 800b878:	0800b96d 	.word	0x0800b96d
 800b87c:	0800b8ff 	.word	0x0800b8ff
 800b880:	0800b96d 	.word	0x0800b96d
 800b884:	0800b96d 	.word	0x0800b96d
 800b888:	0800b96d 	.word	0x0800b96d
 800b88c:	0800b90f 	.word	0x0800b90f
 800b890:	0800b96d 	.word	0x0800b96d
 800b894:	0800b96d 	.word	0x0800b96d
 800b898:	0800b96d 	.word	0x0800b96d
 800b89c:	0800b96d 	.word	0x0800b96d
 800b8a0:	0800b96d 	.word	0x0800b96d
 800b8a4:	0800b96d 	.word	0x0800b96d
 800b8a8:	0800b96d 	.word	0x0800b96d
 800b8ac:	0800b91f 	.word	0x0800b91f
 800b8b0:	0800b96d 	.word	0x0800b96d
 800b8b4:	0800b96d 	.word	0x0800b96d
 800b8b8:	0800b96d 	.word	0x0800b96d
 800b8bc:	0800b96d 	.word	0x0800b96d
 800b8c0:	0800b96d 	.word	0x0800b96d
 800b8c4:	0800b96d 	.word	0x0800b96d
 800b8c8:	0800b96d 	.word	0x0800b96d
 800b8cc:	0800b96d 	.word	0x0800b96d
 800b8d0:	0800b96d 	.word	0x0800b96d
 800b8d4:	0800b96d 	.word	0x0800b96d
 800b8d8:	0800b96d 	.word	0x0800b96d
 800b8dc:	0800b96d 	.word	0x0800b96d
 800b8e0:	0800b96d 	.word	0x0800b96d
 800b8e4:	0800b96d 	.word	0x0800b96d
 800b8e8:	0800b96d 	.word	0x0800b96d
 800b8ec:	0800b95f 	.word	0x0800b95f
 800b8f0:	2b40      	cmp	r3, #64	@ 0x40
 800b8f2:	d037      	beq.n	800b964 <UART_SetConfig+0x6bc>
 800b8f4:	e03a      	b.n	800b96c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8f6:	f7fd f98b 	bl	8008c10 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8fc:	e03c      	b.n	800b978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd f99a 	bl	8008c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90c:	e034      	b.n	800b978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90e:	f107 0318 	add.w	r3, r7, #24
 800b912:	4618      	mov	r0, r3
 800b914:	f7fd fae6 	bl	8008ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91c:	e02c      	b.n	800b978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <UART_SetConfig+0x69c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0320 	and.w	r3, r3, #32
 800b926:	2b00      	cmp	r3, #0
 800b928:	d016      	beq.n	800b958 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b92a:	4b06      	ldr	r3, [pc, #24]	@ (800b944 <UART_SetConfig+0x69c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	08db      	lsrs	r3, r3, #3
 800b930:	f003 0303 	and.w	r3, r3, #3
 800b934:	4a07      	ldr	r2, [pc, #28]	@ (800b954 <UART_SetConfig+0x6ac>)
 800b936:	fa22 f303 	lsr.w	r3, r2, r3
 800b93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b93c:	e01c      	b.n	800b978 <UART_SetConfig+0x6d0>
 800b93e:	bf00      	nop
 800b940:	40011400 	.word	0x40011400
 800b944:	58024400 	.word	0x58024400
 800b948:	40007800 	.word	0x40007800
 800b94c:	40007c00 	.word	0x40007c00
 800b950:	58000c00 	.word	0x58000c00
 800b954:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b958:	4b9d      	ldr	r3, [pc, #628]	@ (800bbd0 <UART_SetConfig+0x928>)
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95c:	e00c      	b.n	800b978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b95e:	4b9d      	ldr	r3, [pc, #628]	@ (800bbd4 <UART_SetConfig+0x92c>)
 800b960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b962:	e009      	b.n	800b978 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96a:	e005      	b.n	800b978 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b976:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 81de 	beq.w	800bd3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b984:	4a94      	ldr	r2, [pc, #592]	@ (800bbd8 <UART_SetConfig+0x930>)
 800b986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b98a:	461a      	mov	r2, r3
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b992:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	4613      	mov	r3, r2
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	4413      	add	r3, r2
 800b99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d305      	bcc.n	800b9b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d903      	bls.n	800b9b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9b6:	e1c1      	b.n	800bd3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	60bb      	str	r3, [r7, #8]
 800b9be:	60fa      	str	r2, [r7, #12]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c4:	4a84      	ldr	r2, [pc, #528]	@ (800bbd8 <UART_SetConfig+0x930>)
 800b9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	607a      	str	r2, [r7, #4]
 800b9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9da:	f7f4 fcd9 	bl	8000390 <__aeabi_uldivmod>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f04f 0200 	mov.w	r2, #0
 800b9ea:	f04f 0300 	mov.w	r3, #0
 800b9ee:	020b      	lsls	r3, r1, #8
 800b9f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9f4:	0202      	lsls	r2, r0, #8
 800b9f6:	6979      	ldr	r1, [r7, #20]
 800b9f8:	6849      	ldr	r1, [r1, #4]
 800b9fa:	0849      	lsrs	r1, r1, #1
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4605      	mov	r5, r0
 800ba02:	eb12 0804 	adds.w	r8, r2, r4
 800ba06:	eb43 0905 	adc.w	r9, r3, r5
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	469a      	mov	sl, r3
 800ba12:	4693      	mov	fp, r2
 800ba14:	4652      	mov	r2, sl
 800ba16:	465b      	mov	r3, fp
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	f7f4 fcb8 	bl	8000390 <__aeabi_uldivmod>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4613      	mov	r3, r2
 800ba26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba2e:	d308      	bcc.n	800ba42 <UART_SetConfig+0x79a>
 800ba30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba36:	d204      	bcs.n	800ba42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba3e:	60da      	str	r2, [r3, #12]
 800ba40:	e17c      	b.n	800bd3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba48:	e178      	b.n	800bd3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba52:	f040 80c5 	bne.w	800bbe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba5a:	2b20      	cmp	r3, #32
 800ba5c:	dc48      	bgt.n	800baf0 <UART_SetConfig+0x848>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	db7b      	blt.n	800bb5a <UART_SetConfig+0x8b2>
 800ba62:	2b20      	cmp	r3, #32
 800ba64:	d879      	bhi.n	800bb5a <UART_SetConfig+0x8b2>
 800ba66:	a201      	add	r2, pc, #4	@ (adr r2, 800ba6c <UART_SetConfig+0x7c4>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800baf7 	.word	0x0800baf7
 800ba70:	0800baff 	.word	0x0800baff
 800ba74:	0800bb5b 	.word	0x0800bb5b
 800ba78:	0800bb5b 	.word	0x0800bb5b
 800ba7c:	0800bb07 	.word	0x0800bb07
 800ba80:	0800bb5b 	.word	0x0800bb5b
 800ba84:	0800bb5b 	.word	0x0800bb5b
 800ba88:	0800bb5b 	.word	0x0800bb5b
 800ba8c:	0800bb17 	.word	0x0800bb17
 800ba90:	0800bb5b 	.word	0x0800bb5b
 800ba94:	0800bb5b 	.word	0x0800bb5b
 800ba98:	0800bb5b 	.word	0x0800bb5b
 800ba9c:	0800bb5b 	.word	0x0800bb5b
 800baa0:	0800bb5b 	.word	0x0800bb5b
 800baa4:	0800bb5b 	.word	0x0800bb5b
 800baa8:	0800bb5b 	.word	0x0800bb5b
 800baac:	0800bb27 	.word	0x0800bb27
 800bab0:	0800bb5b 	.word	0x0800bb5b
 800bab4:	0800bb5b 	.word	0x0800bb5b
 800bab8:	0800bb5b 	.word	0x0800bb5b
 800babc:	0800bb5b 	.word	0x0800bb5b
 800bac0:	0800bb5b 	.word	0x0800bb5b
 800bac4:	0800bb5b 	.word	0x0800bb5b
 800bac8:	0800bb5b 	.word	0x0800bb5b
 800bacc:	0800bb5b 	.word	0x0800bb5b
 800bad0:	0800bb5b 	.word	0x0800bb5b
 800bad4:	0800bb5b 	.word	0x0800bb5b
 800bad8:	0800bb5b 	.word	0x0800bb5b
 800badc:	0800bb5b 	.word	0x0800bb5b
 800bae0:	0800bb5b 	.word	0x0800bb5b
 800bae4:	0800bb5b 	.word	0x0800bb5b
 800bae8:	0800bb5b 	.word	0x0800bb5b
 800baec:	0800bb4d 	.word	0x0800bb4d
 800baf0:	2b40      	cmp	r3, #64	@ 0x40
 800baf2:	d02e      	beq.n	800bb52 <UART_SetConfig+0x8aa>
 800baf4:	e031      	b.n	800bb5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baf6:	f7fb fe55 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 800bafa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bafc:	e033      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bafe:	f7fb fe67 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 800bb02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb04:	e02f      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fd f896 	bl	8008c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb14:	e027      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb16:	f107 0318 	add.w	r3, r7, #24
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fd f9e2 	bl	8008ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb24:	e01f      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb26:	4b2d      	ldr	r3, [pc, #180]	@ (800bbdc <UART_SetConfig+0x934>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d009      	beq.n	800bb46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb32:	4b2a      	ldr	r3, [pc, #168]	@ (800bbdc <UART_SetConfig+0x934>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	08db      	lsrs	r3, r3, #3
 800bb38:	f003 0303 	and.w	r3, r3, #3
 800bb3c:	4a24      	ldr	r2, [pc, #144]	@ (800bbd0 <UART_SetConfig+0x928>)
 800bb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb44:	e00f      	b.n	800bb66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bb46:	4b22      	ldr	r3, [pc, #136]	@ (800bbd0 <UART_SetConfig+0x928>)
 800bb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb4a:	e00c      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb4c:	4b21      	ldr	r3, [pc, #132]	@ (800bbd4 <UART_SetConfig+0x92c>)
 800bb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb50:	e009      	b.n	800bb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb58:	e005      	b.n	800bb66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 80e7 	beq.w	800bd3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb72:	4a19      	ldr	r2, [pc, #100]	@ (800bbd8 <UART_SetConfig+0x930>)
 800bb74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb80:	005a      	lsls	r2, r3, #1
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	085b      	lsrs	r3, r3, #1
 800bb88:	441a      	add	r2, r3
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb96:	2b0f      	cmp	r3, #15
 800bb98:	d916      	bls.n	800bbc8 <UART_SetConfig+0x920>
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bba0:	d212      	bcs.n	800bbc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f023 030f 	bic.w	r3, r3, #15
 800bbaa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	f003 0307 	and.w	r3, r3, #7
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bbc4:	60da      	str	r2, [r3, #12]
 800bbc6:	e0b9      	b.n	800bd3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbce:	e0b5      	b.n	800bd3c <UART_SetConfig+0xa94>
 800bbd0:	03d09000 	.word	0x03d09000
 800bbd4:	003d0900 	.word	0x003d0900
 800bbd8:	0800d2e8 	.word	0x0800d2e8
 800bbdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	dc49      	bgt.n	800bc7c <UART_SetConfig+0x9d4>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	db7c      	blt.n	800bce6 <UART_SetConfig+0xa3e>
 800bbec:	2b20      	cmp	r3, #32
 800bbee:	d87a      	bhi.n	800bce6 <UART_SetConfig+0xa3e>
 800bbf0:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf8 <UART_SetConfig+0x950>)
 800bbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf6:	bf00      	nop
 800bbf8:	0800bc83 	.word	0x0800bc83
 800bbfc:	0800bc8b 	.word	0x0800bc8b
 800bc00:	0800bce7 	.word	0x0800bce7
 800bc04:	0800bce7 	.word	0x0800bce7
 800bc08:	0800bc93 	.word	0x0800bc93
 800bc0c:	0800bce7 	.word	0x0800bce7
 800bc10:	0800bce7 	.word	0x0800bce7
 800bc14:	0800bce7 	.word	0x0800bce7
 800bc18:	0800bca3 	.word	0x0800bca3
 800bc1c:	0800bce7 	.word	0x0800bce7
 800bc20:	0800bce7 	.word	0x0800bce7
 800bc24:	0800bce7 	.word	0x0800bce7
 800bc28:	0800bce7 	.word	0x0800bce7
 800bc2c:	0800bce7 	.word	0x0800bce7
 800bc30:	0800bce7 	.word	0x0800bce7
 800bc34:	0800bce7 	.word	0x0800bce7
 800bc38:	0800bcb3 	.word	0x0800bcb3
 800bc3c:	0800bce7 	.word	0x0800bce7
 800bc40:	0800bce7 	.word	0x0800bce7
 800bc44:	0800bce7 	.word	0x0800bce7
 800bc48:	0800bce7 	.word	0x0800bce7
 800bc4c:	0800bce7 	.word	0x0800bce7
 800bc50:	0800bce7 	.word	0x0800bce7
 800bc54:	0800bce7 	.word	0x0800bce7
 800bc58:	0800bce7 	.word	0x0800bce7
 800bc5c:	0800bce7 	.word	0x0800bce7
 800bc60:	0800bce7 	.word	0x0800bce7
 800bc64:	0800bce7 	.word	0x0800bce7
 800bc68:	0800bce7 	.word	0x0800bce7
 800bc6c:	0800bce7 	.word	0x0800bce7
 800bc70:	0800bce7 	.word	0x0800bce7
 800bc74:	0800bce7 	.word	0x0800bce7
 800bc78:	0800bcd9 	.word	0x0800bcd9
 800bc7c:	2b40      	cmp	r3, #64	@ 0x40
 800bc7e:	d02e      	beq.n	800bcde <UART_SetConfig+0xa36>
 800bc80:	e031      	b.n	800bce6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc82:	f7fb fd8f 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 800bc86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc88:	e033      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc8a:	f7fb fda1 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 800bc8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc90:	e02f      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fc ffd0 	bl	8008c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bca0:	e027      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bca2:	f107 0318 	add.w	r3, r7, #24
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fd f91c 	bl	8008ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb0:	e01f      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcb2:	4b2d      	ldr	r3, [pc, #180]	@ (800bd68 <UART_SetConfig+0xac0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0320 	and.w	r3, r3, #32
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d009      	beq.n	800bcd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcbe:	4b2a      	ldr	r3, [pc, #168]	@ (800bd68 <UART_SetConfig+0xac0>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	08db      	lsrs	r3, r3, #3
 800bcc4:	f003 0303 	and.w	r3, r3, #3
 800bcc8:	4a28      	ldr	r2, [pc, #160]	@ (800bd6c <UART_SetConfig+0xac4>)
 800bcca:	fa22 f303 	lsr.w	r3, r2, r3
 800bcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcd0:	e00f      	b.n	800bcf2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bcd2:	4b26      	ldr	r3, [pc, #152]	@ (800bd6c <UART_SetConfig+0xac4>)
 800bcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd6:	e00c      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcd8:	4b25      	ldr	r3, [pc, #148]	@ (800bd70 <UART_SetConfig+0xac8>)
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcdc:	e009      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce4:	e005      	b.n	800bcf2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcf0:	bf00      	nop
    }

    if (pclk != 0U)
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d021      	beq.n	800bd3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcfc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd74 <UART_SetConfig+0xacc>)
 800bcfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd02:	461a      	mov	r2, r3
 800bd04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd06:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	085b      	lsrs	r3, r3, #1
 800bd10:	441a      	add	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	2b0f      	cmp	r3, #15
 800bd20:	d909      	bls.n	800bd36 <UART_SetConfig+0xa8e>
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd28:	d205      	bcs.n	800bd36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	60da      	str	r2, [r3, #12]
 800bd34:	e002      	b.n	800bd3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2200      	movs	r2, #0
 800bd56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd58:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3748      	adds	r7, #72	@ 0x48
 800bd60:	46bd      	mov	sp, r7
 800bd62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd66:	bf00      	nop
 800bd68:	58024400 	.word	0x58024400
 800bd6c:	03d09000 	.word	0x03d09000
 800bd70:	003d0900 	.word	0x003d0900
 800bd74:	0800d2e8 	.word	0x0800d2e8

0800bd78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00a      	beq.n	800bda2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	430a      	orrs	r2, r1
 800be06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f003 0310 	and.w	r3, r3, #16
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2e:	f003 0320 	and.w	r3, r3, #32
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	430a      	orrs	r2, r1
 800be4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be54:	2b00      	cmp	r3, #0
 800be56:	d01a      	beq.n	800be8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be76:	d10a      	bne.n	800be8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00a      	beq.n	800beb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	430a      	orrs	r2, r1
 800beae:	605a      	str	r2, [r3, #4]
  }
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b098      	sub	sp, #96	@ 0x60
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800becc:	f7f6 fa1a 	bl	8002304 <HAL_GetTick>
 800bed0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0308 	and.w	r3, r3, #8
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d12f      	bne.n	800bf40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee8:	2200      	movs	r2, #0
 800beea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f88e 	bl	800c010 <UART_WaitOnFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d022      	beq.n	800bf40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf02:	e853 3f00 	ldrex	r3, [r3]
 800bf06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf0e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf18:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf20:	e841 2300 	strex	r3, r2, [r1]
 800bf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e6      	bne.n	800befa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e063      	b.n	800c008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 0304 	and.w	r3, r3, #4
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	d149      	bne.n	800bfe2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf56:	2200      	movs	r2, #0
 800bf58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f857 	bl	800c010 <UART_WaitOnFlagUntilTimeout>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d03c      	beq.n	800bfe2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	623b      	str	r3, [r7, #32]
   return(result);
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf86:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e6      	bne.n	800bf68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfba:	61fa      	str	r2, [r7, #28]
 800bfbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	69b9      	ldr	r1, [r7, #24]
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	617b      	str	r3, [r7, #20]
   return(result);
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e5      	bne.n	800bf9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e012      	b.n	800c008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3758      	adds	r7, #88	@ 0x58
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	4613      	mov	r3, r2
 800c01e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c020:	e04f      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c028:	d04b      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c02a:	f7f6 f96b 	bl	8002304 <HAL_GetTick>
 800c02e:	4602      	mov	r2, r0
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	429a      	cmp	r2, r3
 800c038:	d302      	bcc.n	800c040 <UART_WaitOnFlagUntilTimeout+0x30>
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e04e      	b.n	800c0e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0304 	and.w	r3, r3, #4
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d037      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b80      	cmp	r3, #128	@ 0x80
 800c056:	d034      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b40      	cmp	r3, #64	@ 0x40
 800c05c:	d031      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	f003 0308 	and.w	r3, r3, #8
 800c068:	2b08      	cmp	r3, #8
 800c06a:	d110      	bne.n	800c08e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2208      	movs	r2, #8
 800c072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f921 	bl	800c2bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2208      	movs	r2, #8
 800c07e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e029      	b.n	800c0e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c09c:	d111      	bne.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 f907 	bl	800c2bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2220      	movs	r2, #32
 800c0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e00f      	b.n	800c0e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	69da      	ldr	r2, [r3, #28]
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	bf0c      	ite	eq
 800c0d2:	2301      	moveq	r3, #1
 800c0d4:	2300      	movne	r3, #0
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	461a      	mov	r2, r3
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d0a0      	beq.n	800c022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b096      	sub	sp, #88	@ 0x58
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	88fa      	ldrh	r2, [r7, #6]
 800c104:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2222      	movs	r2, #34	@ 0x22
 800c114:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d02d      	beq.n	800c17e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c128:	4a40      	ldr	r2, [pc, #256]	@ (800c22c <UART_Start_Receive_DMA+0x140>)
 800c12a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c132:	4a3f      	ldr	r2, [pc, #252]	@ (800c230 <UART_Start_Receive_DMA+0x144>)
 800c134:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c13c:	4a3d      	ldr	r2, [pc, #244]	@ (800c234 <UART_Start_Receive_DMA+0x148>)
 800c13e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c146:	2200      	movs	r2, #0
 800c148:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3324      	adds	r3, #36	@ 0x24
 800c156:	4619      	mov	r1, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c15c:	461a      	mov	r2, r3
 800c15e:	88fb      	ldrh	r3, [r7, #6]
 800c160:	f7f6 fd78 	bl	8002c54 <HAL_DMA_Start_IT>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d009      	beq.n	800c17e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2210      	movs	r2, #16
 800c16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2220      	movs	r2, #32
 800c176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e051      	b.n	800c222 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d018      	beq.n	800c1b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c19a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1ac:	e841 2300 	strex	r3, r2, [r1]
 800c1b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c1b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1e6      	bne.n	800c186 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3308      	adds	r3, #8
 800c1be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	e853 3f00 	ldrex	r3, [r3]
 800c1c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800c1da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1e0:	e841 2300 	strex	r3, r2, [r1]
 800c1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1e5      	bne.n	800c1b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3308      	adds	r3, #8
 800c1f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	e853 3f00 	ldrex	r3, [r3]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3308      	adds	r3, #8
 800c20a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c20c:	623a      	str	r2, [r7, #32]
 800c20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	61bb      	str	r3, [r7, #24]
   return(result);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e5      	bne.n	800c1ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3758      	adds	r7, #88	@ 0x58
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	0800c389 	.word	0x0800c389
 800c230:	0800c4b1 	.word	0x0800c4b1
 800c234:	0800c4ef 	.word	0x0800c4ef

0800c238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c238:	b480      	push	{r7}
 800c23a:	b08f      	sub	sp, #60	@ 0x3c
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c260:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e6      	bne.n	800c240 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	60bb      	str	r3, [r7, #8]
   return(result);
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c288:	633b      	str	r3, [r7, #48]	@ 0x30
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c292:	61ba      	str	r2, [r7, #24]
 800c294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6979      	ldr	r1, [r7, #20]
 800c298:	69ba      	ldr	r2, [r7, #24]
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e5      	bne.n	800c272 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c2ae:	bf00      	nop
 800c2b0:	373c      	adds	r7, #60	@ 0x3c
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
	...

0800c2bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b095      	sub	sp, #84	@ 0x54
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2ea:	e841 2300 	strex	r3, r2, [r1]
 800c2ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1e6      	bne.n	800c2c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	61fb      	str	r3, [r7, #28]
   return(result);
 800c306:	69fa      	ldr	r2, [r7, #28]
 800c308:	4b1e      	ldr	r3, [pc, #120]	@ (800c384 <UART_EndRxTransfer+0xc8>)
 800c30a:	4013      	ands	r3, r2
 800c30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c31c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e5      	bne.n	800c2f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d118      	bne.n	800c364 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f023 0310 	bic.w	r3, r3, #16
 800c346:	647b      	str	r3, [r7, #68]	@ 0x44
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	6979      	ldr	r1, [r7, #20]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	613b      	str	r3, [r7, #16]
   return(result);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e6      	bne.n	800c332 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c378:	bf00      	nop
 800c37a:	3754      	adds	r7, #84	@ 0x54
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	effffffe 	.word	0xeffffffe

0800c388 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b09c      	sub	sp, #112	@ 0x70
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c394:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c39e:	d071      	beq.n	800c484 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c3a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c3d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e6      	bne.n	800c3a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ec:	f023 0301 	bic.w	r3, r3, #1
 800c3f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c3f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c3fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e5      	bne.n	800c3da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c40e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	623b      	str	r3, [r7, #32]
   return(result);
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c424:	663b      	str	r3, [r7, #96]	@ 0x60
 800c426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c42e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e5      	bne.n	800c40e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c444:	2220      	movs	r2, #32
 800c446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c44a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c44c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d118      	bne.n	800c484 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0310 	bic.w	r3, r3, #16
 800c466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	461a      	mov	r2, r3
 800c46e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c470:	61fb      	str	r3, [r7, #28]
 800c472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	69b9      	ldr	r1, [r7, #24]
 800c476:	69fa      	ldr	r2, [r7, #28]
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	617b      	str	r3, [r7, #20]
   return(result);
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e6      	bne.n	800c452 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c486:	2200      	movs	r2, #0
 800c488:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c48a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d107      	bne.n	800c4a2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c494:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c498:	4619      	mov	r1, r3
 800c49a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c49c:	f7fe feea 	bl	800b274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4a0:	e002      	b.n	800c4a8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c4a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4a4:	f7f5 faee 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 800c4a8:	bf00      	nop
 800c4aa:	3770      	adds	r7, #112	@ 0x70
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d109      	bne.n	800c4e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4d2:	085b      	lsrs	r3, r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7fe fecb 	bl	800b274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4de:	e002      	b.n	800c4e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7fe febd 	bl	800b260 <HAL_UART_RxHalfCpltCallback>
}
 800c4e6:	bf00      	nop
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b086      	sub	sp, #24
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c502:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c50a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c516:	2b80      	cmp	r3, #128	@ 0x80
 800c518:	d109      	bne.n	800c52e <UART_DMAError+0x40>
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b21      	cmp	r3, #33	@ 0x21
 800c51e:	d106      	bne.n	800c52e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2200      	movs	r2, #0
 800c524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c528:	6978      	ldr	r0, [r7, #20]
 800c52a:	f7ff fe85 	bl	800c238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c538:	2b40      	cmp	r3, #64	@ 0x40
 800c53a:	d109      	bne.n	800c550 <UART_DMAError+0x62>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b22      	cmp	r3, #34	@ 0x22
 800c540:	d106      	bne.n	800c550 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2200      	movs	r2, #0
 800c546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c54a:	6978      	ldr	r0, [r7, #20]
 800c54c:	f7ff feb6 	bl	800c2bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c556:	f043 0210 	orr.w	r2, r3, #16
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c560:	6978      	ldr	r0, [r7, #20]
 800c562:	f7f5 fb05 	bl	8001b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c566:	bf00      	nop
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7f5 faf3 	bl	8001b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c58a:	bf00      	nop
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b088      	sub	sp, #32
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5ae:	61fb      	str	r3, [r7, #28]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	61bb      	str	r3, [r7, #24]
 800c5ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6979      	ldr	r1, [r7, #20]
 800c5be:	69ba      	ldr	r2, [r7, #24]
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e6      	bne.n	800c59a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7fe fe36 	bl	800b24c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e0:	bf00      	nop
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c632:	2b01      	cmp	r3, #1
 800c634:	d101      	bne.n	800c63a <HAL_UARTEx_DisableFifoMode+0x16>
 800c636:	2302      	movs	r3, #2
 800c638:	e027      	b.n	800c68a <HAL_UARTEx_DisableFifoMode+0x66>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2224      	movs	r2, #36	@ 0x24
 800c646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f022 0201 	bic.w	r2, r2, #1
 800c660:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c668:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2220      	movs	r2, #32
 800c67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d101      	bne.n	800c6ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	e02d      	b.n	800c70a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2224      	movs	r2, #36	@ 0x24
 800c6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f022 0201 	bic.w	r2, r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f850 	bl	800c790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c722:	2b01      	cmp	r3, #1
 800c724:	d101      	bne.n	800c72a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c726:	2302      	movs	r3, #2
 800c728:	e02d      	b.n	800c786 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2224      	movs	r2, #36	@ 0x24
 800c736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f022 0201 	bic.w	r2, r2, #1
 800c750:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f812 	bl	800c790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2220      	movs	r2, #32
 800c778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d108      	bne.n	800c7b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7b0:	e031      	b.n	800c816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7b2:	2310      	movs	r3, #16
 800c7b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7b6:	2310      	movs	r3, #16
 800c7b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	0e5b      	lsrs	r3, r3, #25
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	f003 0307 	and.w	r3, r3, #7
 800c7c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	0f5b      	lsrs	r3, r3, #29
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	7b3a      	ldrb	r2, [r7, #12]
 800c7de:	4911      	ldr	r1, [pc, #68]	@ (800c824 <UARTEx_SetNbDataToProcess+0x94>)
 800c7e0:	5c8a      	ldrb	r2, [r1, r2]
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7e6:	7b3a      	ldrb	r2, [r7, #12]
 800c7e8:	490f      	ldr	r1, [pc, #60]	@ (800c828 <UARTEx_SetNbDataToProcess+0x98>)
 800c7ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	7b7a      	ldrb	r2, [r7, #13]
 800c7fc:	4909      	ldr	r1, [pc, #36]	@ (800c824 <UARTEx_SetNbDataToProcess+0x94>)
 800c7fe:	5c8a      	ldrb	r2, [r1, r2]
 800c800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c804:	7b7a      	ldrb	r2, [r7, #13]
 800c806:	4908      	ldr	r1, [pc, #32]	@ (800c828 <UARTEx_SetNbDataToProcess+0x98>)
 800c808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c80a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c816:	bf00      	nop
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	0800d300 	.word	0x0800d300
 800c828:	0800d308 	.word	0x0800d308

0800c82c <_vsniprintf_r>:
 800c82c:	b530      	push	{r4, r5, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	2c00      	cmp	r4, #0
 800c832:	b09b      	sub	sp, #108	@ 0x6c
 800c834:	4605      	mov	r5, r0
 800c836:	461a      	mov	r2, r3
 800c838:	da05      	bge.n	800c846 <_vsniprintf_r+0x1a>
 800c83a:	238b      	movs	r3, #139	@ 0x8b
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	b01b      	add	sp, #108	@ 0x6c
 800c844:	bd30      	pop	{r4, r5, pc}
 800c846:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c84a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	9319      	str	r3, [sp, #100]	@ 0x64
 800c854:	bf14      	ite	ne
 800c856:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c85a:	4623      	moveq	r3, r4
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c864:	9100      	str	r1, [sp, #0]
 800c866:	9104      	str	r1, [sp, #16]
 800c868:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c86c:	4669      	mov	r1, sp
 800c86e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c870:	f000 f9ae 	bl	800cbd0 <_svfiprintf_r>
 800c874:	1c43      	adds	r3, r0, #1
 800c876:	bfbc      	itt	lt
 800c878:	238b      	movlt	r3, #139	@ 0x8b
 800c87a:	602b      	strlt	r3, [r5, #0]
 800c87c:	2c00      	cmp	r4, #0
 800c87e:	d0e0      	beq.n	800c842 <_vsniprintf_r+0x16>
 800c880:	9b00      	ldr	r3, [sp, #0]
 800c882:	2200      	movs	r2, #0
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	e7dc      	b.n	800c842 <_vsniprintf_r+0x16>

0800c888 <vsniprintf>:
 800c888:	b507      	push	{r0, r1, r2, lr}
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	4613      	mov	r3, r2
 800c88e:	460a      	mov	r2, r1
 800c890:	4601      	mov	r1, r0
 800c892:	4803      	ldr	r0, [pc, #12]	@ (800c8a0 <vsniprintf+0x18>)
 800c894:	6800      	ldr	r0, [r0, #0]
 800c896:	f7ff ffc9 	bl	800c82c <_vsniprintf_r>
 800c89a:	b003      	add	sp, #12
 800c89c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8a0:	24000850 	.word	0x24000850

0800c8a4 <memset>:
 800c8a4:	4402      	add	r2, r0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d100      	bne.n	800c8ae <memset+0xa>
 800c8ac:	4770      	bx	lr
 800c8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c8b2:	e7f9      	b.n	800c8a8 <memset+0x4>

0800c8b4 <__errno>:
 800c8b4:	4b01      	ldr	r3, [pc, #4]	@ (800c8bc <__errno+0x8>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	24000850 	.word	0x24000850

0800c8c0 <__libc_init_array>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c8f8 <__libc_init_array+0x38>)
 800c8c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c8fc <__libc_init_array+0x3c>)
 800c8c6:	1b64      	subs	r4, r4, r5
 800c8c8:	10a4      	asrs	r4, r4, #2
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	42a6      	cmp	r6, r4
 800c8ce:	d109      	bne.n	800c8e4 <__libc_init_array+0x24>
 800c8d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c900 <__libc_init_array+0x40>)
 800c8d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c904 <__libc_init_array+0x44>)
 800c8d4:	f000 fc64 	bl	800d1a0 <_init>
 800c8d8:	1b64      	subs	r4, r4, r5
 800c8da:	10a4      	asrs	r4, r4, #2
 800c8dc:	2600      	movs	r6, #0
 800c8de:	42a6      	cmp	r6, r4
 800c8e0:	d105      	bne.n	800c8ee <__libc_init_array+0x2e>
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e8:	4798      	blx	r3
 800c8ea:	3601      	adds	r6, #1
 800c8ec:	e7ee      	b.n	800c8cc <__libc_init_array+0xc>
 800c8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8f2:	4798      	blx	r3
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	e7f2      	b.n	800c8de <__libc_init_array+0x1e>
 800c8f8:	0800d34c 	.word	0x0800d34c
 800c8fc:	0800d34c 	.word	0x0800d34c
 800c900:	0800d34c 	.word	0x0800d34c
 800c904:	0800d350 	.word	0x0800d350

0800c908 <__retarget_lock_acquire_recursive>:
 800c908:	4770      	bx	lr

0800c90a <__retarget_lock_release_recursive>:
 800c90a:	4770      	bx	lr

0800c90c <memcpy>:
 800c90c:	440a      	add	r2, r1
 800c90e:	4291      	cmp	r1, r2
 800c910:	f100 33ff 	add.w	r3, r0, #4294967295
 800c914:	d100      	bne.n	800c918 <memcpy+0xc>
 800c916:	4770      	bx	lr
 800c918:	b510      	push	{r4, lr}
 800c91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c922:	4291      	cmp	r1, r2
 800c924:	d1f9      	bne.n	800c91a <memcpy+0xe>
 800c926:	bd10      	pop	{r4, pc}

0800c928 <_free_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4605      	mov	r5, r0
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d041      	beq.n	800c9b4 <_free_r+0x8c>
 800c930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c934:	1f0c      	subs	r4, r1, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	bfb8      	it	lt
 800c93a:	18e4      	addlt	r4, r4, r3
 800c93c:	f000 f8e0 	bl	800cb00 <__malloc_lock>
 800c940:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b8 <_free_r+0x90>)
 800c942:	6813      	ldr	r3, [r2, #0]
 800c944:	b933      	cbnz	r3, 800c954 <_free_r+0x2c>
 800c946:	6063      	str	r3, [r4, #4]
 800c948:	6014      	str	r4, [r2, #0]
 800c94a:	4628      	mov	r0, r5
 800c94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c950:	f000 b8dc 	b.w	800cb0c <__malloc_unlock>
 800c954:	42a3      	cmp	r3, r4
 800c956:	d908      	bls.n	800c96a <_free_r+0x42>
 800c958:	6820      	ldr	r0, [r4, #0]
 800c95a:	1821      	adds	r1, r4, r0
 800c95c:	428b      	cmp	r3, r1
 800c95e:	bf01      	itttt	eq
 800c960:	6819      	ldreq	r1, [r3, #0]
 800c962:	685b      	ldreq	r3, [r3, #4]
 800c964:	1809      	addeq	r1, r1, r0
 800c966:	6021      	streq	r1, [r4, #0]
 800c968:	e7ed      	b.n	800c946 <_free_r+0x1e>
 800c96a:	461a      	mov	r2, r3
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	b10b      	cbz	r3, 800c974 <_free_r+0x4c>
 800c970:	42a3      	cmp	r3, r4
 800c972:	d9fa      	bls.n	800c96a <_free_r+0x42>
 800c974:	6811      	ldr	r1, [r2, #0]
 800c976:	1850      	adds	r0, r2, r1
 800c978:	42a0      	cmp	r0, r4
 800c97a:	d10b      	bne.n	800c994 <_free_r+0x6c>
 800c97c:	6820      	ldr	r0, [r4, #0]
 800c97e:	4401      	add	r1, r0
 800c980:	1850      	adds	r0, r2, r1
 800c982:	4283      	cmp	r3, r0
 800c984:	6011      	str	r1, [r2, #0]
 800c986:	d1e0      	bne.n	800c94a <_free_r+0x22>
 800c988:	6818      	ldr	r0, [r3, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	6053      	str	r3, [r2, #4]
 800c98e:	4408      	add	r0, r1
 800c990:	6010      	str	r0, [r2, #0]
 800c992:	e7da      	b.n	800c94a <_free_r+0x22>
 800c994:	d902      	bls.n	800c99c <_free_r+0x74>
 800c996:	230c      	movs	r3, #12
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	e7d6      	b.n	800c94a <_free_r+0x22>
 800c99c:	6820      	ldr	r0, [r4, #0]
 800c99e:	1821      	adds	r1, r4, r0
 800c9a0:	428b      	cmp	r3, r1
 800c9a2:	bf04      	itt	eq
 800c9a4:	6819      	ldreq	r1, [r3, #0]
 800c9a6:	685b      	ldreq	r3, [r3, #4]
 800c9a8:	6063      	str	r3, [r4, #4]
 800c9aa:	bf04      	itt	eq
 800c9ac:	1809      	addeq	r1, r1, r0
 800c9ae:	6021      	streq	r1, [r4, #0]
 800c9b0:	6054      	str	r4, [r2, #4]
 800c9b2:	e7ca      	b.n	800c94a <_free_r+0x22>
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	24000dbc 	.word	0x24000dbc

0800c9bc <sbrk_aligned>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4e0f      	ldr	r6, [pc, #60]	@ (800c9fc <sbrk_aligned+0x40>)
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	6831      	ldr	r1, [r6, #0]
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b911      	cbnz	r1, 800c9ce <sbrk_aligned+0x12>
 800c9c8:	f000 fba4 	bl	800d114 <_sbrk_r>
 800c9cc:	6030      	str	r0, [r6, #0]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 fb9f 	bl	800d114 <_sbrk_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	d103      	bne.n	800c9e2 <sbrk_aligned+0x26>
 800c9da:	f04f 34ff 	mov.w	r4, #4294967295
 800c9de:	4620      	mov	r0, r4
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	1cc4      	adds	r4, r0, #3
 800c9e4:	f024 0403 	bic.w	r4, r4, #3
 800c9e8:	42a0      	cmp	r0, r4
 800c9ea:	d0f8      	beq.n	800c9de <sbrk_aligned+0x22>
 800c9ec:	1a21      	subs	r1, r4, r0
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f000 fb90 	bl	800d114 <_sbrk_r>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d1f2      	bne.n	800c9de <sbrk_aligned+0x22>
 800c9f8:	e7ef      	b.n	800c9da <sbrk_aligned+0x1e>
 800c9fa:	bf00      	nop
 800c9fc:	24000db8 	.word	0x24000db8

0800ca00 <_malloc_r>:
 800ca00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca04:	1ccd      	adds	r5, r1, #3
 800ca06:	f025 0503 	bic.w	r5, r5, #3
 800ca0a:	3508      	adds	r5, #8
 800ca0c:	2d0c      	cmp	r5, #12
 800ca0e:	bf38      	it	cc
 800ca10:	250c      	movcc	r5, #12
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	4606      	mov	r6, r0
 800ca16:	db01      	blt.n	800ca1c <_malloc_r+0x1c>
 800ca18:	42a9      	cmp	r1, r5
 800ca1a:	d904      	bls.n	800ca26 <_malloc_r+0x26>
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	6033      	str	r3, [r6, #0]
 800ca20:	2000      	movs	r0, #0
 800ca22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cafc <_malloc_r+0xfc>
 800ca2a:	f000 f869 	bl	800cb00 <__malloc_lock>
 800ca2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca32:	461c      	mov	r4, r3
 800ca34:	bb44      	cbnz	r4, 800ca88 <_malloc_r+0x88>
 800ca36:	4629      	mov	r1, r5
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f7ff ffbf 	bl	800c9bc <sbrk_aligned>
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	4604      	mov	r4, r0
 800ca42:	d158      	bne.n	800caf6 <_malloc_r+0xf6>
 800ca44:	f8d8 4000 	ldr.w	r4, [r8]
 800ca48:	4627      	mov	r7, r4
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	d143      	bne.n	800cad6 <_malloc_r+0xd6>
 800ca4e:	2c00      	cmp	r4, #0
 800ca50:	d04b      	beq.n	800caea <_malloc_r+0xea>
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	4639      	mov	r1, r7
 800ca56:	4630      	mov	r0, r6
 800ca58:	eb04 0903 	add.w	r9, r4, r3
 800ca5c:	f000 fb5a 	bl	800d114 <_sbrk_r>
 800ca60:	4581      	cmp	r9, r0
 800ca62:	d142      	bne.n	800caea <_malloc_r+0xea>
 800ca64:	6821      	ldr	r1, [r4, #0]
 800ca66:	1a6d      	subs	r5, r5, r1
 800ca68:	4629      	mov	r1, r5
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7ff ffa6 	bl	800c9bc <sbrk_aligned>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d03a      	beq.n	800caea <_malloc_r+0xea>
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	442b      	add	r3, r5
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	bb62      	cbnz	r2, 800cadc <_malloc_r+0xdc>
 800ca82:	f8c8 7000 	str.w	r7, [r8]
 800ca86:	e00f      	b.n	800caa8 <_malloc_r+0xa8>
 800ca88:	6822      	ldr	r2, [r4, #0]
 800ca8a:	1b52      	subs	r2, r2, r5
 800ca8c:	d420      	bmi.n	800cad0 <_malloc_r+0xd0>
 800ca8e:	2a0b      	cmp	r2, #11
 800ca90:	d917      	bls.n	800cac2 <_malloc_r+0xc2>
 800ca92:	1961      	adds	r1, r4, r5
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	6025      	str	r5, [r4, #0]
 800ca98:	bf18      	it	ne
 800ca9a:	6059      	strne	r1, [r3, #4]
 800ca9c:	6863      	ldr	r3, [r4, #4]
 800ca9e:	bf08      	it	eq
 800caa0:	f8c8 1000 	streq.w	r1, [r8]
 800caa4:	5162      	str	r2, [r4, r5]
 800caa6:	604b      	str	r3, [r1, #4]
 800caa8:	4630      	mov	r0, r6
 800caaa:	f000 f82f 	bl	800cb0c <__malloc_unlock>
 800caae:	f104 000b 	add.w	r0, r4, #11
 800cab2:	1d23      	adds	r3, r4, #4
 800cab4:	f020 0007 	bic.w	r0, r0, #7
 800cab8:	1ac2      	subs	r2, r0, r3
 800caba:	bf1c      	itt	ne
 800cabc:	1a1b      	subne	r3, r3, r0
 800cabe:	50a3      	strne	r3, [r4, r2]
 800cac0:	e7af      	b.n	800ca22 <_malloc_r+0x22>
 800cac2:	6862      	ldr	r2, [r4, #4]
 800cac4:	42a3      	cmp	r3, r4
 800cac6:	bf0c      	ite	eq
 800cac8:	f8c8 2000 	streq.w	r2, [r8]
 800cacc:	605a      	strne	r2, [r3, #4]
 800cace:	e7eb      	b.n	800caa8 <_malloc_r+0xa8>
 800cad0:	4623      	mov	r3, r4
 800cad2:	6864      	ldr	r4, [r4, #4]
 800cad4:	e7ae      	b.n	800ca34 <_malloc_r+0x34>
 800cad6:	463c      	mov	r4, r7
 800cad8:	687f      	ldr	r7, [r7, #4]
 800cada:	e7b6      	b.n	800ca4a <_malloc_r+0x4a>
 800cadc:	461a      	mov	r2, r3
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	d1fb      	bne.n	800cadc <_malloc_r+0xdc>
 800cae4:	2300      	movs	r3, #0
 800cae6:	6053      	str	r3, [r2, #4]
 800cae8:	e7de      	b.n	800caa8 <_malloc_r+0xa8>
 800caea:	230c      	movs	r3, #12
 800caec:	6033      	str	r3, [r6, #0]
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 f80c 	bl	800cb0c <__malloc_unlock>
 800caf4:	e794      	b.n	800ca20 <_malloc_r+0x20>
 800caf6:	6005      	str	r5, [r0, #0]
 800caf8:	e7d6      	b.n	800caa8 <_malloc_r+0xa8>
 800cafa:	bf00      	nop
 800cafc:	24000dbc 	.word	0x24000dbc

0800cb00 <__malloc_lock>:
 800cb00:	4801      	ldr	r0, [pc, #4]	@ (800cb08 <__malloc_lock+0x8>)
 800cb02:	f7ff bf01 	b.w	800c908 <__retarget_lock_acquire_recursive>
 800cb06:	bf00      	nop
 800cb08:	24000db4 	.word	0x24000db4

0800cb0c <__malloc_unlock>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	@ (800cb14 <__malloc_unlock+0x8>)
 800cb0e:	f7ff befc 	b.w	800c90a <__retarget_lock_release_recursive>
 800cb12:	bf00      	nop
 800cb14:	24000db4 	.word	0x24000db4

0800cb18 <__ssputs_r>:
 800cb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb1c:	688e      	ldr	r6, [r1, #8]
 800cb1e:	461f      	mov	r7, r3
 800cb20:	42be      	cmp	r6, r7
 800cb22:	680b      	ldr	r3, [r1, #0]
 800cb24:	4682      	mov	sl, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	4690      	mov	r8, r2
 800cb2a:	d82d      	bhi.n	800cb88 <__ssputs_r+0x70>
 800cb2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb34:	d026      	beq.n	800cb84 <__ssputs_r+0x6c>
 800cb36:	6965      	ldr	r5, [r4, #20]
 800cb38:	6909      	ldr	r1, [r1, #16]
 800cb3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb3e:	eba3 0901 	sub.w	r9, r3, r1
 800cb42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb46:	1c7b      	adds	r3, r7, #1
 800cb48:	444b      	add	r3, r9
 800cb4a:	106d      	asrs	r5, r5, #1
 800cb4c:	429d      	cmp	r5, r3
 800cb4e:	bf38      	it	cc
 800cb50:	461d      	movcc	r5, r3
 800cb52:	0553      	lsls	r3, r2, #21
 800cb54:	d527      	bpl.n	800cba6 <__ssputs_r+0x8e>
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7ff ff52 	bl	800ca00 <_malloc_r>
 800cb5c:	4606      	mov	r6, r0
 800cb5e:	b360      	cbz	r0, 800cbba <__ssputs_r+0xa2>
 800cb60:	6921      	ldr	r1, [r4, #16]
 800cb62:	464a      	mov	r2, r9
 800cb64:	f7ff fed2 	bl	800c90c <memcpy>
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	6126      	str	r6, [r4, #16]
 800cb76:	6165      	str	r5, [r4, #20]
 800cb78:	444e      	add	r6, r9
 800cb7a:	eba5 0509 	sub.w	r5, r5, r9
 800cb7e:	6026      	str	r6, [r4, #0]
 800cb80:	60a5      	str	r5, [r4, #8]
 800cb82:	463e      	mov	r6, r7
 800cb84:	42be      	cmp	r6, r7
 800cb86:	d900      	bls.n	800cb8a <__ssputs_r+0x72>
 800cb88:	463e      	mov	r6, r7
 800cb8a:	6820      	ldr	r0, [r4, #0]
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	4641      	mov	r1, r8
 800cb90:	f000 faa6 	bl	800d0e0 <memmove>
 800cb94:	68a3      	ldr	r3, [r4, #8]
 800cb96:	1b9b      	subs	r3, r3, r6
 800cb98:	60a3      	str	r3, [r4, #8]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	4433      	add	r3, r6
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	2000      	movs	r0, #0
 800cba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba6:	462a      	mov	r2, r5
 800cba8:	f000 fac4 	bl	800d134 <_realloc_r>
 800cbac:	4606      	mov	r6, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d1e0      	bne.n	800cb74 <__ssputs_r+0x5c>
 800cbb2:	6921      	ldr	r1, [r4, #16]
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	f7ff feb7 	bl	800c928 <_free_r>
 800cbba:	230c      	movs	r3, #12
 800cbbc:	f8ca 3000 	str.w	r3, [sl]
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbcc:	e7e9      	b.n	800cba2 <__ssputs_r+0x8a>
	...

0800cbd0 <_svfiprintf_r>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	4698      	mov	r8, r3
 800cbd6:	898b      	ldrh	r3, [r1, #12]
 800cbd8:	061b      	lsls	r3, r3, #24
 800cbda:	b09d      	sub	sp, #116	@ 0x74
 800cbdc:	4607      	mov	r7, r0
 800cbde:	460d      	mov	r5, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	d510      	bpl.n	800cc06 <_svfiprintf_r+0x36>
 800cbe4:	690b      	ldr	r3, [r1, #16]
 800cbe6:	b973      	cbnz	r3, 800cc06 <_svfiprintf_r+0x36>
 800cbe8:	2140      	movs	r1, #64	@ 0x40
 800cbea:	f7ff ff09 	bl	800ca00 <_malloc_r>
 800cbee:	6028      	str	r0, [r5, #0]
 800cbf0:	6128      	str	r0, [r5, #16]
 800cbf2:	b930      	cbnz	r0, 800cc02 <_svfiprintf_r+0x32>
 800cbf4:	230c      	movs	r3, #12
 800cbf6:	603b      	str	r3, [r7, #0]
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	b01d      	add	sp, #116	@ 0x74
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc02:	2340      	movs	r3, #64	@ 0x40
 800cc04:	616b      	str	r3, [r5, #20]
 800cc06:	2300      	movs	r3, #0
 800cc08:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0a:	2320      	movs	r3, #32
 800cc0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc10:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc14:	2330      	movs	r3, #48	@ 0x30
 800cc16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cdb4 <_svfiprintf_r+0x1e4>
 800cc1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc1e:	f04f 0901 	mov.w	r9, #1
 800cc22:	4623      	mov	r3, r4
 800cc24:	469a      	mov	sl, r3
 800cc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc2a:	b10a      	cbz	r2, 800cc30 <_svfiprintf_r+0x60>
 800cc2c:	2a25      	cmp	r2, #37	@ 0x25
 800cc2e:	d1f9      	bne.n	800cc24 <_svfiprintf_r+0x54>
 800cc30:	ebba 0b04 	subs.w	fp, sl, r4
 800cc34:	d00b      	beq.n	800cc4e <_svfiprintf_r+0x7e>
 800cc36:	465b      	mov	r3, fp
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7ff ff6b 	bl	800cb18 <__ssputs_r>
 800cc42:	3001      	adds	r0, #1
 800cc44:	f000 80a7 	beq.w	800cd96 <_svfiprintf_r+0x1c6>
 800cc48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc4a:	445a      	add	r2, fp
 800cc4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 809f 	beq.w	800cd96 <_svfiprintf_r+0x1c6>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc62:	f10a 0a01 	add.w	sl, sl, #1
 800cc66:	9304      	str	r3, [sp, #16]
 800cc68:	9307      	str	r3, [sp, #28]
 800cc6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc70:	4654      	mov	r4, sl
 800cc72:	2205      	movs	r2, #5
 800cc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc78:	484e      	ldr	r0, [pc, #312]	@ (800cdb4 <_svfiprintf_r+0x1e4>)
 800cc7a:	f7f3 fb39 	bl	80002f0 <memchr>
 800cc7e:	9a04      	ldr	r2, [sp, #16]
 800cc80:	b9d8      	cbnz	r0, 800ccba <_svfiprintf_r+0xea>
 800cc82:	06d0      	lsls	r0, r2, #27
 800cc84:	bf44      	itt	mi
 800cc86:	2320      	movmi	r3, #32
 800cc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc8c:	0711      	lsls	r1, r2, #28
 800cc8e:	bf44      	itt	mi
 800cc90:	232b      	movmi	r3, #43	@ 0x2b
 800cc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc96:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc9c:	d015      	beq.n	800ccca <_svfiprintf_r+0xfa>
 800cc9e:	9a07      	ldr	r2, [sp, #28]
 800cca0:	4654      	mov	r4, sl
 800cca2:	2000      	movs	r0, #0
 800cca4:	f04f 0c0a 	mov.w	ip, #10
 800cca8:	4621      	mov	r1, r4
 800ccaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccae:	3b30      	subs	r3, #48	@ 0x30
 800ccb0:	2b09      	cmp	r3, #9
 800ccb2:	d94b      	bls.n	800cd4c <_svfiprintf_r+0x17c>
 800ccb4:	b1b0      	cbz	r0, 800cce4 <_svfiprintf_r+0x114>
 800ccb6:	9207      	str	r2, [sp, #28]
 800ccb8:	e014      	b.n	800cce4 <_svfiprintf_r+0x114>
 800ccba:	eba0 0308 	sub.w	r3, r0, r8
 800ccbe:	fa09 f303 	lsl.w	r3, r9, r3
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	46a2      	mov	sl, r4
 800ccc8:	e7d2      	b.n	800cc70 <_svfiprintf_r+0xa0>
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	1d19      	adds	r1, r3, #4
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	9103      	str	r1, [sp, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bfbb      	ittet	lt
 800ccd6:	425b      	neglt	r3, r3
 800ccd8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccdc:	9307      	strge	r3, [sp, #28]
 800ccde:	9307      	strlt	r3, [sp, #28]
 800cce0:	bfb8      	it	lt
 800cce2:	9204      	strlt	r2, [sp, #16]
 800cce4:	7823      	ldrb	r3, [r4, #0]
 800cce6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cce8:	d10a      	bne.n	800cd00 <_svfiprintf_r+0x130>
 800ccea:	7863      	ldrb	r3, [r4, #1]
 800ccec:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccee:	d132      	bne.n	800cd56 <_svfiprintf_r+0x186>
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	1d1a      	adds	r2, r3, #4
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	9203      	str	r2, [sp, #12]
 800ccf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccfc:	3402      	adds	r4, #2
 800ccfe:	9305      	str	r3, [sp, #20]
 800cd00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cdc4 <_svfiprintf_r+0x1f4>
 800cd04:	7821      	ldrb	r1, [r4, #0]
 800cd06:	2203      	movs	r2, #3
 800cd08:	4650      	mov	r0, sl
 800cd0a:	f7f3 faf1 	bl	80002f0 <memchr>
 800cd0e:	b138      	cbz	r0, 800cd20 <_svfiprintf_r+0x150>
 800cd10:	9b04      	ldr	r3, [sp, #16]
 800cd12:	eba0 000a 	sub.w	r0, r0, sl
 800cd16:	2240      	movs	r2, #64	@ 0x40
 800cd18:	4082      	lsls	r2, r0
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	3401      	adds	r4, #1
 800cd1e:	9304      	str	r3, [sp, #16]
 800cd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd24:	4824      	ldr	r0, [pc, #144]	@ (800cdb8 <_svfiprintf_r+0x1e8>)
 800cd26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd2a:	2206      	movs	r2, #6
 800cd2c:	f7f3 fae0 	bl	80002f0 <memchr>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d036      	beq.n	800cda2 <_svfiprintf_r+0x1d2>
 800cd34:	4b21      	ldr	r3, [pc, #132]	@ (800cdbc <_svfiprintf_r+0x1ec>)
 800cd36:	bb1b      	cbnz	r3, 800cd80 <_svfiprintf_r+0x1b0>
 800cd38:	9b03      	ldr	r3, [sp, #12]
 800cd3a:	3307      	adds	r3, #7
 800cd3c:	f023 0307 	bic.w	r3, r3, #7
 800cd40:	3308      	adds	r3, #8
 800cd42:	9303      	str	r3, [sp, #12]
 800cd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd46:	4433      	add	r3, r6
 800cd48:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd4a:	e76a      	b.n	800cc22 <_svfiprintf_r+0x52>
 800cd4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd50:	460c      	mov	r4, r1
 800cd52:	2001      	movs	r0, #1
 800cd54:	e7a8      	b.n	800cca8 <_svfiprintf_r+0xd8>
 800cd56:	2300      	movs	r3, #0
 800cd58:	3401      	adds	r4, #1
 800cd5a:	9305      	str	r3, [sp, #20]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f04f 0c0a 	mov.w	ip, #10
 800cd62:	4620      	mov	r0, r4
 800cd64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd68:	3a30      	subs	r2, #48	@ 0x30
 800cd6a:	2a09      	cmp	r2, #9
 800cd6c:	d903      	bls.n	800cd76 <_svfiprintf_r+0x1a6>
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0c6      	beq.n	800cd00 <_svfiprintf_r+0x130>
 800cd72:	9105      	str	r1, [sp, #20]
 800cd74:	e7c4      	b.n	800cd00 <_svfiprintf_r+0x130>
 800cd76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e7f0      	b.n	800cd62 <_svfiprintf_r+0x192>
 800cd80:	ab03      	add	r3, sp, #12
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	462a      	mov	r2, r5
 800cd86:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc0 <_svfiprintf_r+0x1f0>)
 800cd88:	a904      	add	r1, sp, #16
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f3af 8000 	nop.w
 800cd90:	1c42      	adds	r2, r0, #1
 800cd92:	4606      	mov	r6, r0
 800cd94:	d1d6      	bne.n	800cd44 <_svfiprintf_r+0x174>
 800cd96:	89ab      	ldrh	r3, [r5, #12]
 800cd98:	065b      	lsls	r3, r3, #25
 800cd9a:	f53f af2d 	bmi.w	800cbf8 <_svfiprintf_r+0x28>
 800cd9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cda0:	e72c      	b.n	800cbfc <_svfiprintf_r+0x2c>
 800cda2:	ab03      	add	r3, sp, #12
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	462a      	mov	r2, r5
 800cda8:	4b05      	ldr	r3, [pc, #20]	@ (800cdc0 <_svfiprintf_r+0x1f0>)
 800cdaa:	a904      	add	r1, sp, #16
 800cdac:	4638      	mov	r0, r7
 800cdae:	f000 f879 	bl	800cea4 <_printf_i>
 800cdb2:	e7ed      	b.n	800cd90 <_svfiprintf_r+0x1c0>
 800cdb4:	0800d310 	.word	0x0800d310
 800cdb8:	0800d31a 	.word	0x0800d31a
 800cdbc:	00000000 	.word	0x00000000
 800cdc0:	0800cb19 	.word	0x0800cb19
 800cdc4:	0800d316 	.word	0x0800d316

0800cdc8 <_printf_common>:
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	4616      	mov	r6, r2
 800cdce:	4698      	mov	r8, r3
 800cdd0:	688a      	ldr	r2, [r1, #8]
 800cdd2:	690b      	ldr	r3, [r1, #16]
 800cdd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	bfb8      	it	lt
 800cddc:	4613      	movlt	r3, r2
 800cdde:	6033      	str	r3, [r6, #0]
 800cde0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cde4:	4607      	mov	r7, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	b10a      	cbz	r2, 800cdee <_printf_common+0x26>
 800cdea:	3301      	adds	r3, #1
 800cdec:	6033      	str	r3, [r6, #0]
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	0699      	lsls	r1, r3, #26
 800cdf2:	bf42      	ittt	mi
 800cdf4:	6833      	ldrmi	r3, [r6, #0]
 800cdf6:	3302      	addmi	r3, #2
 800cdf8:	6033      	strmi	r3, [r6, #0]
 800cdfa:	6825      	ldr	r5, [r4, #0]
 800cdfc:	f015 0506 	ands.w	r5, r5, #6
 800ce00:	d106      	bne.n	800ce10 <_printf_common+0x48>
 800ce02:	f104 0a19 	add.w	sl, r4, #25
 800ce06:	68e3      	ldr	r3, [r4, #12]
 800ce08:	6832      	ldr	r2, [r6, #0]
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc26      	bgt.n	800ce5e <_printf_common+0x96>
 800ce10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	3b00      	subs	r3, #0
 800ce18:	bf18      	it	ne
 800ce1a:	2301      	movne	r3, #1
 800ce1c:	0692      	lsls	r2, r2, #26
 800ce1e:	d42b      	bmi.n	800ce78 <_printf_common+0xb0>
 800ce20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce24:	4641      	mov	r1, r8
 800ce26:	4638      	mov	r0, r7
 800ce28:	47c8      	blx	r9
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d01e      	beq.n	800ce6c <_printf_common+0xa4>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	6922      	ldr	r2, [r4, #16]
 800ce32:	f003 0306 	and.w	r3, r3, #6
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	bf02      	ittt	eq
 800ce3a:	68e5      	ldreq	r5, [r4, #12]
 800ce3c:	6833      	ldreq	r3, [r6, #0]
 800ce3e:	1aed      	subeq	r5, r5, r3
 800ce40:	68a3      	ldr	r3, [r4, #8]
 800ce42:	bf0c      	ite	eq
 800ce44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce48:	2500      	movne	r5, #0
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	bfc4      	itt	gt
 800ce4e:	1a9b      	subgt	r3, r3, r2
 800ce50:	18ed      	addgt	r5, r5, r3
 800ce52:	2600      	movs	r6, #0
 800ce54:	341a      	adds	r4, #26
 800ce56:	42b5      	cmp	r5, r6
 800ce58:	d11a      	bne.n	800ce90 <_printf_common+0xc8>
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	e008      	b.n	800ce70 <_printf_common+0xa8>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4652      	mov	r2, sl
 800ce62:	4641      	mov	r1, r8
 800ce64:	4638      	mov	r0, r7
 800ce66:	47c8      	blx	r9
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d103      	bne.n	800ce74 <_printf_common+0xac>
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce74:	3501      	adds	r5, #1
 800ce76:	e7c6      	b.n	800ce06 <_printf_common+0x3e>
 800ce78:	18e1      	adds	r1, r4, r3
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	2030      	movs	r0, #48	@ 0x30
 800ce7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce82:	4422      	add	r2, r4
 800ce84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce8c:	3302      	adds	r3, #2
 800ce8e:	e7c7      	b.n	800ce20 <_printf_common+0x58>
 800ce90:	2301      	movs	r3, #1
 800ce92:	4622      	mov	r2, r4
 800ce94:	4641      	mov	r1, r8
 800ce96:	4638      	mov	r0, r7
 800ce98:	47c8      	blx	r9
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	d0e6      	beq.n	800ce6c <_printf_common+0xa4>
 800ce9e:	3601      	adds	r6, #1
 800cea0:	e7d9      	b.n	800ce56 <_printf_common+0x8e>
	...

0800cea4 <_printf_i>:
 800cea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	7e0f      	ldrb	r7, [r1, #24]
 800ceaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ceac:	2f78      	cmp	r7, #120	@ 0x78
 800ceae:	4691      	mov	r9, r2
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	469a      	mov	sl, r3
 800ceb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ceba:	d807      	bhi.n	800cecc <_printf_i+0x28>
 800cebc:	2f62      	cmp	r7, #98	@ 0x62
 800cebe:	d80a      	bhi.n	800ced6 <_printf_i+0x32>
 800cec0:	2f00      	cmp	r7, #0
 800cec2:	f000 80d1 	beq.w	800d068 <_printf_i+0x1c4>
 800cec6:	2f58      	cmp	r7, #88	@ 0x58
 800cec8:	f000 80b8 	beq.w	800d03c <_printf_i+0x198>
 800cecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ced0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ced4:	e03a      	b.n	800cf4c <_printf_i+0xa8>
 800ced6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ceda:	2b15      	cmp	r3, #21
 800cedc:	d8f6      	bhi.n	800cecc <_printf_i+0x28>
 800cede:	a101      	add	r1, pc, #4	@ (adr r1, 800cee4 <_printf_i+0x40>)
 800cee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cee4:	0800cf3d 	.word	0x0800cf3d
 800cee8:	0800cf51 	.word	0x0800cf51
 800ceec:	0800cecd 	.word	0x0800cecd
 800cef0:	0800cecd 	.word	0x0800cecd
 800cef4:	0800cecd 	.word	0x0800cecd
 800cef8:	0800cecd 	.word	0x0800cecd
 800cefc:	0800cf51 	.word	0x0800cf51
 800cf00:	0800cecd 	.word	0x0800cecd
 800cf04:	0800cecd 	.word	0x0800cecd
 800cf08:	0800cecd 	.word	0x0800cecd
 800cf0c:	0800cecd 	.word	0x0800cecd
 800cf10:	0800d04f 	.word	0x0800d04f
 800cf14:	0800cf7b 	.word	0x0800cf7b
 800cf18:	0800d009 	.word	0x0800d009
 800cf1c:	0800cecd 	.word	0x0800cecd
 800cf20:	0800cecd 	.word	0x0800cecd
 800cf24:	0800d071 	.word	0x0800d071
 800cf28:	0800cecd 	.word	0x0800cecd
 800cf2c:	0800cf7b 	.word	0x0800cf7b
 800cf30:	0800cecd 	.word	0x0800cecd
 800cf34:	0800cecd 	.word	0x0800cecd
 800cf38:	0800d011 	.word	0x0800d011
 800cf3c:	6833      	ldr	r3, [r6, #0]
 800cf3e:	1d1a      	adds	r2, r3, #4
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6032      	str	r2, [r6, #0]
 800cf44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e09c      	b.n	800d08a <_printf_i+0x1e6>
 800cf50:	6833      	ldr	r3, [r6, #0]
 800cf52:	6820      	ldr	r0, [r4, #0]
 800cf54:	1d19      	adds	r1, r3, #4
 800cf56:	6031      	str	r1, [r6, #0]
 800cf58:	0606      	lsls	r6, r0, #24
 800cf5a:	d501      	bpl.n	800cf60 <_printf_i+0xbc>
 800cf5c:	681d      	ldr	r5, [r3, #0]
 800cf5e:	e003      	b.n	800cf68 <_printf_i+0xc4>
 800cf60:	0645      	lsls	r5, r0, #25
 800cf62:	d5fb      	bpl.n	800cf5c <_printf_i+0xb8>
 800cf64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf68:	2d00      	cmp	r5, #0
 800cf6a:	da03      	bge.n	800cf74 <_printf_i+0xd0>
 800cf6c:	232d      	movs	r3, #45	@ 0x2d
 800cf6e:	426d      	negs	r5, r5
 800cf70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf74:	4858      	ldr	r0, [pc, #352]	@ (800d0d8 <_printf_i+0x234>)
 800cf76:	230a      	movs	r3, #10
 800cf78:	e011      	b.n	800cf9e <_printf_i+0xfa>
 800cf7a:	6821      	ldr	r1, [r4, #0]
 800cf7c:	6833      	ldr	r3, [r6, #0]
 800cf7e:	0608      	lsls	r0, r1, #24
 800cf80:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf84:	d402      	bmi.n	800cf8c <_printf_i+0xe8>
 800cf86:	0649      	lsls	r1, r1, #25
 800cf88:	bf48      	it	mi
 800cf8a:	b2ad      	uxthmi	r5, r5
 800cf8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf8e:	4852      	ldr	r0, [pc, #328]	@ (800d0d8 <_printf_i+0x234>)
 800cf90:	6033      	str	r3, [r6, #0]
 800cf92:	bf14      	ite	ne
 800cf94:	230a      	movne	r3, #10
 800cf96:	2308      	moveq	r3, #8
 800cf98:	2100      	movs	r1, #0
 800cf9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf9e:	6866      	ldr	r6, [r4, #4]
 800cfa0:	60a6      	str	r6, [r4, #8]
 800cfa2:	2e00      	cmp	r6, #0
 800cfa4:	db05      	blt.n	800cfb2 <_printf_i+0x10e>
 800cfa6:	6821      	ldr	r1, [r4, #0]
 800cfa8:	432e      	orrs	r6, r5
 800cfaa:	f021 0104 	bic.w	r1, r1, #4
 800cfae:	6021      	str	r1, [r4, #0]
 800cfb0:	d04b      	beq.n	800d04a <_printf_i+0x1a6>
 800cfb2:	4616      	mov	r6, r2
 800cfb4:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfb8:	fb03 5711 	mls	r7, r3, r1, r5
 800cfbc:	5dc7      	ldrb	r7, [r0, r7]
 800cfbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfc2:	462f      	mov	r7, r5
 800cfc4:	42bb      	cmp	r3, r7
 800cfc6:	460d      	mov	r5, r1
 800cfc8:	d9f4      	bls.n	800cfb4 <_printf_i+0x110>
 800cfca:	2b08      	cmp	r3, #8
 800cfcc:	d10b      	bne.n	800cfe6 <_printf_i+0x142>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	07df      	lsls	r7, r3, #31
 800cfd2:	d508      	bpl.n	800cfe6 <_printf_i+0x142>
 800cfd4:	6923      	ldr	r3, [r4, #16]
 800cfd6:	6861      	ldr	r1, [r4, #4]
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	bfde      	ittt	le
 800cfdc:	2330      	movle	r3, #48	@ 0x30
 800cfde:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfe6:	1b92      	subs	r2, r2, r6
 800cfe8:	6122      	str	r2, [r4, #16]
 800cfea:	f8cd a000 	str.w	sl, [sp]
 800cfee:	464b      	mov	r3, r9
 800cff0:	aa03      	add	r2, sp, #12
 800cff2:	4621      	mov	r1, r4
 800cff4:	4640      	mov	r0, r8
 800cff6:	f7ff fee7 	bl	800cdc8 <_printf_common>
 800cffa:	3001      	adds	r0, #1
 800cffc:	d14a      	bne.n	800d094 <_printf_i+0x1f0>
 800cffe:	f04f 30ff 	mov.w	r0, #4294967295
 800d002:	b004      	add	sp, #16
 800d004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	f043 0320 	orr.w	r3, r3, #32
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	4832      	ldr	r0, [pc, #200]	@ (800d0dc <_printf_i+0x238>)
 800d012:	2778      	movs	r7, #120	@ 0x78
 800d014:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	6831      	ldr	r1, [r6, #0]
 800d01c:	061f      	lsls	r7, r3, #24
 800d01e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d022:	d402      	bmi.n	800d02a <_printf_i+0x186>
 800d024:	065f      	lsls	r7, r3, #25
 800d026:	bf48      	it	mi
 800d028:	b2ad      	uxthmi	r5, r5
 800d02a:	6031      	str	r1, [r6, #0]
 800d02c:	07d9      	lsls	r1, r3, #31
 800d02e:	bf44      	itt	mi
 800d030:	f043 0320 	orrmi.w	r3, r3, #32
 800d034:	6023      	strmi	r3, [r4, #0]
 800d036:	b11d      	cbz	r5, 800d040 <_printf_i+0x19c>
 800d038:	2310      	movs	r3, #16
 800d03a:	e7ad      	b.n	800cf98 <_printf_i+0xf4>
 800d03c:	4826      	ldr	r0, [pc, #152]	@ (800d0d8 <_printf_i+0x234>)
 800d03e:	e7e9      	b.n	800d014 <_printf_i+0x170>
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	f023 0320 	bic.w	r3, r3, #32
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	e7f6      	b.n	800d038 <_printf_i+0x194>
 800d04a:	4616      	mov	r6, r2
 800d04c:	e7bd      	b.n	800cfca <_printf_i+0x126>
 800d04e:	6833      	ldr	r3, [r6, #0]
 800d050:	6825      	ldr	r5, [r4, #0]
 800d052:	6961      	ldr	r1, [r4, #20]
 800d054:	1d18      	adds	r0, r3, #4
 800d056:	6030      	str	r0, [r6, #0]
 800d058:	062e      	lsls	r6, r5, #24
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	d501      	bpl.n	800d062 <_printf_i+0x1be>
 800d05e:	6019      	str	r1, [r3, #0]
 800d060:	e002      	b.n	800d068 <_printf_i+0x1c4>
 800d062:	0668      	lsls	r0, r5, #25
 800d064:	d5fb      	bpl.n	800d05e <_printf_i+0x1ba>
 800d066:	8019      	strh	r1, [r3, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	6123      	str	r3, [r4, #16]
 800d06c:	4616      	mov	r6, r2
 800d06e:	e7bc      	b.n	800cfea <_printf_i+0x146>
 800d070:	6833      	ldr	r3, [r6, #0]
 800d072:	1d1a      	adds	r2, r3, #4
 800d074:	6032      	str	r2, [r6, #0]
 800d076:	681e      	ldr	r6, [r3, #0]
 800d078:	6862      	ldr	r2, [r4, #4]
 800d07a:	2100      	movs	r1, #0
 800d07c:	4630      	mov	r0, r6
 800d07e:	f7f3 f937 	bl	80002f0 <memchr>
 800d082:	b108      	cbz	r0, 800d088 <_printf_i+0x1e4>
 800d084:	1b80      	subs	r0, r0, r6
 800d086:	6060      	str	r0, [r4, #4]
 800d088:	6863      	ldr	r3, [r4, #4]
 800d08a:	6123      	str	r3, [r4, #16]
 800d08c:	2300      	movs	r3, #0
 800d08e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d092:	e7aa      	b.n	800cfea <_printf_i+0x146>
 800d094:	6923      	ldr	r3, [r4, #16]
 800d096:	4632      	mov	r2, r6
 800d098:	4649      	mov	r1, r9
 800d09a:	4640      	mov	r0, r8
 800d09c:	47d0      	blx	sl
 800d09e:	3001      	adds	r0, #1
 800d0a0:	d0ad      	beq.n	800cffe <_printf_i+0x15a>
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	079b      	lsls	r3, r3, #30
 800d0a6:	d413      	bmi.n	800d0d0 <_printf_i+0x22c>
 800d0a8:	68e0      	ldr	r0, [r4, #12]
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	4298      	cmp	r0, r3
 800d0ae:	bfb8      	it	lt
 800d0b0:	4618      	movlt	r0, r3
 800d0b2:	e7a6      	b.n	800d002 <_printf_i+0x15e>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	47d0      	blx	sl
 800d0be:	3001      	adds	r0, #1
 800d0c0:	d09d      	beq.n	800cffe <_printf_i+0x15a>
 800d0c2:	3501      	adds	r5, #1
 800d0c4:	68e3      	ldr	r3, [r4, #12]
 800d0c6:	9903      	ldr	r1, [sp, #12]
 800d0c8:	1a5b      	subs	r3, r3, r1
 800d0ca:	42ab      	cmp	r3, r5
 800d0cc:	dcf2      	bgt.n	800d0b4 <_printf_i+0x210>
 800d0ce:	e7eb      	b.n	800d0a8 <_printf_i+0x204>
 800d0d0:	2500      	movs	r5, #0
 800d0d2:	f104 0619 	add.w	r6, r4, #25
 800d0d6:	e7f5      	b.n	800d0c4 <_printf_i+0x220>
 800d0d8:	0800d321 	.word	0x0800d321
 800d0dc:	0800d332 	.word	0x0800d332

0800d0e0 <memmove>:
 800d0e0:	4288      	cmp	r0, r1
 800d0e2:	b510      	push	{r4, lr}
 800d0e4:	eb01 0402 	add.w	r4, r1, r2
 800d0e8:	d902      	bls.n	800d0f0 <memmove+0x10>
 800d0ea:	4284      	cmp	r4, r0
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	d807      	bhi.n	800d100 <memmove+0x20>
 800d0f0:	1e43      	subs	r3, r0, #1
 800d0f2:	42a1      	cmp	r1, r4
 800d0f4:	d008      	beq.n	800d108 <memmove+0x28>
 800d0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0fe:	e7f8      	b.n	800d0f2 <memmove+0x12>
 800d100:	4402      	add	r2, r0
 800d102:	4601      	mov	r1, r0
 800d104:	428a      	cmp	r2, r1
 800d106:	d100      	bne.n	800d10a <memmove+0x2a>
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d112:	e7f7      	b.n	800d104 <memmove+0x24>

0800d114 <_sbrk_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4d06      	ldr	r5, [pc, #24]	@ (800d130 <_sbrk_r+0x1c>)
 800d118:	2300      	movs	r3, #0
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f4 fd5e 	bl	8001be0 <_sbrk>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_sbrk_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_sbrk_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	24000db0 	.word	0x24000db0

0800d134 <_realloc_r>:
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	4607      	mov	r7, r0
 800d13a:	4614      	mov	r4, r2
 800d13c:	460d      	mov	r5, r1
 800d13e:	b921      	cbnz	r1, 800d14a <_realloc_r+0x16>
 800d140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d144:	4611      	mov	r1, r2
 800d146:	f7ff bc5b 	b.w	800ca00 <_malloc_r>
 800d14a:	b92a      	cbnz	r2, 800d158 <_realloc_r+0x24>
 800d14c:	f7ff fbec 	bl	800c928 <_free_r>
 800d150:	4625      	mov	r5, r4
 800d152:	4628      	mov	r0, r5
 800d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d158:	f000 f81a 	bl	800d190 <_malloc_usable_size_r>
 800d15c:	4284      	cmp	r4, r0
 800d15e:	4606      	mov	r6, r0
 800d160:	d802      	bhi.n	800d168 <_realloc_r+0x34>
 800d162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d166:	d8f4      	bhi.n	800d152 <_realloc_r+0x1e>
 800d168:	4621      	mov	r1, r4
 800d16a:	4638      	mov	r0, r7
 800d16c:	f7ff fc48 	bl	800ca00 <_malloc_r>
 800d170:	4680      	mov	r8, r0
 800d172:	b908      	cbnz	r0, 800d178 <_realloc_r+0x44>
 800d174:	4645      	mov	r5, r8
 800d176:	e7ec      	b.n	800d152 <_realloc_r+0x1e>
 800d178:	42b4      	cmp	r4, r6
 800d17a:	4622      	mov	r2, r4
 800d17c:	4629      	mov	r1, r5
 800d17e:	bf28      	it	cs
 800d180:	4632      	movcs	r2, r6
 800d182:	f7ff fbc3 	bl	800c90c <memcpy>
 800d186:	4629      	mov	r1, r5
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff fbcd 	bl	800c928 <_free_r>
 800d18e:	e7f1      	b.n	800d174 <_realloc_r+0x40>

0800d190 <_malloc_usable_size_r>:
 800d190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d194:	1f18      	subs	r0, r3, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfbc      	itt	lt
 800d19a:	580b      	ldrlt	r3, [r1, r0]
 800d19c:	18c0      	addlt	r0, r0, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_init>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_fini>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr
