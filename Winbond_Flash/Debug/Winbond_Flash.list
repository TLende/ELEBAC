
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a848  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab34  0800ab34  0000bb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab38  0800ab38  0000bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000840  24000000  0800ab3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a90  24000840  0800b37c  0000c840  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240012d0  0800b37c  0000d2d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c840  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016e28  00000000  00000000  0000c86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e95  00000000  00000000  00023696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e98  00000000  00000000  00026530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b2d  00000000  00000000  000273c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000380ff  00000000  00000000  00027ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016852  00000000  00000000  0005fff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ee88  00000000  00000000  00076846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d56ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ba4  00000000  00000000  001d5714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001d92b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000840 	.word	0x24000840
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800aac8 	.word	0x0800aac8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000844 	.word	0x24000844
 80002d4:	0800aac8 	.word	0x0800aac8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <Read_Register+0x50>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f939 	bl	8000884 <Read_Status_Register>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <Read_Register+0x54>)
 8000618:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 fad4 	bl	8000bc8 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <Read_Register+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f92d 	bl	8000884 <Read_Status_Register>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <Read_Register+0x5c>)
 8000630:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f000 fac8 	bl	8000bc8 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <Read_Register+0x60>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f921 	bl	8000884 <Read_Status_Register>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Read_Register+0x64>)
 8000648:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 fabc 	bl	8000bc8 <delay_ns>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000808 	.word	0x24000808
 8000658:	2400085c 	.word	0x2400085c
 800065c:	24000809 	.word	0x24000809
 8000660:	2400085d 	.word	0x2400085d
 8000664:	2400080a 	.word	0x2400080a
 8000668:	2400085e 	.word	0x2400085e

0800066c <Write_Data>:

void Write_Data(uint8_t* data, uint16_t lenght){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <Write_Data+0x80>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d106      	bne.n	800068e <Write_Data+0x22>
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <Write_Data+0x84>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <Write_Data+0x22>
		Block_Erase(0);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fa67 	bl	8000b5c <Block_Erase>
	}
	uint16_t count=0;
 800068e:	2300      	movs	r3, #0
 8000690:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000692:	e022      	b.n	80006da <Write_Data+0x6e>
		*Buffer=*data;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <Write_Data+0x88>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	701a      	strb	r2, [r3, #0]
		Buffer++;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <Write_Data+0x88>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <Write_Data+0x88>)
 80006a6:	6013      	str	r3, [r2, #0]
		data++;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <Write_Data+0x84>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <Write_Data+0x84>)
 80006b8:	801a      	strh	r2, [r3, #0]
		count++;
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <Write_Data+0x84>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006c8:	d307      	bcc.n	80006da <Write_Data+0x6e>
			Write_Data_Buffer(0, &write_data[0], 2048);
 80006ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ce:	490a      	ldr	r1, [pc, #40]	@ (80006f8 <Write_Data+0x8c>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 f967 	bl	80009a4 <Write_Data_Buffer>
			Write_to_page();
 80006d6:	f000 f811 	bl	80006fc <Write_to_page>
	while(count<lenght){
 80006da:	89fa      	ldrh	r2, [r7, #14]
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3d8      	bcc.n	8000694 <Write_Data+0x28>
		}
	}
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	24001062 	.word	0x24001062
 80006f0:	24001060 	.word	0x24001060
 80006f4:	24000800 	.word	0x24000800
 80006f8:	24000000 	.word	0x24000000

080006fc <Write_to_page>:
			Write_to_page();
		}
	}
}

void Write_to_page(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <Write_to_page+0x44>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	490f      	ldr	r1, [pc, #60]	@ (8000744 <Write_to_page+0x48>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f94b 	bl	80009a4 <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <Write_to_page+0x4c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f984 	bl	8000a20 <Write_Data_Flash>
	Page_Index++;
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <Write_to_page+0x4c>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <Write_to_page+0x4c>)
 8000722:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <Write_to_page+0x44>)
 8000726:	2200      	movs	r2, #0
 8000728:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <Write_to_page+0x50>)
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <Write_to_page+0x48>)
 800072e:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 8000730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000734:	21ff      	movs	r1, #255	@ 0xff
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <Write_to_page+0x48>)
 8000738:	f00a f99a 	bl	800aa70 <memset>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24001060 	.word	0x24001060
 8000744:	24000000 	.word	0x24000000
 8000748:	24001062 	.word	0x24001062
 800074c:	24000800 	.word	0x24000800

08000750 <Read_Data>:

void Read_Data(uint16_t page, uint8_t* data){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	80fb      	strh	r3, [r7, #6]
	Select_Page_Read(page);
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f992 	bl	8000a88 <Select_Page_Read>
	Read_Data_Buffer(data, 2048);
 8000764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000768:	6838      	ldr	r0, [r7, #0]
 800076a:	f000 f9c1 	bl	8000af0 <Read_Data_Buffer>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 800077c:	2064      	movs	r0, #100	@ 0x64
 800077e:	f000 fa23 	bl	8000bc8 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000782:	e002      	b.n	800078a <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000784:	2064      	movs	r0, #100	@ 0x64
 8000786:	f000 fa1f 	bl	8000bc8 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <W25N_WaitForReady+0x2c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f878 	bl	8000884 <Read_Status_Register>
 8000794:	4603      	mov	r3, r0
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f2      	bne.n	8000784 <W25N_WaitForReady+0xc>
    }
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2400080a 	.word	0x2400080a

080007a8 <Write_Enable>:

void Write_Enable(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	csLOW();
 80007ac:	2200      	movs	r2, #0
 80007ae:	2110      	movs	r1, #16
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <Write_Enable+0x30>)
 80007b2:	f004 fbbb 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	@ (80007dc <Write_Enable+0x34>)
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <Write_Enable+0x38>)
 80007be:	f007 fb59 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <Write_Enable+0x30>)
 80007c8:	f004 fbb0 	bl	8004f2c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f000 f9fb 	bl	8000bc8 <delay_ns>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	58020000 	.word	0x58020000
 80007dc:	2400080b 	.word	0x2400080b
 80007e0:	24001084 	.word	0x24001084

080007e4 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f2:	f001 fa0b 	bl	8001c0c <HAL_Delay>
	if(BUF){
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d012      	beq.n	8000822 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <Flash_Init+0x98>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f83f 	bl	8000884 <Read_Status_Register>
 8000806:	4603      	mov	r3, r0
 8000808:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000812:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <Flash_Init+0x98>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	7bba      	ldrb	r2, [r7, #14]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f864 	bl	80008e8 <Write_Status_Register>
 8000820:	e011      	b.n	8000846 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <Flash_Init+0x98>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f82c 	bl	8000884 <Read_Status_Register>
 800082c:	4603      	mov	r3, r0
 800082e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <Flash_Init+0x98>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f851 	bl	80008e8 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <Flash_Init+0x9c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f81a 	bl	8000884 <Read_Status_Register>
 8000850:	4603      	mov	r3, r0
 8000852:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000854:	7b7b      	ldrb	r3, [r7, #13]
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000862:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <Flash_Init+0x9c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	7b7a      	ldrb	r2, [r7, #13]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f83b 	bl	80008e8 <Write_Status_Register>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000809 	.word	0x24000809
 8000880:	24000808 	.word	0x24000808

08000884 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <Read_Status_Register+0x50>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <Read_Status_Register+0x54>)
 8000894:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000896:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <Read_Status_Register+0x54>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7053      	strb	r3, [r2, #1]
	csLOW();
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	480e      	ldr	r0, [pc, #56]	@ (80008dc <Read_Status_Register+0x58>)
 80008a2:	f004 fb43 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 80008a6:	2364      	movs	r3, #100	@ 0x64
 80008a8:	2202      	movs	r2, #2
 80008aa:	490b      	ldr	r1, [pc, #44]	@ (80008d8 <Read_Status_Register+0x54>)
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <Read_Status_Register+0x5c>)
 80008ae:	f007 fae1 	bl	8007e74 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 80008b2:	2364      	movs	r3, #100	@ 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	490b      	ldr	r1, [pc, #44]	@ (80008e4 <Read_Status_Register+0x60>)
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <Read_Status_Register+0x5c>)
 80008ba:	f007 fcc9 	bl	8008250 <HAL_SPI_Receive>
	csHIGH();
 80008be:	2201      	movs	r2, #1
 80008c0:	2110      	movs	r1, #16
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <Read_Status_Register+0x58>)
 80008c4:	f004 fb32 	bl	8004f2c <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <Read_Status_Register+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24000806 	.word	0x24000806
 80008d8:	24001064 	.word	0x24001064
 80008dc:	58020000 	.word	0x58020000
 80008e0:	24001084 	.word	0x24001084
 80008e4:	2400106c 	.word	0x2400106c

080008e8 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <Write_Status_Register+0x4c>)
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <Write_Status_Register+0x50>)
 80008fe:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <Write_Status_Register+0x50>)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <Write_Status_Register+0x50>)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	7093      	strb	r3, [r2, #2]
	csLOW();
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	480a      	ldr	r0, [pc, #40]	@ (800093c <Write_Status_Register+0x54>)
 8000912:	f004 fb0b 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000916:	2364      	movs	r3, #100	@ 0x64
 8000918:	2203      	movs	r2, #3
 800091a:	4907      	ldr	r1, [pc, #28]	@ (8000938 <Write_Status_Register+0x50>)
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <Write_Status_Register+0x58>)
 800091e:	f007 faa9 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 8000922:	2201      	movs	r2, #1
 8000924:	2110      	movs	r1, #16
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <Write_Status_Register+0x54>)
 8000928:	f004 fb00 	bl	8004f2c <HAL_GPIO_WritePin>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000807 	.word	0x24000807
 8000938:	24001064 	.word	0x24001064
 800093c:	58020000 	.word	0x58020000
 8000940:	24001084 	.word	0x24001084

08000944 <Read_ID>:

uint32_t Read_ID(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2100      	movs	r1, #0
 800094e:	460a      	mov	r2, r1
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	460a      	mov	r2, r1
 8000954:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <Read_ID+0x54>)
 800095c:	f004 fae6 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000960:	2364      	movs	r3, #100	@ 0x64
 8000962:	2202      	movs	r2, #2
 8000964:	490d      	ldr	r1, [pc, #52]	@ (800099c <Read_ID+0x58>)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <Read_ID+0x5c>)
 8000968:	f007 fa84 	bl	8007e74 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	2203      	movs	r2, #3
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <Read_ID+0x5c>)
 8000974:	f007 fc6c 	bl	8008250 <HAL_SPI_Receive>
	csHIGH();
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	4806      	ldr	r0, [pc, #24]	@ (8000998 <Read_ID+0x54>)
 800097e:	f004 fad5 	bl	8004f2c <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000982:	793b      	ldrb	r3, [r7, #4]
 8000984:	041a      	lsls	r2, r3, #16
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	79b9      	ldrb	r1, [r7, #6]
 800098c:	430b      	orrs	r3, r1
 800098e:	4313      	orrs	r3, r2
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58020000 	.word	0x58020000
 800099c:	24000804 	.word	0x24000804
 80009a0:	24001084 	.word	0x24001084

080009a4 <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 80009b4:	f7ff fef8 	bl	80007a8 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <Write_Data_Buffer+0x6c>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <Write_Data_Buffer+0x70>)
 80009be:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <Write_Data_Buffer+0x70>)
 80009ca:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <Write_Data_Buffer+0x70>)
 80009d2:	709a      	strb	r2, [r3, #2]
	csLOW();
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <Write_Data_Buffer+0x74>)
 80009da:	f004 faa7 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 80009de:	2364      	movs	r3, #100	@ 0x64
 80009e0:	2203      	movs	r2, #3
 80009e2:	490c      	ldr	r1, [pc, #48]	@ (8000a14 <Write_Data_Buffer+0x70>)
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <Write_Data_Buffer+0x78>)
 80009e6:	f007 fa45 	bl	8007e74 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 80009ea:	88ba      	ldrh	r2, [r7, #4]
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <Write_Data_Buffer+0x78>)
 80009f4:	f007 fa3e 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 80009f8:	2201      	movs	r2, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <Write_Data_Buffer+0x74>)
 80009fe:	f004 fa95 	bl	8004f2c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000a02:	2064      	movs	r0, #100	@ 0x64
 8000a04:	f000 f8e0 	bl	8000bc8 <delay_ns>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2400080d 	.word	0x2400080d
 8000a14:	24001064 	.word	0x24001064
 8000a18:	58020000 	.word	0x58020000
 8000a1c:	24001084 	.word	0x24001084

08000a20 <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <Write_Data_Flash+0x58>)
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <Write_Data_Flash+0x5c>)
 8000a30:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <Write_Data_Flash+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <Write_Data_Flash+0x5c>)
 8000a42:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <Write_Data_Flash+0x5c>)
 8000a4a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <Write_Data_Flash+0x60>)
 8000a52:	f004 fa6b 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000a56:	2364      	movs	r3, #100	@ 0x64
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4908      	ldr	r1, [pc, #32]	@ (8000a7c <Write_Data_Flash+0x5c>)
 8000a5c:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <Write_Data_Flash+0x64>)
 8000a5e:	f007 fa09 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 8000a62:	2201      	movs	r2, #1
 8000a64:	2110      	movs	r1, #16
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <Write_Data_Flash+0x60>)
 8000a68:	f004 fa60 	bl	8004f2c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000a6c:	f7ff fe84 	bl	8000778 <W25N_WaitForReady>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2400080e 	.word	0x2400080e
 8000a7c:	24001064 	.word	0x24001064
 8000a80:	58020000 	.word	0x58020000
 8000a84:	24001084 	.word	0x24001084

08000a88 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <Select_Page_Read+0x58>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <Select_Page_Read+0x5c>)
 8000a98:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <Select_Page_Read+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <Select_Page_Read+0x5c>)
 8000aaa:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <Select_Page_Read+0x5c>)
 8000ab2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <Select_Page_Read+0x60>)
 8000aba:	f004 fa37 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000abe:	2364      	movs	r3, #100	@ 0x64
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4908      	ldr	r1, [pc, #32]	@ (8000ae4 <Select_Page_Read+0x5c>)
 8000ac4:	4809      	ldr	r0, [pc, #36]	@ (8000aec <Select_Page_Read+0x64>)
 8000ac6:	f007 f9d5 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 8000aca:	2201      	movs	r2, #1
 8000acc:	2110      	movs	r1, #16
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <Select_Page_Read+0x60>)
 8000ad0:	f004 fa2c 	bl	8004f2c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ad4:	f7ff fe50 	bl	8000778 <W25N_WaitForReady>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2400080f 	.word	0x2400080f
 8000ae4:	24001064 	.word	0x24001064
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	24001084 	.word	0x24001084

08000af0 <Read_Data_Buffer>:

void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <Read_Data_Buffer+0x5c>)
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <Read_Data_Buffer+0x60>)
 8000b02:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <Read_Data_Buffer+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <Read_Data_Buffer+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <Read_Data_Buffer+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b16:	2200      	movs	r2, #0
 8000b18:	2110      	movs	r1, #16
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <Read_Data_Buffer+0x64>)
 8000b1c:	f004 fa06 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000b20:	2364      	movs	r3, #100	@ 0x64
 8000b22:	2204      	movs	r2, #4
 8000b24:	490a      	ldr	r1, [pc, #40]	@ (8000b50 <Read_Data_Buffer+0x60>)
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <Read_Data_Buffer+0x68>)
 8000b28:	f007 f9a4 	bl	8007e74 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000b2c:	887a      	ldrh	r2, [r7, #2]
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <Read_Data_Buffer+0x68>)
 8000b36:	f007 fb8b 	bl	8008250 <HAL_SPI_Receive>
	csHIGH();
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <Read_Data_Buffer+0x64>)
 8000b40:	f004 f9f4 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24000810 	.word	0x24000810
 8000b50:	24001064 	.word	0x24001064
 8000b54:	58020000 	.word	0x58020000
 8000b58:	24001084 	.word	0x24001084

08000b5c <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000b66:	f7ff fe1f 	bl	80007a8 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <Block_Erase+0x5c>)
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <Block_Erase+0x60>)
 8000b70:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <Block_Erase+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <Block_Erase+0x60>)
 8000b82:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <Block_Erase+0x60>)
 8000b8a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <Block_Erase+0x64>)
 8000b92:	f004 f9cb 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000b96:	2364      	movs	r3, #100	@ 0x64
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <Block_Erase+0x60>)
 8000b9c:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <Block_Erase+0x68>)
 8000b9e:	f007 f969 	bl	8007e74 <HAL_SPI_Transmit>
	csHIGH();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <Block_Erase+0x64>)
 8000ba8:	f004 f9c0 	bl	8004f2c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000bac:	f7ff fde4 	bl	8000778 <W25N_WaitForReady>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2400080c 	.word	0x2400080c
 8000bbc:	24001064 	.word	0x24001064
 8000bc0:	58020000 	.word	0x58020000
 8000bc4:	24001084 	.word	0x24001084

08000bc8 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <delay_ns+0x48>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0a5b      	lsrs	r3, r3, #9
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <delay_ns+0x4c>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	09db      	lsrs	r3, r3, #7
 8000bde:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <delay_ns+0x50>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000bf0:	bf00      	nop
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <delay_ns+0x50>)
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f8      	bhi.n	8000bf2 <delay_ns+0x2a>
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	24000814 	.word	0x24000814
 8000c14:	00044b83 	.word	0x00044b83
 8000c18:	e0001000 	.word	0xe0001000

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 ff62 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f89e 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f9da 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f000 f9b8 	bl	8000fa0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c30:	f000 f914 	bl	8000e5c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c34:	f000 f968 	bl	8000f08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fd63 	bl	8001704 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fd60 	bl	8001704 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f000 fd5d 	bl	8001704 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fdf9 	bl	8001844 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <main+0x120>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <main+0x120>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <main+0x120>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <main+0x120>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <main+0x120>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c72:	4932      	ldr	r1, [pc, #200]	@ (8000d3c <main+0x120>)
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fe75 	bl	8001964 <BSP_COM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <main+0x68>
  {
    Error_Handler();
 8000c80:	f000 fa34 	bl	80010ec <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000c84:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <main+0x124>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a2d      	ldr	r2, [pc, #180]	@ (8000d40 <main+0x124>)
 8000c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c8e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000c90:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <main+0x128>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2b      	ldr	r2, [pc, #172]	@ (8000d44 <main+0x128>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	492a      	ldr	r1, [pc, #168]	@ (8000d48 <main+0x12c>)
 8000ca0:	482a      	ldr	r0, [pc, #168]	@ (8000d4c <main+0x130>)
 8000ca2:	f007 ffd7 	bl	8008c54 <HAL_UART_Receive_DMA>

  Flash_Init(0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd9c 	bl	80007e4 <Flash_Init>
  ID=Read_ID();
 8000cac:	f7ff fe4a 	bl	8000944 <Read_ID>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <main+0x134>)
 8000cb4:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000cb6:	f7ff fca5 	bl	8000604 <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000cba:	2364      	movs	r3, #100	@ 0x64
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4925      	ldr	r1, [pc, #148]	@ (8000d54 <main+0x138>)
 8000cc0:	4825      	ldr	r0, [pc, #148]	@ (8000d58 <main+0x13c>)
 8000cc2:	f007 fefe 	bl	8008ac2 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <main+0x138>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b31      	cmp	r3, #49	@ 0x31
 8000ccc:	d11a      	bne.n	8000d04 <main+0xe8>
		  Read_Data(0, &Read_data[0]);
 8000cce:	4923      	ldr	r1, [pc, #140]	@ (8000d5c <main+0x140>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fd3d 	bl	8000750 <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cde:	491f      	ldr	r1, [pc, #124]	@ (8000d5c <main+0x140>)
 8000ce0:	481d      	ldr	r0, [pc, #116]	@ (8000d58 <main+0x13c>)
 8000ce2:	f007 fe60 	bl	80089a6 <HAL_UART_Transmit>
		  Read_Data(1, &Read_data[0]);
 8000ce6:	491d      	ldr	r1, [pc, #116]	@ (8000d5c <main+0x140>)
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fd31 	bl	8000750 <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cf6:	4919      	ldr	r1, [pc, #100]	@ (8000d5c <main+0x140>)
 8000cf8:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <main+0x13c>)
 8000cfa:	f007 fe54 	bl	80089a6 <HAL_UART_Transmit>
		  command = 0;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <main+0x138>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <main+0x138>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b32      	cmp	r3, #50	@ 0x32
 8000d0a:	d108      	bne.n	8000d1e <main+0x102>
		  Start_Flight_Recording=1;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <main+0x144>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 fd6c 	bl	80017f0 <BSP_LED_Toggle>
		  command=0;
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <main+0x138>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <main+0x138>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b33      	cmp	r3, #51	@ 0x33
 8000d24:	d1c7      	bne.n	8000cb6 <main+0x9a>
		  Start_Flight_Recording=0;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <main+0x144>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fd5f 	bl	80017f0 <BSP_LED_Toggle>
		  command=0;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <main+0x138>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000d38:	e7bd      	b.n	8000cb6 <main+0x9a>
 8000d3a:	bf00      	nop
 8000d3c:	24001074 	.word	0x24001074
 8000d40:	e000edf0 	.word	0xe000edf0
 8000d44:	e0001000 	.word	0xe0001000
 8000d48:	2400121c 	.word	0x2400121c
 8000d4c:	2400110c 	.word	0x2400110c
 8000d50:	24001218 	.word	0x24001218
 8000d54:	24000811 	.word	0x24000811
 8000d58:	24001238 	.word	0x24001238
 8000d5c:	24000860 	.word	0x24000860
 8000d60:	24001226 	.word	0x24001226

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09c      	sub	sp, #112	@ 0x70
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	224c      	movs	r2, #76	@ 0x4c
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f009 fe7c 	bl	800aa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f009 fe76 	bl	800aa70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d84:	2002      	movs	r0, #2
 8000d86:	f004 f905 	bl	8004f94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <SystemClock_Config+0xf0>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <SystemClock_Config+0xf0>)
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <SystemClock_Config+0xf0>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <SystemClock_Config+0xf4>)
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e58 <SystemClock_Config+0xf4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000db0:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <SystemClock_Config+0xf4>)
 8000db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dbc:	bf00      	nop
 8000dbe:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <SystemClock_Config+0xf0>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dca:	d1f8      	bne.n	8000dbe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2340      	movs	r3, #64	@ 0x40
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000de4:	233c      	movs	r3, #60	@ 0x3c
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000dec:	2305      	movs	r3, #5
 8000dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000df4:	230c      	movs	r3, #12
 8000df6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 f8ff 	bl	8005008 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e10:	f000 f96c 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	233f      	movs	r3, #63	@ 0x3f
 8000e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e20:	2308      	movs	r3, #8
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e24:	2340      	movs	r3, #64	@ 0x40
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e28:	2340      	movs	r3, #64	@ 0x40
 8000e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fd3e 	bl	80058bc <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e46:	f000 f951 	bl	80010ec <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3770      	adds	r7, #112	@ 0x70
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	58024800 	.word	0x58024800
 8000e58:	58000400 	.word	0x58000400

08000e5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e62:	4a28      	ldr	r2, [pc, #160]	@ (8000f04 <MX_SPI1_Init+0xa8>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e76:	2207      	movs	r2, #7
 8000e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e90:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000e94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_SPI1_Init+0xa4>)
 8000eee:	f006 fe9d 	bl	8007c2c <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000ef8:	f000 f8f8 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24001084 	.word	0x24001084
 8000f04:	40013000 	.word	0x40013000

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f0e:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f50:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f52:	f007 fcd8 	bl	8008906 <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 f8c6 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f64:	f009 fcb9 	bl	800a8da <HAL_UARTEx_SetTxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6e:	f000 f8bd 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f76:	f009 fcee 	bl	800a956 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 f8b4 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f86:	f009 fc6f 	bl	800a868 <HAL_UARTEx_DisableFifoMode>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f90:	f000 f8ac 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2400110c 	.word	0x2400110c
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_DMA_Init+0x3c>)
 8000fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fac:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <MX_DMA_Init+0x3c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_DMA_Init+0x3c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f000 ff2a 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f000 ff41 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4a38      	ldr	r2, [pc, #224]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001014:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <MX_GPIO_Init+0x100>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <MX_GPIO_Init+0x100>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001042:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_GPIO_Init+0x100>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_GPIO_Init+0x104>)
 8001092:	f003 ff4b 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2102      	movs	r1, #2
 800109a:	4813      	ldr	r0, [pc, #76]	@ (80010e8 <MX_GPIO_Init+0x108>)
 800109c:	f003 ff46 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80010a0:	2310      	movs	r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <MX_GPIO_Init+0x104>)
 80010b8:	f003 fd88 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_GPIO_Init+0x108>)
 80010d4:	f003 fd7a 	bl	8004bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	@ 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020000 	.word	0x58020000
 80010e8:	58021000 	.word	0x58021000

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <Error_Handler+0x8>

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_MspInit+0x30>)
 8001100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_MspInit+0x30>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_MspInit+0x30>)
 8001110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	58024400 	.word	0x58024400

0800112c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0bc      	sub	sp, #240	@ 0xf0
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	22c0      	movs	r2, #192	@ 0xc0
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f009 fc8f 	bl	800aa70 <memset>
  if(hspi->Instance==SPI1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a38      	ldr	r2, [pc, #224]	@ (8001238 <HAL_SPI_MspInit+0x10c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d168      	bne.n	800122e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800115c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001168:	2300      	movs	r3, #0
 800116a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f004 ff2f 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800117c:	f7ff ffb6 	bl	80010ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <HAL_SPI_MspInit+0x110>)
 8001182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001186:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <HAL_SPI_MspInit+0x110>)
 8001188:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800118c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001190:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <HAL_SPI_MspInit+0x110>)
 8001192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <HAL_SPI_MspInit+0x110>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011da:	2360      	movs	r3, #96	@ 0x60
 80011dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fc:	4619      	mov	r1, r3
 80011fe:	4810      	ldr	r0, [pc, #64]	@ (8001240 <HAL_SPI_MspInit+0x114>)
 8001200:	f003 fce4 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001204:	2320      	movs	r3, #32
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121c:	2305      	movs	r3, #5
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	@ (8001244 <HAL_SPI_MspInit+0x118>)
 800122a:	f003 fccf 	bl	8004bcc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	37f0      	adds	r7, #240	@ 0xf0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40013000 	.word	0x40013000
 800123c:	58024400 	.word	0x58024400
 8001240:	58020000 	.word	0x58020000
 8001244:	58020400 	.word	0x58020400

08001248 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ba      	sub	sp, #232	@ 0xe8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	22c0      	movs	r2, #192	@ 0xc0
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 fc01 	bl	800aa70 <memset>
  if(huart->Instance==USART1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a4d      	ldr	r2, [pc, #308]	@ (80013a8 <HAL_UART_MspInit+0x160>)
 8001274:	4293      	cmp	r3, r2
 8001276:	f040 8093 	bne.w	80013a0 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800127a:	f04f 0201 	mov.w	r2, #1
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fe9f 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800129c:	f7ff ff26 	bl	80010ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a0:	4b42      	ldr	r3, [pc, #264]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012a6:	4a41      	ldr	r2, [pc, #260]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012b0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	4a39      	ldr	r2, [pc, #228]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ce:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <HAL_UART_MspInit+0x164>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001300:	4619      	mov	r1, r3
 8001302:	482b      	ldr	r0, [pc, #172]	@ (80013b0 <HAL_UART_MspInit+0x168>)
 8001304:	f003 fc62 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001320:	2307      	movs	r3, #7
 8001322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800132a:	4619      	mov	r1, r3
 800132c:	4820      	ldr	r0, [pc, #128]	@ (80013b0 <HAL_UART_MspInit+0x168>)
 800132e:	f003 fc4d 	bl	8004bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001334:	4a20      	ldr	r2, [pc, #128]	@ (80013b8 <HAL_UART_MspInit+0x170>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 800133a:	2229      	movs	r2, #41	@ 0x29
 800133c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 800134c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001350:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001358:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001366:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800136a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001372:	4810      	ldr	r0, [pc, #64]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001374:	f000 fd8a 	bl	8001e8c <HAL_DMA_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800137e:	f7ff feb5 	bl	80010ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 8001386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_UART_MspInit+0x16c>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2025      	movs	r0, #37	@ 0x25
 8001396:	f000 fd44 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800139a:	2025      	movs	r0, #37	@ 0x25
 800139c:	f000 fd5b 	bl	8001e56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80013a0:	bf00      	nop
 80013a2:	37e8      	adds	r7, #232	@ 0xe8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40011000 	.word	0x40011000
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58020400 	.word	0x58020400
 80013b4:	240011a0 	.word	0x240011a0
 80013b8:	40020010 	.word	0x40020010

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 fbda 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <SysTick_Handler+0x48>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <SysTick_Handler+0x3c>
	  CLK_SIM++;
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <SysTick_Handler+0x4c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <SysTick_Handler+0x4c>)
 8001428:	6013      	str	r3, [r2, #0]
	  Time++;
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <SysTick_Handler+0x50>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <SysTick_Handler+0x50>)
 8001434:	801a      	strh	r2, [r3, #0]
	  if(Time>=100){
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <SysTick_Handler+0x50>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b63      	cmp	r3, #99	@ 0x63
 800143c:	d909      	bls.n	8001452 <SysTick_Handler+0x42>
	    	Write_To_Flightdata=1;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <SysTick_Handler+0x54>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
	    	Time=0;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SysTick_Handler+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	e002      	b.n	8001452 <SysTick_Handler+0x42>
	  Time=0;
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <SysTick_Handler+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24001226 	.word	0x24001226
 800145c:	2400122c 	.word	0x2400122c
 8001460:	24001228 	.word	0x24001228
 8001464:	24001227 	.word	0x24001227

08001468 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Stream0_IRQHandler+0x10>)
 800146e:	f002 f837 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	240011a0 	.word	0x240011a0

0800147c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART1_IRQHandler+0x10>)
 8001482:	f007 fc33 	bl	8008cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400110c 	.word	0x2400110c

08001490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001494:	2000      	movs	r0, #0
 8001496:	f000 fa47 	bl	8001928 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
		uint8_t Temp[14];

		Temp[0]=Rx_buffer[0];
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	723b      	strb	r3, [r7, #8]
		Temp[1]=Rx_buffer[1];
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	727b      	strb	r3, [r7, #9]
		Temp[2]=Rx_buffer[2];
 80014b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	72bb      	strb	r3, [r7, #10]
		Temp[3]=Rx_buffer[3];
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	72fb      	strb	r3, [r7, #11]
		Temp[4]=Rx_buffer[4];
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	733b      	strb	r3, [r7, #12]
		Temp[5]=Rx_buffer[5];
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	737b      	strb	r3, [r7, #13]
		Temp[6]=Rx_buffer[6];
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014ce:	799b      	ldrb	r3, [r3, #6]
 80014d0:	73bb      	strb	r3, [r7, #14]
		Temp[7]=Rx_buffer[7];
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014d4:	79db      	ldrb	r3, [r3, #7]
 80014d6:	73fb      	strb	r3, [r7, #15]
		Temp[8]=Rx_buffer[8];
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014da:	7a1b      	ldrb	r3, [r3, #8]
 80014dc:	743b      	strb	r3, [r7, #16]
		Temp[9]=Rx_buffer[9];
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 80014e0:	7a5b      	ldrb	r3, [r3, #9]
 80014e2:	747b      	strb	r3, [r7, #17]
		Temp[10]=(uint8_t)(CLK_SIM>>24);
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_UART_RxCpltCallback+0x94>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0e1b      	lsrs	r3, r3, #24
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	74bb      	strb	r3, [r7, #18]
		Temp[11]=(uint8_t)(CLK_SIM>>16);
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_UART_RxCpltCallback+0x94>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_UART_RxCpltCallback+0x94>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM);
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_UART_RxCpltCallback+0x94>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	757b      	strb	r3, [r7, #21]

		Write_Data(&Temp[0], sizeof(Temp));
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	210e      	movs	r1, #14
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f8ab 	bl	800066c <Write_Data>

		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8001516:	220a      	movs	r2, #10
 8001518:	4905      	ldr	r1, [pc, #20]	@ (8001530 <HAL_UART_RxCpltCallback+0x90>)
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <HAL_UART_RxCpltCallback+0x98>)
 800151c:	f007 fb9a 	bl	8008c54 <HAL_UART_Receive_DMA>
		BSP_LED_Toggle(LED_RED);
 8001520:	2002      	movs	r0, #2
 8001522:	f000 f965 	bl	80017f0 <BSP_LED_Toggle>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2400121c 	.word	0x2400121c
 8001534:	2400122c 	.word	0x2400122c
 8001538:	2400110c 	.word	0x2400110c

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <SystemInit+0x114>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a42      	ldr	r2, [pc, #264]	@ (8001650 <SystemInit+0x114>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001550:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <SystemInit+0x118>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b06      	cmp	r3, #6
 800155a:	d807      	bhi.n	800156c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155c:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <SystemInit+0x118>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 030f 	bic.w	r3, r3, #15
 8001564:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <SystemInit+0x118>)
 8001566:	f043 0307 	orr.w	r3, r3, #7
 800156a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800156c:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <SystemInit+0x11c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a39      	ldr	r2, [pc, #228]	@ (8001658 <SystemInit+0x11c>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <SystemInit+0x11c>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <SystemInit+0x11c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4935      	ldr	r1, [pc, #212]	@ (8001658 <SystemInit+0x11c>)
 8001584:	4b35      	ldr	r3, [pc, #212]	@ (800165c <SystemInit+0x120>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158a:	4b32      	ldr	r3, [pc, #200]	@ (8001654 <SystemInit+0x118>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001596:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <SystemInit+0x118>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	4a2d      	ldr	r2, [pc, #180]	@ (8001654 <SystemInit+0x118>)
 80015a0:	f043 0307 	orr.w	r3, r3, #7
 80015a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <SystemInit+0x11c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <SystemInit+0x11c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <SystemInit+0x11c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <SystemInit+0x11c>)
 80015ba:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <SystemInit+0x124>)
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <SystemInit+0x11c>)
 80015c0:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <SystemInit+0x128>)
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <SystemInit+0x11c>)
 80015c6:	4a28      	ldr	r2, [pc, #160]	@ (8001668 <SystemInit+0x12c>)
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <SystemInit+0x11c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <SystemInit+0x11c>)
 80015d2:	4a25      	ldr	r2, [pc, #148]	@ (8001668 <SystemInit+0x12c>)
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <SystemInit+0x11c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <SystemInit+0x11c>)
 80015de:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <SystemInit+0x12c>)
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <SystemInit+0x11c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <SystemInit+0x11c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001658 <SystemInit+0x11c>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <SystemInit+0x11c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <SystemInit+0x130>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <SystemInit+0x134>)
 8001600:	4013      	ands	r3, r2
 8001602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001606:	d202      	bcs.n	800160e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <SystemInit+0x138>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <SystemInit+0x11c>)
 8001610:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d113      	bne.n	8001644 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <SystemInit+0x11c>)
 800161e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001622:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <SystemInit+0x11c>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001628:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <SystemInit+0x13c>)
 800162e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001632:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <SystemInit+0x11c>)
 8001636:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <SystemInit+0x11c>)
 800163c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001640:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	52002000 	.word	0x52002000
 8001658:	58024400 	.word	0x58024400
 800165c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001660:	02020200 	.word	0x02020200
 8001664:	01ff0000 	.word	0x01ff0000
 8001668:	01010280 	.word	0x01010280
 800166c:	5c001000 	.word	0x5c001000
 8001670:	ffff0000 	.word	0xffff0000
 8001674:	51008108 	.word	0x51008108
 8001678:	52004000 	.word	0x52004000

0800167c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <ExitRun0Mode+0x2c>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <ExitRun0Mode+0x2c>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800168c:	bf00      	nop
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <ExitRun0Mode+0x2c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f9      	beq.n	800168e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	58024800 	.word	0x58024800

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016b0:	f7ff ffe4 	bl	800167c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff ff42 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	@ (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f009 f9cf 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff fa9b 	bl	8000c1c <main>
  bx  lr
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f0:	24000840 	.word	0x24000840
  ldr r2, =_sidata
 80016f4:	0800ab3c 	.word	0x0800ab3c
  ldr r2, =_sbss
 80016f8:	24000840 	.word	0x24000840
  ldr r4, =_ebss
 80016fc:	240012d0 	.word	0x240012d0

08001700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC3_IRQHandler>
	...

08001704 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <BSP_LED_Init+0x28>
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d006      	beq.n	800172c <BSP_LED_Init+0x28>
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d003      	beq.n	800172c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001724:	f06f 0301 	mvn.w	r3, #1
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800172a:	e055      	b.n	80017d8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001732:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <BSP_LED_Init+0xe0>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <BSP_LED_Init+0xe0>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001742:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <BSP_LED_Init+0xe0>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	e021      	b.n	8001796 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10f      	bne.n	8001778 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <BSP_LED_Init+0xe0>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <BSP_LED_Init+0xe0>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <BSP_LED_Init+0xe0>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	e00e      	b.n	8001796 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <BSP_LED_Init+0xe0>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <BSP_LED_Init+0xe0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <BSP_LED_Init+0xe0>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4a13      	ldr	r2, [pc, #76]	@ (80017e8 <BSP_LED_Init+0xe4>)
 800179a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <BSP_LED_Init+0xe8>)
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	f107 0218 	add.w	r2, r7, #24
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fa06 	bl	8004bcc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <BSP_LED_Init+0xe8>)
 80017c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <BSP_LED_Init+0xe4>)
 80017cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d0:	2200      	movs	r2, #0
 80017d2:	4619      	mov	r1, r3
 80017d4:	f003 fbaa 	bl	8004f2c <HAL_GPIO_WritePin>
  }

  return ret;
 80017d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3730      	adds	r7, #48	@ 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	58024400 	.word	0x58024400
 80017e8:	0800aaf0 	.word	0x0800aaf0
 80017ec:	24000820 	.word	0x24000820

080017f0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <BSP_LED_Toggle+0x28>
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d006      	beq.n	8001818 <BSP_LED_Toggle+0x28>
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d003      	beq.n	8001818 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001810:	f06f 0301 	mvn.w	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e00b      	b.n	8001830 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <BSP_LED_Toggle+0x4c>)
 800181c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4907      	ldr	r1, [pc, #28]	@ (8001840 <BSP_LED_Toggle+0x50>)
 8001824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f003 fb97 	bl	8004f5e <HAL_GPIO_TogglePin>
  }

  return ret;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24000820 	.word	0x24000820
 8001840:	0800aaf0 	.word	0x0800aaf0

08001844 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <BSP_PB_Init+0xcc>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <BSP_PB_Init+0xcc>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <BSP_PB_Init+0xcc>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001876:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a21      	ldr	r2, [pc, #132]	@ (8001914 <BSP_PB_Init+0xd0>)
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f003 f997 	bl	8004bcc <HAL_GPIO_Init>
 800189e:	e031      	b.n	8001904 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018a4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001914 <BSP_PB_Init+0xd0>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	f107 020c 	add.w	r2, r7, #12
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 f989 	bl	8004bcc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <BSP_PB_Init+0xd4>)
 80018c0:	441a      	add	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4915      	ldr	r1, [pc, #84]	@ (800191c <BSP_PB_Init+0xd8>)
 80018c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f003 f938 	bl	8004b42 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <BSP_PB_Init+0xd4>)
 80018d8:	1898      	adds	r0, r3, r2
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <BSP_PB_Init+0xdc>)
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	461a      	mov	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f003 f90d 	bl	8004b04 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018ea:	2028      	movs	r0, #40	@ 0x28
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <BSP_PB_Init+0xe0>)
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	f000 fa93 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018fc:	2328      	movs	r3, #40	@ 0x28
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 faa9 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	58024400 	.word	0x58024400
 8001914:	2400082c 	.word	0x2400082c
 8001918:	24001230 	.word	0x24001230
 800191c:	0800aaf8 	.word	0x0800aaf8
 8001920:	24000830 	.word	0x24000830
 8001924:	24000834 	.word	0x24000834

08001928 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <BSP_PB_IRQHandler+0x20>)
 8001938:	4413      	add	r3, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f916 	bl	8004b6c <HAL_EXTI_IRQHandler>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24001230 	.word	0x24001230

0800194c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800197a:	f06f 0301 	mvn.w	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e018      	b.n	80019b4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2294      	movs	r2, #148	@ 0x94
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <BSP_COM_Init+0x5c>)
 800198c:	4413      	add	r3, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f852 	bl	8001a38 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2294      	movs	r2, #148	@ 0x94
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <BSP_COM_Init+0x5c>)
 800199e:	4413      	add	r3, r2
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f80e 	bl	80019c4 <MX_USART3_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019ae:	f06f 0303 	mvn.w	r3, #3
 80019b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24001238 	.word	0x24001238

080019c4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <MX_USART3_Init+0x60>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	895b      	ldrh	r3, [r3, #10]
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	891b      	ldrh	r3, [r3, #8]
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	899b      	ldrh	r3, [r3, #12]
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a10:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f006 ff77 	bl	8008906 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2400081c 	.word	0x2400081c

08001a28 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ff8d 	bl	800194c <BSP_PB_Callback>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001aac:	2307      	movs	r3, #7
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <COM1_MspInit+0xac>)
 8001ab8:	f003 f888 	bl	8004bcc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <COM1_MspInit+0xac>)
 8001ad2:	f003 f87b 	bl	8004bcc <HAL_GPIO_Init>
}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	@ 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020c00 	.word	0x58020c00

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f98c 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af4:	f004 f898 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <HAL_Init+0x6c>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_Init+0x68>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_Init+0x6c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_Init+0x70>)
 8001b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_Init+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f814 	bl	8001b60 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e002      	b.n	8001b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b42:	f7ff fad9 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58024400 	.word	0x58024400
 8001b54:	0800aae0 	.word	0x0800aae0
 8001b58:	24000818 	.word	0x24000818
 8001b5c:	24000814 	.word	0x24000814

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_InitTick+0x60>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e021      	b.n	8001bb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_InitTick+0x64>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_InitTick+0x60>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f971 	bl	8001e72 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f93b 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <HAL_InitTick+0x68>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2400083c 	.word	0x2400083c
 8001bc4:	24000814 	.word	0x24000814
 8001bc8:	24000838 	.word	0x24000838

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2400083c 	.word	0x2400083c
 8001bf0:	240012cc 	.word	0x240012cc

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	240012cc 	.word	0x240012cc

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2400083c 	.word	0x2400083c

08001c54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_GetREVID+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	5c001000 	.word	0x5c001000

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	05fa0000 	.word	0x05fa0000

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	@ (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	@ (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	@ (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	@ 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff40 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff90 	bl	8001d60 <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5f 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff33 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa4 	bl	8001dc8 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff feae 	bl	8001bf4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e316      	b.n	80024d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a66      	ldr	r2, [pc, #408]	@ (8002044 <HAL_DMA_Init+0x1b8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d04a      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_DMA_Init+0x1bc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d045      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a63      	ldr	r2, [pc, #396]	@ (800204c <HAL_DMA_Init+0x1c0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d040      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a62      	ldr	r2, [pc, #392]	@ (8002050 <HAL_DMA_Init+0x1c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d03b      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a60      	ldr	r2, [pc, #384]	@ (8002054 <HAL_DMA_Init+0x1c8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d036      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	@ (8002058 <HAL_DMA_Init+0x1cc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800205c <HAL_DMA_Init+0x1d0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02c      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_DMA_Init+0x1d4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d027      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <HAL_DMA_Init+0x1d8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a59      	ldr	r2, [pc, #356]	@ (8002068 <HAL_DMA_Init+0x1dc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01d      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a57      	ldr	r2, [pc, #348]	@ (800206c <HAL_DMA_Init+0x1e0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a56      	ldr	r2, [pc, #344]	@ (8002070 <HAL_DMA_Init+0x1e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <HAL_DMA_Init+0x1e8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a53      	ldr	r2, [pc, #332]	@ (8002078 <HAL_DMA_Init+0x1ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a51      	ldr	r2, [pc, #324]	@ (800207c <HAL_DMA_Init+0x1f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a50      	ldr	r2, [pc, #320]	@ (8002080 <HAL_DMA_Init+0x1f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_DMA_Init+0xbc>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_DMA_Init+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 813b 	beq.w	80021c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_DMA_Init+0x1b8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a36      	ldr	r2, [pc, #216]	@ (8002048 <HAL_DMA_Init+0x1bc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_DMA_Init+0x1c0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a33      	ldr	r2, [pc, #204]	@ (8002050 <HAL_DMA_Init+0x1c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a31      	ldr	r2, [pc, #196]	@ (8002054 <HAL_DMA_Init+0x1c8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <HAL_DMA_Init+0x1cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <HAL_DMA_Init+0x1d0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <HAL_DMA_Init+0x1d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <HAL_DMA_Init+0x1d8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002068 <HAL_DMA_Init+0x1dc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	@ (800206c <HAL_DMA_Init+0x1e0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_DMA_Init+0x1e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <HAL_DMA_Init+0x1e8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <HAL_DMA_Init+0x1ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_DMA_Init+0x1f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <HAL_DMA_Init+0x1f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <HAL_DMA_Init+0x186>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e007      	b.n	8002022 <HAL_DMA_Init+0x196>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002022:	e02f      	b.n	8002084 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002024:	f7ff fde6 	bl	8001bf4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b05      	cmp	r3, #5
 8002030:	d928      	bls.n	8002084 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e246      	b.n	80024d2 <HAL_DMA_Init+0x646>
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1c8      	bne.n	8002024 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4b83      	ldr	r3, [pc, #524]	@ (80022ac <HAL_DMA_Init+0x420>)
 800209e:	4013      	ands	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4313      	orrs	r3, r2
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020e8:	4b71      	ldr	r3, [pc, #452]	@ (80022b0 <HAL_DMA_Init+0x424>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b71      	ldr	r3, [pc, #452]	@ (80022b4 <HAL_DMA_Init+0x428>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020f4:	d328      	bcc.n	8002148 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b28      	cmp	r3, #40	@ 0x28
 80020fc:	d903      	bls.n	8002106 <HAL_DMA_Init+0x27a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b2e      	cmp	r3, #46	@ 0x2e
 8002104:	d917      	bls.n	8002136 <HAL_DMA_Init+0x2aa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b3e      	cmp	r3, #62	@ 0x3e
 800210c:	d903      	bls.n	8002116 <HAL_DMA_Init+0x28a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b42      	cmp	r3, #66	@ 0x42
 8002114:	d90f      	bls.n	8002136 <HAL_DMA_Init+0x2aa>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b46      	cmp	r3, #70	@ 0x46
 800211c:	d903      	bls.n	8002126 <HAL_DMA_Init+0x29a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b48      	cmp	r3, #72	@ 0x48
 8002124:	d907      	bls.n	8002136 <HAL_DMA_Init+0x2aa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b4e      	cmp	r3, #78	@ 0x4e
 800212c:	d905      	bls.n	800213a <HAL_DMA_Init+0x2ae>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b52      	cmp	r3, #82	@ 0x52
 8002134:	d801      	bhi.n	800213a <HAL_DMA_Init+0x2ae>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_DMA_Init+0x2b0>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002146:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f023 0307 	bic.w	r3, r3, #7
 800215e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	2b04      	cmp	r3, #4
 8002170:	d117      	bne.n	80021a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f002 fb33 	bl	80047f0 <DMA_CheckFifoParam>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2240      	movs	r2, #64	@ 0x40
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e197      	b.n	80024d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 fa6e 	bl	800468c <DMA_CalcBaseAndBitshift>
 80021b0:	4603      	mov	r3, r0
 80021b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	223f      	movs	r2, #63	@ 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e0cd      	b.n	8002362 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	@ (80022b8 <HAL_DMA_Init+0x42c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a39      	ldr	r2, [pc, #228]	@ (80022bc <HAL_DMA_Init+0x430>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01d      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a38      	ldr	r2, [pc, #224]	@ (80022c0 <HAL_DMA_Init+0x434>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d018      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a36      	ldr	r2, [pc, #216]	@ (80022c4 <HAL_DMA_Init+0x438>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a35      	ldr	r2, [pc, #212]	@ (80022c8 <HAL_DMA_Init+0x43c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00e      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a33      	ldr	r2, [pc, #204]	@ (80022cc <HAL_DMA_Init+0x440>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a32      	ldr	r2, [pc, #200]	@ (80022d0 <HAL_DMA_Init+0x444>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_DMA_Init+0x38a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <HAL_DMA_Init+0x448>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_DMA_Init+0x38e>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_DMA_Init+0x390>
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8097 	beq.w	8002350 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a24      	ldr	r2, [pc, #144]	@ (80022b8 <HAL_DMA_Init+0x42c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d021      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_DMA_Init+0x430>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01c      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_DMA_Init+0x434>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d017      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	@ (80022c4 <HAL_DMA_Init+0x438>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d012      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_DMA_Init+0x43c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <HAL_DMA_Init+0x440>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d008      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_DMA_Init+0x444>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <HAL_DMA_Init+0x3e4>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_DMA_Init+0x448>)
 800226e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <HAL_DMA_Init+0x44c>)
 800228c:	4013      	ands	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b40      	cmp	r3, #64	@ 0x40
 8002296:	d021      	beq.n	80022dc <HAL_DMA_Init+0x450>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b80      	cmp	r3, #128	@ 0x80
 800229e:	d102      	bne.n	80022a6 <HAL_DMA_Init+0x41a>
 80022a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a4:	e01b      	b.n	80022de <HAL_DMA_Init+0x452>
 80022a6:	2300      	movs	r3, #0
 80022a8:	e019      	b.n	80022de <HAL_DMA_Init+0x452>
 80022aa:	bf00      	nop
 80022ac:	fe10803f 	.word	0xfe10803f
 80022b0:	5c001000 	.word	0x5c001000
 80022b4:	ffff0000 	.word	0xffff0000
 80022b8:	58025408 	.word	0x58025408
 80022bc:	5802541c 	.word	0x5802541c
 80022c0:	58025430 	.word	0x58025430
 80022c4:	58025444 	.word	0x58025444
 80022c8:	58025458 	.word	0x58025458
 80022cc:	5802546c 	.word	0x5802546c
 80022d0:	58025480 	.word	0x58025480
 80022d4:	58025494 	.word	0x58025494
 80022d8:	fffe000f 	.word	0xfffe000f
 80022dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002304:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800230c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b6e      	ldr	r3, [pc, #440]	@ (80024dc <HAL_DMA_Init+0x650>)
 8002324:	4413      	add	r3, r2
 8002326:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <HAL_DMA_Init+0x654>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f002 f9a9 	bl	800468c <DMA_CalcBaseAndBitshift>
 800233a:	4603      	mov	r3, r0
 800233c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2201      	movs	r2, #1
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	e008      	b.n	8002362 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2240      	movs	r2, #64	@ 0x40
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0b7      	b.n	80024d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5f      	ldr	r2, [pc, #380]	@ (80024e4 <HAL_DMA_Init+0x658>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d072      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5d      	ldr	r2, [pc, #372]	@ (80024e8 <HAL_DMA_Init+0x65c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d06d      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_DMA_Init+0x660>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d068      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a5a      	ldr	r2, [pc, #360]	@ (80024f0 <HAL_DMA_Init+0x664>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d063      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a59      	ldr	r2, [pc, #356]	@ (80024f4 <HAL_DMA_Init+0x668>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d05e      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a57      	ldr	r2, [pc, #348]	@ (80024f8 <HAL_DMA_Init+0x66c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d059      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_DMA_Init+0x670>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d054      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a54      	ldr	r2, [pc, #336]	@ (8002500 <HAL_DMA_Init+0x674>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04f      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a53      	ldr	r2, [pc, #332]	@ (8002504 <HAL_DMA_Init+0x678>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d04a      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a51      	ldr	r2, [pc, #324]	@ (8002508 <HAL_DMA_Init+0x67c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d045      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_DMA_Init+0x680>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d040      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002510 <HAL_DMA_Init+0x684>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d03b      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a4d      	ldr	r2, [pc, #308]	@ (8002514 <HAL_DMA_Init+0x688>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d036      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002518 <HAL_DMA_Init+0x68c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_DMA_Init+0x690>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d02c      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a48      	ldr	r2, [pc, #288]	@ (8002520 <HAL_DMA_Init+0x694>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d027      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_DMA_Init+0x698>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a45      	ldr	r2, [pc, #276]	@ (8002528 <HAL_DMA_Init+0x69c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a44      	ldr	r2, [pc, #272]	@ (800252c <HAL_DMA_Init+0x6a0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d018      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a42      	ldr	r2, [pc, #264]	@ (8002530 <HAL_DMA_Init+0x6a4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a41      	ldr	r2, [pc, #260]	@ (8002534 <HAL_DMA_Init+0x6a8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3f      	ldr	r2, [pc, #252]	@ (8002538 <HAL_DMA_Init+0x6ac>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a3e      	ldr	r2, [pc, #248]	@ (800253c <HAL_DMA_Init+0x6b0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Init+0x5c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3c      	ldr	r2, [pc, #240]	@ (8002540 <HAL_DMA_Init+0x6b4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Init+0x5ca>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_DMA_Init+0x5cc>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d032      	beq.n	80024c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f002 fa43 	bl	80048e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b80      	cmp	r3, #128	@ 0x80
 8002468:	d102      	bne.n	8002470 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002484:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d010      	beq.n	80024b0 <HAL_DMA_Init+0x624>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d80c      	bhi.n	80024b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f002 fac0 	bl	8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	e008      	b.n	80024c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	a7fdabf8 	.word	0xa7fdabf8
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	40020010 	.word	0x40020010
 80024e8:	40020028 	.word	0x40020028
 80024ec:	40020040 	.word	0x40020040
 80024f0:	40020058 	.word	0x40020058
 80024f4:	40020070 	.word	0x40020070
 80024f8:	40020088 	.word	0x40020088
 80024fc:	400200a0 	.word	0x400200a0
 8002500:	400200b8 	.word	0x400200b8
 8002504:	40020410 	.word	0x40020410
 8002508:	40020428 	.word	0x40020428
 800250c:	40020440 	.word	0x40020440
 8002510:	40020458 	.word	0x40020458
 8002514:	40020470 	.word	0x40020470
 8002518:	40020488 	.word	0x40020488
 800251c:	400204a0 	.word	0x400204a0
 8002520:	400204b8 	.word	0x400204b8
 8002524:	58025408 	.word	0x58025408
 8002528:	5802541c 	.word	0x5802541c
 800252c:	58025430 	.word	0x58025430
 8002530:	58025444 	.word	0x58025444
 8002534:	58025458 	.word	0x58025458
 8002538:	5802546c 	.word	0x5802546c
 800253c:	58025480 	.word	0x58025480
 8002540:	58025494 	.word	0x58025494

08002544 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e226      	b.n	80029ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_DMA_Start_IT+0x2a>
 800256a:	2302      	movs	r3, #2
 800256c:	e21f      	b.n	80029ae <HAL_DMA_Start_IT+0x46a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	f040 820a 	bne.w	8002998 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a68      	ldr	r2, [pc, #416]	@ (8002738 <HAL_DMA_Start_IT+0x1f4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d04a      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a66      	ldr	r2, [pc, #408]	@ (800273c <HAL_DMA_Start_IT+0x1f8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d045      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_DMA_Start_IT+0x1fc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d040      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a63      	ldr	r2, [pc, #396]	@ (8002744 <HAL_DMA_Start_IT+0x200>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d03b      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a62      	ldr	r2, [pc, #392]	@ (8002748 <HAL_DMA_Start_IT+0x204>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d036      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a60      	ldr	r2, [pc, #384]	@ (800274c <HAL_DMA_Start_IT+0x208>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d031      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002750 <HAL_DMA_Start_IT+0x20c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d02c      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002754 <HAL_DMA_Start_IT+0x210>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d027      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002758 <HAL_DMA_Start_IT+0x214>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a5a      	ldr	r2, [pc, #360]	@ (800275c <HAL_DMA_Start_IT+0x218>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01d      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a59      	ldr	r2, [pc, #356]	@ (8002760 <HAL_DMA_Start_IT+0x21c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d018      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a57      	ldr	r2, [pc, #348]	@ (8002764 <HAL_DMA_Start_IT+0x220>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a56      	ldr	r2, [pc, #344]	@ (8002768 <HAL_DMA_Start_IT+0x224>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a54      	ldr	r2, [pc, #336]	@ (800276c <HAL_DMA_Start_IT+0x228>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <HAL_DMA_Start_IT+0x22c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_DMA_Start_IT+0xee>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a51      	ldr	r2, [pc, #324]	@ (8002774 <HAL_DMA_Start_IT+0x230>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <HAL_DMA_Start_IT+0x100>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e007      	b.n	8002654 <HAL_DMA_Start_IT+0x110>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f001 fe6a 	bl	8004334 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a34      	ldr	r2, [pc, #208]	@ (8002738 <HAL_DMA_Start_IT+0x1f4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d04a      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a33      	ldr	r2, [pc, #204]	@ (800273c <HAL_DMA_Start_IT+0x1f8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d045      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_DMA_Start_IT+0x1fc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d040      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a30      	ldr	r2, [pc, #192]	@ (8002744 <HAL_DMA_Start_IT+0x200>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d03b      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_DMA_Start_IT+0x204>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d036      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_DMA_Start_IT+0x208>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d031      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <HAL_DMA_Start_IT+0x20c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02c      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_DMA_Start_IT+0x210>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d027      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <HAL_DMA_Start_IT+0x214>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_DMA_Start_IT+0x218>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d01d      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a25      	ldr	r2, [pc, #148]	@ (8002760 <HAL_DMA_Start_IT+0x21c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <HAL_DMA_Start_IT+0x220>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <HAL_DMA_Start_IT+0x224>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_DMA_Start_IT+0x228>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_DMA_Start_IT+0x22c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_DMA_Start_IT+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_DMA_Start_IT+0x230>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Start_IT+0x1c0>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_DMA_Start_IT+0x1c2>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 021e 	bic.w	r2, r3, #30
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0216 	orr.w	r2, r2, #22
 800271c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03e      	beq.n	80027a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0208 	orr.w	r2, r2, #8
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e035      	b.n	80027a4 <HAL_DMA_Start_IT+0x260>
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 020e 	bic.w	r2, r3, #14
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 020a 	orr.w	r2, r2, #10
 800278a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0204 	orr.w	r2, r2, #4
 80027a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a83      	ldr	r2, [pc, #524]	@ (80029b8 <HAL_DMA_Start_IT+0x474>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d072      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a82      	ldr	r2, [pc, #520]	@ (80029bc <HAL_DMA_Start_IT+0x478>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d06d      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a80      	ldr	r2, [pc, #512]	@ (80029c0 <HAL_DMA_Start_IT+0x47c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d068      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7f      	ldr	r2, [pc, #508]	@ (80029c4 <HAL_DMA_Start_IT+0x480>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d063      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7d      	ldr	r2, [pc, #500]	@ (80029c8 <HAL_DMA_Start_IT+0x484>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d05e      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_DMA_Start_IT+0x488>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d059      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a7a      	ldr	r2, [pc, #488]	@ (80029d0 <HAL_DMA_Start_IT+0x48c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d054      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a79      	ldr	r2, [pc, #484]	@ (80029d4 <HAL_DMA_Start_IT+0x490>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04f      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a77      	ldr	r2, [pc, #476]	@ (80029d8 <HAL_DMA_Start_IT+0x494>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04a      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a76      	ldr	r2, [pc, #472]	@ (80029dc <HAL_DMA_Start_IT+0x498>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d045      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a74      	ldr	r2, [pc, #464]	@ (80029e0 <HAL_DMA_Start_IT+0x49c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d040      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a73      	ldr	r2, [pc, #460]	@ (80029e4 <HAL_DMA_Start_IT+0x4a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d03b      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a71      	ldr	r2, [pc, #452]	@ (80029e8 <HAL_DMA_Start_IT+0x4a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d036      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a70      	ldr	r2, [pc, #448]	@ (80029ec <HAL_DMA_Start_IT+0x4a8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d031      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_DMA_Start_IT+0x4ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02c      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6d      	ldr	r2, [pc, #436]	@ (80029f4 <HAL_DMA_Start_IT+0x4b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d027      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6b      	ldr	r2, [pc, #428]	@ (80029f8 <HAL_DMA_Start_IT+0x4b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6a      	ldr	r2, [pc, #424]	@ (80029fc <HAL_DMA_Start_IT+0x4b8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01d      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	@ (8002a00 <HAL_DMA_Start_IT+0x4bc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a67      	ldr	r2, [pc, #412]	@ (8002a04 <HAL_DMA_Start_IT+0x4c0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a65      	ldr	r2, [pc, #404]	@ (8002a08 <HAL_DMA_Start_IT+0x4c4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a64      	ldr	r2, [pc, #400]	@ (8002a0c <HAL_DMA_Start_IT+0x4c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a62      	ldr	r2, [pc, #392]	@ (8002a10 <HAL_DMA_Start_IT+0x4cc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_DMA_Start_IT+0x350>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a61      	ldr	r2, [pc, #388]	@ (8002a14 <HAL_DMA_Start_IT+0x4d0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x354>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_DMA_Start_IT+0x356>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a37      	ldr	r2, [pc, #220]	@ (80029b8 <HAL_DMA_Start_IT+0x474>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a36      	ldr	r2, [pc, #216]	@ (80029bc <HAL_DMA_Start_IT+0x478>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <HAL_DMA_Start_IT+0x47c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a33      	ldr	r2, [pc, #204]	@ (80029c4 <HAL_DMA_Start_IT+0x480>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <HAL_DMA_Start_IT+0x484>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <HAL_DMA_Start_IT+0x488>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2e      	ldr	r2, [pc, #184]	@ (80029d0 <HAL_DMA_Start_IT+0x48c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <HAL_DMA_Start_IT+0x490>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2b      	ldr	r2, [pc, #172]	@ (80029d8 <HAL_DMA_Start_IT+0x494>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <HAL_DMA_Start_IT+0x498>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	@ (80029e0 <HAL_DMA_Start_IT+0x49c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a27      	ldr	r2, [pc, #156]	@ (80029e4 <HAL_DMA_Start_IT+0x4a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a25      	ldr	r2, [pc, #148]	@ (80029e8 <HAL_DMA_Start_IT+0x4a4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a24      	ldr	r2, [pc, #144]	@ (80029ec <HAL_DMA_Start_IT+0x4a8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	@ (80029f0 <HAL_DMA_Start_IT+0x4ac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_Start_IT+0x430>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	@ (80029f4 <HAL_DMA_Start_IT+0x4b0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <HAL_DMA_Start_IT+0x442>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e012      	b.n	80029ac <HAL_DMA_Start_IT+0x468>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e009      	b.n	80029ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020010 	.word	0x40020010
 80029bc:	40020028 	.word	0x40020028
 80029c0:	40020040 	.word	0x40020040
 80029c4:	40020058 	.word	0x40020058
 80029c8:	40020070 	.word	0x40020070
 80029cc:	40020088 	.word	0x40020088
 80029d0:	400200a0 	.word	0x400200a0
 80029d4:	400200b8 	.word	0x400200b8
 80029d8:	40020410 	.word	0x40020410
 80029dc:	40020428 	.word	0x40020428
 80029e0:	40020440 	.word	0x40020440
 80029e4:	40020458 	.word	0x40020458
 80029e8:	40020470 	.word	0x40020470
 80029ec:	40020488 	.word	0x40020488
 80029f0:	400204a0 	.word	0x400204a0
 80029f4:	400204b8 	.word	0x400204b8
 80029f8:	58025408 	.word	0x58025408
 80029fc:	5802541c 	.word	0x5802541c
 8002a00:	58025430 	.word	0x58025430
 8002a04:	58025444 	.word	0x58025444
 8002a08:	58025458 	.word	0x58025458
 8002a0c:	5802546c 	.word	0x5802546c
 8002a10:	58025480 	.word	0x58025480
 8002a14:	58025494 	.word	0x58025494

08002a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff f8e8 	bl	8001bf4 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2dc      	b.n	8002fea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d008      	beq.n	8002a4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2280      	movs	r2, #128	@ 0x80
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e2cd      	b.n	8002fea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a76      	ldr	r2, [pc, #472]	@ (8002c2c <HAL_DMA_Abort+0x214>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d04a      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a74      	ldr	r2, [pc, #464]	@ (8002c30 <HAL_DMA_Abort+0x218>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d045      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	@ (8002c34 <HAL_DMA_Abort+0x21c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d040      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a71      	ldr	r2, [pc, #452]	@ (8002c38 <HAL_DMA_Abort+0x220>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d03b      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a70      	ldr	r2, [pc, #448]	@ (8002c3c <HAL_DMA_Abort+0x224>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d036      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	@ (8002c40 <HAL_DMA_Abort+0x228>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d031      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c44 <HAL_DMA_Abort+0x22c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d02c      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	@ (8002c48 <HAL_DMA_Abort+0x230>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d027      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_DMA_Abort+0x234>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a68      	ldr	r2, [pc, #416]	@ (8002c50 <HAL_DMA_Abort+0x238>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01d      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a67      	ldr	r2, [pc, #412]	@ (8002c54 <HAL_DMA_Abort+0x23c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d018      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a65      	ldr	r2, [pc, #404]	@ (8002c58 <HAL_DMA_Abort+0x240>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a64      	ldr	r2, [pc, #400]	@ (8002c5c <HAL_DMA_Abort+0x244>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00e      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a62      	ldr	r2, [pc, #392]	@ (8002c60 <HAL_DMA_Abort+0x248>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a61      	ldr	r2, [pc, #388]	@ (8002c64 <HAL_DMA_Abort+0x24c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_DMA_Abort+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c68 <HAL_DMA_Abort+0x250>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Abort+0xda>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_DMA_Abort+0xdc>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 021e 	bic.w	r2, r2, #30
 8002b06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e00a      	b.n	8002b36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 020e 	bic.w	r2, r2, #14
 8002b2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c2c <HAL_DMA_Abort+0x214>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d072      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <HAL_DMA_Abort+0x218>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d06d      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a39      	ldr	r2, [pc, #228]	@ (8002c34 <HAL_DMA_Abort+0x21c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d068      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a37      	ldr	r2, [pc, #220]	@ (8002c38 <HAL_DMA_Abort+0x220>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d063      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	@ (8002c3c <HAL_DMA_Abort+0x224>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d05e      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a34      	ldr	r2, [pc, #208]	@ (8002c40 <HAL_DMA_Abort+0x228>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d059      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a33      	ldr	r2, [pc, #204]	@ (8002c44 <HAL_DMA_Abort+0x22c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d054      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a31      	ldr	r2, [pc, #196]	@ (8002c48 <HAL_DMA_Abort+0x230>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d04f      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <HAL_DMA_Abort+0x234>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04a      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2e      	ldr	r2, [pc, #184]	@ (8002c50 <HAL_DMA_Abort+0x238>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d045      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c54 <HAL_DMA_Abort+0x23c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <HAL_DMA_Abort+0x240>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c5c <HAL_DMA_Abort+0x244>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d036      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <HAL_DMA_Abort+0x248>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a27      	ldr	r2, [pc, #156]	@ (8002c64 <HAL_DMA_Abort+0x24c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d02c      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <HAL_DMA_Abort+0x250>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d027      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <HAL_DMA_Abort+0x254>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <HAL_DMA_Abort+0x258>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <HAL_DMA_Abort+0x25c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_DMA_Abort+0x260>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1e      	ldr	r2, [pc, #120]	@ (8002c7c <HAL_DMA_Abort+0x264>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_DMA_Abort+0x268>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_DMA_Abort+0x26c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_DMA_Abort+0x270>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d132      	bne.n	8002c8c <HAL_DMA_Abort+0x274>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e031      	b.n	8002c8e <HAL_DMA_Abort+0x276>
 8002c2a:	bf00      	nop
 8002c2c:	40020010 	.word	0x40020010
 8002c30:	40020028 	.word	0x40020028
 8002c34:	40020040 	.word	0x40020040
 8002c38:	40020058 	.word	0x40020058
 8002c3c:	40020070 	.word	0x40020070
 8002c40:	40020088 	.word	0x40020088
 8002c44:	400200a0 	.word	0x400200a0
 8002c48:	400200b8 	.word	0x400200b8
 8002c4c:	40020410 	.word	0x40020410
 8002c50:	40020428 	.word	0x40020428
 8002c54:	40020440 	.word	0x40020440
 8002c58:	40020458 	.word	0x40020458
 8002c5c:	40020470 	.word	0x40020470
 8002c60:	40020488 	.word	0x40020488
 8002c64:	400204a0 	.word	0x400204a0
 8002c68:	400204b8 	.word	0x400204b8
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	58025430 	.word	0x58025430
 8002c78:	58025444 	.word	0x58025444
 8002c7c:	58025458 	.word	0x58025458
 8002c80:	5802546c 	.word	0x5802546c
 8002c84:	58025480 	.word	0x58025480
 8002c88:	58025494 	.word	0x58025494
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8002e5c <HAL_DMA_Abort+0x444>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e60 <HAL_DMA_Abort+0x448>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <HAL_DMA_Abort+0x44c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a68      	ldr	r2, [pc, #416]	@ (8002e68 <HAL_DMA_Abort+0x450>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_DMA_Abort+0x454>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a65      	ldr	r2, [pc, #404]	@ (8002e70 <HAL_DMA_Abort+0x458>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_DMA_Abort+0x45c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a62      	ldr	r2, [pc, #392]	@ (8002e78 <HAL_DMA_Abort+0x460>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_DMA_Abort+0x464>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5f      	ldr	r2, [pc, #380]	@ (8002e80 <HAL_DMA_Abort+0x468>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e84 <HAL_DMA_Abort+0x46c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a5c      	ldr	r2, [pc, #368]	@ (8002e88 <HAL_DMA_Abort+0x470>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e8c <HAL_DMA_Abort+0x474>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <HAL_DMA_Abort+0x478>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_DMA_Abort+0x47c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Abort+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a56      	ldr	r2, [pc, #344]	@ (8002e98 <HAL_DMA_Abort+0x480>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <HAL_DMA_Abort+0x33c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_DMA_Abort+0x34c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d64:	e013      	b.n	8002d8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7fe ff45 	bl	8001bf4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d90c      	bls.n	8002d8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e12d      	b.n	8002fea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e5c <HAL_DMA_Abort+0x444>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e60 <HAL_DMA_Abort+0x448>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e64 <HAL_DMA_Abort+0x44c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e68 <HAL_DMA_Abort+0x450>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <HAL_DMA_Abort+0x454>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	@ (8002e70 <HAL_DMA_Abort+0x458>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <HAL_DMA_Abort+0x45c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <HAL_DMA_Abort+0x460>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <HAL_DMA_Abort+0x464>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a21      	ldr	r2, [pc, #132]	@ (8002e80 <HAL_DMA_Abort+0x468>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a20      	ldr	r2, [pc, #128]	@ (8002e84 <HAL_DMA_Abort+0x46c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e88 <HAL_DMA_Abort+0x470>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <HAL_DMA_Abort+0x474>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	@ (8002e90 <HAL_DMA_Abort+0x478>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_DMA_Abort+0x47c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_Abort+0x422>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_DMA_Abort+0x480>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Abort+0x426>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_DMA_Abort+0x428>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02b      	beq.n	8002e9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	223f      	movs	r2, #63	@ 0x3f
 8002e54:	409a      	lsls	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	e02a      	b.n	8002eb2 <HAL_DMA_Abort+0x49a>
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	40020028 	.word	0x40020028
 8002e64:	40020040 	.word	0x40020040
 8002e68:	40020058 	.word	0x40020058
 8002e6c:	40020070 	.word	0x40020070
 8002e70:	40020088 	.word	0x40020088
 8002e74:	400200a0 	.word	0x400200a0
 8002e78:	400200b8 	.word	0x400200b8
 8002e7c:	40020410 	.word	0x40020410
 8002e80:	40020428 	.word	0x40020428
 8002e84:	40020440 	.word	0x40020440
 8002e88:	40020458 	.word	0x40020458
 8002e8c:	40020470 	.word	0x40020470
 8002e90:	40020488 	.word	0x40020488
 8002e94:	400204a0 	.word	0x400204a0
 8002e98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2201      	movs	r2, #1
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff4 <HAL_DMA_Abort+0x5dc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d072      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff8 <HAL_DMA_Abort+0x5e0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d06d      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4c      	ldr	r2, [pc, #304]	@ (8002ffc <HAL_DMA_Abort+0x5e4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d068      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8003000 <HAL_DMA_Abort+0x5e8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d063      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a49      	ldr	r2, [pc, #292]	@ (8003004 <HAL_DMA_Abort+0x5ec>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d05e      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a47      	ldr	r2, [pc, #284]	@ (8003008 <HAL_DMA_Abort+0x5f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d059      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a46      	ldr	r2, [pc, #280]	@ (800300c <HAL_DMA_Abort+0x5f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d054      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a44      	ldr	r2, [pc, #272]	@ (8003010 <HAL_DMA_Abort+0x5f8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d04f      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a43      	ldr	r2, [pc, #268]	@ (8003014 <HAL_DMA_Abort+0x5fc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04a      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a41      	ldr	r2, [pc, #260]	@ (8003018 <HAL_DMA_Abort+0x600>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d045      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a40      	ldr	r2, [pc, #256]	@ (800301c <HAL_DMA_Abort+0x604>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a3e      	ldr	r2, [pc, #248]	@ (8003020 <HAL_DMA_Abort+0x608>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003024 <HAL_DMA_Abort+0x60c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d036      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3b      	ldr	r2, [pc, #236]	@ (8003028 <HAL_DMA_Abort+0x610>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <HAL_DMA_Abort+0x614>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a38      	ldr	r2, [pc, #224]	@ (8003030 <HAL_DMA_Abort+0x618>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d027      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a37      	ldr	r2, [pc, #220]	@ (8003034 <HAL_DMA_Abort+0x61c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a35      	ldr	r2, [pc, #212]	@ (8003038 <HAL_DMA_Abort+0x620>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a34      	ldr	r2, [pc, #208]	@ (800303c <HAL_DMA_Abort+0x624>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a32      	ldr	r2, [pc, #200]	@ (8003040 <HAL_DMA_Abort+0x628>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a31      	ldr	r2, [pc, #196]	@ (8003044 <HAL_DMA_Abort+0x62c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <HAL_DMA_Abort+0x630>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2e      	ldr	r2, [pc, #184]	@ (800304c <HAL_DMA_Abort+0x634>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003050 <HAL_DMA_Abort+0x638>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Abort+0x58e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_DMA_Abort+0x590>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002fb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40020010 	.word	0x40020010
 8002ff8:	40020028 	.word	0x40020028
 8002ffc:	40020040 	.word	0x40020040
 8003000:	40020058 	.word	0x40020058
 8003004:	40020070 	.word	0x40020070
 8003008:	40020088 	.word	0x40020088
 800300c:	400200a0 	.word	0x400200a0
 8003010:	400200b8 	.word	0x400200b8
 8003014:	40020410 	.word	0x40020410
 8003018:	40020428 	.word	0x40020428
 800301c:	40020440 	.word	0x40020440
 8003020:	40020458 	.word	0x40020458
 8003024:	40020470 	.word	0x40020470
 8003028:	40020488 	.word	0x40020488
 800302c:	400204a0 	.word	0x400204a0
 8003030:	400204b8 	.word	0x400204b8
 8003034:	58025408 	.word	0x58025408
 8003038:	5802541c 	.word	0x5802541c
 800303c:	58025430 	.word	0x58025430
 8003040:	58025444 	.word	0x58025444
 8003044:	58025458 	.word	0x58025458
 8003048:	5802546c 	.word	0x5802546c
 800304c:	58025480 	.word	0x58025480
 8003050:	58025494 	.word	0x58025494

08003054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e237      	b.n	80034d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d004      	beq.n	800307c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e22c      	b.n	80034d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5c      	ldr	r2, [pc, #368]	@ (80031f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d04a      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a5b      	ldr	r2, [pc, #364]	@ (80031f8 <HAL_DMA_Abort_IT+0x1a4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d045      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a59      	ldr	r2, [pc, #356]	@ (80031fc <HAL_DMA_Abort_IT+0x1a8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d040      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_DMA_Abort_IT+0x1ac>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d03b      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_DMA_Abort_IT+0x1b0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d036      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a55      	ldr	r2, [pc, #340]	@ (8003208 <HAL_DMA_Abort_IT+0x1b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d031      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a53      	ldr	r2, [pc, #332]	@ (800320c <HAL_DMA_Abort_IT+0x1b8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02c      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_DMA_Abort_IT+0x1bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d027      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a50      	ldr	r2, [pc, #320]	@ (8003214 <HAL_DMA_Abort_IT+0x1c0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4f      	ldr	r2, [pc, #316]	@ (8003218 <HAL_DMA_Abort_IT+0x1c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01d      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	@ (800321c <HAL_DMA_Abort_IT+0x1c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d018      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003220 <HAL_DMA_Abort_IT+0x1cc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003224 <HAL_DMA_Abort_IT+0x1d0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a49      	ldr	r2, [pc, #292]	@ (8003228 <HAL_DMA_Abort_IT+0x1d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a47      	ldr	r2, [pc, #284]	@ (800322c <HAL_DMA_Abort_IT+0x1d8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_DMA_Abort_IT+0xc8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <HAL_DMA_Abort_IT+0x1dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Abort_IT+0xcc>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_DMA_Abort_IT+0xce>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8086 	beq.w	8003234 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2204      	movs	r2, #4
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2f      	ldr	r2, [pc, #188]	@ (80031f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04a      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2e      	ldr	r2, [pc, #184]	@ (80031f8 <HAL_DMA_Abort_IT+0x1a4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d045      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <HAL_DMA_Abort_IT+0x1a8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d040      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2b      	ldr	r2, [pc, #172]	@ (8003200 <HAL_DMA_Abort_IT+0x1ac>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03b      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a29      	ldr	r2, [pc, #164]	@ (8003204 <HAL_DMA_Abort_IT+0x1b0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d036      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a28      	ldr	r2, [pc, #160]	@ (8003208 <HAL_DMA_Abort_IT+0x1b4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d031      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a26      	ldr	r2, [pc, #152]	@ (800320c <HAL_DMA_Abort_IT+0x1b8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02c      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a25      	ldr	r2, [pc, #148]	@ (8003210 <HAL_DMA_Abort_IT+0x1bc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d027      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <HAL_DMA_Abort_IT+0x1c0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <HAL_DMA_Abort_IT+0x1c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01d      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a20      	ldr	r2, [pc, #128]	@ (800321c <HAL_DMA_Abort_IT+0x1c8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003220 <HAL_DMA_Abort_IT+0x1cc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <HAL_DMA_Abort_IT+0x1d0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00e      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_DMA_Abort_IT+0x1d4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <HAL_DMA_Abort_IT+0x1d8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x17c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <HAL_DMA_Abort_IT+0x1dc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <HAL_DMA_Abort_IT+0x18e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e178      	b.n	80034d4 <HAL_DMA_Abort_IT+0x480>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e16f      	b.n	80034d4 <HAL_DMA_Abort_IT+0x480>
 80031f4:	40020010 	.word	0x40020010
 80031f8:	40020028 	.word	0x40020028
 80031fc:	40020040 	.word	0x40020040
 8003200:	40020058 	.word	0x40020058
 8003204:	40020070 	.word	0x40020070
 8003208:	40020088 	.word	0x40020088
 800320c:	400200a0 	.word	0x400200a0
 8003210:	400200b8 	.word	0x400200b8
 8003214:	40020410 	.word	0x40020410
 8003218:	40020428 	.word	0x40020428
 800321c:	40020440 	.word	0x40020440
 8003220:	40020458 	.word	0x40020458
 8003224:	40020470 	.word	0x40020470
 8003228:	40020488 	.word	0x40020488
 800322c:	400204a0 	.word	0x400204a0
 8003230:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020e 	bic.w	r2, r2, #14
 8003242:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6c      	ldr	r2, [pc, #432]	@ (80033fc <HAL_DMA_Abort_IT+0x3a8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04a      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6b      	ldr	r2, [pc, #428]	@ (8003400 <HAL_DMA_Abort_IT+0x3ac>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d045      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a69      	ldr	r2, [pc, #420]	@ (8003404 <HAL_DMA_Abort_IT+0x3b0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d040      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a68      	ldr	r2, [pc, #416]	@ (8003408 <HAL_DMA_Abort_IT+0x3b4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d03b      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a66      	ldr	r2, [pc, #408]	@ (800340c <HAL_DMA_Abort_IT+0x3b8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d036      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a65      	ldr	r2, [pc, #404]	@ (8003410 <HAL_DMA_Abort_IT+0x3bc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d031      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a63      	ldr	r2, [pc, #396]	@ (8003414 <HAL_DMA_Abort_IT+0x3c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02c      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a62      	ldr	r2, [pc, #392]	@ (8003418 <HAL_DMA_Abort_IT+0x3c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d027      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_DMA_Abort_IT+0x3c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d022      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003420 <HAL_DMA_Abort_IT+0x3cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d01d      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003424 <HAL_DMA_Abort_IT+0x3d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d018      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003428 <HAL_DMA_Abort_IT+0x3d4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_DMA_Abort_IT+0x3d8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a59      	ldr	r2, [pc, #356]	@ (8003430 <HAL_DMA_Abort_IT+0x3dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a57      	ldr	r2, [pc, #348]	@ (8003434 <HAL_DMA_Abort_IT+0x3e0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x290>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a56      	ldr	r2, [pc, #344]	@ (8003438 <HAL_DMA_Abort_IT+0x3e4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <HAL_DMA_Abort_IT+0x2a2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <HAL_DMA_Abort_IT+0x2b2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3c      	ldr	r2, [pc, #240]	@ (80033fc <HAL_DMA_Abort_IT+0x3a8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d072      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3a      	ldr	r2, [pc, #232]	@ (8003400 <HAL_DMA_Abort_IT+0x3ac>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d06d      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <HAL_DMA_Abort_IT+0x3b0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d068      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a37      	ldr	r2, [pc, #220]	@ (8003408 <HAL_DMA_Abort_IT+0x3b4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d063      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a36      	ldr	r2, [pc, #216]	@ (800340c <HAL_DMA_Abort_IT+0x3b8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d05e      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a34      	ldr	r2, [pc, #208]	@ (8003410 <HAL_DMA_Abort_IT+0x3bc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d059      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <HAL_DMA_Abort_IT+0x3c0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d054      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <HAL_DMA_Abort_IT+0x3c4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04f      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a30      	ldr	r2, [pc, #192]	@ (800341c <HAL_DMA_Abort_IT+0x3c8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d04a      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2e      	ldr	r2, [pc, #184]	@ (8003420 <HAL_DMA_Abort_IT+0x3cc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d045      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_DMA_Abort_IT+0x3d0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d040      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2b      	ldr	r2, [pc, #172]	@ (8003428 <HAL_DMA_Abort_IT+0x3d4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d03b      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2a      	ldr	r2, [pc, #168]	@ (800342c <HAL_DMA_Abort_IT+0x3d8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d036      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	@ (8003430 <HAL_DMA_Abort_IT+0x3dc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d031      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a27      	ldr	r2, [pc, #156]	@ (8003434 <HAL_DMA_Abort_IT+0x3e0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d02c      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	@ (8003438 <HAL_DMA_Abort_IT+0x3e4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d027      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	@ (800343c <HAL_DMA_Abort_IT+0x3e8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_DMA_Abort_IT+0x3ec>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01d      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <HAL_DMA_Abort_IT+0x3f0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_DMA_Abort_IT+0x3f4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_DMA_Abort_IT+0x3f8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_DMA_Abort_IT+0x3fc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_DMA_Abort_IT+0x400>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x3a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_DMA_Abort_IT+0x404>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d132      	bne.n	800345c <HAL_DMA_Abort_IT+0x408>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e031      	b.n	800345e <HAL_DMA_Abort_IT+0x40a>
 80033fa:	bf00      	nop
 80033fc:	40020010 	.word	0x40020010
 8003400:	40020028 	.word	0x40020028
 8003404:	40020040 	.word	0x40020040
 8003408:	40020058 	.word	0x40020058
 800340c:	40020070 	.word	0x40020070
 8003410:	40020088 	.word	0x40020088
 8003414:	400200a0 	.word	0x400200a0
 8003418:	400200b8 	.word	0x400200b8
 800341c:	40020410 	.word	0x40020410
 8003420:	40020428 	.word	0x40020428
 8003424:	40020440 	.word	0x40020440
 8003428:	40020458 	.word	0x40020458
 800342c:	40020470 	.word	0x40020470
 8003430:	40020488 	.word	0x40020488
 8003434:	400204a0 	.word	0x400204a0
 8003438:	400204b8 	.word	0x400204b8
 800343c:	58025408 	.word	0x58025408
 8003440:	5802541c 	.word	0x5802541c
 8003444:	58025430 	.word	0x58025430
 8003448:	58025444 	.word	0x58025444
 800344c:	58025458 	.word	0x58025458
 8003450:	5802546c 	.word	0x5802546c
 8003454:	58025480 	.word	0x58025480
 8003458:	58025494 	.word	0x58025494
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d028      	beq.n	80034b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003470:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003490:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop

080034e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034ec:	4b67      	ldr	r3, [pc, #412]	@ (800368c <HAL_DMA_IRQHandler+0x1ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a67      	ldr	r2, [pc, #412]	@ (8003690 <HAL_DMA_IRQHandler+0x1b0>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5f      	ldr	r2, [pc, #380]	@ (8003694 <HAL_DMA_IRQHandler+0x1b4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d04a      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5d      	ldr	r2, [pc, #372]	@ (8003698 <HAL_DMA_IRQHandler+0x1b8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d045      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a5c      	ldr	r2, [pc, #368]	@ (800369c <HAL_DMA_IRQHandler+0x1bc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d040      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5a      	ldr	r2, [pc, #360]	@ (80036a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d03b      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d036      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a57      	ldr	r2, [pc, #348]	@ (80036a8 <HAL_DMA_IRQHandler+0x1c8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a56      	ldr	r2, [pc, #344]	@ (80036ac <HAL_DMA_IRQHandler+0x1cc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d02c      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a54      	ldr	r2, [pc, #336]	@ (80036b0 <HAL_DMA_IRQHandler+0x1d0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d027      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a53      	ldr	r2, [pc, #332]	@ (80036b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a51      	ldr	r2, [pc, #324]	@ (80036b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01d      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a50      	ldr	r2, [pc, #320]	@ (80036bc <HAL_DMA_IRQHandler+0x1dc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d018      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4e      	ldr	r2, [pc, #312]	@ (80036c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a4d      	ldr	r2, [pc, #308]	@ (80036c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4b      	ldr	r2, [pc, #300]	@ (80036c8 <HAL_DMA_IRQHandler+0x1e8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4a      	ldr	r2, [pc, #296]	@ (80036cc <HAL_DMA_IRQHandler+0x1ec>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a48      	ldr	r2, [pc, #288]	@ (80036d0 <HAL_DMA_IRQHandler+0x1f0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_DMA_IRQHandler+0xd6>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_DMA_IRQHandler+0xd8>
 80035b6:	2300      	movs	r3, #0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 842b 	beq.w	8003e14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2208      	movs	r2, #8
 80035c8:	409a      	lsls	r2, r3
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80a2 	beq.w	8003718 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003694 <HAL_DMA_IRQHandler+0x1b4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04a      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003698 <HAL_DMA_IRQHandler+0x1b8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d045      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <HAL_DMA_IRQHandler+0x1bc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d040      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <HAL_DMA_IRQHandler+0x1c0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d03b      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	@ (80036a8 <HAL_DMA_IRQHandler+0x1c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d031      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a25      	ldr	r2, [pc, #148]	@ (80036ac <HAL_DMA_IRQHandler+0x1cc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02c      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a24      	ldr	r2, [pc, #144]	@ (80036b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d027      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	@ (80036b4 <HAL_DMA_IRQHandler+0x1d4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d01d      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <HAL_DMA_IRQHandler+0x1dc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	@ (80036c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	@ (80036c8 <HAL_DMA_IRQHandler+0x1e8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <HAL_DMA_IRQHandler+0x1ec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d12f      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x1f4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e02e      	b.n	80036e8 <HAL_DMA_IRQHandler+0x208>
 800368a:	bf00      	nop
 800368c:	24000814 	.word	0x24000814
 8003690:	1b4e81b5 	.word	0x1b4e81b5
 8003694:	40020010 	.word	0x40020010
 8003698:	40020028 	.word	0x40020028
 800369c:	40020040 	.word	0x40020040
 80036a0:	40020058 	.word	0x40020058
 80036a4:	40020070 	.word	0x40020070
 80036a8:	40020088 	.word	0x40020088
 80036ac:	400200a0 	.word	0x400200a0
 80036b0:	400200b8 	.word	0x400200b8
 80036b4:	40020410 	.word	0x40020410
 80036b8:	40020428 	.word	0x40020428
 80036bc:	40020440 	.word	0x40020440
 80036c0:	40020458 	.word	0x40020458
 80036c4:	40020470 	.word	0x40020470
 80036c8:	40020488 	.word	0x40020488
 80036cc:	400204a0 	.word	0x400204a0
 80036d0:	400204b8 	.word	0x400204b8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d015      	beq.n	8003718 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2208      	movs	r2, #8
 8003706:	409a      	lsls	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d06e      	beq.n	800380c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a69      	ldr	r2, [pc, #420]	@ (80038d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d04a      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a67      	ldr	r2, [pc, #412]	@ (80038dc <HAL_DMA_IRQHandler+0x3fc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d045      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a66      	ldr	r2, [pc, #408]	@ (80038e0 <HAL_DMA_IRQHandler+0x400>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d040      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a64      	ldr	r2, [pc, #400]	@ (80038e4 <HAL_DMA_IRQHandler+0x404>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d03b      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a63      	ldr	r2, [pc, #396]	@ (80038e8 <HAL_DMA_IRQHandler+0x408>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d036      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <HAL_DMA_IRQHandler+0x40c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d031      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a60      	ldr	r2, [pc, #384]	@ (80038f0 <HAL_DMA_IRQHandler+0x410>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d02c      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <HAL_DMA_IRQHandler+0x414>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d027      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5d      	ldr	r2, [pc, #372]	@ (80038f8 <HAL_DMA_IRQHandler+0x418>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d022      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <HAL_DMA_IRQHandler+0x41c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01d      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a5a      	ldr	r2, [pc, #360]	@ (8003900 <HAL_DMA_IRQHandler+0x420>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d018      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <HAL_DMA_IRQHandler+0x424>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a57      	ldr	r2, [pc, #348]	@ (8003908 <HAL_DMA_IRQHandler+0x428>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a55      	ldr	r2, [pc, #340]	@ (800390c <HAL_DMA_IRQHandler+0x42c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <HAL_DMA_IRQHandler+0x430>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a52      	ldr	r2, [pc, #328]	@ (8003914 <HAL_DMA_IRQHandler+0x434>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10a      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x304>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e003      	b.n	80037ec <HAL_DMA_IRQHandler+0x30c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2201      	movs	r2, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	f043 0202 	orr.w	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2204      	movs	r2, #4
 8003816:	409a      	lsls	r2, r3
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 808f 	beq.w	8003940 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2c      	ldr	r2, [pc, #176]	@ (80038d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04a      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2a      	ldr	r2, [pc, #168]	@ (80038dc <HAL_DMA_IRQHandler+0x3fc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d045      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a29      	ldr	r2, [pc, #164]	@ (80038e0 <HAL_DMA_IRQHandler+0x400>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d040      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a27      	ldr	r2, [pc, #156]	@ (80038e4 <HAL_DMA_IRQHandler+0x404>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d03b      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a26      	ldr	r2, [pc, #152]	@ (80038e8 <HAL_DMA_IRQHandler+0x408>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d036      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a24      	ldr	r2, [pc, #144]	@ (80038ec <HAL_DMA_IRQHandler+0x40c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d031      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a23      	ldr	r2, [pc, #140]	@ (80038f0 <HAL_DMA_IRQHandler+0x410>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d02c      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <HAL_DMA_IRQHandler+0x414>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d027      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <HAL_DMA_IRQHandler+0x418>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1e      	ldr	r2, [pc, #120]	@ (80038fc <HAL_DMA_IRQHandler+0x41c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <HAL_DMA_IRQHandler+0x420>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <HAL_DMA_IRQHandler+0x424>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1a      	ldr	r2, [pc, #104]	@ (8003908 <HAL_DMA_IRQHandler+0x428>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_DMA_IRQHandler+0x42c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <HAL_DMA_IRQHandler+0x430>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <HAL_DMA_IRQHandler+0x434>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12a      	bne.n	8003918 <HAL_DMA_IRQHandler+0x438>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e023      	b.n	8003920 <HAL_DMA_IRQHandler+0x440>
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2204      	movs	r2, #4
 800392e:	409a      	lsls	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	2210      	movs	r2, #16
 800394a:	409a      	lsls	r2, r3
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a6 	beq.w	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a85      	ldr	r2, [pc, #532]	@ (8003b70 <HAL_DMA_IRQHandler+0x690>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d04a      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a83      	ldr	r2, [pc, #524]	@ (8003b74 <HAL_DMA_IRQHandler+0x694>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d045      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a82      	ldr	r2, [pc, #520]	@ (8003b78 <HAL_DMA_IRQHandler+0x698>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d040      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a80      	ldr	r2, [pc, #512]	@ (8003b7c <HAL_DMA_IRQHandler+0x69c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d03b      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7f      	ldr	r2, [pc, #508]	@ (8003b80 <HAL_DMA_IRQHandler+0x6a0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d036      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b84 <HAL_DMA_IRQHandler+0x6a4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d031      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7c      	ldr	r2, [pc, #496]	@ (8003b88 <HAL_DMA_IRQHandler+0x6a8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d02c      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003b8c <HAL_DMA_IRQHandler+0x6ac>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d027      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a79      	ldr	r2, [pc, #484]	@ (8003b90 <HAL_DMA_IRQHandler+0x6b0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a77      	ldr	r2, [pc, #476]	@ (8003b94 <HAL_DMA_IRQHandler+0x6b4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01d      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a76      	ldr	r2, [pc, #472]	@ (8003b98 <HAL_DMA_IRQHandler+0x6b8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a74      	ldr	r2, [pc, #464]	@ (8003b9c <HAL_DMA_IRQHandler+0x6bc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_DMA_IRQHandler+0x6c0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a71      	ldr	r2, [pc, #452]	@ (8003ba4 <HAL_DMA_IRQHandler+0x6c4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a70      	ldr	r2, [pc, #448]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6c8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003bac <HAL_DMA_IRQHandler+0x6cc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10a      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x52c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e009      	b.n	8003a20 <HAL_DMA_IRQHandler+0x540>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03e      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d108      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d024      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e01f      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e016      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0208 	bic.w	r2, r2, #8
 8003a90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2220      	movs	r2, #32
 8003aac:	409a      	lsls	r2, r3
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8110 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b70 <HAL_DMA_IRQHandler+0x690>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b74 <HAL_DMA_IRQHandler+0x694>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d045      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a29      	ldr	r2, [pc, #164]	@ (8003b78 <HAL_DMA_IRQHandler+0x698>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d040      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <HAL_DMA_IRQHandler+0x69c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d03b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	@ (8003b80 <HAL_DMA_IRQHandler+0x6a0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d036      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <HAL_DMA_IRQHandler+0x6a4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d031      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <HAL_DMA_IRQHandler+0x6a8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <HAL_DMA_IRQHandler+0x6ac>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d027      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	@ (8003b90 <HAL_DMA_IRQHandler+0x6b0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <HAL_DMA_IRQHandler+0x6b4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <HAL_DMA_IRQHandler+0x6b8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b9c <HAL_DMA_IRQHandler+0x6bc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <HAL_DMA_IRQHandler+0x6c0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <HAL_DMA_IRQHandler+0x6c4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6c8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <HAL_DMA_IRQHandler+0x6cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d12b      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x6d0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	e02a      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x6e4>
 8003b6e:	bf00      	nop
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8087 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d139      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0216 	bic.w	r2, r2, #22
 8003bf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x736>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0208 	bic.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	223f      	movs	r2, #63	@ 0x3f
 8003c30:	409a      	lsls	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 834a 	beq.w	80042e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
          }
          return;
 8003c58:	e344      	b.n	80042e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02c      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	e027      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01e      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0210 	bic.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8306 	beq.w	80042ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8088 	beq.w	8003e00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee8 <HAL_DMA_IRQHandler+0xa08>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a79      	ldr	r2, [pc, #484]	@ (8003eec <HAL_DMA_IRQHandler+0xa0c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a77      	ldr	r2, [pc, #476]	@ (8003ef0 <HAL_DMA_IRQHandler+0xa10>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a76      	ldr	r2, [pc, #472]	@ (8003ef4 <HAL_DMA_IRQHandler+0xa14>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a74      	ldr	r2, [pc, #464]	@ (8003ef8 <HAL_DMA_IRQHandler+0xa18>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a73      	ldr	r2, [pc, #460]	@ (8003efc <HAL_DMA_IRQHandler+0xa1c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a71      	ldr	r2, [pc, #452]	@ (8003f00 <HAL_DMA_IRQHandler+0xa20>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a70      	ldr	r2, [pc, #448]	@ (8003f04 <HAL_DMA_IRQHandler+0xa24>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f08 <HAL_DMA_IRQHandler+0xa28>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6d      	ldr	r2, [pc, #436]	@ (8003f0c <HAL_DMA_IRQHandler+0xa2c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6b      	ldr	r2, [pc, #428]	@ (8003f10 <HAL_DMA_IRQHandler+0xa30>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003f14 <HAL_DMA_IRQHandler+0xa34>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a68      	ldr	r2, [pc, #416]	@ (8003f18 <HAL_DMA_IRQHandler+0xa38>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a67      	ldr	r2, [pc, #412]	@ (8003f1c <HAL_DMA_IRQHandler+0xa3c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a65      	ldr	r2, [pc, #404]	@ (8003f20 <HAL_DMA_IRQHandler+0xa40>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a64      	ldr	r2, [pc, #400]	@ (8003f24 <HAL_DMA_IRQHandler+0xa44>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <HAL_DMA_IRQHandler+0x8ca>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e007      	b.n	8003dba <HAL_DMA_IRQHandler+0x8da>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d307      	bcc.n	8003dd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f2      	bne.n	8003dba <HAL_DMA_IRQHandler+0x8da>
 8003dd4:	e000      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003dd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003dee:	e003      	b.n	8003df8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8272 	beq.w	80042ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
 8003e12:	e26c      	b.n	80042ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a43      	ldr	r2, [pc, #268]	@ (8003f28 <HAL_DMA_IRQHandler+0xa48>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a42      	ldr	r2, [pc, #264]	@ (8003f2c <HAL_DMA_IRQHandler+0xa4c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a40      	ldr	r2, [pc, #256]	@ (8003f30 <HAL_DMA_IRQHandler+0xa50>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_DMA_IRQHandler+0xa54>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3d      	ldr	r2, [pc, #244]	@ (8003f38 <HAL_DMA_IRQHandler+0xa58>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f3c <HAL_DMA_IRQHandler+0xa5c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3a      	ldr	r2, [pc, #232]	@ (8003f40 <HAL_DMA_IRQHandler+0xa60>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x984>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a39      	ldr	r2, [pc, #228]	@ (8003f44 <HAL_DMA_IRQHandler+0xa64>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x988>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_DMA_IRQHandler+0x98a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 823f 	beq.w	80042ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80cd 	beq.w	8004028 <HAL_DMA_IRQHandler+0xb48>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80c7 	beq.w	8004028 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d049      	beq.n	8003f48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8210 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed0:	e20a      	b.n	80042e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8206 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee4:	e200      	b.n	80042e8 <HAL_DMA_IRQHandler+0xe08>
 8003ee6:	bf00      	nop
 8003ee8:	40020010 	.word	0x40020010
 8003eec:	40020028 	.word	0x40020028
 8003ef0:	40020040 	.word	0x40020040
 8003ef4:	40020058 	.word	0x40020058
 8003ef8:	40020070 	.word	0x40020070
 8003efc:	40020088 	.word	0x40020088
 8003f00:	400200a0 	.word	0x400200a0
 8003f04:	400200b8 	.word	0x400200b8
 8003f08:	40020410 	.word	0x40020410
 8003f0c:	40020428 	.word	0x40020428
 8003f10:	40020440 	.word	0x40020440
 8003f14:	40020458 	.word	0x40020458
 8003f18:	40020470 	.word	0x40020470
 8003f1c:	40020488 	.word	0x40020488
 8003f20:	400204a0 	.word	0x400204a0
 8003f24:	400204b8 	.word	0x400204b8
 8003f28:	58025408 	.word	0x58025408
 8003f2c:	5802541c 	.word	0x5802541c
 8003f30:	58025430 	.word	0x58025430
 8003f34:	58025444 	.word	0x58025444
 8003f38:	58025458 	.word	0x58025458
 8003f3c:	5802546c 	.word	0x5802546c
 8003f40:	58025480 	.word	0x58025480
 8003f44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d160      	bne.n	8004014 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7f      	ldr	r2, [pc, #508]	@ (8004154 <HAL_DMA_IRQHandler+0xc74>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d04a      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a7d      	ldr	r2, [pc, #500]	@ (8004158 <HAL_DMA_IRQHandler+0xc78>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d045      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800415c <HAL_DMA_IRQHandler+0xc7c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d040      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7a      	ldr	r2, [pc, #488]	@ (8004160 <HAL_DMA_IRQHandler+0xc80>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d03b      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a79      	ldr	r2, [pc, #484]	@ (8004164 <HAL_DMA_IRQHandler+0xc84>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d036      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a77      	ldr	r2, [pc, #476]	@ (8004168 <HAL_DMA_IRQHandler+0xc88>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d031      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a76      	ldr	r2, [pc, #472]	@ (800416c <HAL_DMA_IRQHandler+0xc8c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d02c      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a74      	ldr	r2, [pc, #464]	@ (8004170 <HAL_DMA_IRQHandler+0xc90>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d027      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a73      	ldr	r2, [pc, #460]	@ (8004174 <HAL_DMA_IRQHandler+0xc94>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a71      	ldr	r2, [pc, #452]	@ (8004178 <HAL_DMA_IRQHandler+0xc98>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a70      	ldr	r2, [pc, #448]	@ (800417c <HAL_DMA_IRQHandler+0xc9c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004180 <HAL_DMA_IRQHandler+0xca0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6d      	ldr	r2, [pc, #436]	@ (8004184 <HAL_DMA_IRQHandler+0xca4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004188 <HAL_DMA_IRQHandler+0xca8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6a      	ldr	r2, [pc, #424]	@ (800418c <HAL_DMA_IRQHandler+0xcac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xb12>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a68      	ldr	r2, [pc, #416]	@ (8004190 <HAL_DMA_IRQHandler+0xcb0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <HAL_DMA_IRQHandler+0xb24>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0208 	bic.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e007      	b.n	8004014 <HAL_DMA_IRQHandler+0xb34>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8165 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004026:	e15f      	b.n	80042e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2202      	movs	r2, #2
 8004032:	409a      	lsls	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80c5 	beq.w	80041c8 <HAL_DMA_IRQHandler+0xce8>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80bf 	beq.w	80041c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2202      	movs	r2, #2
 8004054:	409a      	lsls	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 813a 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004080:	e134      	b.n	80042ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8130 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004094:	e12a      	b.n	80042ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 8089 	bne.w	80041b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <HAL_DMA_IRQHandler+0xc74>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d04a      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <HAL_DMA_IRQHandler+0xc78>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d045      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a28      	ldr	r2, [pc, #160]	@ (800415c <HAL_DMA_IRQHandler+0xc7c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a26      	ldr	r2, [pc, #152]	@ (8004160 <HAL_DMA_IRQHandler+0xc80>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d03b      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a25      	ldr	r2, [pc, #148]	@ (8004164 <HAL_DMA_IRQHandler+0xc84>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d036      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <HAL_DMA_IRQHandler+0xc88>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a22      	ldr	r2, [pc, #136]	@ (800416c <HAL_DMA_IRQHandler+0xc8c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d02c      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a20      	ldr	r2, [pc, #128]	@ (8004170 <HAL_DMA_IRQHandler+0xc90>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <HAL_DMA_IRQHandler+0xc94>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <HAL_DMA_IRQHandler+0xc98>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <HAL_DMA_IRQHandler+0xc9c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <HAL_DMA_IRQHandler+0xca0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <HAL_DMA_IRQHandler+0xca4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <HAL_DMA_IRQHandler+0xca8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a16      	ldr	r2, [pc, #88]	@ (800418c <HAL_DMA_IRQHandler+0xcac>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc62>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a14      	ldr	r2, [pc, #80]	@ (8004190 <HAL_DMA_IRQHandler+0xcb0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d128      	bne.n	8004194 <HAL_DMA_IRQHandler+0xcb4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0214 	bic.w	r2, r2, #20
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e027      	b.n	80041a4 <HAL_DMA_IRQHandler+0xcc4>
 8004154:	40020010 	.word	0x40020010
 8004158:	40020028 	.word	0x40020028
 800415c:	40020040 	.word	0x40020040
 8004160:	40020058 	.word	0x40020058
 8004164:	40020070 	.word	0x40020070
 8004168:	40020088 	.word	0x40020088
 800416c:	400200a0 	.word	0x400200a0
 8004170:	400200b8 	.word	0x400200b8
 8004174:	40020410 	.word	0x40020410
 8004178:	40020428 	.word	0x40020428
 800417c:	40020440 	.word	0x40020440
 8004180:	40020458 	.word	0x40020458
 8004184:	40020470 	.word	0x40020470
 8004188:	40020488 	.word	0x40020488
 800418c:	400204a0 	.word	0x400204a0
 8004190:	400204b8 	.word	0x400204b8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 020a 	bic.w	r2, r2, #10
 80041a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8097 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041c6:	e091      	b.n	80042ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2208      	movs	r2, #8
 80041d2:	409a      	lsls	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8088 	beq.w	80042ee <HAL_DMA_IRQHandler+0xe0e>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8082 	beq.w	80042ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a41      	ldr	r2, [pc, #260]	@ (80042f4 <HAL_DMA_IRQHandler+0xe14>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d04a      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_DMA_IRQHandler+0xe18>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d045      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3e      	ldr	r2, [pc, #248]	@ (80042fc <HAL_DMA_IRQHandler+0xe1c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d040      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3c      	ldr	r2, [pc, #240]	@ (8004300 <HAL_DMA_IRQHandler+0xe20>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d03b      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3b      	ldr	r2, [pc, #236]	@ (8004304 <HAL_DMA_IRQHandler+0xe24>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d036      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a39      	ldr	r2, [pc, #228]	@ (8004308 <HAL_DMA_IRQHandler+0xe28>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a38      	ldr	r2, [pc, #224]	@ (800430c <HAL_DMA_IRQHandler+0xe2c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d02c      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a36      	ldr	r2, [pc, #216]	@ (8004310 <HAL_DMA_IRQHandler+0xe30>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d027      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <HAL_DMA_IRQHandler+0xe34>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a33      	ldr	r2, [pc, #204]	@ (8004318 <HAL_DMA_IRQHandler+0xe38>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01d      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a32      	ldr	r2, [pc, #200]	@ (800431c <HAL_DMA_IRQHandler+0xe3c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a30      	ldr	r2, [pc, #192]	@ (8004320 <HAL_DMA_IRQHandler+0xe40>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <HAL_DMA_IRQHandler+0xe44>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <HAL_DMA_IRQHandler+0xe48>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <HAL_DMA_IRQHandler+0xe4c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_DMA_IRQHandler+0xdaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2a      	ldr	r2, [pc, #168]	@ (8004330 <HAL_DMA_IRQHandler+0xe50>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0xdbc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 021c 	bic.w	r2, r2, #28
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e007      	b.n	80042ac <HAL_DMA_IRQHandler+0xdcc>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 020e 	bic.w	r2, r2, #14
 80042aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
 80042e2:	e004      	b.n	80042ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80042e4:	bf00      	nop
 80042e6:	e002      	b.n	80042ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042ee:	3728      	adds	r7, #40	@ 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8

08004334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7f      	ldr	r2, [pc, #508]	@ (8004550 <DMA_SetConfig+0x21c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d072      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7d      	ldr	r2, [pc, #500]	@ (8004554 <DMA_SetConfig+0x220>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d06d      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7c      	ldr	r2, [pc, #496]	@ (8004558 <DMA_SetConfig+0x224>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d068      	beq.n	800443e <DMA_SetConfig+0x10a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7a      	ldr	r2, [pc, #488]	@ (800455c <DMA_SetConfig+0x228>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d063      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a79      	ldr	r2, [pc, #484]	@ (8004560 <DMA_SetConfig+0x22c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d05e      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a77      	ldr	r2, [pc, #476]	@ (8004564 <DMA_SetConfig+0x230>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d059      	beq.n	800443e <DMA_SetConfig+0x10a>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a76      	ldr	r2, [pc, #472]	@ (8004568 <DMA_SetConfig+0x234>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d054      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a74      	ldr	r2, [pc, #464]	@ (800456c <DMA_SetConfig+0x238>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04f      	beq.n	800443e <DMA_SetConfig+0x10a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a73      	ldr	r2, [pc, #460]	@ (8004570 <DMA_SetConfig+0x23c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a71      	ldr	r2, [pc, #452]	@ (8004574 <DMA_SetConfig+0x240>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a70      	ldr	r2, [pc, #448]	@ (8004578 <DMA_SetConfig+0x244>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6e      	ldr	r2, [pc, #440]	@ (800457c <DMA_SetConfig+0x248>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004580 <DMA_SetConfig+0x24c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004584 <DMA_SetConfig+0x250>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6a      	ldr	r2, [pc, #424]	@ (8004588 <DMA_SetConfig+0x254>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a68      	ldr	r2, [pc, #416]	@ (800458c <DMA_SetConfig+0x258>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a67      	ldr	r2, [pc, #412]	@ (8004590 <DMA_SetConfig+0x25c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <DMA_SetConfig+0x10a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <DMA_SetConfig+0x260>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a64      	ldr	r2, [pc, #400]	@ (8004598 <DMA_SetConfig+0x264>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <DMA_SetConfig+0x10a>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a62      	ldr	r2, [pc, #392]	@ (800459c <DMA_SetConfig+0x268>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a61      	ldr	r2, [pc, #388]	@ (80045a0 <DMA_SetConfig+0x26c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5f      	ldr	r2, [pc, #380]	@ (80045a4 <DMA_SetConfig+0x270>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <DMA_SetConfig+0x10a>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a5e      	ldr	r2, [pc, #376]	@ (80045a8 <DMA_SetConfig+0x274>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <DMA_SetConfig+0x10a>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a5c      	ldr	r2, [pc, #368]	@ (80045ac <DMA_SetConfig+0x278>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <DMA_SetConfig+0x10e>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <DMA_SetConfig+0x110>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004450:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004462:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a39      	ldr	r2, [pc, #228]	@ (8004550 <DMA_SetConfig+0x21c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a38      	ldr	r2, [pc, #224]	@ (8004554 <DMA_SetConfig+0x220>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a36      	ldr	r2, [pc, #216]	@ (8004558 <DMA_SetConfig+0x224>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a35      	ldr	r2, [pc, #212]	@ (800455c <DMA_SetConfig+0x228>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a33      	ldr	r2, [pc, #204]	@ (8004560 <DMA_SetConfig+0x22c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a32      	ldr	r2, [pc, #200]	@ (8004564 <DMA_SetConfig+0x230>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a30      	ldr	r2, [pc, #192]	@ (8004568 <DMA_SetConfig+0x234>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2f      	ldr	r2, [pc, #188]	@ (800456c <DMA_SetConfig+0x238>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004570 <DMA_SetConfig+0x23c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <DMA_SetConfig+0x240>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <DMA_SetConfig+0x244>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a29      	ldr	r2, [pc, #164]	@ (800457c <DMA_SetConfig+0x248>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <DMA_SetConfig+0x24c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a26      	ldr	r2, [pc, #152]	@ (8004584 <DMA_SetConfig+0x250>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a24      	ldr	r2, [pc, #144]	@ (8004588 <DMA_SetConfig+0x254>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <DMA_SetConfig+0x1d0>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a23      	ldr	r2, [pc, #140]	@ (800458c <DMA_SetConfig+0x258>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <DMA_SetConfig+0x1d4>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <DMA_SetConfig+0x1d6>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d059      	beq.n	80045c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	223f      	movs	r2, #63	@ 0x3f
 8004518:	409a      	lsls	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800452c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d138      	bne.n	80045b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800454e:	e086      	b.n	800465e <DMA_SetConfig+0x32a>
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	58025408 	.word	0x58025408
 8004594:	5802541c 	.word	0x5802541c
 8004598:	58025430 	.word	0x58025430
 800459c:	58025444 	.word	0x58025444
 80045a0:	58025458 	.word	0x58025458
 80045a4:	5802546c 	.word	0x5802546c
 80045a8:	58025480 	.word	0x58025480
 80045ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
}
 80045c0:	e04d      	b.n	800465e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a29      	ldr	r2, [pc, #164]	@ (800466c <DMA_SetConfig+0x338>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a27      	ldr	r2, [pc, #156]	@ (8004670 <DMA_SetConfig+0x33c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d01d      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <DMA_SetConfig+0x340>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d018      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a24      	ldr	r2, [pc, #144]	@ (8004678 <DMA_SetConfig+0x344>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a23      	ldr	r2, [pc, #140]	@ (800467c <DMA_SetConfig+0x348>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00e      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <DMA_SetConfig+0x34c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d009      	beq.n	8004612 <DMA_SetConfig+0x2de>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a20      	ldr	r2, [pc, #128]	@ (8004684 <DMA_SetConfig+0x350>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <DMA_SetConfig+0x2de>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <DMA_SetConfig+0x354>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <DMA_SetConfig+0x2e2>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <DMA_SetConfig+0x2e4>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d108      	bne.n	800464e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	60da      	str	r2, [r3, #12]
}
 800464c:	e007      	b.n	800465e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	60da      	str	r2, [r3, #12]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	58025408 	.word	0x58025408
 8004670:	5802541c 	.word	0x5802541c
 8004674:	58025430 	.word	0x58025430
 8004678:	58025444 	.word	0x58025444
 800467c:	58025458 	.word	0x58025458
 8004680:	5802546c 	.word	0x5802546c
 8004684:	58025480 	.word	0x58025480
 8004688:	58025494 	.word	0x58025494

0800468c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a42      	ldr	r2, [pc, #264]	@ (80047a4 <DMA_CalcBaseAndBitshift+0x118>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d04a      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a41      	ldr	r2, [pc, #260]	@ (80047a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d045      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3f      	ldr	r2, [pc, #252]	@ (80047ac <DMA_CalcBaseAndBitshift+0x120>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d040      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a3e      	ldr	r2, [pc, #248]	@ (80047b0 <DMA_CalcBaseAndBitshift+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d03b      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3c      	ldr	r2, [pc, #240]	@ (80047b4 <DMA_CalcBaseAndBitshift+0x128>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d036      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d031      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a39      	ldr	r2, [pc, #228]	@ (80047bc <DMA_CalcBaseAndBitshift+0x130>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02c      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a38      	ldr	r2, [pc, #224]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x134>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d027      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a36      	ldr	r2, [pc, #216]	@ (80047c4 <DMA_CalcBaseAndBitshift+0x138>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d022      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a35      	ldr	r2, [pc, #212]	@ (80047c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d01d      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a33      	ldr	r2, [pc, #204]	@ (80047cc <DMA_CalcBaseAndBitshift+0x140>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a32      	ldr	r2, [pc, #200]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2f      	ldr	r2, [pc, #188]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2d      	ldr	r2, [pc, #180]	@ (80047dc <DMA_CalcBaseAndBitshift+0x150>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <DMA_CalcBaseAndBitshift+0xa8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2c      	ldr	r2, [pc, #176]	@ (80047e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <DMA_CalcBaseAndBitshift+0xac>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <DMA_CalcBaseAndBitshift+0xae>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d024      	beq.n	8004788 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3b10      	subs	r3, #16
 8004746:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	4a24      	ldr	r2, [pc, #144]	@ (80047e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d908      	bls.n	8004778 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	4b1f      	ldr	r3, [pc, #124]	@ (80047ec <DMA_CalcBaseAndBitshift+0x160>)
 800476e:	4013      	ands	r3, r2
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	@ 0x58
 8004776:	e00d      	b.n	8004794 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <DMA_CalcBaseAndBitshift+0x160>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6593      	str	r3, [r2, #88]	@ 0x58
 8004786:	e005      	b.n	8004794 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40020010 	.word	0x40020010
 80047a8:	40020028 	.word	0x40020028
 80047ac:	40020040 	.word	0x40020040
 80047b0:	40020058 	.word	0x40020058
 80047b4:	40020070 	.word	0x40020070
 80047b8:	40020088 	.word	0x40020088
 80047bc:	400200a0 	.word	0x400200a0
 80047c0:	400200b8 	.word	0x400200b8
 80047c4:	40020410 	.word	0x40020410
 80047c8:	40020428 	.word	0x40020428
 80047cc:	40020440 	.word	0x40020440
 80047d0:	40020458 	.word	0x40020458
 80047d4:	40020470 	.word	0x40020470
 80047d8:	40020488 	.word	0x40020488
 80047dc:	400204a0 	.word	0x400204a0
 80047e0:	400204b8 	.word	0x400204b8
 80047e4:	aaaaaaab 	.word	0xaaaaaaab
 80047e8:	0800aafc 	.word	0x0800aafc
 80047ec:	fffffc00 	.word	0xfffffc00

080047f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d120      	bne.n	8004846 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	2b03      	cmp	r3, #3
 800480a:	d858      	bhi.n	80048be <DMA_CheckFifoParam+0xce>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <DMA_CheckFifoParam+0x24>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004825 	.word	0x08004825
 8004818:	08004837 	.word	0x08004837
 800481c:	08004825 	.word	0x08004825
 8004820:	080048bf 	.word	0x080048bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d048      	beq.n	80048c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004834:	e045      	b.n	80048c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800483e:	d142      	bne.n	80048c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004844:	e03f      	b.n	80048c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484e:	d123      	bne.n	8004898 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	2b03      	cmp	r3, #3
 8004856:	d838      	bhi.n	80048ca <DMA_CheckFifoParam+0xda>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <DMA_CheckFifoParam+0x70>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	08004877 	.word	0x08004877
 8004868:	08004871 	.word	0x08004871
 800486c:	08004889 	.word	0x08004889
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
        break;
 8004874:	e030      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d025      	beq.n	80048ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004886:	e022      	b.n	80048ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004890:	d11f      	bne.n	80048d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004896:	e01c      	b.n	80048d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	2b02      	cmp	r3, #2
 800489e:	d902      	bls.n	80048a6 <DMA_CheckFifoParam+0xb6>
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d003      	beq.n	80048ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80048a4:	e018      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
        break;
 80048aa:	e015      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
    break;
 80048bc:	e00b      	b.n	80048d6 <DMA_CheckFifoParam+0xe6>
        break;
 80048be:	bf00      	nop
 80048c0:	e00a      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        break;
 80048c2:	bf00      	nop
 80048c4:	e008      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        break;
 80048c6:	bf00      	nop
 80048c8:	e006      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        break;
 80048ca:	bf00      	nop
 80048cc:	e004      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
        break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
    break;
 80048d6:	bf00      	nop
    }
  }

  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop

080048e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a38      	ldr	r2, [pc, #224]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d022      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a36      	ldr	r2, [pc, #216]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01d      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d018      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a33      	ldr	r2, [pc, #204]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a32      	ldr	r2, [pc, #200]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a30      	ldr	r2, [pc, #192]	@ (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2f      	ldr	r2, [pc, #188]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2d      	ldr	r2, [pc, #180]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	3b08      	subs	r3, #8
 8004958:	4a28      	ldr	r2, [pc, #160]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4b26      	ldr	r3, [pc, #152]	@ (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a24      	ldr	r2, [pc, #144]	@ (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004974:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004984:	e024      	b.n	80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3b10      	subs	r3, #16
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d806      	bhi.n	80049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d902      	bls.n	80049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3308      	adds	r3, #8
 80049ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4b18      	ldr	r3, [pc, #96]	@ (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2201      	movs	r2, #1
 80049ca:	409a      	lsls	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	58025408 	.word	0x58025408
 80049e0:	5802541c 	.word	0x5802541c
 80049e4:	58025430 	.word	0x58025430
 80049e8:	58025444 	.word	0x58025444
 80049ec:	58025458 	.word	0x58025458
 80049f0:	5802546c 	.word	0x5802546c
 80049f4:	58025480 	.word	0x58025480
 80049f8:	58025494 	.word	0x58025494
 80049fc:	cccccccd 	.word	0xcccccccd
 8004a00:	16009600 	.word	0x16009600
 8004a04:	58025880 	.word	0x58025880
 8004a08:	aaaaaaab 	.word	0xaaaaaaab
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	4002040f 	.word	0x4002040f
 8004a14:	10008200 	.word	0x10008200
 8004a18:	40020880 	.word	0x40020880

08004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04a      	beq.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d847      	bhi.n	8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a25      	ldr	r2, [pc, #148]	@ (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a24      	ldr	r2, [pc, #144]	@ (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d01d      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1c      	ldr	r2, [pc, #112]	@ (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1b      	ldr	r2, [pc, #108]	@ (8004af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d101      	bne.n	8004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004aa4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004aa6:	e009      	b.n	8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a11      	ldr	r2, [pc, #68]	@ (8004b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004aba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	58025408 	.word	0x58025408
 8004ad8:	5802541c 	.word	0x5802541c
 8004adc:	58025430 	.word	0x58025430
 8004ae0:	58025444 	.word	0x58025444
 8004ae4:	58025458 	.word	0x58025458
 8004ae8:	5802546c 	.word	0x5802546c
 8004aec:	58025480 	.word	0x58025480
 8004af0:	58025494 	.word	0x58025494
 8004af4:	1600963f 	.word	0x1600963f
 8004af8:	58025940 	.word	0x58025940
 8004afc:	1000823f 	.word	0x1000823f
 8004b00:	40020940 	.word	0x40020940

08004b04 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00a      	b.n	8004b36 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
      break;
 8004b2c:	e002      	b.n	8004b34 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
      break;
 8004b32:	bf00      	nop
  }

  return status;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e003      	b.n	8004b5e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2201      	movs	r2, #1
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <HAL_EXTI_IRQHandler+0x5c>)
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4798      	blx	r3
    }
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	58000088 	.word	0x58000088

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	@ 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bda:	4b89      	ldr	r3, [pc, #548]	@ (8004e00 <HAL_GPIO_Init+0x234>)
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	e194      	b.n	8004f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8186 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x44>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80e0 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b2f      	ldr	r3, [pc, #188]	@ (8004e04 <HAL_GPIO_Init+0x238>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e04 <HAL_GPIO_Init+0x238>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d54:	4b2b      	ldr	r3, [pc, #172]	@ (8004e04 <HAL_GPIO_Init+0x238>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d62:	4a29      	ldr	r2, [pc, #164]	@ (8004e08 <HAL_GPIO_Init+0x23c>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	@ (8004e0c <HAL_GPIO_Init+0x240>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d052      	beq.n	8004e34 <HAL_GPIO_Init+0x268>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <HAL_GPIO_Init+0x244>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_GPIO_Init+0x22e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <HAL_GPIO_Init+0x248>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02b      	beq.n	8004df6 <HAL_GPIO_Init+0x22a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <HAL_GPIO_Init+0x24c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d025      	beq.n	8004df2 <HAL_GPIO_Init+0x226>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <HAL_GPIO_Init+0x250>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <HAL_GPIO_Init+0x222>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <HAL_GPIO_Init+0x254>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_GPIO_Init+0x21e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <HAL_GPIO_Init+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0x21a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	@ (8004e28 <HAL_GPIO_Init+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_GPIO_Init+0x216>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	@ (8004e2c <HAL_GPIO_Init+0x260>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_GPIO_Init+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <HAL_GPIO_Init+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_GPIO_Init+0x20e>
 8004dd6:	2309      	movs	r3, #9
 8004dd8:	e02d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e02b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dde:	2308      	movs	r3, #8
 8004de0:	e029      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de2:	2307      	movs	r3, #7
 8004de4:	e027      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e025      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dea:	2305      	movs	r3, #5
 8004dec:	e023      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dee:	2304      	movs	r3, #4
 8004df0:	e021      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df2:	2303      	movs	r3, #3
 8004df4:	e01f      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e01d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfe:	bf00      	nop
 8004e00:	58000080 	.word	0x58000080
 8004e04:	58024400 	.word	0x58024400
 8004e08:	58000400 	.word	0x58000400
 8004e0c:	58020000 	.word	0x58020000
 8004e10:	58020400 	.word	0x58020400
 8004e14:	58020800 	.word	0x58020800
 8004e18:	58020c00 	.word	0x58020c00
 8004e1c:	58021000 	.word	0x58021000
 8004e20:	58021400 	.word	0x58021400
 8004e24:	58021800 	.word	0x58021800
 8004e28:	58021c00 	.word	0x58021c00
 8004e2c:	58022000 	.word	0x58022000
 8004e30:	58022400 	.word	0x58022400
 8004e34:	2300      	movs	r3, #0
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e46:	4938      	ldr	r1, [pc, #224]	@ (8004f28 <HAL_GPIO_Init+0x35c>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae63 	bne.w	8004be0 <HAL_GPIO_Init+0x14>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	@ 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	58000400 	.word	0x58000400

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4013      	ands	r3, r2
 8004f76:	041a      	lsls	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	400b      	ands	r3, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f9c:	4b19      	ldr	r3, [pc, #100]	@ (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d00a      	beq.n	8004fbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fa8:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e01f      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e01d      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	490f      	ldr	r1, [pc, #60]	@ (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fce:	f7fc fe11 	bl	8001bf4 <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fd4:	e009      	b.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fd6:	f7fc fe0d 	bl	8001bf4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fe4:	d901      	bls.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	58024800 	.word	0x58024800

08005008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	@ 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f000 bc48 	b.w	80058ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8088 	beq.w	800513a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800502a:	4b99      	ldr	r3, [pc, #612]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005034:	4b96      	ldr	r3, [pc, #600]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	2b10      	cmp	r3, #16
 800503e:	d007      	beq.n	8005050 <HAL_RCC_OscConfig+0x48>
 8005040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005042:	2b18      	cmp	r3, #24
 8005044:	d111      	bne.n	800506a <HAL_RCC_OscConfig+0x62>
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d10c      	bne.n	800506a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b8f      	ldr	r3, [pc, #572]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d06d      	beq.n	8005138 <HAL_RCC_OscConfig+0x130>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d169      	bne.n	8005138 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f000 bc21 	b.w	80058ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x7a>
 8005074:	4b86      	ldr	r3, [pc, #536]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a85      	ldr	r2, [pc, #532]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800507a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e02e      	b.n	80050e0 <HAL_RCC_OscConfig+0xd8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x9c>
 800508a:	4b81      	ldr	r3, [pc, #516]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a80      	ldr	r2, [pc, #512]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b7e      	ldr	r3, [pc, #504]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7d      	ldr	r2, [pc, #500]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800509c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e01d      	b.n	80050e0 <HAL_RCC_OscConfig+0xd8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0xc0>
 80050ae:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a77      	ldr	r2, [pc, #476]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b75      	ldr	r3, [pc, #468]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a74      	ldr	r2, [pc, #464]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0xd8>
 80050c8:	4b71      	ldr	r3, [pc, #452]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a70      	ldr	r2, [pc, #448]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a6d      	ldr	r2, [pc, #436]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fc fd84 	bl	8001bf4 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fc fd80 	bl	8001bf4 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e3d4      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005102:	4b63      	ldr	r3, [pc, #396]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0xe8>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc fd70 	bl	8001bf4 <HAL_GetTick>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fc fd6c 	bl	8001bf4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	@ 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e3c0      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800512a:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x110>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80ca 	beq.w	80052dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005148:	4b51      	ldr	r3, [pc, #324]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005150:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005152:	4b4f      	ldr	r3, [pc, #316]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_RCC_OscConfig+0x166>
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b18      	cmp	r3, #24
 8005162:	d156      	bne.n	8005212 <HAL_RCC_OscConfig+0x20a>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d151      	bne.n	8005212 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516e:	4b48      	ldr	r3, [pc, #288]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_RCC_OscConfig+0x17e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e392      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005186:	4b42      	ldr	r3, [pc, #264]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 0219 	bic.w	r2, r3, #25
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	493f      	ldr	r1, [pc, #252]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc fd2c 	bl	8001bf4 <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fc fd28 	bl	8001bf4 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e37c      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051be:	f7fc fd49 	bl	8001c54 <HAL_GetREVID>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d817      	bhi.n	80051fc <HAL_RCC_OscConfig+0x1f4>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d108      	bne.n	80051e6 <HAL_RCC_OscConfig+0x1de>
 80051d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e4:	e07a      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	031b      	lsls	r3, r3, #12
 80051f4:	4926      	ldr	r1, [pc, #152]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fa:	e06f      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	4921      	ldr	r1, [pc, #132]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005210:	e064      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d047      	beq.n	80052aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800521a:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0219 	bic.w	r2, r3, #25
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	491a      	ldr	r1, [pc, #104]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fc fce2 	bl	8001bf4 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fc fcde 	bl	8001bf4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e332      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005246:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005252:	f7fc fcff 	bl	8001c54 <HAL_GetREVID>
 8005256:	4603      	mov	r3, r0
 8005258:	f241 0203 	movw	r2, #4099	@ 0x1003
 800525c:	4293      	cmp	r3, r2
 800525e:	d819      	bhi.n	8005294 <HAL_RCC_OscConfig+0x28c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d108      	bne.n	800527a <HAL_RCC_OscConfig+0x272>
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005270:	4a07      	ldr	r2, [pc, #28]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 8005272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005276:	6053      	str	r3, [r2, #4]
 8005278:	e030      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	031b      	lsls	r3, r3, #12
 8005288:	4901      	ldr	r1, [pc, #4]	@ (8005290 <HAL_RCC_OscConfig+0x288>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
 800528e:	e025      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
 8005290:	58024400 	.word	0x58024400
 8005294:	4b9a      	ldr	r3, [pc, #616]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	4997      	ldr	r1, [pc, #604]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	e018      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052aa:	4b95      	ldr	r3, [pc, #596]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a94      	ldr	r2, [pc, #592]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fc fc9d 	bl	8001bf4 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052be:	f7fc fc99 	bl	8001bf4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e2ed      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052d0:	4b8b      	ldr	r3, [pc, #556]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80a9 	beq.w	800543c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f4:	4b82      	ldr	r3, [pc, #520]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d007      	beq.n	8005310 <HAL_RCC_OscConfig+0x308>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b18      	cmp	r3, #24
 8005304:	d13a      	bne.n	800537c <HAL_RCC_OscConfig+0x374>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d135      	bne.n	800537c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005310:	4b7b      	ldr	r3, [pc, #492]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_OscConfig+0x320>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b80      	cmp	r3, #128	@ 0x80
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e2c1      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005328:	f7fc fc94 	bl	8001c54 <HAL_GetREVID>
 800532c:	4603      	mov	r3, r0
 800532e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005332:	4293      	cmp	r3, r2
 8005334:	d817      	bhi.n	8005366 <HAL_RCC_OscConfig+0x35e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	2b20      	cmp	r3, #32
 800533c:	d108      	bne.n	8005350 <HAL_RCC_OscConfig+0x348>
 800533e:	4b70      	ldr	r3, [pc, #448]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005346:	4a6e      	ldr	r2, [pc, #440]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800534e:	e075      	b.n	800543c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005350:	4b6b      	ldr	r3, [pc, #428]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	069b      	lsls	r3, r3, #26
 800535e:	4968      	ldr	r1, [pc, #416]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005364:	e06a      	b.n	800543c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005366:	4b66      	ldr	r3, [pc, #408]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	4962      	ldr	r1, [pc, #392]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800537a:	e05f      	b.n	800543c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d042      	beq.n	800540a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005384:	4b5e      	ldr	r3, [pc, #376]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5d      	ldr	r2, [pc, #372]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800538a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fc fc30 	bl	8001bf4 <HAL_GetTick>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005398:	f7fc fc2c 	bl	8001bf4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e280      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053aa:	4b55      	ldr	r3, [pc, #340]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053b6:	f7fc fc4d 	bl	8001c54 <HAL_GetREVID>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d817      	bhi.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d108      	bne.n	80053de <HAL_RCC_OscConfig+0x3d6>
 80053cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053da:	6053      	str	r3, [r2, #4]
 80053dc:	e02e      	b.n	800543c <HAL_RCC_OscConfig+0x434>
 80053de:	4b48      	ldr	r3, [pc, #288]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	069b      	lsls	r3, r3, #26
 80053ec:	4944      	ldr	r1, [pc, #272]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
 80053f2:	e023      	b.n	800543c <HAL_RCC_OscConfig+0x434>
 80053f4:	4b42      	ldr	r3, [pc, #264]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	493f      	ldr	r1, [pc, #252]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	60cb      	str	r3, [r1, #12]
 8005408:	e018      	b.n	800543c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800540a:	4b3d      	ldr	r3, [pc, #244]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3c      	ldr	r2, [pc, #240]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fc fbed 	bl	8001bf4 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800541e:	f7fc fbe9 	bl	8001bf4 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e23d      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005430:	4b33      	ldr	r3, [pc, #204]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d036      	beq.n	80054b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005450:	4b2b      	ldr	r3, [pc, #172]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005454:	4a2a      	ldr	r2, [pc, #168]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fc fbca 	bl	8001bf4 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fc fbc6 	bl	8001bf4 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e21a      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005476:	4b22      	ldr	r3, [pc, #136]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x45c>
 8005482:	e018      	b.n	80054b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005484:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fc fbb0 	bl	8001bf4 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005498:	f7fc fbac 	bl	8001bf4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e200      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054aa:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d039      	beq.n	8005536 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01c      	beq.n	8005504 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054d6:	f7fc fb8d 	bl	8001bf4 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054de:	f7fc fb89 	bl	8001bf4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1dd      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054f0:	4b03      	ldr	r3, [pc, #12]	@ (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x4d6>
 80054fc:	e01b      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
 80054fe:	bf00      	nop
 8005500:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005504:	4b9b      	ldr	r3, [pc, #620]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a9a      	ldr	r2, [pc, #616]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800550a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800550e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005510:	f7fc fb70 	bl	8001bf4 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005518:	f7fc fb6c 	bl	8001bf4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e1c0      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800552a:	4b92      	ldr	r3, [pc, #584]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8081 	beq.w	8005646 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005544:	4b8c      	ldr	r3, [pc, #560]	@ (8005778 <HAL_RCC_OscConfig+0x770>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a8b      	ldr	r2, [pc, #556]	@ (8005778 <HAL_RCC_OscConfig+0x770>)
 800554a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005550:	f7fc fb50 	bl	8001bf4 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005558:	f7fc fb4c 	bl	8001bf4 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	@ 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1a0      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556a:	4b83      	ldr	r3, [pc, #524]	@ (8005778 <HAL_RCC_OscConfig+0x770>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x584>
 800557e:	4b7d      	ldr	r3, [pc, #500]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a7c      	ldr	r2, [pc, #496]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6713      	str	r3, [r2, #112]	@ 0x70
 800558a:	e02d      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <HAL_RCC_OscConfig+0x5a6>
 8005594:	4b77      	ldr	r3, [pc, #476]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005598:	4a76      	ldr	r2, [pc, #472]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a0:	4b74      	ldr	r3, [pc, #464]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	4a73      	ldr	r2, [pc, #460]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x5c8>
 80055b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a6b      	ldr	r2, [pc, #428]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 80055d0:	4b68      	ldr	r3, [pc, #416]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d4:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	6713      	str	r3, [r2, #112]	@ 0x70
 80055dc:	4b65      	ldr	r3, [pc, #404]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	4a64      	ldr	r2, [pc, #400]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	f023 0304 	bic.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fc fb00 	bl	8001bf4 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fc fafc 	bl	8001bf4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e14e      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800560e:	4b59      	ldr	r3, [pc, #356]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ee      	beq.n	80055f8 <HAL_RCC_OscConfig+0x5f0>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fc faea 	bl	8001bf4 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fc fae6 	bl	8001bf4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e138      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800563a:	4b4e      	ldr	r3, [pc, #312]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ee      	bne.n	8005624 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 812d 	beq.w	80058aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005650:	4b48      	ldr	r3, [pc, #288]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005658:	2b18      	cmp	r3, #24
 800565a:	f000 80bd 	beq.w	80057d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	2b02      	cmp	r3, #2
 8005664:	f040 809e 	bne.w	80057a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005668:	4b42      	ldr	r3, [pc, #264]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a41      	ldr	r2, [pc, #260]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc fabe 	bl	8001bf4 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fc faba 	bl	8001bf4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e10e      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800568e:	4b39      	ldr	r3, [pc, #228]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569a:	4b36      	ldr	r3, [pc, #216]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800569c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800569e:	4b37      	ldr	r3, [pc, #220]	@ (800577c <HAL_RCC_OscConfig+0x774>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056aa:	0112      	lsls	r2, r2, #4
 80056ac:	430a      	orrs	r2, r1
 80056ae:	4931      	ldr	r1, [pc, #196]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c2:	3b01      	subs	r3, #1
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	3b01      	subs	r3, #1
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056dc:	3b01      	subs	r3, #1
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056e4:	4923      	ldr	r1, [pc, #140]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056ea:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	4a21      	ldr	r2, [pc, #132]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056fa:	4b21      	ldr	r3, [pc, #132]	@ (8005780 <HAL_RCC_OscConfig+0x778>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005702:	00d2      	lsls	r2, r2, #3
 8005704:	491b      	ldr	r1, [pc, #108]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	4917      	ldr	r1, [pc, #92]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800571c:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	f023 0202 	bic.w	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	4912      	ldr	r1, [pc, #72]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800572a:	4313      	orrs	r3, r2
 800572c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800572e:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	4a10      	ldr	r2, [pc, #64]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573a:	4b0e      	ldr	r3, [pc, #56]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	4a0d      	ldr	r2, [pc, #52]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	4a0a      	ldr	r2, [pc, #40]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 800574c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005752:	4b08      	ldr	r3, [pc, #32]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800575e:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005764:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fc fa43 	bl	8001bf4 <HAL_GetTick>
 800576e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005770:	e011      	b.n	8005796 <HAL_RCC_OscConfig+0x78e>
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	58024800 	.word	0x58024800
 800577c:	fffffc0c 	.word	0xfffffc0c
 8005780:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fc fa36 	bl	8001bf4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e08a      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005796:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x77c>
 80057a2:	e082      	b.n	80058aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b43      	ldr	r3, [pc, #268]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a42      	ldr	r2, [pc, #264]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80057aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fc fa20 	bl	8001bf4 <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b8:	f7fc fa1c 	bl	8001bf4 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e070      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ca:	4b3a      	ldr	r3, [pc, #232]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x7b0>
 80057d6:	e068      	b.n	80058aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057d8:	4b36      	ldr	r3, [pc, #216]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057de:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d031      	beq.n	8005850 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f003 0203 	and.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d12a      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d122      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d11a      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0a5b      	lsrs	r3, r3, #9
 800581e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005826:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d111      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d108      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	0e1b      	lsrs	r3, r3, #24
 8005842:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e02b      	b.n	80058ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005854:	4b17      	ldr	r3, [pc, #92]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 8005856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005858:	08db      	lsrs	r3, r3, #3
 800585a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800585e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	d01f      	beq.n	80058aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800586a:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005876:	f7fc f9bd 	bl	8001bf4 <HAL_GetTick>
 800587a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800587c:	bf00      	nop
 800587e:	f7fc f9b9 	bl	8001bf4 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	4293      	cmp	r3, r2
 8005888:	d0f9      	beq.n	800587e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800588a:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 800588c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588e:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <HAL_RCC_OscConfig+0x8b0>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005896:	00d2      	lsls	r2, r2, #3
 8005898:	4906      	ldr	r1, [pc, #24]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	4a04      	ldr	r2, [pc, #16]	@ (80058b4 <HAL_RCC_OscConfig+0x8ac>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	@ 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	58024400 	.word	0x58024400
 80058b8:	ffff0007 	.word	0xffff0007

080058bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e19c      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b8a      	ldr	r3, [pc, #552]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d910      	bls.n	8005900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b87      	ldr	r3, [pc, #540]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 020f 	bic.w	r2, r3, #15
 80058e6:	4985      	ldr	r1, [pc, #532]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b83      	ldr	r3, [pc, #524]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e184      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d010      	beq.n	800592e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	4b7b      	ldr	r3, [pc, #492]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005918:	429a      	cmp	r2, r3
 800591a:	d908      	bls.n	800592e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800591c:	4b78      	ldr	r3, [pc, #480]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	4975      	ldr	r1, [pc, #468]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800592a:	4313      	orrs	r3, r2
 800592c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	4b70      	ldr	r3, [pc, #448]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005946:	429a      	cmp	r2, r3
 8005948:	d908      	bls.n	800595c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800594a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	496a      	ldr	r1, [pc, #424]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005958:	4313      	orrs	r3, r2
 800595a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d010      	beq.n	800598a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	4b64      	ldr	r3, [pc, #400]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005974:	429a      	cmp	r2, r3
 8005976:	d908      	bls.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005978:	4b61      	ldr	r3, [pc, #388]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	495e      	ldr	r1, [pc, #376]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005986:	4313      	orrs	r3, r2
 8005988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	4b59      	ldr	r3, [pc, #356]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d908      	bls.n	80059b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059a6:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4953      	ldr	r1, [pc, #332]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d908      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 020f 	bic.w	r2, r3, #15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4947      	ldr	r1, [pc, #284]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d055      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059f2:	4b43      	ldr	r3, [pc, #268]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	4940      	ldr	r1, [pc, #256]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d121      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0f6      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d107      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a24:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d115      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0ea      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a3c:	4b30      	ldr	r3, [pc, #192]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0de      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d6      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a5c:	4b28      	ldr	r3, [pc, #160]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f023 0207 	bic.w	r2, r3, #7
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4925      	ldr	r1, [pc, #148]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fc f8c1 	bl	8001bf4 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a76:	f7fc f8bd 	bl	8001bf4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0be      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d1eb      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d208      	bcs.n	8005acc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	490e      	ldr	r1, [pc, #56]	@ (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d214      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 020f 	bic.w	r2, r3, #15
 8005ae2:	4906      	ldr	r1, [pc, #24]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b04      	ldr	r3, [pc, #16]	@ (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e086      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
 8005afc:	52002000 	.word	0x52002000
 8005b00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d208      	bcs.n	8005b32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b20:	4b3c      	ldr	r3, [pc, #240]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4939      	ldr	r1, [pc, #228]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d010      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	4b34      	ldr	r3, [pc, #208]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d208      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b4e:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	492e      	ldr	r1, [pc, #184]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	4b28      	ldr	r3, [pc, #160]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d208      	bcs.n	8005b8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b7c:	4b25      	ldr	r3, [pc, #148]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	4922      	ldr	r1, [pc, #136]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d208      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4917      	ldr	r1, [pc, #92]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bbc:	f000 f834 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	4912      	ldr	r1, [pc, #72]	@ (8005c18 <HAL_RCC_ClockConfig+0x35c>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bda:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c18 <HAL_RCC_ClockConfig+0x35c>)
 8005be4:	5cd3      	ldrb	r3, [r2, r3]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <HAL_RCC_ClockConfig+0x360>)
 8005bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c20 <HAL_RCC_ClockConfig+0x364>)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <HAL_RCC_ClockConfig+0x368>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb ffae 	bl	8001b60 <HAL_InitTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	0800aae0 	.word	0x0800aae0
 8005c1c:	24000818 	.word	0x24000818
 8005c20:	24000814 	.word	0x24000814
 8005c24:	24000838 	.word	0x24000838

08005c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	@ 0x24
 8005c2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2e:	4bb3      	ldr	r3, [pc, #716]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c36:	2b18      	cmp	r3, #24
 8005c38:	f200 8155 	bhi.w	8005ee6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005ca9 	.word	0x08005ca9
 8005c48:	08005ee7 	.word	0x08005ee7
 8005c4c:	08005ee7 	.word	0x08005ee7
 8005c50:	08005ee7 	.word	0x08005ee7
 8005c54:	08005ee7 	.word	0x08005ee7
 8005c58:	08005ee7 	.word	0x08005ee7
 8005c5c:	08005ee7 	.word	0x08005ee7
 8005c60:	08005ee7 	.word	0x08005ee7
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005ee7 	.word	0x08005ee7
 8005c6c:	08005ee7 	.word	0x08005ee7
 8005c70:	08005ee7 	.word	0x08005ee7
 8005c74:	08005ee7 	.word	0x08005ee7
 8005c78:	08005ee7 	.word	0x08005ee7
 8005c7c:	08005ee7 	.word	0x08005ee7
 8005c80:	08005ee7 	.word	0x08005ee7
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005ee7 	.word	0x08005ee7
 8005c8c:	08005ee7 	.word	0x08005ee7
 8005c90:	08005ee7 	.word	0x08005ee7
 8005c94:	08005ee7 	.word	0x08005ee7
 8005c98:	08005ee7 	.word	0x08005ee7
 8005c9c:	08005ee7 	.word	0x08005ee7
 8005ca0:	08005ee7 	.word	0x08005ee7
 8005ca4:	08005cdb 	.word	0x08005cdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca8:	4b94      	ldr	r3, [pc, #592]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cb4:	4b91      	ldr	r3, [pc, #580]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a90      	ldr	r2, [pc, #576]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cc6:	e111      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cca:	61bb      	str	r3, [r7, #24]
      break;
 8005ccc:	e10e      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005cce:	4b8d      	ldr	r3, [pc, #564]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cd0:	61bb      	str	r3, [r7, #24]
      break;
 8005cd2:	e10b      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8005f08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005cd6:	61bb      	str	r3, [r7, #24]
      break;
 8005cd8:	e108      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cda:	4b88      	ldr	r3, [pc, #544]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ce4:	4b85      	ldr	r3, [pc, #532]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005cf0:	4b82      	ldr	r3, [pc, #520]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cfa:	4b80      	ldr	r3, [pc, #512]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfe:	08db      	lsrs	r3, r3, #3
 8005d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80e1 	beq.w	8005ee0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	f000 8083 	beq.w	8005e2c <HAL_RCC_GetSysClockFreq+0x204>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	f200 80a1 	bhi.w	8005e70 <HAL_RCC_GetSysClockFreq+0x248>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x114>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d056      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d3a:	e099      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d02d      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d48:	4b6c      	ldr	r3, [pc, #432]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	4a6b      	ldr	r2, [pc, #428]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
 8005d58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b62      	ldr	r3, [pc, #392]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005da2:	e087      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b51      	ldr	r3, [pc, #324]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005de6:	e065      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b40      	ldr	r3, [pc, #256]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e2a:	e043      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e6e:	e021      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	4b1e      	ldr	r3, [pc, #120]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005eb4:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	0a5b      	lsrs	r3, r3, #9
 8005eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed8:	ee17 3a90 	vmov	r3, s15
 8005edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ede:	e005      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
      break;
 8005ee4:	e002      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005ee6:	4b07      	ldr	r3, [pc, #28]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee8:	61bb      	str	r3, [r7, #24]
      break;
 8005eea:	bf00      	nop
  }

  return sysclockfreq;
 8005eec:	69bb      	ldr	r3, [r7, #24]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3724      	adds	r7, #36	@ 0x24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
 8005f00:	03d09000 	.word	0x03d09000
 8005f04:	003d0900 	.word	0x003d0900
 8005f08:	007a1200 	.word	0x007a1200
 8005f0c:	46000000 	.word	0x46000000
 8005f10:	4c742400 	.word	0x4c742400
 8005f14:	4a742400 	.word	0x4a742400
 8005f18:	4af42400 	.word	0x4af42400

08005f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f22:	f7ff fe81 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005f26:	4602      	mov	r2, r0
 8005f28:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	490f      	ldr	r1, [pc, #60]	@ (8005f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f34:	5ccb      	ldrb	r3, [r1, r3]
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f40:	4b0a      	ldr	r3, [pc, #40]	@ (8005f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f4a:	5cd3      	ldrb	r3, [r2, r3]
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	4a07      	ldr	r2, [pc, #28]	@ (8005f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f5a:	4a07      	ldr	r2, [pc, #28]	@ (8005f78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f60:	4b04      	ldr	r3, [pc, #16]	@ (8005f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	0800aae0 	.word	0x0800aae0
 8005f74:	24000818 	.word	0x24000818
 8005f78:	24000814 	.word	0x24000814

08005f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f80:	f7ff ffcc 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b06      	ldr	r3, [pc, #24]	@ (8005fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	4904      	ldr	r1, [pc, #16]	@ (8005fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f92:	5ccb      	ldrb	r3, [r1, r3]
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	0800aae0 	.word	0x0800aae0

08005fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fac:	f7ff ffb6 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4904      	ldr	r1, [pc, #16]	@ (8005fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	0800aae0 	.word	0x0800aae0

08005fd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd8:	b0ca      	sub	sp, #296	@ 0x128
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	ea54 0305 	orrs.w	r3, r4, r5
 8005ffe:	d049      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800600a:	d02f      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800600c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006010:	d828      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006016:	d01a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800601c:	d822      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006026:	d007      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006028:	e01c      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800602a:	4bb8      	ldr	r3, [pc, #736]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	4ab7      	ldr	r2, [pc, #732]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006036:	e01a      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	3308      	adds	r3, #8
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fc8f 	bl	8007964 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800604c:	e00f      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	3328      	adds	r3, #40	@ 0x28
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fd36 	bl	8007ac8 <RCCEx_PLL3_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006062:	e004      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606a:	e000      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800606c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006076:	4ba5      	ldr	r3, [pc, #660]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006084:	4aa1      	ldr	r2, [pc, #644]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006086:	430b      	orrs	r3, r1
 8006088:	6513      	str	r3, [r2, #80]	@ 0x50
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060a0:	f04f 0900 	mov.w	r9, #0
 80060a4:	ea58 0309 	orrs.w	r3, r8, r9
 80060a8:	d047      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d82a      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060b4:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060d1 	.word	0x080060d1
 80060c0:	080060df 	.word	0x080060df
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	08006113 	.word	0x08006113
 80060cc:	08006113 	.word	0x08006113
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d0:	4b8e      	ldr	r3, [pc, #568]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	4a8d      	ldr	r2, [pc, #564]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060dc:	e01a      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	3308      	adds	r3, #8
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fc3c 	bl	8007964 <RCCEx_PLL2_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060f2:	e00f      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f8:	3328      	adds	r3, #40	@ 0x28
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fce3 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006108:	e004      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800611c:	4b7b      	ldr	r3, [pc, #492]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006120:	f023 0107 	bic.w	r1, r3, #7
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	4a78      	ldr	r2, [pc, #480]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006130:	e003      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006146:	f04f 0b00 	mov.w	fp, #0
 800614a:	ea5a 030b 	orrs.w	r3, sl, fp
 800614e:	d04c      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615a:	d030      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800615c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006160:	d829      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006162:	2bc0      	cmp	r3, #192	@ 0xc0
 8006164:	d02d      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006166:	2bc0      	cmp	r3, #192	@ 0xc0
 8006168:	d825      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800616a:	2b80      	cmp	r3, #128	@ 0x80
 800616c:	d018      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800616e:	2b80      	cmp	r3, #128	@ 0x80
 8006170:	d821      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006176:	2b40      	cmp	r3, #64	@ 0x40
 8006178:	d007      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800617a:	e01c      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617c:	4b63      	ldr	r3, [pc, #396]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4a62      	ldr	r2, [pc, #392]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006188:	e01c      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	3308      	adds	r3, #8
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fbe6 	bl	8007964 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800619e:	e011      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a4:	3328      	adds	r3, #40	@ 0x28
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fc8d 	bl	8007ac8 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061b4:	e006      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061bc:	e002      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061cc:	4b4f      	ldr	r3, [pc, #316]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061da:	4a4c      	ldr	r2, [pc, #304]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6513      	str	r3, [r2, #80]	@ 0x50
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80061fa:	2300      	movs	r3, #0
 80061fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006200:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d053      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006216:	d035      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006218:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800621c:	d82e      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800621e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006222:	d031      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006224:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006228:	d828      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800622a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622e:	d01a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006234:	d822      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800623a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800623e:	d007      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006240:	e01c      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006242:	4b32      	ldr	r3, [pc, #200]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	4a31      	ldr	r2, [pc, #196]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800624e:	e01c      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	3308      	adds	r3, #8
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fb83 	bl	8007964 <RCCEx_PLL2_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006264:	e011      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	3328      	adds	r3, #40	@ 0x28
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fc2a 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800627a:	e006      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006282:	e002      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006284:	bf00      	nop
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006292:	4b1e      	ldr	r3, [pc, #120]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062a2:	4a1a      	ldr	r2, [pc, #104]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a8:	e003      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062c2:	2300      	movs	r3, #0
 80062c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80062cc:	460b      	mov	r3, r1
 80062ce:	4313      	orrs	r3, r2
 80062d0:	d056      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062de:	d038      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062e4:	d831      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062ea:	d034      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062f0:	d82b      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f6:	d01d      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062fc:	d825      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d006      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006308:	e01f      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4ba2      	ldr	r3, [pc, #648]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	4aa1      	ldr	r2, [pc, #644]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800631c:	e01c      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	3308      	adds	r3, #8
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fb1c 	bl	8007964 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006332:	e011      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006338:	3328      	adds	r3, #40	@ 0x28
 800633a:	2100      	movs	r1, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f001 fbc3 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006360:	4b8e      	ldr	r3, [pc, #568]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006370:	4a8a      	ldr	r2, [pc, #552]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6593      	str	r3, [r2, #88]	@ 0x58
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800638c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006396:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d03a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a6:	2b30      	cmp	r3, #48	@ 0x30
 80063a8:	d01f      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063aa:	2b30      	cmp	r3, #48	@ 0x30
 80063ac:	d819      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d00c      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d815      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d019      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d111      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063be:	4b77      	ldr	r3, [pc, #476]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	4a76      	ldr	r2, [pc, #472]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063ca:	e011      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	3308      	adds	r3, #8
 80063d2:	2102      	movs	r1, #2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fac5 	bl	8007964 <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063f8:	4b68      	ldr	r3, [pc, #416]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006406:	4a65      	ldr	r2, [pc, #404]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006408:	430b      	orrs	r3, r1
 800640a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800640c:	e003      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006422:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800642c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d051      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006440:	d035      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006446:	d82e      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006448:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800644c:	d031      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800644e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006452:	d828      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006458:	d01a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800645e:	d822      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006468:	d007      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800646a:	e01c      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646c:	4b4b      	ldr	r3, [pc, #300]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	4a4a      	ldr	r2, [pc, #296]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006478:	e01c      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	3308      	adds	r3, #8
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f001 fa6e 	bl	8007964 <RCCEx_PLL2_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800648e:	e011      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	3328      	adds	r3, #40	@ 0x28
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fb15 	bl	8007ac8 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064a4:	e006      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ac:	e002      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064bc:	4b37      	ldr	r3, [pc, #220]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ca:	4a34      	ldr	r2, [pc, #208]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80064d0:	e003      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064ea:	2300      	movs	r3, #0
 80064ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80064f4:	460b      	mov	r3, r1
 80064f6:	4313      	orrs	r3, r2
 80064f8:	d056      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006504:	d033      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800650a:	d82c      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800650c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006510:	d02f      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006516:	d826      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006518:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800651c:	d02b      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800651e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006522:	d820      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006528:	d012      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800652a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800652e:	d81a      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d022      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006538:	d115      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	3308      	adds	r3, #8
 8006540:	2101      	movs	r1, #1
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fa0e 	bl	8007964 <RCCEx_PLL2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800654e:	e015      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	3328      	adds	r3, #40	@ 0x28
 8006556:	2101      	movs	r1, #1
 8006558:	4618      	mov	r0, r3
 800655a:	f001 fab5 	bl	8007ac8 <RCCEx_PLL3_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006564:	e00a      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800656c:	e006      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656e:	bf00      	nop
 8006570:	e004      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800657a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006584:	4b05      	ldr	r3, [pc, #20]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006588:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006592:	4a02      	ldr	r2, [pc, #8]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006594:	430b      	orrs	r3, r1
 8006596:	6513      	str	r3, [r2, #80]	@ 0x50
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800659a:	bf00      	nop
 800659c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d055      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d4:	d033      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065da:	d82c      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e0:	d02f      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e6:	d826      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ec:	d02b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065f2:	d820      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f8:	d012      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fe:	d81a      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d022      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006608:	d115      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	3308      	adds	r3, #8
 8006610:	2101      	movs	r1, #1
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f9a6 	bl	8007964 <RCCEx_PLL2_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800661e:	e015      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006624:	3328      	adds	r3, #40	@ 0x28
 8006626:	2101      	movs	r1, #1
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fa4d 	bl	8007ac8 <RCCEx_PLL3_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006634:	e00a      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800663c:	e006      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663e:	bf00      	nop
 8006640:	e004      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800664a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006654:	4ba3      	ldr	r3, [pc, #652]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006664:	4a9f      	ldr	r2, [pc, #636]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006666:	430b      	orrs	r3, r1
 8006668:	6593      	str	r3, [r2, #88]	@ 0x58
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800668a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d037      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669e:	d00e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a4:	d816      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d018      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ae:	d111      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b0:	4b8c      	ldr	r3, [pc, #560]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	4a8b      	ldr	r2, [pc, #556]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066bc:	e00f      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	3308      	adds	r3, #8
 80066c4:	2101      	movs	r1, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f94c 	bl	8007964 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066e6:	4b7f      	ldr	r3, [pc, #508]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f4:	4a7b      	ldr	r2, [pc, #492]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800671a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d039      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800672a:	2b03      	cmp	r3, #3
 800672c:	d81c      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006771 	.word	0x08006771
 8006738:	08006745 	.word	0x08006745
 800673c:	08006753 	.word	0x08006753
 8006740:	08006771 	.word	0x08006771
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006744:	4b67      	ldr	r3, [pc, #412]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	4a66      	ldr	r2, [pc, #408]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800674a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800674e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006750:	e00f      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	3308      	adds	r3, #8
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f902 	bl	8007964 <RCCEx_PLL2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006766:	e004      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800676e:	e000      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800677a:	4b5a      	ldr	r3, [pc, #360]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677e:	f023 0103 	bic.w	r1, r3, #3
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006788:	4a56      	ldr	r2, [pc, #344]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800678a:	430b      	orrs	r3, r1
 800678c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800678e:	e003      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f000 809f 	beq.w	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ba:	4b4b      	ldr	r3, [pc, #300]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a4a      	ldr	r2, [pc, #296]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067c6:	f7fb fa15 	bl	8001bf4 <HAL_GetTick>
 80067ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ce:	e00b      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d0:	f7fb fa10 	bl	8001bf4 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b64      	cmp	r3, #100	@ 0x64
 80067de:	d903      	bls.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067e6:	e005      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e8:	4b3f      	ldr	r3, [pc, #252]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0ed      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d179      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067fc:	4b39      	ldr	r3, [pc, #228]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006804:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006808:	4053      	eors	r3, r2
 800680a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800680e:	2b00      	cmp	r3, #0
 8006810:	d015      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006812:	4b34      	ldr	r3, [pc, #208]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800681e:	4b31      	ldr	r3, [pc, #196]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006822:	4a30      	ldr	r2, [pc, #192]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006828:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800682a:	4b2e      	ldr	r3, [pc, #184]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682e:	4a2d      	ldr	r2, [pc, #180]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006834:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006836:	4a2b      	ldr	r2, [pc, #172]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800683c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684a:	d118      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fb f9d2 	bl	8001bf4 <HAL_GetTick>
 8006850:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006854:	e00d      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006856:	f7fb f9cd 	bl	8001bf4 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006860:	1ad2      	subs	r2, r2, r3
 8006862:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006866:	429a      	cmp	r2, r3
 8006868:	d903      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006870:	e005      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006872:	4b1c      	ldr	r3, [pc, #112]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0eb      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800687e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006882:	2b00      	cmp	r3, #0
 8006884:	d129      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800688e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006896:	d10e      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006898:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068a8:	091a      	lsrs	r2, r3, #4
 80068aa:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	4a0d      	ldr	r2, [pc, #52]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6113      	str	r3, [r2, #16]
 80068b4:	e005      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	4a0a      	ldr	r2, [pc, #40]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068c0:	6113      	str	r3, [r2, #16]
 80068c2:	4b08      	ldr	r3, [pc, #32]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d2:	4a04      	ldr	r2, [pc, #16]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d8:	e00e      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80068e2:	e009      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068e4:	58024400 	.word	0x58024400
 80068e8:	58024800 	.word	0x58024800
 80068ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 0301 	and.w	r3, r2, #1
 8006904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800690e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	f000 8089 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006920:	2b28      	cmp	r3, #40	@ 0x28
 8006922:	d86b      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006924:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006a05 	.word	0x08006a05
 8006930:	080069fd 	.word	0x080069fd
 8006934:	080069fd 	.word	0x080069fd
 8006938:	080069fd 	.word	0x080069fd
 800693c:	080069fd 	.word	0x080069fd
 8006940:	080069fd 	.word	0x080069fd
 8006944:	080069fd 	.word	0x080069fd
 8006948:	080069fd 	.word	0x080069fd
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069fd 	.word	0x080069fd
 8006954:	080069fd 	.word	0x080069fd
 8006958:	080069fd 	.word	0x080069fd
 800695c:	080069fd 	.word	0x080069fd
 8006960:	080069fd 	.word	0x080069fd
 8006964:	080069fd 	.word	0x080069fd
 8006968:	080069fd 	.word	0x080069fd
 800696c:	080069e7 	.word	0x080069e7
 8006970:	080069fd 	.word	0x080069fd
 8006974:	080069fd 	.word	0x080069fd
 8006978:	080069fd 	.word	0x080069fd
 800697c:	080069fd 	.word	0x080069fd
 8006980:	080069fd 	.word	0x080069fd
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069fd 	.word	0x080069fd
 800698c:	08006a05 	.word	0x08006a05
 8006990:	080069fd 	.word	0x080069fd
 8006994:	080069fd 	.word	0x080069fd
 8006998:	080069fd 	.word	0x080069fd
 800699c:	080069fd 	.word	0x080069fd
 80069a0:	080069fd 	.word	0x080069fd
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	080069fd 	.word	0x080069fd
 80069b8:	080069fd 	.word	0x080069fd
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006a05 	.word	0x08006a05
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d4:	3308      	adds	r3, #8
 80069d6:	2101      	movs	r1, #1
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 ffc3 	bl	8007964 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069e4:	e00f      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ea:	3328      	adds	r3, #40	@ 0x28
 80069ec:	2101      	movs	r1, #1
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 f86a 	bl	8007ac8 <RCCEx_PLL3_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a0e:	4bbf      	ldr	r3, [pc, #764]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a1c:	4abb      	ldr	r2, [pc, #748]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f002 0302 	and.w	r3, r2, #2
 8006a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d041      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d824      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a56:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006aa9 	.word	0x08006aa9
 8006a60:	08006a75 	.word	0x08006a75
 8006a64:	08006a8b 	.word	0x08006a8b
 8006a68:	08006aa9 	.word	0x08006aa9
 8006a6c:	08006aa9 	.word	0x08006aa9
 8006a70:	08006aa9 	.word	0x08006aa9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	3308      	adds	r3, #8
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 ff71 	bl	8007964 <RCCEx_PLL2_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a88:	e00f      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8e:	3328      	adds	r3, #40	@ 0x28
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f818 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a9e:	e004      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa6:	e000      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ab2:	4b96      	ldr	r3, [pc, #600]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab6:	f023 0107 	bic.w	r1, r3, #7
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ac0:	4a92      	ldr	r2, [pc, #584]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 0304 	and.w	r3, r2, #4
 8006adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ae6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d044      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d825      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006afc:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b51 	.word	0x08006b51
 8006b08:	08006b1d 	.word	0x08006b1d
 8006b0c:	08006b33 	.word	0x08006b33
 8006b10:	08006b51 	.word	0x08006b51
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b51 	.word	0x08006b51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	3308      	adds	r3, #8
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 ff1d 	bl	8007964 <RCCEx_PLL2_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b30:	e00f      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b36:	3328      	adds	r3, #40	@ 0x28
 8006b38:	2101      	movs	r1, #1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ffc4 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b46:	e004      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b4e:	e000      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5e:	f023 0107 	bic.w	r1, r3, #7
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6a:	4a68      	ldr	r2, [pc, #416]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b70:	e003      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f002 0320 	and.w	r3, r2, #32
 8006b86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b94:	460b      	mov	r3, r1
 8006b96:	4313      	orrs	r3, r2
 8006b98:	d055      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba6:	d033      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bac:	d82c      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d02f      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb8:	d826      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bbe:	d02b      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bc4:	d820      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bca:	d012      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bd0:	d81a      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d022      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bda:	d115      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	3308      	adds	r3, #8
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 febd 	bl	8007964 <RCCEx_PLL2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bf0:	e015      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3328      	adds	r3, #40	@ 0x28
 8006bf8:	2102      	movs	r1, #2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 ff64 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c06:	e00a      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0e:	e006      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c10:	bf00      	nop
 8006c12:	e004      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c14:	bf00      	nop
 8006c16:	e002      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c18:	bf00      	nop
 8006c1a:	e000      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c26:	4b39      	ldr	r3, [pc, #228]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	4a35      	ldr	r2, [pc, #212]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c3c:	e003      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d058      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c72:	d033      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c78:	d82c      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7e:	d02f      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c84:	d826      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c8a:	d02b      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c90:	d820      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c96:	d012      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d81a      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d022      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca6:	d115      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cac:	3308      	adds	r3, #8
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fe57 	bl	8007964 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cbc:	e015      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc2:	3328      	adds	r3, #40	@ 0x28
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fefe 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cd2:	e00a      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cda:	e006      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e004      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10e      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cf2:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d02:	4a02      	ldr	r2, [pc, #8]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d08:	e006      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d055      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d44:	d033      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d4a:	d82c      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d50:	d02f      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d56:	d826      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d5c:	d02b      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d62:	d820      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d68:	d012      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d6e:	d81a      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d022      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d78:	d115      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	3308      	adds	r3, #8
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fdee 	bl	8007964 <RCCEx_PLL2_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d8e:	e015      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fe95 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006da4:	e00a      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dac:	e006      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e004      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006db2:	bf00      	nop
 8006db4:	e002      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dd4:	4a9d      	ldr	r2, [pc, #628]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 0308 	and.w	r3, r2, #8
 8006df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d01e      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e10:	d10c      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2102      	movs	r1, #2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fe54 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e2c:	4b87      	ldr	r3, [pc, #540]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e3c:	4a83      	ldr	r2, [pc, #524]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f002 0310 	and.w	r3, r2, #16
 8006e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d01e      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6e:	d10c      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	3328      	adds	r3, #40	@ 0x28
 8006e76:	2102      	movs	r1, #2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fe25 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e8a:	4b70      	ldr	r3, [pc, #448]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	d03e      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ecc:	d022      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed2:	d81b      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006edc:	d00b      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ede:	e015      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fd3b 	bl	8007964 <RCCEx_PLL2_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00f      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3328      	adds	r3, #40	@ 0x28
 8006efc:	2102      	movs	r1, #2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fde2 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f2e:	4a47      	ldr	r2, [pc, #284]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f66:	d01f      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f6c:	d818      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f72:	d003      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f78:	d007      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f7a:	e011      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7c:	4b33      	ldr	r3, [pc, #204]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	4a32      	ldr	r2, [pc, #200]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f88:	e00f      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	3328      	adds	r3, #40	@ 0x28
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fd98 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f9e:	e004      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fb2:	4b26      	ldr	r3, [pc, #152]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc2:	4a22      	ldr	r2, [pc, #136]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fde:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fe4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d034      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ffc:	d007      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ffe:	e011      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007000:	4b12      	ldr	r3, [pc, #72]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	4a11      	ldr	r2, [pc, #68]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800700c:	e00e      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	3308      	adds	r3, #8
 8007014:	2102      	movs	r1, #2
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fca4 	bl	8007964 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007022:	e003      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800702a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10d      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007034:	4b05      	ldr	r3, [pc, #20]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007038:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007042:	4a02      	ldr	r2, [pc, #8]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007044:	430b      	orrs	r3, r1
 8007046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007066:	2300      	movs	r3, #0
 8007068:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800706a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800706e:	460b      	mov	r3, r1
 8007070:	4313      	orrs	r3, r2
 8007072:	d00c      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007078:	3328      	adds	r3, #40	@ 0x28
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fd23 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800709a:	663b      	str	r3, [r7, #96]	@ 0x60
 800709c:	2300      	movs	r3, #0
 800709e:	667b      	str	r3, [r7, #100]	@ 0x64
 80070a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070a4:	460b      	mov	r3, r1
 80070a6:	4313      	orrs	r3, r2
 80070a8:	d038      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b6:	d018      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070bc:	d811      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c2:	d014      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c8:	d80b      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d2:	d106      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4bc3      	ldr	r3, [pc, #780]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	4ac2      	ldr	r2, [pc, #776]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070e0:	e008      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e8:	e004      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070ea:	bf00      	nop
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070fc:	4bb9      	ldr	r3, [pc, #740]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007100:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710c:	4ab5      	ldr	r2, [pc, #724]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800710e:	430b      	orrs	r3, r1
 8007110:	6553      	str	r3, [r2, #84]	@ 0x54
 8007112:	e003      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800712a:	2300      	movs	r3, #0
 800712c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800712e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007132:	460b      	mov	r3, r1
 8007134:	4313      	orrs	r3, r2
 8007136:	d009      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007138:	4baa      	ldr	r3, [pc, #680]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800713a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007146:	4aa7      	ldr	r2, [pc, #668]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007148:	430b      	orrs	r3, r1
 800714a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007158:	653b      	str	r3, [r7, #80]	@ 0x50
 800715a:	2300      	movs	r3, #0
 800715c:	657b      	str	r3, [r7, #84]	@ 0x54
 800715e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007168:	4b9e      	ldr	r3, [pc, #632]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007178:	4a9a      	ldr	r2, [pc, #616]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800717a:	430b      	orrs	r3, r1
 800717c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800718a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800718c:	2300      	movs	r3, #0
 800718e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007190:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800719a:	4b92      	ldr	r3, [pc, #584]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800719c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800719e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a8:	4a8e      	ldr	r2, [pc, #568]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071aa:	430b      	orrs	r3, r1
 80071ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80071bc:	2300      	movs	r3, #0
 80071be:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071c4:	460b      	mov	r3, r1
 80071c6:	4313      	orrs	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071ca:	4b86      	ldr	r3, [pc, #536]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	4a85      	ldr	r2, [pc, #532]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071d4:	6113      	str	r3, [r2, #16]
 80071d6:	4b83      	ldr	r3, [pc, #524]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d8:	6919      	ldr	r1, [r3, #16]
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071e2:	4a80      	ldr	r2, [pc, #512]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007204:	4b77      	ldr	r3, [pc, #476]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007212:	4a74      	ldr	r2, [pc, #464]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007214:	430b      	orrs	r3, r1
 8007216:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007224:	633b      	str	r3, [r7, #48]	@ 0x30
 8007226:	2300      	movs	r3, #0
 8007228:	637b      	str	r3, [r7, #52]	@ 0x34
 800722a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007234:	4b6b      	ldr	r3, [pc, #428]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007238:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007244:	4a67      	ldr	r2, [pc, #412]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007246:	430b      	orrs	r3, r1
 8007248:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	2100      	movs	r1, #0
 8007254:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800725c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007260:	460b      	mov	r3, r1
 8007262:	4313      	orrs	r3, r2
 8007264:	d011      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3308      	adds	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fb78 	bl	8007964 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800727a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	2100      	movs	r1, #0
 8007294:	6239      	str	r1, [r7, #32]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
 800729c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d011      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	3308      	adds	r3, #8
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fb58 	bl	8007964 <RCCEx_PLL2_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	2100      	movs	r1, #0
 80072d4:	61b9      	str	r1, [r7, #24]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072e0:	460b      	mov	r3, r1
 80072e2:	4313      	orrs	r3, r2
 80072e4:	d011      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	3308      	adds	r3, #8
 80072ec:	2102      	movs	r1, #2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fb38 	bl	8007964 <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	2100      	movs	r1, #0
 8007314:	6139      	str	r1, [r7, #16]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007320:	460b      	mov	r3, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d011      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	3328      	adds	r3, #40	@ 0x28
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fbca 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	2100      	movs	r1, #0
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d011      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736a:	3328      	adds	r3, #40	@ 0x28
 800736c:	2101      	movs	r1, #1
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fbaa 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	2100      	movs	r1, #0
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073a0:	460b      	mov	r3, r1
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d011      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	3328      	adds	r3, #40	@ 0x28
 80073ac:	2102      	movs	r1, #2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fb8a 	bl	8007ac8 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80073ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e000      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
}
 80073d8:	4618      	mov	r0, r3
 80073da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80073de:	46bd      	mov	sp, r7
 80073e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e4:	58024400 	.word	0x58024400

080073e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073ec:	f7fe fd96 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b06      	ldr	r3, [pc, #24]	@ (800740c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4904      	ldr	r1, [pc, #16]	@ (8007410 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	58024400 	.word	0x58024400
 8007410:	0800aae0 	.word	0x0800aae0

08007414 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	@ 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800741c:	4ba1      	ldr	r3, [pc, #644]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007426:	4b9f      	ldr	r3, [pc, #636]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742a:	0b1b      	lsrs	r3, r3, #12
 800742c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007430:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007432:	4b9c      	ldr	r3, [pc, #624]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800743e:	4b99      	ldr	r3, [pc, #612]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	08db      	lsrs	r3, r3, #3
 8007444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8111 	beq.w	8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f000 8083 	beq.w	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b02      	cmp	r3, #2
 800746e:	f200 80a1 	bhi.w	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d056      	beq.n	800752c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800747e:	e099      	b.n	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007480:	4b88      	ldr	r3, [pc, #544]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02d      	beq.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800748c:	4b85      	ldr	r3, [pc, #532]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	4a84      	ldr	r2, [pc, #528]	@ (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b7b      	ldr	r3, [pc, #492]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074e6:	e087      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b6a      	ldr	r3, [pc, #424]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752a:	e065      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b59      	ldr	r3, [pc, #356]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756e:	e043      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b48      	ldr	r3, [pc, #288]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b2:	e021      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b37      	ldr	r3, [pc, #220]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075f8:	4b2a      	ldr	r3, [pc, #168]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	0a5b      	lsrs	r3, r3, #9
 80075fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800760e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007612:	edd7 6a07 	vldr	s13, [r7, #28]
 8007616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761e:	ee17 2a90 	vmov	r2, s15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007626:	4b1f      	ldr	r3, [pc, #124]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007638:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800763c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007640:	edd7 6a07 	vldr	s13, [r7, #28]
 8007644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764c:	ee17 2a90 	vmov	r2, s15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007654:	4b13      	ldr	r3, [pc, #76]	@ (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800766a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 2a90 	vmov	r2, s15
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007682:	e008      	b.n	8007696 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
}
 8007696:	bf00      	nop
 8007698:	3724      	adds	r7, #36	@ 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	58024400 	.word	0x58024400
 80076a8:	03d09000 	.word	0x03d09000
 80076ac:	46000000 	.word	0x46000000
 80076b0:	4c742400 	.word	0x4c742400
 80076b4:	4a742400 	.word	0x4a742400
 80076b8:	4af42400 	.word	0x4af42400

080076bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	@ 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c4:	4ba1      	ldr	r3, [pc, #644]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076ce:	4b9f      	ldr	r3, [pc, #636]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d2:	0d1b      	lsrs	r3, r3, #20
 80076d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076da:	4b9c      	ldr	r3, [pc, #624]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076e6:	4b99      	ldr	r3, [pc, #612]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8111 	beq.w	800792c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b02      	cmp	r3, #2
 800770e:	f000 8083 	beq.w	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b02      	cmp	r3, #2
 8007716:	f200 80a1 	bhi.w	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d056      	beq.n	80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007726:	e099      	b.n	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007728:	4b88      	ldr	r3, [pc, #544]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02d      	beq.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007734:	4b85      	ldr	r3, [pc, #532]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	08db      	lsrs	r3, r3, #3
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	4a84      	ldr	r2, [pc, #528]	@ (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
 8007744:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b7b      	ldr	r3, [pc, #492]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007772:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800778e:	e087      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b6a      	ldr	r3, [pc, #424]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d2:	e065      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b59      	ldr	r3, [pc, #356]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007816:	e043      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b48      	ldr	r3, [pc, #288]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a03 	vldr	s12, [r7, #12]
 800783e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800785a:	e021      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b37      	ldr	r3, [pc, #220]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007882:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078a0:	4b2a      	ldr	r3, [pc, #168]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	0a5b      	lsrs	r3, r3, #9
 80078a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80078be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c6:	ee17 2a90 	vmov	r2, s15
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078ce:	4b1f      	ldr	r3, [pc, #124]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f4:	ee17 2a90 	vmov	r2, s15
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078fc:	4b13      	ldr	r3, [pc, #76]	@ (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007916:	edd7 6a07 	vldr	s13, [r7, #28]
 800791a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007922:	ee17 2a90 	vmov	r2, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800792a:	e008      	b.n	800793e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	3724      	adds	r7, #36	@ 0x24
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
 8007950:	03d09000 	.word	0x03d09000
 8007954:	46000000 	.word	0x46000000
 8007958:	4c742400 	.word	0x4c742400
 800795c:	4a742400 	.word	0x4a742400
 8007960:	4af42400 	.word	0x4af42400

08007964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007972:	4b53      	ldr	r3, [pc, #332]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b03      	cmp	r3, #3
 800797c:	d101      	bne.n	8007982 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e099      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007982:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a4e      	ldr	r2, [pc, #312]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007988:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800798c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798e:	f7fa f931 	bl	8001bf4 <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007994:	e008      	b.n	80079a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007996:	f7fa f92d 	bl	8001bf4 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e086      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079a8:	4b45      	ldr	r3, [pc, #276]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079b4:	4b42      	ldr	r3, [pc, #264]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	493f      	ldr	r1, [pc, #252]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	025b      	lsls	r3, r3, #9
 80079da:	b29b      	uxth	r3, r3
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079f8:	4931      	ldr	r1, [pc, #196]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079fe:	4b30      	ldr	r3, [pc, #192]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	492d      	ldr	r1, [pc, #180]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a10:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	f023 0220 	bic.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	4928      	ldr	r1, [pc, #160]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a22:	4b27      	ldr	r3, [pc, #156]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	4a26      	ldr	r2, [pc, #152]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	f023 0310 	bic.w	r3, r3, #16
 8007a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a32:	4b24      	ldr	r3, [pc, #144]	@ (8007ac4 <RCCEx_PLL2_Config+0x160>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	69d2      	ldr	r2, [r2, #28]
 8007a3a:	00d2      	lsls	r2, r2, #3
 8007a3c:	4920      	ldr	r1, [pc, #128]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a42:	4b1f      	ldr	r3, [pc, #124]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a54:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	4a19      	ldr	r2, [pc, #100]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a60:	e00f      	b.n	8007a82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d106      	bne.n	8007a76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a68:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	4a14      	ldr	r2, [pc, #80]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a74:	e005      	b.n	8007a82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a76:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7a:	4a11      	ldr	r2, [pc, #68]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a82:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8e:	f7fa f8b1 	bl	8001bf4 <HAL_GetTick>
 8007a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a94:	e008      	b.n	8007aa8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a96:	f7fa f8ad 	bl	8001bf4 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e006      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aa8:	4b05      	ldr	r3, [pc, #20]	@ (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0f0      	beq.n	8007a96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	ffff0007 	.word	0xffff0007

08007ac8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad6:	4b53      	ldr	r3, [pc, #332]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d101      	bne.n	8007ae6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e099      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a4e      	ldr	r2, [pc, #312]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af2:	f7fa f87f 	bl	8001bf4 <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007afa:	f7fa f87b 	bl	8001bf4 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e086      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b0c:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b18:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	051b      	lsls	r3, r3, #20
 8007b26:	493f      	ldr	r1, [pc, #252]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	025b      	lsls	r3, r3, #9
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b5c:	4931      	ldr	r1, [pc, #196]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b62:	4b30      	ldr	r3, [pc, #192]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	492d      	ldr	r1, [pc, #180]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b74:	4b2b      	ldr	r3, [pc, #172]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	4928      	ldr	r1, [pc, #160]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	4a26      	ldr	r2, [pc, #152]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b92:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b96:	4b24      	ldr	r3, [pc, #144]	@ (8007c28 <RCCEx_PLL3_Config+0x160>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	69d2      	ldr	r2, [r2, #28]
 8007b9e:	00d2      	lsls	r2, r2, #3
 8007ba0:	4920      	ldr	r1, [pc, #128]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	4a1e      	ldr	r2, [pc, #120]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbc:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bc4:	e00f      	b.n	8007be6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d106      	bne.n	8007bda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bcc:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	4a14      	ldr	r2, [pc, #80]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bd8:	e005      	b.n	8007be6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bda:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	4a11      	ldr	r2, [pc, #68]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007be6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a0e      	ldr	r2, [pc, #56]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf2:	f7f9 ffff 	bl	8001bf4 <HAL_GetTick>
 8007bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bfa:	f7f9 fffb 	bl	8001bf4 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e006      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c0c:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	ffff0007 	.word	0xffff0007

08007c2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e10f      	b.n	8007e5e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a87      	ldr	r2, [pc, #540]	@ (8007e68 <HAL_SPI_Init+0x23c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00f      	beq.n	8007c6e <HAL_SPI_Init+0x42>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a86      	ldr	r2, [pc, #536]	@ (8007e6c <HAL_SPI_Init+0x240>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00a      	beq.n	8007c6e <HAL_SPI_Init+0x42>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a84      	ldr	r2, [pc, #528]	@ (8007e70 <HAL_SPI_Init+0x244>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d005      	beq.n	8007c6e <HAL_SPI_Init+0x42>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d901      	bls.n	8007c6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e0f7      	b.n	8007e5e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fe2e 	bl	80088d0 <SPI_GetPacketSize>
 8007c74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8007e68 <HAL_SPI_Init+0x23c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00c      	beq.n	8007c9a <HAL_SPI_Init+0x6e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a79      	ldr	r2, [pc, #484]	@ (8007e6c <HAL_SPI_Init+0x240>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <HAL_SPI_Init+0x6e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a78      	ldr	r2, [pc, #480]	@ (8007e70 <HAL_SPI_Init+0x244>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_Init+0x6e>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d811      	bhi.n	8007cbe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c9e:	4a72      	ldr	r2, [pc, #456]	@ (8007e68 <HAL_SPI_Init+0x23c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a70      	ldr	r2, [pc, #448]	@ (8007e6c <HAL_SPI_Init+0x240>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_SPI_Init+0x8c>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8007e70 <HAL_SPI_Init+0x244>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d104      	bne.n	8007cc2 <HAL_SPI_Init+0x96>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d901      	bls.n	8007cc2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0cd      	b.n	8007e5e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d106      	bne.n	8007cdc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7f9 fa28 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0201 	bic.w	r2, r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007cfe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d08:	d119      	bne.n	8007d3e <HAL_SPI_Init+0x112>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d12:	d103      	bne.n	8007d1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10c      	bne.n	8007d3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d2c:	d107      	bne.n	8007d3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00f      	beq.n	8007d6a <HAL_SPI_Init+0x13e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d90b      	bls.n	8007d6a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e007      	b.n	8007d7a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8c:	ea42 0103 	orr.w	r1, r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dda:	ea42 0103 	orr.w	r1, r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d113      	bne.n	8007e1a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0201 	bic.w	r2, r2, #1
 8007e28:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40013000 	.word	0x40013000
 8007e6c:	40003800 	.word	0x40003800
 8007e70:	40003c00 	.word	0x40003c00

08007e74 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3320      	adds	r3, #32
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8c:	f7f9 feb2 	bl	8001bf4 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d001      	beq.n	8007ea2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e1d1      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_SPI_Transmit+0x3a>
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e1c9      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_SPI_Transmit+0x4c>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e1c2      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	88fa      	ldrh	r2, [r7, #6]
 8007ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007f18:	d108      	bne.n	8007f2c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	e009      	b.n	8007f40 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007f3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4b96      	ldr	r3, [pc, #600]	@ (80081a0 <HAL_SPI_Transmit+0x32c>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	88f9      	ldrh	r1, [r7, #6]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f6c:	d107      	bne.n	8007f7e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2b0f      	cmp	r3, #15
 8007f84:	d947      	bls.n	8008016 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f86:	e03f      	b.n	8008008 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d114      	bne.n	8007fc0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007fbe:	e023      	b.n	8008008 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fc0:	f7f9 fe18 	bl	8001bf4 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d803      	bhi.n	8007fd8 <HAL_SPI_Transmit+0x164>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d102      	bne.n	8007fde <HAL_SPI_Transmit+0x16a>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d114      	bne.n	8008008 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fba8 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e11e      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1b9      	bne.n	8007f88 <HAL_SPI_Transmit+0x114>
 8008014:	e0f1      	b.n	80081fa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b07      	cmp	r3, #7
 800801c:	f240 80e6 	bls.w	80081ec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008020:	e05d      	b.n	80080de <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b02      	cmp	r3, #2
 800802e:	d132      	bne.n	8008096 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	d918      	bls.n	800806e <HAL_SPI_Transmit+0x1fa>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d014      	beq.n	800806e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b02      	subs	r3, #2
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800806c:	e037      	b.n	80080de <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008072:	881a      	ldrh	r2, [r3, #0]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800807c:	1c9a      	adds	r2, r3, #2
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008094:	e023      	b.n	80080de <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008096:	f7f9 fdad 	bl	8001bf4 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d803      	bhi.n	80080ae <HAL_SPI_Transmit+0x23a>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d102      	bne.n	80080b4 <HAL_SPI_Transmit+0x240>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d114      	bne.n	80080de <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fb3d 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e0b3      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d19b      	bne.n	8008022 <HAL_SPI_Transmit+0x1ae>
 80080ea:	e086      	b.n	80081fa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d154      	bne.n	80081a4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b03      	cmp	r3, #3
 8008104:	d918      	bls.n	8008138 <HAL_SPI_Transmit+0x2c4>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810a:	2b40      	cmp	r3, #64	@ 0x40
 800810c:	d914      	bls.n	8008138 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800811e:	1d1a      	adds	r2, r3, #4
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b04      	subs	r3, #4
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008136:	e059      	b.n	80081ec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d917      	bls.n	8008174 <HAL_SPI_Transmit+0x300>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d013      	beq.n	8008174 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800815a:	1c9a      	adds	r2, r3, #2
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008166:	b29b      	uxth	r3, r3
 8008168:	3b02      	subs	r3, #2
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008172:	e03b      	b.n	80081ec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3320      	adds	r3, #32
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800819e:	e025      	b.n	80081ec <HAL_SPI_Transmit+0x378>
 80081a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081a4:	f7f9 fd26 	bl	8001bf4 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d803      	bhi.n	80081bc <HAL_SPI_Transmit+0x348>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d102      	bne.n	80081c2 <HAL_SPI_Transmit+0x34e>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d114      	bne.n	80081ec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fab6 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e02c      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f47f af79 	bne.w	80080ec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2200      	movs	r2, #0
 8008202:	2108      	movs	r1, #8
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb35 	bl	8008874 <SPI_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008216:	f043 0220 	orr.w	r2, r3, #32
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fa87 	bl	8008734 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008244:	2300      	movs	r3, #0
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	b29b      	uxth	r3, r3
 8008268:	3301      	adds	r3, #1
 800826a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3330      	adds	r3, #48	@ 0x30
 8008272:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008274:	f7f9 fcbe 	bl	8001bf4 <HAL_GetTick>
 8008278:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d001      	beq.n	800828a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
 8008288:	e250      	b.n	800872c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <HAL_SPI_Receive+0x46>
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e248      	b.n	800872c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_SPI_Receive+0x58>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e241      	b.n	800872c <HAL_SPI_Receive+0x4dc>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2204      	movs	r2, #4
 80082b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	88fa      	ldrh	r2, [r7, #6]
 80082ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008300:	d108      	bne.n	8008314 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	e009      	b.n	8008328 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008326:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	4b95      	ldr	r3, [pc, #596]	@ (8008584 <HAL_SPI_Receive+0x334>)
 8008330:	4013      	ands	r3, r2
 8008332:	88f9      	ldrh	r1, [r7, #6]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	430b      	orrs	r3, r1
 800833a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008354:	d107      	bne.n	8008366 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008364:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d96c      	bls.n	8008448 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800836e:	e064      	b.n	800843a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b01      	cmp	r3, #1
 8008384:	d114      	bne.n	80083b0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800838e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008390:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80083ae:	e044      	b.n	800843a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8bfa      	ldrh	r2, [r7, #30]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d919      	bls.n	80083f2 <HAL_SPI_Receive+0x1a2>
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d014      	beq.n	80083f2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80083d2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083d8:	1d1a      	adds	r2, r3, #4
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80083f0:	e023      	b.n	800843a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f2:	f7f9 fbff 	bl	8001bf4 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d803      	bhi.n	800840a <HAL_SPI_Receive+0x1ba>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d102      	bne.n	8008410 <HAL_SPI_Receive+0x1c0>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d114      	bne.n	800843a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f98f 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800841c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e178      	b.n	800872c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d194      	bne.n	8008370 <HAL_SPI_Receive+0x120>
 8008446:	e15e      	b.n	8008706 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	2b07      	cmp	r3, #7
 800844e:	f240 8153 	bls.w	80086f8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008452:	e08f      	b.n	8008574 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d114      	bne.n	8008494 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	8812      	ldrh	r2, [r2, #0]
 8008472:	b292      	uxth	r2, r2
 8008474:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008486:	b29b      	uxth	r3, r3
 8008488:	3b01      	subs	r3, #1
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008492:	e06f      	b.n	8008574 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800849a:	b29b      	uxth	r3, r3
 800849c:	8bfa      	ldrh	r2, [r7, #30]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d924      	bls.n	80084ec <HAL_SPI_Receive+0x29c>
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01f      	beq.n	80084ec <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	8812      	ldrh	r2, [r2, #0]
 80084b4:	b292      	uxth	r2, r2
 80084b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084bc:	1c9a      	adds	r2, r3, #2
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	8812      	ldrh	r2, [r2, #0]
 80084ca:	b292      	uxth	r2, r2
 80084cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d2:	1c9a      	adds	r2, r3, #2
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084de:	b29b      	uxth	r3, r3
 80084e0:	3b02      	subs	r3, #2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084ea:	e043      	b.n	8008574 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d119      	bne.n	800852c <HAL_SPI_Receive+0x2dc>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d014      	beq.n	800852c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	8812      	ldrh	r2, [r2, #0]
 800850a:	b292      	uxth	r2, r2
 800850c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008512:	1c9a      	adds	r2, r3, #2
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800852a:	e023      	b.n	8008574 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800852c:	f7f9 fb62 	bl	8001bf4 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d803      	bhi.n	8008544 <HAL_SPI_Receive+0x2f4>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d102      	bne.n	800854a <HAL_SPI_Receive+0x2fa>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d114      	bne.n	8008574 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f8f2 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008556:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e0db      	b.n	800872c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	f47f af69 	bne.w	8008454 <HAL_SPI_Receive+0x204>
 8008582:	e0c0      	b.n	8008706 <HAL_SPI_Receive+0x4b6>
 8008584:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b01      	cmp	r3, #1
 800859c:	d117      	bne.n	80085ce <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80085cc:	e094      	b.n	80086f8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	8bfa      	ldrh	r2, [r7, #30]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d946      	bls.n	800866a <HAL_SPI_Receive+0x41a>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d041      	beq.n	800866a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f2:	7812      	ldrb	r2, [r2, #0]
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b04      	subs	r3, #4
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008668:	e046      	b.n	80086f8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d81c      	bhi.n	80086b0 <HAL_SPI_Receive+0x460>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d017      	beq.n	80086b0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80086ae:	e023      	b.n	80086f8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086b0:	f7f9 faa0 	bl	8001bf4 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d803      	bhi.n	80086c8 <HAL_SPI_Receive+0x478>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d102      	bne.n	80086ce <HAL_SPI_Receive+0x47e>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d114      	bne.n	80086f8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f830 	bl	8008734 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e019      	b.n	800872c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af41 	bne.w	8008588 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f814 	bl	8008734 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800872a:	2300      	movs	r3, #0
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0208 	orr.w	r2, r2, #8
 8008752:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0210 	orr.w	r2, r2, #16
 8008762:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f022 0201 	bic.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6919      	ldr	r1, [r3, #16]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b3c      	ldr	r3, [pc, #240]	@ (8008870 <SPI_CloseTransfer+0x13c>)
 8008780:	400b      	ands	r3, r1
 8008782:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008792:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b04      	cmp	r3, #4
 800879e:	d014      	beq.n	80087ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00f      	beq.n	80087ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0220 	orr.w	r2, r2, #32
 80087c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d014      	beq.n	8008800 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00f      	beq.n	8008800 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e6:	f043 0204 	orr.w	r2, r3, #4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00f      	beq.n	800882a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008810:	f043 0201 	orr.w	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008828:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00f      	beq.n	8008854 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800883a:	f043 0208 	orr.w	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008852:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	fffffc90 	.word	0xfffffc90

08008874 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008884:	e010      	b.n	80088a8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008886:	f7f9 f9b5 	bl	8001bf4 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d803      	bhi.n	800889e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d102      	bne.n	80088a4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e00f      	b.n	80088c8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	4013      	ands	r3, r2
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d0df      	beq.n	8008886 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	3307      	adds	r3, #7
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e042      	b.n	800899e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7f8 fc8c 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2224      	movs	r2, #36	@ 0x24
 8008934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0201 	bic.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fb33 	bl	8009fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fdc8 	bl	80094ec <UART_SetConfig>
 800895c:	4603      	mov	r3, r0
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e01b      	b.n	800899e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008984:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 0201 	orr.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 fbb2 	bl	800a100 <UART_CheckIdleState>
 800899c:	4603      	mov	r3, r0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b08a      	sub	sp, #40	@ 0x28
 80089aa:	af02      	add	r7, sp, #8
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d17b      	bne.n	8008ab8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_UART_Transmit+0x26>
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e074      	b.n	8008aba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2221      	movs	r2, #33	@ 0x21
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e0:	f7f9 f908 	bl	8001bf4 <HAL_GetTick>
 80089e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fe:	d108      	bne.n	8008a12 <HAL_UART_Transmit+0x6c>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	e003      	b.n	8008a1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a1a:	e030      	b.n	8008a7e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2200      	movs	r2, #0
 8008a24:	2180      	movs	r1, #128	@ 0x80
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f001 fc14 	bl	800a254 <UART_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e03d      	b.n	8008aba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10b      	bne.n	8008a5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	3302      	adds	r3, #2
 8008a58:	61bb      	str	r3, [r7, #24]
 8008a5a:	e007      	b.n	8008a6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1c8      	bne.n	8008a1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2140      	movs	r1, #64	@ 0x40
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f001 fbdd 	bl	800a254 <UART_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e006      	b.n	8008aba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e000      	b.n	8008aba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b08a      	sub	sp, #40	@ 0x28
 8008ac6:	af02      	add	r7, sp, #8
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	603b      	str	r3, [r7, #0]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	f040 80b5 	bne.w	8008c48 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HAL_UART_Receive+0x28>
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e0ad      	b.n	8008c4a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2222      	movs	r2, #34	@ 0x22
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b04:	f7f9 f876 	bl	8001bf4 <HAL_GetTick>
 8008b08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b22:	d10e      	bne.n	8008b42 <HAL_UART_Receive+0x80>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_UART_Receive+0x76>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b36:	e02d      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	22ff      	movs	r2, #255	@ 0xff
 8008b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b40:	e028      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10d      	bne.n	8008b66 <HAL_UART_Receive+0xa4>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <HAL_UART_Receive+0x9a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	22ff      	movs	r2, #255	@ 0xff
 8008b56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b5a:	e01b      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	227f      	movs	r2, #127	@ 0x7f
 8008b60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b64:	e016      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b6e:	d10d      	bne.n	8008b8c <HAL_UART_Receive+0xca>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_UART_Receive+0xc0>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	227f      	movs	r2, #127	@ 0x7f
 8008b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b80:	e008      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	223f      	movs	r2, #63	@ 0x3f
 8008b86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b8a:	e003      	b.n	8008b94 <HAL_UART_Receive+0xd2>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba4:	d108      	bne.n	8008bb8 <HAL_UART_Receive+0xf6>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d104      	bne.n	8008bb8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	e003      	b.n	8008bc0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bc0:	e036      	b.n	8008c30 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2120      	movs	r1, #32
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f001 fb41 	bl	800a254 <UART_WaitOnFlagUntilTimeout>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e032      	b.n	8008c4a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	8a7b      	ldrh	r3, [r7, #18]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	3302      	adds	r3, #2
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e00c      	b.n	8008c1e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	8a7b      	ldrh	r3, [r7, #18]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4013      	ands	r3, r2
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1c2      	bne.n	8008bc2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e000      	b.n	8008c4a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
  }
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	@ 0x28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d137      	bne.n	8008cdc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_UART_Receive_DMA+0x24>
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e030      	b.n	8008cde <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a18      	ldr	r2, [pc, #96]	@ (8008ce8 <HAL_UART_Receive_DMA+0x94>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d01f      	beq.n	8008ccc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d018      	beq.n	8008ccc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	623b      	str	r3, [r7, #32]
 8008cba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	69f9      	ldr	r1, [r7, #28]
 8008cbe:	6a3a      	ldr	r2, [r7, #32]
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f001 fb2c 	bl	800a330 <UART_Start_Receive_DMA>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	e000      	b.n	8008cde <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cdc:	2302      	movs	r3, #2
  }
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3728      	adds	r7, #40	@ 0x28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	58000c00 	.word	0x58000c00

08008cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b0ba      	sub	sp, #232	@ 0xe8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d11b      	bne.n	8008d60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d015      	beq.n	8008d60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8393 	beq.w	800947c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
      }
      return;
 8008d5e:	e38d      	b.n	800947c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8123 	beq.w	8008fb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008fa4 <HAL_UART_IRQHandler+0x2b8>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8008fa8 <HAL_UART_IRQHandler+0x2bc>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 8116 	beq.w	8008fb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d011      	beq.n	8008db4 <HAL_UART_IRQHandler+0xc8>
 8008d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2201      	movs	r2, #1
 8008da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008daa:	f043 0201 	orr.w	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d011      	beq.n	8008de4 <HAL_UART_IRQHandler+0xf8>
 8008dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	f043 0204 	orr.w	r2, r3, #4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d011      	beq.n	8008e14 <HAL_UART_IRQHandler+0x128>
 8008df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2204      	movs	r2, #4
 8008e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e0a:	f043 0202 	orr.w	r2, r3, #2
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d017      	beq.n	8008e50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e30:	4b5c      	ldr	r3, [pc, #368]	@ (8008fa4 <HAL_UART_IRQHandler+0x2b8>)
 8008e32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e46:	f043 0208 	orr.w	r2, r3, #8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d012      	beq.n	8008e82 <HAL_UART_IRQHandler+0x196>
 8008e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e78:	f043 0220 	orr.w	r2, r3, #32
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 82f9 	beq.w	8009480 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d013      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d005      	beq.n	8008ee6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ede:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d054      	beq.n	8008f90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 fb0a 	bl	800a500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef6:	2b40      	cmp	r3, #64	@ 0x40
 8008ef8:	d146      	bne.n	8008f88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3308      	adds	r3, #8
 8008f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1d9      	bne.n	8008efa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d017      	beq.n	8008f80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f56:	4a15      	ldr	r2, [pc, #84]	@ (8008fac <HAL_UART_IRQHandler+0x2c0>)
 8008f58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fa f877 	bl	8003054 <HAL_DMA_Abort_IT>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7e:	e00f      	b.n	8008fa0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa9d 	bl	80094c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f86:	e00b      	b.n	8008fa0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa99 	bl	80094c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8e:	e007      	b.n	8008fa0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fa95 	bl	80094c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f9e:	e26f      	b.n	8009480 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa0:	bf00      	nop
    return;
 8008fa2:	e26d      	b.n	8009480 <HAL_UART_IRQHandler+0x794>
 8008fa4:	10000001 	.word	0x10000001
 8008fa8:	04000120 	.word	0x04000120
 8008fac:	0800a7b3 	.word	0x0800a7b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	f040 8203 	bne.w	80093c0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 81fc 	beq.w	80093c0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 81f5 	beq.w	80093c0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe8:	2b40      	cmp	r3, #64	@ 0x40
 8008fea:	f040 816d 	bne.w	80092c8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4aa4      	ldr	r2, [pc, #656]	@ (8009288 <HAL_UART_IRQHandler+0x59c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d068      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4aa1      	ldr	r2, [pc, #644]	@ (800928c <HAL_UART_IRQHandler+0x5a0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d061      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a9f      	ldr	r2, [pc, #636]	@ (8009290 <HAL_UART_IRQHandler+0x5a4>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d05a      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a9c      	ldr	r2, [pc, #624]	@ (8009294 <HAL_UART_IRQHandler+0x5a8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d053      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a9a      	ldr	r2, [pc, #616]	@ (8009298 <HAL_UART_IRQHandler+0x5ac>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d04c      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a97      	ldr	r2, [pc, #604]	@ (800929c <HAL_UART_IRQHandler+0x5b0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d045      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a95      	ldr	r2, [pc, #596]	@ (80092a0 <HAL_UART_IRQHandler+0x5b4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d03e      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a92      	ldr	r2, [pc, #584]	@ (80092a4 <HAL_UART_IRQHandler+0x5b8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d037      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a90      	ldr	r2, [pc, #576]	@ (80092a8 <HAL_UART_IRQHandler+0x5bc>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d030      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a8d      	ldr	r2, [pc, #564]	@ (80092ac <HAL_UART_IRQHandler+0x5c0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d029      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a8b      	ldr	r2, [pc, #556]	@ (80092b0 <HAL_UART_IRQHandler+0x5c4>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d022      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a88      	ldr	r2, [pc, #544]	@ (80092b4 <HAL_UART_IRQHandler+0x5c8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01b      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a86      	ldr	r2, [pc, #536]	@ (80092b8 <HAL_UART_IRQHandler+0x5cc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d014      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a83      	ldr	r2, [pc, #524]	@ (80092bc <HAL_UART_IRQHandler+0x5d0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00d      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a81      	ldr	r2, [pc, #516]	@ (80092c0 <HAL_UART_IRQHandler+0x5d4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d006      	beq.n	80090ce <HAL_UART_IRQHandler+0x3e2>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a7e      	ldr	r2, [pc, #504]	@ (80092c4 <HAL_UART_IRQHandler+0x5d8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d106      	bne.n	80090dc <HAL_UART_IRQHandler+0x3f0>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	e005      	b.n	80090e8 <HAL_UART_IRQHandler+0x3fc>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80ad 	beq.w	8009250 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009100:	429a      	cmp	r2, r3
 8009102:	f080 80a5 	bcs.w	8009250 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800910c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911c:	f000 8087 	beq.w	800922e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009134:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800913c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800914a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800914e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009156:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1da      	bne.n	8009120 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800917a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800917c:	f023 0301 	bic.w	r3, r3, #1
 8009180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3308      	adds	r3, #8
 800918a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800918e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009192:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009196:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e1      	bne.n	800916a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3308      	adds	r3, #8
 80091ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e3      	bne.n	80091a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091fc:	f023 0310 	bic.w	r3, r3, #16
 8009200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800920e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009210:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800921c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e4      	bne.n	80091ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009228:	4618      	mov	r0, r3
 800922a:	f7f9 fbf5 	bl	8002a18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009240:	b29b      	uxth	r3, r3
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	b29b      	uxth	r3, r3
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f943 	bl	80094d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800924e:	e119      	b.n	8009484 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800925a:	429a      	cmp	r2, r3
 800925c:	f040 8112 	bne.w	8009484 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926c:	f040 810a 	bne.w	8009484 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f928 	bl	80094d4 <HAL_UARTEx_RxEventCallback>
      return;
 8009284:	e0fe      	b.n	8009484 <HAL_UART_IRQHandler+0x798>
 8009286:	bf00      	nop
 8009288:	40020010 	.word	0x40020010
 800928c:	40020028 	.word	0x40020028
 8009290:	40020040 	.word	0x40020040
 8009294:	40020058 	.word	0x40020058
 8009298:	40020070 	.word	0x40020070
 800929c:	40020088 	.word	0x40020088
 80092a0:	400200a0 	.word	0x400200a0
 80092a4:	400200b8 	.word	0x400200b8
 80092a8:	40020410 	.word	0x40020410
 80092ac:	40020428 	.word	0x40020428
 80092b0:	40020440 	.word	0x40020440
 80092b4:	40020458 	.word	0x40020458
 80092b8:	40020470 	.word	0x40020470
 80092bc:	40020488 	.word	0x40020488
 80092c0:	400204a0 	.word	0x400204a0
 80092c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80cf 	beq.w	8009488 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80092ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80ca 	beq.w	8009488 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009316:	647b      	str	r3, [r7, #68]	@ 0x44
 8009318:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800931c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e4      	bne.n	80092f4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	623b      	str	r3, [r7, #32]
   return(result);
 800933a:	6a3a      	ldr	r2, [r7, #32]
 800933c:	4b55      	ldr	r3, [pc, #340]	@ (8009494 <HAL_UART_IRQHandler+0x7a8>)
 800933e:	4013      	ands	r3, r2
 8009340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800934e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e3      	bne.n	800932a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	60fb      	str	r3, [r7, #12]
   return(result);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0310 	bic.w	r3, r3, #16
 800938a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	617b      	str	r3, [r7, #20]
   return(result);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e4      	bne.n	8009376 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f88b 	bl	80094d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093be:	e063      	b.n	8009488 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <HAL_UART_IRQHandler+0x6fe>
 80093cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80093e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fa22 	bl	800a82c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093e8:	e051      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d014      	beq.n	8009420 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d105      	bne.n	800940e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d008      	beq.n	8009420 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009412:	2b00      	cmp	r3, #0
 8009414:	d03a      	beq.n	800948c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
    }
    return;
 800941e:	e035      	b.n	800948c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <HAL_UART_IRQHandler+0x754>
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f9cc 	bl	800a7d6 <UART_EndTransmit_IT>
    return;
 800943e:	e026      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_UART_IRQHandler+0x774>
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009450:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f9fb 	bl	800a854 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800945e:	e016      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d010      	beq.n	800948e <HAL_UART_IRQHandler+0x7a2>
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009470:	2b00      	cmp	r3, #0
 8009472:	da0c      	bge.n	800948e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f9e3 	bl	800a840 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800947a:	e008      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
      return;
 800947c:	bf00      	nop
 800947e:	e006      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
    return;
 8009480:	bf00      	nop
 8009482:	e004      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009484:	bf00      	nop
 8009486:	e002      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <HAL_UART_IRQHandler+0x7a2>
    return;
 800948c:	bf00      	nop
  }
}
 800948e:	37e8      	adds	r7, #232	@ 0xe8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	effffffe 	.word	0xeffffffe

08009498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094f0:	b092      	sub	sp, #72	@ 0x48
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	431a      	orrs	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	431a      	orrs	r2, r3
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	4313      	orrs	r3, r2
 8009512:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4bbe      	ldr	r3, [pc, #760]	@ (8009814 <UART_SetConfig+0x328>)
 800951c:	4013      	ands	r3, r2
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009524:	430b      	orrs	r3, r1
 8009526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4ab3      	ldr	r2, [pc, #716]	@ (8009818 <UART_SetConfig+0x32c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d004      	beq.n	8009558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009554:	4313      	orrs	r3, r2
 8009556:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	4baf      	ldr	r3, [pc, #700]	@ (800981c <UART_SetConfig+0x330>)
 8009560:	4013      	ands	r3, r2
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009568:	430b      	orrs	r3, r1
 800956a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009572:	f023 010f 	bic.w	r1, r3, #15
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4aa6      	ldr	r2, [pc, #664]	@ (8009820 <UART_SetConfig+0x334>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d177      	bne.n	800967c <UART_SetConfig+0x190>
 800958c:	4ba5      	ldr	r3, [pc, #660]	@ (8009824 <UART_SetConfig+0x338>)
 800958e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009594:	2b28      	cmp	r3, #40	@ 0x28
 8009596:	d86d      	bhi.n	8009674 <UART_SetConfig+0x188>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <UART_SetConfig+0xb4>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	08009645 	.word	0x08009645
 80095a4:	08009675 	.word	0x08009675
 80095a8:	08009675 	.word	0x08009675
 80095ac:	08009675 	.word	0x08009675
 80095b0:	08009675 	.word	0x08009675
 80095b4:	08009675 	.word	0x08009675
 80095b8:	08009675 	.word	0x08009675
 80095bc:	08009675 	.word	0x08009675
 80095c0:	0800964d 	.word	0x0800964d
 80095c4:	08009675 	.word	0x08009675
 80095c8:	08009675 	.word	0x08009675
 80095cc:	08009675 	.word	0x08009675
 80095d0:	08009675 	.word	0x08009675
 80095d4:	08009675 	.word	0x08009675
 80095d8:	08009675 	.word	0x08009675
 80095dc:	08009675 	.word	0x08009675
 80095e0:	08009655 	.word	0x08009655
 80095e4:	08009675 	.word	0x08009675
 80095e8:	08009675 	.word	0x08009675
 80095ec:	08009675 	.word	0x08009675
 80095f0:	08009675 	.word	0x08009675
 80095f4:	08009675 	.word	0x08009675
 80095f8:	08009675 	.word	0x08009675
 80095fc:	08009675 	.word	0x08009675
 8009600:	0800965d 	.word	0x0800965d
 8009604:	08009675 	.word	0x08009675
 8009608:	08009675 	.word	0x08009675
 800960c:	08009675 	.word	0x08009675
 8009610:	08009675 	.word	0x08009675
 8009614:	08009675 	.word	0x08009675
 8009618:	08009675 	.word	0x08009675
 800961c:	08009675 	.word	0x08009675
 8009620:	08009665 	.word	0x08009665
 8009624:	08009675 	.word	0x08009675
 8009628:	08009675 	.word	0x08009675
 800962c:	08009675 	.word	0x08009675
 8009630:	08009675 	.word	0x08009675
 8009634:	08009675 	.word	0x08009675
 8009638:	08009675 	.word	0x08009675
 800963c:	08009675 	.word	0x08009675
 8009640:	0800966d 	.word	0x0800966d
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e222      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800964c:	2304      	movs	r3, #4
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e21e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009654:	2308      	movs	r3, #8
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e21a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800965c:	2310      	movs	r3, #16
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e216      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009664:	2320      	movs	r3, #32
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e212      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e20e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e20a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a69      	ldr	r2, [pc, #420]	@ (8009828 <UART_SetConfig+0x33c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d130      	bne.n	80096e8 <UART_SetConfig+0x1fc>
 8009686:	4b67      	ldr	r3, [pc, #412]	@ (8009824 <UART_SetConfig+0x338>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	2b05      	cmp	r3, #5
 8009690:	d826      	bhi.n	80096e0 <UART_SetConfig+0x1f4>
 8009692:	a201      	add	r2, pc, #4	@ (adr r2, 8009698 <UART_SetConfig+0x1ac>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e1ec      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e1e8      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e1e4      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e1e0      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e1dc      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096d8:	2340      	movs	r3, #64	@ 0x40
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e1d8      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096e0:	2380      	movs	r3, #128	@ 0x80
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e1d4      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a4f      	ldr	r2, [pc, #316]	@ (800982c <UART_SetConfig+0x340>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d130      	bne.n	8009754 <UART_SetConfig+0x268>
 80096f2:	4b4c      	ldr	r3, [pc, #304]	@ (8009824 <UART_SetConfig+0x338>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d826      	bhi.n	800974c <UART_SetConfig+0x260>
 80096fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009704 <UART_SetConfig+0x218>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	0800971d 	.word	0x0800971d
 8009708:	08009725 	.word	0x08009725
 800970c:	0800972d 	.word	0x0800972d
 8009710:	08009735 	.word	0x08009735
 8009714:	0800973d 	.word	0x0800973d
 8009718:	08009745 	.word	0x08009745
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e1b6      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009724:	2304      	movs	r3, #4
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e1b2      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800972c:	2308      	movs	r3, #8
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e1ae      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009734:	2310      	movs	r3, #16
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973a:	e1aa      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800973c:	2320      	movs	r3, #32
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009742:	e1a6      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009744:	2340      	movs	r3, #64	@ 0x40
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974a:	e1a2      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800974c:	2380      	movs	r3, #128	@ 0x80
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009752:	e19e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a35      	ldr	r2, [pc, #212]	@ (8009830 <UART_SetConfig+0x344>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d130      	bne.n	80097c0 <UART_SetConfig+0x2d4>
 800975e:	4b31      	ldr	r3, [pc, #196]	@ (8009824 <UART_SetConfig+0x338>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b05      	cmp	r3, #5
 8009768:	d826      	bhi.n	80097b8 <UART_SetConfig+0x2cc>
 800976a:	a201      	add	r2, pc, #4	@ (adr r2, 8009770 <UART_SetConfig+0x284>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	08009789 	.word	0x08009789
 8009774:	08009791 	.word	0x08009791
 8009778:	08009799 	.word	0x08009799
 800977c:	080097a1 	.word	0x080097a1
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097b1 	.word	0x080097b1
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e180      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e17c      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e178      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a6:	e174      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097a8:	2320      	movs	r3, #32
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ae:	e170      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097b0:	2340      	movs	r3, #64	@ 0x40
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b6:	e16c      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097b8:	2380      	movs	r3, #128	@ 0x80
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e168      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009834 <UART_SetConfig+0x348>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d142      	bne.n	8009850 <UART_SetConfig+0x364>
 80097ca:	4b16      	ldr	r3, [pc, #88]	@ (8009824 <UART_SetConfig+0x338>)
 80097cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d838      	bhi.n	8009848 <UART_SetConfig+0x35c>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <UART_SetConfig+0x2f0>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097f5 	.word	0x080097f5
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	08009805 	.word	0x08009805
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009839 	.word	0x08009839
 80097f0:	08009841 	.word	0x08009841
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e14a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e146      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e142      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e13e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009814:	cfff69f3 	.word	0xcfff69f3
 8009818:	58000c00 	.word	0x58000c00
 800981c:	11fff4ff 	.word	0x11fff4ff
 8009820:	40011000 	.word	0x40011000
 8009824:	58024400 	.word	0x58024400
 8009828:	40004400 	.word	0x40004400
 800982c:	40004800 	.word	0x40004800
 8009830:	40004c00 	.word	0x40004c00
 8009834:	40005000 	.word	0x40005000
 8009838:	2320      	movs	r3, #32
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e128      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009840:	2340      	movs	r3, #64	@ 0x40
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e124      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e120      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4acb      	ldr	r2, [pc, #812]	@ (8009b84 <UART_SetConfig+0x698>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d176      	bne.n	8009948 <UART_SetConfig+0x45c>
 800985a:	4bcb      	ldr	r3, [pc, #812]	@ (8009b88 <UART_SetConfig+0x69c>)
 800985c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009862:	2b28      	cmp	r3, #40	@ 0x28
 8009864:	d86c      	bhi.n	8009940 <UART_SetConfig+0x454>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <UART_SetConfig+0x380>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	08009911 	.word	0x08009911
 8009870:	08009941 	.word	0x08009941
 8009874:	08009941 	.word	0x08009941
 8009878:	08009941 	.word	0x08009941
 800987c:	08009941 	.word	0x08009941
 8009880:	08009941 	.word	0x08009941
 8009884:	08009941 	.word	0x08009941
 8009888:	08009941 	.word	0x08009941
 800988c:	08009919 	.word	0x08009919
 8009890:	08009941 	.word	0x08009941
 8009894:	08009941 	.word	0x08009941
 8009898:	08009941 	.word	0x08009941
 800989c:	08009941 	.word	0x08009941
 80098a0:	08009941 	.word	0x08009941
 80098a4:	08009941 	.word	0x08009941
 80098a8:	08009941 	.word	0x08009941
 80098ac:	08009921 	.word	0x08009921
 80098b0:	08009941 	.word	0x08009941
 80098b4:	08009941 	.word	0x08009941
 80098b8:	08009941 	.word	0x08009941
 80098bc:	08009941 	.word	0x08009941
 80098c0:	08009941 	.word	0x08009941
 80098c4:	08009941 	.word	0x08009941
 80098c8:	08009941 	.word	0x08009941
 80098cc:	08009929 	.word	0x08009929
 80098d0:	08009941 	.word	0x08009941
 80098d4:	08009941 	.word	0x08009941
 80098d8:	08009941 	.word	0x08009941
 80098dc:	08009941 	.word	0x08009941
 80098e0:	08009941 	.word	0x08009941
 80098e4:	08009941 	.word	0x08009941
 80098e8:	08009941 	.word	0x08009941
 80098ec:	08009931 	.word	0x08009931
 80098f0:	08009941 	.word	0x08009941
 80098f4:	08009941 	.word	0x08009941
 80098f8:	08009941 	.word	0x08009941
 80098fc:	08009941 	.word	0x08009941
 8009900:	08009941 	.word	0x08009941
 8009904:	08009941 	.word	0x08009941
 8009908:	08009941 	.word	0x08009941
 800990c:	08009939 	.word	0x08009939
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e0bc      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e0b8      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e0b4      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e0b0      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e0ac      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009938:	2340      	movs	r3, #64	@ 0x40
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e0a8      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e0a4      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a8f      	ldr	r2, [pc, #572]	@ (8009b8c <UART_SetConfig+0x6a0>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d130      	bne.n	80099b4 <UART_SetConfig+0x4c8>
 8009952:	4b8d      	ldr	r3, [pc, #564]	@ (8009b88 <UART_SetConfig+0x69c>)
 8009954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b05      	cmp	r3, #5
 800995c:	d826      	bhi.n	80099ac <UART_SetConfig+0x4c0>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x478>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	0800997d 	.word	0x0800997d
 8009968:	08009985 	.word	0x08009985
 800996c:	0800998d 	.word	0x0800998d
 8009970:	08009995 	.word	0x08009995
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099a5 	.word	0x080099a5
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e086      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e082      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e07e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e07a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 800999c:	2320      	movs	r3, #32
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e076      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80099a4:	2340      	movs	r3, #64	@ 0x40
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e072      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80099ac:	2380      	movs	r3, #128	@ 0x80
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e06e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a75      	ldr	r2, [pc, #468]	@ (8009b90 <UART_SetConfig+0x6a4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d130      	bne.n	8009a20 <UART_SetConfig+0x534>
 80099be:	4b72      	ldr	r3, [pc, #456]	@ (8009b88 <UART_SetConfig+0x69c>)
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	d826      	bhi.n	8009a18 <UART_SetConfig+0x52c>
 80099ca:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <UART_SetConfig+0x4e4>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	080099e9 	.word	0x080099e9
 80099d4:	080099f1 	.word	0x080099f1
 80099d8:	080099f9 	.word	0x080099f9
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	08009a11 	.word	0x08009a11
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e050      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80099f0:	2304      	movs	r3, #4
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e04c      	b.n	8009a92 <UART_SetConfig+0x5a6>
 80099f8:	2308      	movs	r3, #8
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e048      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a00:	2310      	movs	r3, #16
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e044      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a08:	2320      	movs	r3, #32
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0e:	e040      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a10:	2340      	movs	r3, #64	@ 0x40
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a16:	e03c      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a18:	2380      	movs	r3, #128	@ 0x80
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1e:	e038      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a5b      	ldr	r2, [pc, #364]	@ (8009b94 <UART_SetConfig+0x6a8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d130      	bne.n	8009a8c <UART_SetConfig+0x5a0>
 8009a2a:	4b57      	ldr	r3, [pc, #348]	@ (8009b88 <UART_SetConfig+0x69c>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d826      	bhi.n	8009a84 <UART_SetConfig+0x598>
 8009a36:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <UART_SetConfig+0x550>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a55 	.word	0x08009a55
 8009a40:	08009a5d 	.word	0x08009a5d
 8009a44:	08009a65 	.word	0x08009a65
 8009a48:	08009a6d 	.word	0x08009a6d
 8009a4c:	08009a75 	.word	0x08009a75
 8009a50:	08009a7d 	.word	0x08009a7d
 8009a54:	2302      	movs	r3, #2
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e01a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e016      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a64:	2308      	movs	r3, #8
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e012      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a6c:	2310      	movs	r3, #16
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e00e      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a74:	2320      	movs	r3, #32
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e00a      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a7c:	2340      	movs	r3, #64	@ 0x40
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e006      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a84:	2380      	movs	r3, #128	@ 0x80
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8a:	e002      	b.n	8009a92 <UART_SetConfig+0x5a6>
 8009a8c:	2380      	movs	r3, #128	@ 0x80
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a3f      	ldr	r2, [pc, #252]	@ (8009b94 <UART_SetConfig+0x6a8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	f040 80f8 	bne.w	8009c8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	dc46      	bgt.n	8009b34 <UART_SetConfig+0x648>
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f2c0 8082 	blt.w	8009bb0 <UART_SetConfig+0x6c4>
 8009aac:	3b02      	subs	r3, #2
 8009aae:	2b1e      	cmp	r3, #30
 8009ab0:	d87e      	bhi.n	8009bb0 <UART_SetConfig+0x6c4>
 8009ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <UART_SetConfig+0x5cc>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009b3b 	.word	0x08009b3b
 8009abc:	08009bb1 	.word	0x08009bb1
 8009ac0:	08009b43 	.word	0x08009b43
 8009ac4:	08009bb1 	.word	0x08009bb1
 8009ac8:	08009bb1 	.word	0x08009bb1
 8009acc:	08009bb1 	.word	0x08009bb1
 8009ad0:	08009b53 	.word	0x08009b53
 8009ad4:	08009bb1 	.word	0x08009bb1
 8009ad8:	08009bb1 	.word	0x08009bb1
 8009adc:	08009bb1 	.word	0x08009bb1
 8009ae0:	08009bb1 	.word	0x08009bb1
 8009ae4:	08009bb1 	.word	0x08009bb1
 8009ae8:	08009bb1 	.word	0x08009bb1
 8009aec:	08009bb1 	.word	0x08009bb1
 8009af0:	08009b63 	.word	0x08009b63
 8009af4:	08009bb1 	.word	0x08009bb1
 8009af8:	08009bb1 	.word	0x08009bb1
 8009afc:	08009bb1 	.word	0x08009bb1
 8009b00:	08009bb1 	.word	0x08009bb1
 8009b04:	08009bb1 	.word	0x08009bb1
 8009b08:	08009bb1 	.word	0x08009bb1
 8009b0c:	08009bb1 	.word	0x08009bb1
 8009b10:	08009bb1 	.word	0x08009bb1
 8009b14:	08009bb1 	.word	0x08009bb1
 8009b18:	08009bb1 	.word	0x08009bb1
 8009b1c:	08009bb1 	.word	0x08009bb1
 8009b20:	08009bb1 	.word	0x08009bb1
 8009b24:	08009bb1 	.word	0x08009bb1
 8009b28:	08009bb1 	.word	0x08009bb1
 8009b2c:	08009bb1 	.word	0x08009bb1
 8009b30:	08009ba3 	.word	0x08009ba3
 8009b34:	2b40      	cmp	r3, #64	@ 0x40
 8009b36:	d037      	beq.n	8009ba8 <UART_SetConfig+0x6bc>
 8009b38:	e03a      	b.n	8009bb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b3a:	f7fd fc55 	bl	80073e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b40:	e03c      	b.n	8009bbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fd fc64 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	e034      	b.n	8009bbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b52:	f107 0318 	add.w	r3, r7, #24
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fd fdb0 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b60:	e02c      	b.n	8009bbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <UART_SetConfig+0x69c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d016      	beq.n	8009b9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b6e:	4b06      	ldr	r3, [pc, #24]	@ (8009b88 <UART_SetConfig+0x69c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	4a07      	ldr	r2, [pc, #28]	@ (8009b98 <UART_SetConfig+0x6ac>)
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b80:	e01c      	b.n	8009bbc <UART_SetConfig+0x6d0>
 8009b82:	bf00      	nop
 8009b84:	40011400 	.word	0x40011400
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	40007800 	.word	0x40007800
 8009b90:	40007c00 	.word	0x40007c00
 8009b94:	58000c00 	.word	0x58000c00
 8009b98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009b9c:	4b9d      	ldr	r3, [pc, #628]	@ (8009e14 <UART_SetConfig+0x928>)
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba0:	e00c      	b.n	8009bbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ba2:	4b9d      	ldr	r3, [pc, #628]	@ (8009e18 <UART_SetConfig+0x92c>)
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba6:	e009      	b.n	8009bbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bae:	e005      	b.n	8009bbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 81de 	beq.w	8009f80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc8:	4a94      	ldr	r2, [pc, #592]	@ (8009e1c <UART_SetConfig+0x930>)
 8009bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bd6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d305      	bcc.n	8009bf4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d903      	bls.n	8009bfc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bfa:	e1c1      	b.n	8009f80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfe:	2200      	movs	r2, #0
 8009c00:	60bb      	str	r3, [r7, #8]
 8009c02:	60fa      	str	r2, [r7, #12]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	4a84      	ldr	r2, [pc, #528]	@ (8009e1c <UART_SetConfig+0x930>)
 8009c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2200      	movs	r2, #0
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c1e:	f7f6 fb5b 	bl	80002d8 <__aeabi_uldivmod>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4610      	mov	r0, r2
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	f04f 0300 	mov.w	r3, #0
 8009c32:	020b      	lsls	r3, r1, #8
 8009c34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c38:	0202      	lsls	r2, r0, #8
 8009c3a:	6979      	ldr	r1, [r7, #20]
 8009c3c:	6849      	ldr	r1, [r1, #4]
 8009c3e:	0849      	lsrs	r1, r1, #1
 8009c40:	2000      	movs	r0, #0
 8009c42:	460c      	mov	r4, r1
 8009c44:	4605      	mov	r5, r0
 8009c46:	eb12 0804 	adds.w	r8, r2, r4
 8009c4a:	eb43 0905 	adc.w	r9, r3, r5
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	469a      	mov	sl, r3
 8009c56:	4693      	mov	fp, r2
 8009c58:	4652      	mov	r2, sl
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 fb3a 	bl	80002d8 <__aeabi_uldivmod>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4613      	mov	r3, r2
 8009c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c72:	d308      	bcc.n	8009c86 <UART_SetConfig+0x79a>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7a:	d204      	bcs.n	8009c86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	e17c      	b.n	8009f80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c8c:	e178      	b.n	8009f80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c96:	f040 80c5 	bne.w	8009e24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009c9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	dc48      	bgt.n	8009d34 <UART_SetConfig+0x848>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	db7b      	blt.n	8009d9e <UART_SetConfig+0x8b2>
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	d879      	bhi.n	8009d9e <UART_SetConfig+0x8b2>
 8009caa:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <UART_SetConfig+0x7c4>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009d3b 	.word	0x08009d3b
 8009cb4:	08009d43 	.word	0x08009d43
 8009cb8:	08009d9f 	.word	0x08009d9f
 8009cbc:	08009d9f 	.word	0x08009d9f
 8009cc0:	08009d4b 	.word	0x08009d4b
 8009cc4:	08009d9f 	.word	0x08009d9f
 8009cc8:	08009d9f 	.word	0x08009d9f
 8009ccc:	08009d9f 	.word	0x08009d9f
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d9f 	.word	0x08009d9f
 8009cd8:	08009d9f 	.word	0x08009d9f
 8009cdc:	08009d9f 	.word	0x08009d9f
 8009ce0:	08009d9f 	.word	0x08009d9f
 8009ce4:	08009d9f 	.word	0x08009d9f
 8009ce8:	08009d9f 	.word	0x08009d9f
 8009cec:	08009d9f 	.word	0x08009d9f
 8009cf0:	08009d6b 	.word	0x08009d6b
 8009cf4:	08009d9f 	.word	0x08009d9f
 8009cf8:	08009d9f 	.word	0x08009d9f
 8009cfc:	08009d9f 	.word	0x08009d9f
 8009d00:	08009d9f 	.word	0x08009d9f
 8009d04:	08009d9f 	.word	0x08009d9f
 8009d08:	08009d9f 	.word	0x08009d9f
 8009d0c:	08009d9f 	.word	0x08009d9f
 8009d10:	08009d9f 	.word	0x08009d9f
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009d9f 	.word	0x08009d9f
 8009d1c:	08009d9f 	.word	0x08009d9f
 8009d20:	08009d9f 	.word	0x08009d9f
 8009d24:	08009d9f 	.word	0x08009d9f
 8009d28:	08009d9f 	.word	0x08009d9f
 8009d2c:	08009d9f 	.word	0x08009d9f
 8009d30:	08009d91 	.word	0x08009d91
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	d02e      	beq.n	8009d96 <UART_SetConfig+0x8aa>
 8009d38:	e031      	b.n	8009d9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d3a:	f7fc f91f 	bl	8005f7c <HAL_RCC_GetPCLK1Freq>
 8009d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d40:	e033      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d42:	f7fc f931 	bl	8005fa8 <HAL_RCC_GetPCLK2Freq>
 8009d46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d48:	e02f      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd fb60 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	e027      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5a:	f107 0318 	add.w	r3, r7, #24
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd fcac 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d68:	e01f      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8009e20 <UART_SetConfig+0x934>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0320 	and.w	r3, r3, #32
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d76:	4b2a      	ldr	r3, [pc, #168]	@ (8009e20 <UART_SetConfig+0x934>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	08db      	lsrs	r3, r3, #3
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	4a24      	ldr	r2, [pc, #144]	@ (8009e14 <UART_SetConfig+0x928>)
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d88:	e00f      	b.n	8009daa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d8a:	4b22      	ldr	r3, [pc, #136]	@ (8009e14 <UART_SetConfig+0x928>)
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d8e:	e00c      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d90:	4b21      	ldr	r3, [pc, #132]	@ (8009e18 <UART_SetConfig+0x92c>)
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d94:	e009      	b.n	8009daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d9c:	e005      	b.n	8009daa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80e7 	beq.w	8009f80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db6:	4a19      	ldr	r2, [pc, #100]	@ (8009e1c <UART_SetConfig+0x930>)
 8009db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc4:	005a      	lsls	r2, r3, #1
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	441a      	add	r2, r3
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dda:	2b0f      	cmp	r3, #15
 8009ddc:	d916      	bls.n	8009e0c <UART_SetConfig+0x920>
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de4:	d212      	bcs.n	8009e0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f023 030f 	bic.w	r3, r3, #15
 8009dee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df2:	085b      	lsrs	r3, r3, #1
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e08:	60da      	str	r2, [r3, #12]
 8009e0a:	e0b9      	b.n	8009f80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e12:	e0b5      	b.n	8009f80 <UART_SetConfig+0xa94>
 8009e14:	03d09000 	.word	0x03d09000
 8009e18:	003d0900 	.word	0x003d0900
 8009e1c:	0800ab04 	.word	0x0800ab04
 8009e20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	dc49      	bgt.n	8009ec0 <UART_SetConfig+0x9d4>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	db7c      	blt.n	8009f2a <UART_SetConfig+0xa3e>
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d87a      	bhi.n	8009f2a <UART_SetConfig+0xa3e>
 8009e34:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <UART_SetConfig+0x950>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009ec7 	.word	0x08009ec7
 8009e40:	08009ecf 	.word	0x08009ecf
 8009e44:	08009f2b 	.word	0x08009f2b
 8009e48:	08009f2b 	.word	0x08009f2b
 8009e4c:	08009ed7 	.word	0x08009ed7
 8009e50:	08009f2b 	.word	0x08009f2b
 8009e54:	08009f2b 	.word	0x08009f2b
 8009e58:	08009f2b 	.word	0x08009f2b
 8009e5c:	08009ee7 	.word	0x08009ee7
 8009e60:	08009f2b 	.word	0x08009f2b
 8009e64:	08009f2b 	.word	0x08009f2b
 8009e68:	08009f2b 	.word	0x08009f2b
 8009e6c:	08009f2b 	.word	0x08009f2b
 8009e70:	08009f2b 	.word	0x08009f2b
 8009e74:	08009f2b 	.word	0x08009f2b
 8009e78:	08009f2b 	.word	0x08009f2b
 8009e7c:	08009ef7 	.word	0x08009ef7
 8009e80:	08009f2b 	.word	0x08009f2b
 8009e84:	08009f2b 	.word	0x08009f2b
 8009e88:	08009f2b 	.word	0x08009f2b
 8009e8c:	08009f2b 	.word	0x08009f2b
 8009e90:	08009f2b 	.word	0x08009f2b
 8009e94:	08009f2b 	.word	0x08009f2b
 8009e98:	08009f2b 	.word	0x08009f2b
 8009e9c:	08009f2b 	.word	0x08009f2b
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f2b 	.word	0x08009f2b
 8009ea8:	08009f2b 	.word	0x08009f2b
 8009eac:	08009f2b 	.word	0x08009f2b
 8009eb0:	08009f2b 	.word	0x08009f2b
 8009eb4:	08009f2b 	.word	0x08009f2b
 8009eb8:	08009f2b 	.word	0x08009f2b
 8009ebc:	08009f1d 	.word	0x08009f1d
 8009ec0:	2b40      	cmp	r3, #64	@ 0x40
 8009ec2:	d02e      	beq.n	8009f22 <UART_SetConfig+0xa36>
 8009ec4:	e031      	b.n	8009f2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ec6:	f7fc f859 	bl	8005f7c <HAL_RCC_GetPCLK1Freq>
 8009eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ecc:	e033      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ece:	f7fc f86b 	bl	8005fa8 <HAL_RCC_GetPCLK2Freq>
 8009ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ed4:	e02f      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fd fa9a 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee4:	e027      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee6:	f107 0318 	add.w	r3, r7, #24
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fd fbe6 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef4:	e01f      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8009fac <UART_SetConfig+0xac0>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f02:	4b2a      	ldr	r3, [pc, #168]	@ (8009fac <UART_SetConfig+0xac0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	08db      	lsrs	r3, r3, #3
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	4a28      	ldr	r2, [pc, #160]	@ (8009fb0 <UART_SetConfig+0xac4>)
 8009f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f14:	e00f      	b.n	8009f36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f16:	4b26      	ldr	r3, [pc, #152]	@ (8009fb0 <UART_SetConfig+0xac4>)
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1a:	e00c      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f1c:	4b25      	ldr	r3, [pc, #148]	@ (8009fb4 <UART_SetConfig+0xac8>)
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f20:	e009      	b.n	8009f36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f28:	e005      	b.n	8009f36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f34:	bf00      	nop
    }

    if (pclk != 0U)
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d021      	beq.n	8009f80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f40:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb8 <UART_SetConfig+0xacc>)
 8009f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	085b      	lsrs	r3, r3, #1
 8009f54:	441a      	add	r2, r3
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f62:	2b0f      	cmp	r3, #15
 8009f64:	d909      	bls.n	8009f7a <UART_SetConfig+0xa8e>
 8009f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f6c:	d205      	bcs.n	8009f7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60da      	str	r2, [r3, #12]
 8009f78:	e002      	b.n	8009f80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2200      	movs	r2, #0
 8009f94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3748      	adds	r7, #72	@ 0x48
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009faa:	bf00      	nop
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	03d09000 	.word	0x03d09000
 8009fb4:	003d0900 	.word	0x003d0900
 8009fb8:	0800ab04 	.word	0x0800ab04

08009fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00a      	beq.n	800a02a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a050:	f003 0310 	and.w	r3, r3, #16
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00a      	beq.n	800a06e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01a      	beq.n	800a0d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0ba:	d10a      	bne.n	800a0d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	605a      	str	r2, [r3, #4]
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b098      	sub	sp, #96	@ 0x60
 800a104:	af02      	add	r7, sp, #8
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a110:	f7f7 fd70 	bl	8001bf4 <HAL_GetTick>
 800a114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b08      	cmp	r3, #8
 800a122:	d12f      	bne.n	800a184 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a12c:	2200      	movs	r2, #0
 800a12e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f88e 	bl	800a254 <UART_WaitOnFlagUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d022      	beq.n	800a184 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a152:	653b      	str	r3, [r7, #80]	@ 0x50
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a15c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a15e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e6      	bne.n	800a13e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e063      	b.n	800a24c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d149      	bne.n	800a226 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a192:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a19a:	2200      	movs	r2, #0
 800a19c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f857 	bl	800a254 <UART_WaitOnFlagUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d03c      	beq.n	800a226 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e6      	bne.n	800a1ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	e853 3f00 	ldrex	r3, [r3]
 800a1ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f023 0301 	bic.w	r3, r3, #1
 800a1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1fe:	61fa      	str	r2, [r7, #28]
 800a200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	617b      	str	r3, [r7, #20]
   return(result);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e5      	bne.n	800a1de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2220      	movs	r2, #32
 800a216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e012      	b.n	800a24c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3758      	adds	r7, #88	@ 0x58
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	4613      	mov	r3, r2
 800a262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a264:	e04f      	b.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26c:	d04b      	beq.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a26e:	f7f7 fcc1 	bl	8001bf4 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d302      	bcc.n	800a284 <UART_WaitOnFlagUntilTimeout+0x30>
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e04e      	b.n	800a326 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0304 	and.w	r3, r3, #4
 800a292:	2b00      	cmp	r3, #0
 800a294:	d037      	beq.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b80      	cmp	r3, #128	@ 0x80
 800a29a:	d034      	beq.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b40      	cmp	r3, #64	@ 0x40
 800a2a0:	d031      	beq.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f003 0308 	and.w	r3, r3, #8
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d110      	bne.n	800a2d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2208      	movs	r2, #8
 800a2b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f921 	bl	800a500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e029      	b.n	800a326 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2e0:	d111      	bne.n	800a306 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f907 	bl	800a500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e00f      	b.n	800a326 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69da      	ldr	r2, [r3, #28]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	bf0c      	ite	eq
 800a316:	2301      	moveq	r3, #1
 800a318:	2300      	movne	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	429a      	cmp	r2, r3
 800a322:	d0a0      	beq.n	800a266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b096      	sub	sp, #88	@ 0x58
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	88fa      	ldrh	r2, [r7, #6]
 800a348:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2222      	movs	r2, #34	@ 0x22
 800a358:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a362:	2b00      	cmp	r3, #0
 800a364:	d02d      	beq.n	800a3c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a36c:	4a40      	ldr	r2, [pc, #256]	@ (800a470 <UART_Start_Receive_DMA+0x140>)
 800a36e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a376:	4a3f      	ldr	r2, [pc, #252]	@ (800a474 <UART_Start_Receive_DMA+0x144>)
 800a378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a380:	4a3d      	ldr	r2, [pc, #244]	@ (800a478 <UART_Start_Receive_DMA+0x148>)
 800a382:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a38a:	2200      	movs	r2, #0
 800a38c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3324      	adds	r3, #36	@ 0x24
 800a39a:	4619      	mov	r1, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	f7f8 f8ce 	bl	8002544 <HAL_DMA_Start_IT>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d009      	beq.n	800a3c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e051      	b.n	800a466 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d018      	beq.n	800a3fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3f0:	e841 2300 	strex	r3, r2, [r1]
 800a3f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e6      	bne.n	800a3ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3308      	adds	r3, #8
 800a402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	653b      	str	r3, [r7, #80]	@ 0x50
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3308      	adds	r3, #8
 800a41a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a41c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a41e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e5      	bne.n	800a3fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	613b      	str	r3, [r7, #16]
   return(result);
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a450:	623a      	str	r2, [r7, #32]
 800a452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	69f9      	ldr	r1, [r7, #28]
 800a456:	6a3a      	ldr	r2, [r7, #32]
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e5      	bne.n	800a430 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3758      	adds	r7, #88	@ 0x58
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	0800a5cd 	.word	0x0800a5cd
 800a474:	0800a6f5 	.word	0x0800a6f5
 800a478:	0800a733 	.word	0x0800a733

0800a47c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b08f      	sub	sp, #60	@ 0x3c
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	61fb      	str	r3, [r7, #28]
   return(result);
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e6      	bne.n	800a484 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a4cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d6:	61ba      	str	r2, [r7, #24]
 800a4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6979      	ldr	r1, [r7, #20]
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e5      	bne.n	800a4b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a4f2:	bf00      	nop
 800a4f4:	373c      	adds	r7, #60	@ 0x3c
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b095      	sub	sp, #84	@ 0x54
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a51c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a526:	643b      	str	r3, [r7, #64]	@ 0x40
 800a528:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a52c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e6      	bne.n	800a508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	61fb      	str	r3, [r7, #28]
   return(result);
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c8 <UART_EndRxTransfer+0xc8>)
 800a54e:	4013      	ands	r3, r2
 800a550:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a55a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a55c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e5      	bne.n	800a53a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a572:	2b01      	cmp	r3, #1
 800a574:	d118      	bne.n	800a5a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	60bb      	str	r3, [r7, #8]
   return(result);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f023 0310 	bic.w	r3, r3, #16
 800a58a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a594:	61bb      	str	r3, [r7, #24]
 800a596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5bc:	bf00      	nop
 800a5be:	3754      	adds	r7, #84	@ 0x54
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	effffffe 	.word	0xeffffffe

0800a5cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b09c      	sub	sp, #112	@ 0x70
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e2:	d071      	beq.n	800a6c8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a5e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a600:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a60a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a60c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e6      	bne.n	800a5ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3308      	adds	r3, #8
 800a624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a630:	f023 0301 	bic.w	r3, r3, #1
 800a634:	667b      	str	r3, [r7, #100]	@ 0x64
 800a636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a63e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a640:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a644:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e5      	bne.n	800a61e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3308      	adds	r3, #8
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	623b      	str	r3, [r7, #32]
   return(result);
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a668:	663b      	str	r3, [r7, #96]	@ 0x60
 800a66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a672:	633a      	str	r2, [r7, #48]	@ 0x30
 800a674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e5      	bne.n	800a652 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a688:	2220      	movs	r2, #32
 800a68a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d118      	bne.n	800a6c8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	e853 3f00 	ldrex	r3, [r3]
 800a6a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0310 	bic.w	r3, r3, #16
 800a6aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e6      	bne.n	800a696 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d107      	bne.n	800a6e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6e0:	f7fe fef8 	bl	80094d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6e4:	e002      	b.n	800a6ec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a6e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6e8:	f7f6 feda 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 800a6ec:	bf00      	nop
 800a6ee:	3770      	adds	r7, #112	@ 0x70
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a700:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d109      	bne.n	800a724 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7fe fed9 	bl	80094d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a722:	e002      	b.n	800a72a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7fe fec1 	bl	80094ac <HAL_UART_RxHalfCpltCallback>
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a746:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a75a:	2b80      	cmp	r3, #128	@ 0x80
 800a75c:	d109      	bne.n	800a772 <UART_DMAError+0x40>
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b21      	cmp	r3, #33	@ 0x21
 800a762:	d106      	bne.n	800a772 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2200      	movs	r2, #0
 800a768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a76c:	6978      	ldr	r0, [r7, #20]
 800a76e:	f7ff fe85 	bl	800a47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77c:	2b40      	cmp	r3, #64	@ 0x40
 800a77e:	d109      	bne.n	800a794 <UART_DMAError+0x62>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b22      	cmp	r3, #34	@ 0x22
 800a784:	d106      	bne.n	800a794 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2200      	movs	r2, #0
 800a78a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a78e:	6978      	ldr	r0, [r7, #20]
 800a790:	f7ff feb6 	bl	800a500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a79a:	f043 0210 	orr.w	r2, r3, #16
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7a4:	6978      	ldr	r0, [r7, #20]
 800a7a6:	f7fe fe8b 	bl	80094c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7aa:	bf00      	nop
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7fe fe79 	bl	80094c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b088      	sub	sp, #32
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	e853 3f00 	ldrex	r3, [r3]
 800a7ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f2:	61fb      	str	r3, [r7, #28]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	61bb      	str	r3, [r7, #24]
 800a7fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6979      	ldr	r1, [r7, #20]
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	613b      	str	r3, [r7, #16]
   return(result);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e6      	bne.n	800a7de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7fe fe3a 	bl	8009498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a824:	bf00      	nop
 800a826:	3720      	adds	r7, #32
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_UARTEx_DisableFifoMode+0x16>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e027      	b.n	800a8ce <HAL_UARTEx_DisableFifoMode+0x66>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2224      	movs	r2, #36	@ 0x24
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0201 	bic.w	r2, r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e02d      	b.n	800a94e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	@ 0x24
 800a8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f850 	bl	800a9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e02d      	b.n	800a9ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2224      	movs	r2, #36	@ 0x24
 800a97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0201 	bic.w	r2, r2, #1
 800a994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f812 	bl	800a9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d108      	bne.n	800a9f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9f4:	e031      	b.n	800aa5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	0e5b      	lsrs	r3, r3, #25
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	0f5b      	lsrs	r3, r3, #29
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	7b3a      	ldrb	r2, [r7, #12]
 800aa22:	4911      	ldr	r1, [pc, #68]	@ (800aa68 <UARTEx_SetNbDataToProcess+0x94>)
 800aa24:	5c8a      	ldrb	r2, [r1, r2]
 800aa26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa2a:	7b3a      	ldrb	r2, [r7, #12]
 800aa2c:	490f      	ldr	r1, [pc, #60]	@ (800aa6c <UARTEx_SetNbDataToProcess+0x98>)
 800aa2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa30:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	7b7a      	ldrb	r2, [r7, #13]
 800aa40:	4909      	ldr	r1, [pc, #36]	@ (800aa68 <UARTEx_SetNbDataToProcess+0x94>)
 800aa42:	5c8a      	ldrb	r2, [r1, r2]
 800aa44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa48:	7b7a      	ldrb	r2, [r7, #13]
 800aa4a:	4908      	ldr	r1, [pc, #32]	@ (800aa6c <UARTEx_SetNbDataToProcess+0x98>)
 800aa4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	0800ab1c 	.word	0x0800ab1c
 800aa6c:	0800ab24 	.word	0x0800ab24

0800aa70 <memset>:
 800aa70:	4402      	add	r2, r0
 800aa72:	4603      	mov	r3, r0
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d100      	bne.n	800aa7a <memset+0xa>
 800aa78:	4770      	bx	lr
 800aa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7e:	e7f9      	b.n	800aa74 <memset+0x4>

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4d0d      	ldr	r5, [pc, #52]	@ (800aab8 <__libc_init_array+0x38>)
 800aa84:	4c0d      	ldr	r4, [pc, #52]	@ (800aabc <__libc_init_array+0x3c>)
 800aa86:	1b64      	subs	r4, r4, r5
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	4d0b      	ldr	r5, [pc, #44]	@ (800aac0 <__libc_init_array+0x40>)
 800aa92:	4c0c      	ldr	r4, [pc, #48]	@ (800aac4 <__libc_init_array+0x44>)
 800aa94:	f000 f818 	bl	800aac8 <_init>
 800aa98:	1b64      	subs	r4, r4, r5
 800aa9a:	10a4      	asrs	r4, r4, #2
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	42a6      	cmp	r6, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa8:	4798      	blx	r3
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab2:	4798      	blx	r3
 800aab4:	3601      	adds	r6, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800ab34 	.word	0x0800ab34
 800aabc:	0800ab34 	.word	0x0800ab34
 800aac0:	0800ab34 	.word	0x0800ab34
 800aac4:	0800ab38 	.word	0x0800ab38

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
