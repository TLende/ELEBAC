
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800ae24  0800ae24  0000be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af78  0800af78  0000bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af80  0800af80  0000bf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af84  0800af84  0000bf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001074  24000000  0800af88  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  24001074  0800bffc  0000d074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001414  0800bffc  0000d414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001980c  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e26  00000000  00000000  000268ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  000296d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d31  00000000  00000000  0002a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a78  00000000  00000000  0002b521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018280  00000000  00000000  00064f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a42a  00000000  00000000  0007d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7643  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d90  00000000  00000000  001e7688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ec418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001074 	.word	0x24001074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae0c 	.word	0x0800ae0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001078 	.word	0x24001078
 80002dc:	0800ae0c 	.word	0x0800ae0c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f002 fbe4 	bl	8002ece <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 fec2 	bl	8001494 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010e0 	.word	0x240010e0
 800071c:	24000008 	.word	0x24000008
 8000720:	24001104 	.word	0x24001104

08000724 <Flash_Init>:


//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f001 faa7 	bl	8001c84 <HAL_Delay>
	if(BUF){
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d012      	beq.n	8000762 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <Flash_Init+0x98>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa29 	bl	8000b98 <Read_Status_Register>
 8000746:	4603      	mov	r3, r0
 8000748:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <Flash_Init+0x98>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	7bba      	ldrb	r2, [r7, #14]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa4c 	bl	8000bf8 <Write_Status_Register>
 8000760:	e011      	b.n	8000786 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <Flash_Init+0x98>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fa16 	bl	8000b98 <Read_Status_Register>
 800076c:	4603      	mov	r3, r0
 800076e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f023 0308 	bic.w	r3, r3, #8
 8000776:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <Flash_Init+0x98>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fa39 	bl	8000bf8 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <Flash_Init+0x9c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fa04 	bl	8000b98 <Read_Status_Register>
 8000790:	4603      	mov	r3, r0
 8000792:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007a2:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <Flash_Init+0x9c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7b7a      	ldrb	r2, [r7, #13]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fa23 	bl	8000bf8 <Write_Status_Register>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	24001011 	.word	0x24001011
 80007c0:	24001010 	.word	0x24001010

080007c4 <Read_Register>:

//Read all status registers
void Read_Register(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <Read_Register+0x50>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f9e3 	bl	8000b98 <Read_Status_Register>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <Read_Register+0x54>)
 80007d8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80007da:	2064      	movs	r0, #100	@ 0x64
 80007dc:	f000 fb3e 	bl	8000e5c <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <Read_Register+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f9d7 	bl	8000b98 <Read_Status_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <Read_Register+0x5c>)
 80007f0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80007f2:	2064      	movs	r0, #100	@ 0x64
 80007f4:	f000 fb32 	bl	8000e5c <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <Read_Register+0x60>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f9cb 	bl	8000b98 <Read_Status_Register>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <Read_Register+0x64>)
 8000808:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800080a:	2064      	movs	r0, #100	@ 0x64
 800080c:	f000 fb26 	bl	8000e5c <delay_ns>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24001010 	.word	0x24001010
 8000818:	240010b5 	.word	0x240010b5
 800081c:	24001011 	.word	0x24001011
 8000820:	240010b6 	.word	0x240010b6
 8000824:	24001012 	.word	0x24001012
 8000828:	240010b7 	.word	0x240010b7

0800082c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Write_Data+0x74>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d106      	bne.n	800084e <Write_Data+0x22>
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <Write_Data+0x78>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <Write_Data+0x22>
		Block_Erase(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fad3 	bl	8000df4 <Block_Erase>
	}
	uint16_t count=0;
 800084e:	2300      	movs	r3, #0
 8000850:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000852:	e01c      	b.n	800088e <Write_Data+0x62>
		*Buffer_p=*data;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <Write_Data+0x7c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <Write_Data+0x7c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <Write_Data+0x7c>)
 8000866:	6013      	str	r3, [r2, #0]
		data++;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <Write_Data+0x78>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <Write_Data+0x78>)
 8000878:	801a      	strh	r2, [r3, #0]
		count++;
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	3301      	adds	r3, #1
 800087e:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <Write_Data+0x78>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000888:	d301      	bcc.n	800088e <Write_Data+0x62>
			Write_to_page();
 800088a:	f000 f80f 	bl	80008ac <Write_to_page>
	while(count<lenght){
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3de      	bcc.n	8000854 <Write_Data+0x28>
		}
	}
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2400109e 	.word	0x2400109e
 80008a4:	240010b0 	.word	0x240010b0
 80008a8:	24000000 	.word	0x24000000

080008ac <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <Write_to_page+0x74>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10f      	bne.n	80008d8 <Write_to_page+0x2c>
		Buffer_flip=1;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <Write_to_page+0x74>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_1[0];
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <Write_to_page+0x78>)
 80008c0:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <Write_to_page+0x7c>)
 80008c2:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <Write_to_page+0x80>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 80008ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ce:	4918      	ldr	r1, [pc, #96]	@ (8000930 <Write_to_page+0x84>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 f9ed 	bl	8000cb0 <Write_Data_Buffer>
 80008d6:	e00e      	b.n	80008f6 <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <Write_to_page+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <Write_to_page+0x78>)
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <Write_to_page+0x84>)
 80008e2:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <Write_to_page+0x80>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 80008ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ee:	490e      	ldr	r1, [pc, #56]	@ (8000928 <Write_to_page+0x7c>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 f9dd 	bl	8000cb0 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <Write_to_page+0x88>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fa14 	bl	8000d28 <Write_Data_Flash>
	Page_Index++;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <Write_to_page+0x88>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <Write_to_page+0x88>)
 800090a:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <Write_to_page+0x80>)
 800090e:	2200      	movs	r2, #0
 8000910:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <Write_to_page+0x88>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f80e 	bl	8000938 <Automatic_Block_Managment>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	240010b4 	.word	0x240010b4
 8000924:	24000000 	.word	0x24000000
 8000928:	24000810 	.word	0x24000810
 800092c:	240010b0 	.word	0x240010b0
 8000930:	24000010 	.word	0x24000010
 8000934:	2400109e 	.word	0x2400109e

08000938 <Automatic_Block_Managment>:
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	099b      	lsrs	r3, r3, #6
 8000946:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <Automatic_Block_Managment+0x38>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	89fa      	ldrh	r2, [r7, #14]
 800094e:	429a      	cmp	r2, r3
 8000950:	d007      	beq.n	8000962 <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fa4d 	bl	8000df4 <Block_Erase>
		Block_Mem=Block;
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <Automatic_Block_Managment+0x38>)
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000960:	e002      	b.n	8000968 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000962:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <Automatic_Block_Managment+0x38>)
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	8013      	strh	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	240010b2 	.word	0x240010b2

08000974 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 800097a:	4823      	ldr	r0, [pc, #140]	@ (8000a08 <Chip_Erase+0x94>)
 800097c:	f000 fa98 	bl	8000eb0 <USART3_Printf>
	HAL_UART_Receive(&huart3, &UART_buffer,1, HAL_MAX_DELAY);
 8000980:	1cf9      	adds	r1, r7, #3
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	2201      	movs	r2, #1
 8000988:	4820      	ldr	r0, [pc, #128]	@ (8000a0c <Chip_Erase+0x98>)
 800098a:	f007 f950 	bl	8007c2e <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2b59      	cmp	r3, #89	@ 0x59
 8000992:	d132      	bne.n	80009fa <Chip_Erase+0x86>
		USART3_Printf("Sletter minne ...\r\n");
 8000994:	481e      	ldr	r0, [pc, #120]	@ (8000a10 <Chip_Erase+0x9c>)
 8000996:	f000 fa8b 	bl	8000eb0 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e009      	b.n	80009b4 <Chip_Erase+0x40>
			Block_Erase(i*64);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fa23 	bl	8000df4 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009ba:	ddf1      	ble.n	80009a0 <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <Chip_Erase+0xa0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <Chip_Erase+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <Chip_Erase+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <Chip_Erase+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <Chip_Erase+0xb0>)
 80009d6:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <Chip_Erase+0xb4>)
 80009d8:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 80009da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009de:	21ff      	movs	r1, #255	@ 0xff
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <Chip_Erase+0xb4>)
 80009e2:	f009 fd95 	bl	800a510 <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 80009e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ea:	21ff      	movs	r1, #255	@ 0xff
 80009ec:	480f      	ldr	r0, [pc, #60]	@ (8000a2c <Chip_Erase+0xb8>)
 80009ee:	f009 fd8f 	bl	800a510 <memset>
		USART3_Printf("Ferdig\r\n");
 80009f2:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <Chip_Erase+0xbc>)
 80009f4:	f000 fa5c 	bl	8000eb0 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 80009f8:	e002      	b.n	8000a00 <Chip_Erase+0x8c>
		USART3_Printf("Sletter IKKE minne\r\n");
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <Chip_Erase+0xc0>)
 80009fc:	f000 fa58 	bl	8000eb0 <USART3_Printf>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800ae24 	.word	0x0800ae24
 8000a0c:	2400122c 	.word	0x2400122c
 8000a10:	0800ae58 	.word	0x0800ae58
 8000a14:	240010b0 	.word	0x240010b0
 8000a18:	2400109e 	.word	0x2400109e
 8000a1c:	240010b2 	.word	0x240010b2
 8000a20:	240010b4 	.word	0x240010b4
 8000a24:	24000000 	.word	0x24000000
 8000a28:	24000010 	.word	0x24000010
 8000a2c:	24000810 	.word	0x24000810
 8000a30:	0800ae6c 	.word	0x0800ae6c
 8000a34:	0800ae78 	.word	0x0800ae78

08000a38 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a3c:	b089      	sub	sp, #36	@ 0x24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	80fb      	strh	r3, [r7, #6]
 8000a44:	466b      	mov	r3, sp
 8000a46:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f9a1 	bl	8000d90 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000a4e:	88f9      	ldrh	r1, [r7, #6]
 8000a50:	460b      	mov	r3, r1
 8000a52:	3b01      	subs	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	b28b      	uxth	r3, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	4691      	mov	r9, r2
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a72:	b28b      	uxth	r3, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	461c      	mov	r4, r3
 8000a78:	4615      	mov	r5, r2
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	00eb      	lsls	r3, r5, #3
 8000a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a88:	00e2      	lsls	r2, r4, #3
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	3307      	adds	r3, #7
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	ebad 0d03 	sub.w	sp, sp, r3
 8000a96:	466b      	mov	r3, sp
 8000a98:	3300      	adds	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <Read_Data_Cont+0x114>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <Read_Data_Cont+0x114>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <Read_Data_Cont+0x114>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <Read_Data_Cont+0x114>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4825      	ldr	r0, [pc, #148]	@ (8000b50 <Read_Data_Cont+0x118>)
 8000aba:	f003 fb07 	bl	80040cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000abe:	2364      	movs	r3, #100	@ 0x64
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4922      	ldr	r1, [pc, #136]	@ (8000b4c <Read_Data_Cont+0x114>)
 8000ac4:	4823      	ldr	r0, [pc, #140]	@ (8000b54 <Read_Data_Cont+0x11c>)
 8000ac6:	f006 fa8b 	bl	8006fe0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	68f9      	ldr	r1, [r7, #12]
 8000ad2:	4820      	ldr	r0, [pc, #128]	@ (8000b54 <Read_Data_Cont+0x11c>)
 8000ad4:	f006 fc72 	bl	80073bc <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3303      	adds	r3, #3
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	330b      	adds	r3, #11
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000af0:	e018      	b.n	8000b24 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000af2:	8bf9      	ldrh	r1, [r7, #30]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <Read_Data_Cont+0x120>)
 8000afa:	f000 f9d9 	bl	8000eb0 <USART3_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000afe:	88fa      	ldrh	r2, [r7, #6]
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	4813      	ldr	r0, [pc, #76]	@ (8000b54 <Read_Data_Cont+0x11c>)
 8000b08:	f006 fc58 	bl	80073bc <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3303      	adds	r3, #3
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	330b      	adds	r3, #11
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2bff      	cmp	r3, #255	@ 0xff
 8000b2a:	d103      	bne.n	8000b34 <Read_Data_Cont+0xfc>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	7bdb      	ldrb	r3, [r3, #15]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0de      	beq.n	8000af2 <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <Read_Data_Cont+0x118>)
 8000b3a:	f003 fac7 	bl	80040cc <HAL_GPIO_WritePin>
 8000b3e:	46b5      	mov	sp, r6
}
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	@ 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24001090 	.word	0x24001090
 8000b50:	58020000 	.word	0x58020000
 8000b54:	240011a4 	.word	0x240011a4
 8000b58:	0800ae90 	.word	0x0800ae90

08000b5c <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	csLOW();
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <Write_Enable+0x30>)
 8000b66:	f003 fab1 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000b6a:	2364      	movs	r3, #100	@ 0x64
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4908      	ldr	r1, [pc, #32]	@ (8000b90 <Write_Enable+0x34>)
 8000b70:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <Write_Enable+0x38>)
 8000b72:	f006 fa35 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <Write_Enable+0x30>)
 8000b7c:	f003 faa6 	bl	80040cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000b80:	2064      	movs	r0, #100	@ 0x64
 8000b82:	f000 f96b 	bl	8000e5c <delay_ns>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58020000 	.word	0x58020000
 8000b90:	24000006 	.word	0x24000006
 8000b94:	240011a4 	.word	0x240011a4

08000b98 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <Read_Status_Register+0x50>)
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <Read_Status_Register+0x50>)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <Read_Status_Register+0x54>)
 8000bb4:	f003 fa8a 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	2202      	movs	r2, #2
 8000bbc:	490a      	ldr	r1, [pc, #40]	@ (8000be8 <Read_Status_Register+0x50>)
 8000bbe:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <Read_Status_Register+0x58>)
 8000bc0:	f006 fa0e 	bl	8006fe0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000bc4:	2364      	movs	r3, #100	@ 0x64
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	490a      	ldr	r1, [pc, #40]	@ (8000bf4 <Read_Status_Register+0x5c>)
 8000bca:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <Read_Status_Register+0x58>)
 8000bcc:	f006 fbf6 	bl	80073bc <HAL_SPI_Receive>
	csHIGH();
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <Read_Status_Register+0x54>)
 8000bd6:	f003 fa79 	bl	80040cc <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <Read_Status_Register+0x5c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	24001090 	.word	0x24001090
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	240011a4 	.word	0x240011a4
 8000bf4:	24001098 	.word	0x24001098

08000bf8 <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <Write_Status_Register+0x4c>)
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <Write_Status_Register+0x4c>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000c14:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <Write_Status_Register+0x4c>)
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <Write_Status_Register+0x50>)
 8000c20:	f003 fa54 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000c24:	2364      	movs	r3, #100	@ 0x64
 8000c26:	2203      	movs	r2, #3
 8000c28:	4906      	ldr	r1, [pc, #24]	@ (8000c44 <Write_Status_Register+0x4c>)
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <Write_Status_Register+0x54>)
 8000c2c:	f006 f9d8 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <Write_Status_Register+0x50>)
 8000c36:	f003 fa49 	bl	80040cc <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24001090 	.word	0x24001090
 8000c48:	58020000 	.word	0x58020000
 8000c4c:	240011a4 	.word	0x240011a4

08000c50 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	460a      	mov	r2, r1
 8000c60:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c62:	2200      	movs	r2, #0
 8000c64:	2110      	movs	r1, #16
 8000c66:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <Read_ID+0x54>)
 8000c68:	f003 fa30 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000c6c:	2364      	movs	r3, #100	@ 0x64
 8000c6e:	2202      	movs	r2, #2
 8000c70:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <Read_ID+0x58>)
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <Read_ID+0x5c>)
 8000c74:	f006 f9b4 	bl	8006fe0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	2364      	movs	r3, #100	@ 0x64
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	480b      	ldr	r0, [pc, #44]	@ (8000cac <Read_ID+0x5c>)
 8000c80:	f006 fb9c 	bl	80073bc <HAL_SPI_Receive>
	csHIGH();
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <Read_ID+0x54>)
 8000c8a:	f003 fa1f 	bl	80040cc <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000c8e:	793b      	ldrb	r3, [r7, #4]
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	79b9      	ldrb	r1, [r7, #6]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	4313      	orrs	r3, r2
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	24000004 	.word	0x24000004
 8000cac:	240011a4 	.word	0x240011a4

08000cb0 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	80fb      	strh	r3, [r7, #6]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000cc0:	f7ff ff4c 	bl	8000b5c <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <Write_Data_Buffer+0x6c>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <Write_Data_Buffer+0x6c>)
 8000cd4:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <Write_Data_Buffer+0x6c>)
 8000cdc:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <Write_Data_Buffer+0x70>)
 8000ce4:	f003 f9f2 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	2203      	movs	r2, #3
 8000cec:	490b      	ldr	r1, [pc, #44]	@ (8000d1c <Write_Data_Buffer+0x6c>)
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <Write_Data_Buffer+0x74>)
 8000cf0:	f006 f976 	bl	8006fe0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&Flash, Data, len);
//	SPI_DMA=1;
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000cf4:	88ba      	ldrh	r2, [r7, #4]
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <Write_Data_Buffer+0x74>)
 8000cfe:	f006 f96f 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000d02:	2201      	movs	r2, #1
 8000d04:	2110      	movs	r1, #16
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <Write_Data_Buffer+0x70>)
 8000d08:	f003 f9e0 	bl	80040cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d0c:	2064      	movs	r0, #100	@ 0x64
 8000d0e:	f000 f8a5 	bl	8000e5c <delay_ns>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	24001090 	.word	0x24001090
 8000d20:	58020000 	.word	0x58020000
 8000d24:	240011a4 	.word	0x240011a4

08000d28 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000d32:	f7ff ff13 	bl	8000b5c <Write_Enable>
	Tx_Buffer[0]=OP_Program_Ex;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <Write_Data_Flash+0x5c>)
 8000d38:	2210      	movs	r2, #16
 8000d3a:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <Write_Data_Flash+0x5c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <Write_Data_Flash+0x5c>)
 8000d4c:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <Write_Data_Flash+0x5c>)
 8000d54:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d56:	2200      	movs	r2, #0
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <Write_Data_Flash+0x60>)
 8000d5c:	f003 f9b6 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000d60:	2364      	movs	r3, #100	@ 0x64
 8000d62:	2204      	movs	r2, #4
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <Write_Data_Flash+0x5c>)
 8000d66:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <Write_Data_Flash+0x64>)
 8000d68:	f006 f93a 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <Write_Data_Flash+0x60>)
 8000d72:	f003 f9ab 	bl	80040cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d76:	f000 f8c1 	bl	8000efc <W25N_WaitForReady>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24001090 	.word	0x24001090
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	240011a4 	.word	0x240011a4

08000d90 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <Select_Page_Read+0x58>)
 8000d9c:	2213      	movs	r2, #19
 8000d9e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <Select_Page_Read+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <Select_Page_Read+0x58>)
 8000db0:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <Select_Page_Read+0x58>)
 8000db8:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <Select_Page_Read+0x5c>)
 8000dc0:	f003 f984 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <Select_Page_Read+0x58>)
 8000dca:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <Select_Page_Read+0x60>)
 8000dcc:	f006 f908 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <Select_Page_Read+0x5c>)
 8000dd6:	f003 f979 	bl	80040cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000dda:	f000 f88f 	bl	8000efc <W25N_WaitForReady>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24001090 	.word	0x24001090
 8000dec:	58020000 	.word	0x58020000
 8000df0:	240011a4 	.word	0x240011a4

08000df4 <Block_Erase>:
	csHIGH();
}

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000dfe:	f7ff fead 	bl	8000b5c <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000e02:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <Block_Erase+0x5c>)
 8000e04:	22d8      	movs	r2, #216	@ 0xd8
 8000e06:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <Block_Erase+0x5c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <Block_Erase+0x5c>)
 8000e18:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <Block_Erase+0x5c>)
 8000e20:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000e22:	2200      	movs	r2, #0
 8000e24:	2110      	movs	r1, #16
 8000e26:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <Block_Erase+0x60>)
 8000e28:	f003 f950 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000e2c:	2364      	movs	r3, #100	@ 0x64
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4907      	ldr	r1, [pc, #28]	@ (8000e50 <Block_Erase+0x5c>)
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <Block_Erase+0x64>)
 8000e34:	f006 f8d4 	bl	8006fe0 <HAL_SPI_Transmit>
	csHIGH();
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <Block_Erase+0x60>)
 8000e3e:	f003 f945 	bl	80040cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000e42:	f000 f85b 	bl	8000efc <W25N_WaitForReady>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	24001090 	.word	0x24001090
 8000e54:	58020000 	.word	0x58020000
 8000e58:	240011a4 	.word	0x240011a4

08000e5c <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <delay_ns+0x48>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0a5b      	lsrs	r3, r3, #9
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <delay_ns+0x4c>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	09db      	lsrs	r3, r3, #7
 8000e72:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <delay_ns+0x50>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000e84:	bf00      	nop
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <delay_ns+0x50>)
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f8      	bhi.n	8000e86 <delay_ns+0x2a>
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	24001014 	.word	0x24001014
 8000ea8:	00044b83 	.word	0x00044b83
 8000eac:	e0001000 	.word	0xe0001000

08000eb0 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 8000eb0:	b40f      	push	{r0, r1, r2, r3}
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b0a2      	sub	sp, #136	@ 0x88
 8000eb6:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000eb8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ebc:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000ebe:	f107 0008 	add.w	r0, r7, #8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	f009 fb13 	bl	800a4f4 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa04 	bl	80002e0 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f107 0108 	add.w	r1, r7, #8
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <USART3_Printf+0x48>)
 8000ee6:	f006 fe14 	bl	8007b12 <HAL_UART_Transmit>
}
 8000eea:	bf00      	nop
 8000eec:	3788      	adds	r7, #136	@ 0x88
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef4:	b004      	add	sp, #16
 8000ef6:	4770      	bx	lr
 8000ef8:	2400122c 	.word	0x2400122c

08000efc <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000f00:	2064      	movs	r0, #100	@ 0x64
 8000f02:	f7ff ffab 	bl	8000e5c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000f06:	e002      	b.n	8000f0e <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000f08:	2064      	movs	r0, #100	@ 0x64
 8000f0a:	f7ff ffa7 	bl	8000e5c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <W25N_WaitForReady+0x2c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe40 	bl	8000b98 <Read_Status_Register>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f2      	bne.n	8000f08 <W25N_WaitForReady+0xc>
    }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24001012 	.word	0x24001012

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f30:	f000 fa84 	bl	800143c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fe14 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f860 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fa06 	bl	800134c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000f40:	f000 f8d8 	bl	80010f4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000f44:	f000 f960 	bl	8001208 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000f48:	f000 f9b4 	bl	80012b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &command,1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4925      	ldr	r1, [pc, #148]	@ (8000fe4 <main+0xb8>)
 8000f50:	4825      	ldr	r0, [pc, #148]	@ (8000fe8 <main+0xbc>)
 8000f52:	f006 ff35 	bl	8007dc0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000f56:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <main+0xc0>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4a24      	ldr	r2, [pc, #144]	@ (8000fec <main+0xc0>)
 8000f5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f60:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <main+0xc4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <main+0xc4>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fbd8 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8000f74:	f7ff fe6c 	bl	8000c50 <Read_ID>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff4 <main+0xc8>)
 8000f7c:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  Read_Register();
 8000f7e:	f7ff fc21 	bl	80007c4 <Read_Register>

	  //Read
	  if(command==0x31){
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <main+0xb8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b31      	cmp	r3, #49	@ 0x31
 8000f88:	d105      	bne.n	8000f96 <main+0x6a>
		  Read_Data_Cont(16);
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f7ff fd54 	bl	8000a38 <Read_Data_Cont>
		  command = 0;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <main+0xb8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <main+0xb8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b32      	cmp	r3, #50	@ 0x32
 8000f9c:	d109      	bne.n	8000fb2 <main+0x86>
		  Start_Flight_Recording=1;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <main+0xcc>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8000fa4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fa8:	f7ff fb88 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <main+0xb8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <main+0xb8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b33      	cmp	r3, #51	@ 0x33
 8000fb8:	d109      	bne.n	8000fce <main+0xa2>
		  Start_Flight_Recording=0;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <main+0xcc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8000fc0:	f240 1001 	movw	r0, #257	@ 0x101
 8000fc4:	f7ff fb7a 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <main+0xb8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <main+0xb8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b34      	cmp	r3, #52	@ 0x34
 8000fd4:	d1d3      	bne.n	8000f7e <main+0x52>
		  Chip_Erase();
 8000fd6:	f7ff fccd 	bl	8000974 <Chip_Erase>
		  command=0;
 8000fda:	4b02      	ldr	r3, [pc, #8]	@ (8000fe4 <main+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000fe0:	e7cd      	b.n	8000f7e <main+0x52>
 8000fe2:	bf00      	nop
 8000fe4:	240010a8 	.word	0x240010a8
 8000fe8:	2400122c 	.word	0x2400122c
 8000fec:	e000edf0 	.word	0xe000edf0
 8000ff0:	e0001000 	.word	0xe0001000
 8000ff4:	240010ac 	.word	0x240010ac
 8000ff8:	2400109d 	.word	0x2400109d

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b09c      	sub	sp, #112	@ 0x70
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001006:	224c      	movs	r2, #76	@ 0x4c
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f009 fa80 	bl	800a510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2220      	movs	r2, #32
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f009 fa7a 	bl	800a510 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800101c:	2002      	movs	r0, #2
 800101e:	f003 f86f 	bl	8004100 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b31      	ldr	r3, [pc, #196]	@ (80010ec <SystemClock_Config+0xf0>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a30      	ldr	r2, [pc, #192]	@ (80010ec <SystemClock_Config+0xf0>)
 800102c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <SystemClock_Config+0xf0>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <SystemClock_Config+0xf4>)
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	4a2b      	ldr	r2, [pc, #172]	@ (80010f0 <SystemClock_Config+0xf4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001048:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <SystemClock_Config+0xf4>)
 800104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001054:	bf00      	nop
 8001056:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <SystemClock_Config+0xf0>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001062:	d1f8      	bne.n	8001056 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001068:	2301      	movs	r3, #1
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2340      	movs	r3, #64	@ 0x40
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001078:	2304      	movs	r3, #4
 800107a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800107c:	233c      	movs	r3, #60	@ 0x3c
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001084:	230a      	movs	r3, #10
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800108c:	230c      	movs	r3, #12
 800108e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001090:	2300      	movs	r3, #0
 8001092:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f869 	bl	8004174 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010a8:	f000 f9f4 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	233f      	movs	r3, #63	@ 0x3f
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2303      	movs	r3, #3
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010b8:	2308      	movs	r3, #8
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010bc:	2340      	movs	r3, #64	@ 0x40
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ca:	2340      	movs	r3, #64	@ 0x40
 80010cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fca8 	bl	8004a28 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010de:	f000 f9d9 	bl	8001494 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3770      	adds	r7, #112	@ 0x70
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	58024800 	.word	0x58024800
 80010f0:	58000400 	.word	0x58000400

080010f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80010fa:	4b40      	ldr	r3, [pc, #256]	@ (80011fc <MX_FDCAN1_Init+0x108>)
 80010fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001100:	4a3e      	ldr	r2, [pc, #248]	@ (80011fc <MX_FDCAN1_Init+0x108>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001106:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800110a:	4b3c      	ldr	r3, [pc, #240]	@ (80011fc <MX_FDCAN1_Init+0x108>)
 800110c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001118:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800111a:	4a3a      	ldr	r2, [pc, #232]	@ (8001204 <MX_FDCAN1_Init+0x110>)
 800111c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001124:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800112a:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800112c:	2200      	movs	r2, #0
 800112e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001130:	4b33      	ldr	r3, [pc, #204]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001132:	2200      	movs	r2, #0
 8001134:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800113e:	2201      	movs	r2, #1
 8001140:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001144:	2202      	movs	r2, #2
 8001146:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800114a:	2205      	movs	r2, #5
 800114c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001150:	2202      	movs	r2, #2
 8001152:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001156:	2201      	movs	r2, #1
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800115c:	2203      	movs	r2, #3
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001162:	2204      	movs	r2, #4
 8001164:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001168:	2203      	movs	r2, #3
 800116a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001180:	2240      	movs	r2, #64	@ 0x40
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001186:	2204      	movs	r2, #4
 8001188:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800118c:	2200      	movs	r2, #0
 800118e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001192:	2204      	movs	r2, #4
 8001194:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 8001198:	2200      	movs	r2, #0
 800119a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 800119e:	2204      	movs	r2, #4
 80011a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011bc:	2204      	movs	r2, #4
 80011be:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011c0:	480f      	ldr	r0, [pc, #60]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011c2:	f001 fc7b 	bl	8002abc <HAL_FDCAN_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80011cc:	f000 f962 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011d2:	f001 fe51 	bl	8002e78 <HAL_FDCAN_Start>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80011dc:	f000 f95a 	bl	8001494 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_FDCAN1_Init+0x10c>)
 80011e6:	f002 f839 	bl	800325c <HAL_FDCAN_ActivateNotification>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80011f0:	f000 f950 	bl	8001494 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58024400 	.word	0x58024400
 8001200:	24001104 	.word	0x24001104
 8001204:	4000a000 	.word	0x4000a000

08001208 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800120e:	4a28      	ldr	r2, [pc, #160]	@ (80012b0 <MX_SPI1_Init+0xa8>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001214:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001222:	2207      	movs	r2, #7
 8001224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001234:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800123c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001240:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800125c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI1_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_SPI1_Init+0xa4>)
 800129a:	f005 fd7d 	bl	8006d98 <HAL_SPI_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012a4:	f000 f8f6 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	240011a4 	.word	0x240011a4
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <MX_USART3_UART_Init+0x94>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 80012fe:	f006 fbb8 	bl	8007a72 <HAL_UART_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 f8c4 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 8001310:	f008 fff7 	bl	800a302 <HAL_UARTEx_SetTxFifoThreshold>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800131a:	f000 f8bb 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4808      	ldr	r0, [pc, #32]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 8001322:	f009 f82c 	bl	800a37e <HAL_UARTEx_SetRxFifoThreshold>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800132c:	f000 f8b2 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_USART3_UART_Init+0x90>)
 8001332:	f008 ffad 	bl	800a290 <HAL_UARTEx_DisableFifoMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f8aa 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2400122c 	.word	0x2400122c
 8001348:	40004800 	.word	0x40004800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <MX_GPIO_Init+0xe4>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	4a31      	ldr	r2, [pc, #196]	@ (8001430 <MX_GPIO_Init+0xe4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <MX_GPIO_Init+0xe4>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <MX_GPIO_Init+0xe4>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	4a2a      	ldr	r2, [pc, #168]	@ (8001430 <MX_GPIO_Init+0xe4>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <MX_GPIO_Init+0xe4>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_GPIO_Init+0xe4>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2110      	movs	r1, #16
 80013de:	4815      	ldr	r0, [pc, #84]	@ (8001434 <MX_GPIO_Init+0xe8>)
 80013e0:	f002 fe74 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4813      	ldr	r0, [pc, #76]	@ (8001438 <MX_GPIO_Init+0xec>)
 80013ea:	f002 fe6f 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80013ee:	2310      	movs	r3, #16
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001406:	f002 fcb1 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800140a:	2310      	movs	r3, #16
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_GPIO_Init+0xec>)
 8001422:	f002 fca3 	bl	8003d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	@ 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	58024400 	.word	0x58024400
 8001434:	58020000 	.word	0x58020000
 8001438:	58021800 	.word	0x58021800

0800143c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800144e:	f000 fd59 	bl	8001f04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001452:	2301      	movs	r3, #1
 8001454:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001456:	2300      	movs	r3, #0
 8001458:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800145e:	231f      	movs	r3, #31
 8001460:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001462:	2387      	movs	r3, #135	@ 0x87
 8001464:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001466:	2300      	movs	r3, #0
 8001468:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800146a:	2300      	movs	r3, #0
 800146c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800146e:	2301      	movs	r3, #1
 8001470:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001472:	2301      	movs	r3, #1
 8001474:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800147e:	463b      	mov	r3, r7
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fd77 	bl	8001f74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001486:	2004      	movs	r0, #4
 8001488:	f000 fd54 	bl	8001f34 <HAL_MPU_Enable>

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <Error_Handler+0x10>)
 800149a:	f001 fced 	bl	8002e78 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24001104 	.word	0x24001104

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_MspInit+0x30>)
 80014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014b4:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x30>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	58024400 	.word	0x58024400

080014dc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ba      	sub	sp, #232	@ 0xe8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	22c0      	movs	r2, #192	@ 0xc0
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f009 f807 	bl	800a510 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a33      	ldr	r2, [pc, #204]	@ (80015d4 <HAL_FDCAN_MspInit+0xf8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d15f      	bne.n	80015cc <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800150c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800151c:	230a      	movs	r3, #10
 800151e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001524:	2314      	movs	r3, #20
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800152c:	23c0      	movs	r3, #192	@ 0xc0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001530:	2320      	movs	r3, #32
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001538:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800153c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fdfb 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001550:	f7ff ffa0 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 8001556:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001560:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 8001566:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800156a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_FDCAN_MspInit+0xfc>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001590:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001594:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015aa:	2309      	movs	r3, #9
 80015ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <HAL_FDCAN_MspInit+0x100>)
 80015b8:	f002 fbd8 	bl	8003d6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2013      	movs	r0, #19
 80015c2:	f000 fc6a 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80015c6:	2013      	movs	r0, #19
 80015c8:	f000 fc81 	bl	8001ece <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80015cc:	bf00      	nop
 80015ce:	37e8      	adds	r7, #232	@ 0xe8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	4000a000 	.word	0x4000a000
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020400 	.word	0x58020400

080015e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ba      	sub	sp, #232	@ 0xe8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	22c0      	movs	r2, #192	@ 0xc0
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f008 ff85 	bl	800a510 <memset>
  if(hspi->Instance==SPI1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a26      	ldr	r2, [pc, #152]	@ (80016a4 <HAL_SPI_MspInit+0xc4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d144      	bne.n	800169a <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001610:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800161c:	2300      	movs	r3, #0
 800161e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fd8b 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001630:	f7ff ff30 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163a:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23e0      	movs	r3, #224	@ 0xe0
 8001672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001688:	2305      	movs	r3, #5
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <HAL_SPI_MspInit+0xcc>)
 8001696:	f002 fb69 	bl	8003d6c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800169a:	bf00      	nop
 800169c:	37e8      	adds	r7, #232	@ 0xe8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40013000 	.word	0x40013000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020000 	.word	0x58020000

080016b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0ba      	sub	sp, #232	@ 0xe8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	22c0      	movs	r2, #192	@ 0xc0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f008 ff1d 	bl	800a510 <memset>
  if(huart->Instance==USART3)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_UART_MspInit+0xd8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d14e      	bne.n	800177e <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016e0:	f04f 0202 	mov.w	r2, #2
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fd22 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001702:	f7ff fec7 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_UART_MspInit+0xdc>)
 8001708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800170c:	4a1f      	ldr	r2, [pc, #124]	@ (800178c <HAL_UART_MspInit+0xdc>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001712:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001716:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <HAL_UART_MspInit+0xdc>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800171c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_UART_MspInit+0xdc>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	4a18      	ldr	r2, [pc, #96]	@ (800178c <HAL_UART_MspInit+0xdc>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0xdc>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800175c:	2307      	movs	r3, #7
 800175e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001766:	4619      	mov	r1, r3
 8001768:	4809      	ldr	r0, [pc, #36]	@ (8001790 <HAL_UART_MspInit+0xe0>)
 800176a:	f002 faff 	bl	8003d6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2027      	movs	r0, #39	@ 0x27
 8001774:	f000 fb91 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001778:	2027      	movs	r0, #39	@ 0x27
 800177a:	f000 fba8 	bl	8001ece <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	37e8      	adds	r7, #232	@ 0xe8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004800 	.word	0x40004800
 800178c:	58024400 	.word	0x58024400
 8001790:	58020c00 	.word	0x58020c00

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fa2a 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <SysTick_Handler+0x28>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SysTick_Handler+0x2c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SysTick_Handler+0x2c>)
 8001800:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	e002      	b.n	800180a <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <SysTick_Handler+0x2c>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2400109d 	.word	0x2400109d
 8001814:	240012c0 	.word	0x240012c0

08001818 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <FDCAN1_IT0_IRQHandler+0x10>)
 800181e:	f001 fd97 	bl	8003350 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24001104 	.word	0x24001104

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART3_IRQHandler+0x10>)
 8001832:	f006 fb11 	bl	8007e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2400122c 	.word	0x2400122c

08001840 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 800184a:	e03f      	b.n	80018cc <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xFF;
 800184c:	23ff      	movs	r3, #255	@ 0xff
 800184e:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	3301      	adds	r3, #1
 800185a:	b292      	uxth	r2, r2
 800185c:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001872:	78db      	ldrb	r3, [r3, #3]
 8001874:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001878:	791b      	ldrb	r3, [r3, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 800187e:	795b      	ldrb	r3, [r3, #5]
 8001880:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001884:	799b      	ldrb	r3, [r3, #6]
 8001886:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 800188a:	79db      	ldrb	r3, [r3, #7]
 800188c:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b2db      	uxtb	r3, r3
 800189e:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0e1b      	lsrs	r3, r3, #24
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	2110      	movs	r1, #16
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe ffb0 	bl	800082c <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80018cc:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0xac>)
 80018ce:	4a06      	ldr	r2, [pc, #24]	@ (80018e8 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80018d0:	2140      	movs	r1, #64	@ 0x40
 80018d2:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80018d4:	f001 fb56 	bl	8002f84 <HAL_FDCAN_GetRxMessage>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0b6      	beq.n	800184c <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	240010b8 	.word	0x240010b8
 80018ec:	240010a0 	.word	0x240010a0
 80018f0:	240012c0 	.word	0x240012c0
 80018f4:	2400109d 	.word	0x2400109d
 80018f8:	24001104 	.word	0x24001104

080018fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <HAL_UART_RxCpltCallback+0x24>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d104      	bne.n	8001918 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart3, &command,1);
 800190e:	2201      	movs	r2, #1
 8001910:	4904      	ldr	r1, [pc, #16]	@ (8001924 <HAL_UART_RxCpltCallback+0x28>)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <HAL_UART_RxCpltCallback+0x2c>)
 8001914:	f006 fa54 	bl	8007dc0 <HAL_UART_Receive_IT>
	}
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40004800 	.word	0x40004800
 8001924:	240010a8 	.word	0x240010a8
 8001928:	2400122c 	.word	0x2400122c

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f008 fde0 	bl	800a520 <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	24080000 	.word	0x24080000
 800198c:	00000400 	.word	0x00000400
 8001990:	240012c4 	.word	0x240012c4
 8001994:	24001418 	.word	0x24001418

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800199c:	4b43      	ldr	r3, [pc, #268]	@ (8001aac <SystemInit+0x114>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a42      	ldr	r2, [pc, #264]	@ (8001aac <SystemInit+0x114>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ac:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <SystemInit+0x118>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d807      	bhi.n	80019c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019b8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <SystemInit+0x118>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 030f 	bic.w	r3, r3, #15
 80019c0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <SystemInit+0x118>)
 80019c2:	f043 0307 	orr.w	r3, r3, #7
 80019c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019c8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab4 <SystemInit+0x11c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a39      	ldr	r2, [pc, #228]	@ (8001ab4 <SystemInit+0x11c>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019d4:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <SystemInit+0x11c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019da:	4b36      	ldr	r3, [pc, #216]	@ (8001ab4 <SystemInit+0x11c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4935      	ldr	r1, [pc, #212]	@ (8001ab4 <SystemInit+0x11c>)
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <SystemInit+0x120>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019e6:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <SystemInit+0x118>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019f2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <SystemInit+0x118>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 030f 	bic.w	r3, r3, #15
 80019fa:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <SystemInit+0x118>)
 80019fc:	f043 0307 	orr.w	r3, r3, #7
 8001a00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a02:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <SystemInit+0x11c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a08:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <SystemInit+0x11c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <SystemInit+0x11c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <SystemInit+0x11c>)
 8001a16:	4a29      	ldr	r2, [pc, #164]	@ (8001abc <SystemInit+0x124>)
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <SystemInit+0x11c>)
 8001a1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ac0 <SystemInit+0x128>)
 8001a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <SystemInit+0x11c>)
 8001a22:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <SystemInit+0x12c>)
 8001a24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <SystemInit+0x11c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <SystemInit+0x11c>)
 8001a2e:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <SystemInit+0x12c>)
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <SystemInit+0x11c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <SystemInit+0x11c>)
 8001a3a:	4a22      	ldr	r2, [pc, #136]	@ (8001ac4 <SystemInit+0x12c>)
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <SystemInit+0x11c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <SystemInit+0x11c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <SystemInit+0x11c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <SystemInit+0x11c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <SystemInit+0x130>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <SystemInit+0x134>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a62:	d202      	bcs.n	8001a6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <SystemInit+0x138>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <SystemInit+0x11c>)
 8001a6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d113      	bne.n	8001aa0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <SystemInit+0x11c>)
 8001a7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <SystemInit+0x11c>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a84:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <SystemInit+0x13c>)
 8001a8a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <SystemInit+0x11c>)
 8001a92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a96:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <SystemInit+0x11c>)
 8001a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	52002000 	.word	0x52002000
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001abc:	02020200 	.word	0x02020200
 8001ac0:	01ff0000 	.word	0x01ff0000
 8001ac4:	01010280 	.word	0x01010280
 8001ac8:	5c001000 	.word	0x5c001000
 8001acc:	ffff0000 	.word	0xffff0000
 8001ad0:	51008108 	.word	0x51008108
 8001ad4:	52004000 	.word	0x52004000

08001ad8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <ExitRun0Mode+0x2c>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <ExitRun0Mode+0x2c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ae8:	bf00      	nop
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <ExitRun0Mode+0x2c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f9      	beq.n	8001aea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	58024800 	.word	0x58024800

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b44 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b0c:	f7ff ffe4 	bl	8001ad8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b10:	f7ff ff42 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b16:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f008 fcf7 	bl	800a52c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff f9f5 	bl	8000f2c <main>
  bx  lr
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b4c:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 8001b50:	0800af88 	.word	0x0800af88
  ldr r2, =_sbss
 8001b54:	24001074 	.word	0x24001074
  ldr r4, =_ebss
 8001b58:	24001414 	.word	0x24001414

08001b5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC3_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f000 f98c 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b6c:	f003 f912 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_Init+0x68>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	4913      	ldr	r1, [pc, #76]	@ (8001bcc <HAL_Init+0x6c>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_Init+0x68>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_Init+0x6c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_Init+0x70>)
 8001ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_Init+0x74>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f814 	bl	8001bd8 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e002      	b.n	8001bc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bba:	f7ff fc75 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	0800aefc 	.word	0x0800aefc
 8001bd0:	24001018 	.word	0x24001018
 8001bd4:	24001014 	.word	0x24001014

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e021      	b.n	8001c30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_InitTick+0x64>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f971 	bl	8001eea <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f93b 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_InitTick+0x68>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24001020 	.word	0x24001020
 8001c3c:	24001014 	.word	0x24001014
 8001c40:	2400101c 	.word	0x2400101c

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	24001020 	.word	0x24001020
 8001c68:	240012c8 	.word	0x240012c8

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	240012c8 	.word	0x240012c8

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	24001020 	.word	0x24001020

08001ccc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_GetREVID+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	5c001000 	.word	0x5c001000

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	05fa0000 	.word	0x05fa0000

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff40 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff33 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa4 	bl	8001e40 <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f08:	f3bf 8f5f 	dmb	sy
}
 8001f0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <HAL_MPU_Disable+0x28>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_MPU_Disable+0x28>)
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_MPU_Disable+0x2c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00
 8001f30:	e000ed90 	.word	0xe000ed90

08001f34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_MPU_Enable+0x38>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_MPU_Enable+0x3c>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_MPU_Enable+0x3c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f52:	f3bf 8f4f 	dsb	sy
}
 8001f56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f58:	f3bf 8f6f 	isb	sy
}
 8001f5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed90 	.word	0xe000ed90
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	785a      	ldrb	r2, [r3, #1]
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
 8001f9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7adb      	ldrb	r3, [r3, #11]
 8001fa2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7a9b      	ldrb	r3, [r3, #10]
 8001faa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7b5b      	ldrb	r3, [r3, #13]
 8001fb2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7b9b      	ldrb	r3, [r3, #14]
 8001fba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7bdb      	ldrb	r3, [r3, #15]
 8001fc2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7a5b      	ldrb	r3, [r3, #9]
 8001fca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7a1b      	ldrb	r3, [r3, #8]
 8001fd2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fd4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fde:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe0:	6113      	str	r3, [r2, #16]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed90 	.word	0xe000ed90

08001ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fe36 	bl	8001c6c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e2dc      	b.n	80025c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d008      	beq.n	800202a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e2cd      	b.n	80025c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a76      	ldr	r2, [pc, #472]	@ (8002208 <HAL_DMA_Abort+0x214>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d04a      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a74      	ldr	r2, [pc, #464]	@ (800220c <HAL_DMA_Abort+0x218>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d045      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_DMA_Abort+0x21c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d040      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a71      	ldr	r2, [pc, #452]	@ (8002214 <HAL_DMA_Abort+0x220>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d03b      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a70      	ldr	r2, [pc, #448]	@ (8002218 <HAL_DMA_Abort+0x224>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d036      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_DMA_Abort+0x228>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6d      	ldr	r2, [pc, #436]	@ (8002220 <HAL_DMA_Abort+0x22c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d02c      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6b      	ldr	r2, [pc, #428]	@ (8002224 <HAL_DMA_Abort+0x230>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d027      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6a      	ldr	r2, [pc, #424]	@ (8002228 <HAL_DMA_Abort+0x234>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a68      	ldr	r2, [pc, #416]	@ (800222c <HAL_DMA_Abort+0x238>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01d      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a67      	ldr	r2, [pc, #412]	@ (8002230 <HAL_DMA_Abort+0x23c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d018      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a65      	ldr	r2, [pc, #404]	@ (8002234 <HAL_DMA_Abort+0x240>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a64      	ldr	r2, [pc, #400]	@ (8002238 <HAL_DMA_Abort+0x244>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00e      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a62      	ldr	r2, [pc, #392]	@ (800223c <HAL_DMA_Abort+0x248>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a61      	ldr	r2, [pc, #388]	@ (8002240 <HAL_DMA_Abort+0x24c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_DMA_Abort+0xd6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002244 <HAL_DMA_Abort+0x250>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_DMA_Abort+0xda>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_DMA_Abort+0xdc>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 021e 	bic.w	r2, r2, #30
 80020e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e00a      	b.n	8002112 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 020e 	bic.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3c      	ldr	r2, [pc, #240]	@ (8002208 <HAL_DMA_Abort+0x214>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d072      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3a      	ldr	r2, [pc, #232]	@ (800220c <HAL_DMA_Abort+0x218>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d06d      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a39      	ldr	r2, [pc, #228]	@ (8002210 <HAL_DMA_Abort+0x21c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d068      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a37      	ldr	r2, [pc, #220]	@ (8002214 <HAL_DMA_Abort+0x220>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d063      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <HAL_DMA_Abort+0x224>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05e      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a34      	ldr	r2, [pc, #208]	@ (800221c <HAL_DMA_Abort+0x228>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d059      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a33      	ldr	r2, [pc, #204]	@ (8002220 <HAL_DMA_Abort+0x22c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d054      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a31      	ldr	r2, [pc, #196]	@ (8002224 <HAL_DMA_Abort+0x230>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d04f      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a30      	ldr	r2, [pc, #192]	@ (8002228 <HAL_DMA_Abort+0x234>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d04a      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2e      	ldr	r2, [pc, #184]	@ (800222c <HAL_DMA_Abort+0x238>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d045      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2d      	ldr	r2, [pc, #180]	@ (8002230 <HAL_DMA_Abort+0x23c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d040      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_DMA_Abort+0x240>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d03b      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2a      	ldr	r2, [pc, #168]	@ (8002238 <HAL_DMA_Abort+0x244>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d036      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a28      	ldr	r2, [pc, #160]	@ (800223c <HAL_DMA_Abort+0x248>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d031      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <HAL_DMA_Abort+0x24c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d02c      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a25      	ldr	r2, [pc, #148]	@ (8002244 <HAL_DMA_Abort+0x250>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d027      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a24      	ldr	r2, [pc, #144]	@ (8002248 <HAL_DMA_Abort+0x254>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a22      	ldr	r2, [pc, #136]	@ (800224c <HAL_DMA_Abort+0x258>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01d      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a21      	ldr	r2, [pc, #132]	@ (8002250 <HAL_DMA_Abort+0x25c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d018      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002254 <HAL_DMA_Abort+0x260>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1e      	ldr	r2, [pc, #120]	@ (8002258 <HAL_DMA_Abort+0x264>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <HAL_DMA_Abort+0x268>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_DMA_Abort+0x26c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d004      	beq.n	8002202 <HAL_DMA_Abort+0x20e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_DMA_Abort+0x270>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d132      	bne.n	8002268 <HAL_DMA_Abort+0x274>
 8002202:	2301      	movs	r3, #1
 8002204:	e031      	b.n	800226a <HAL_DMA_Abort+0x276>
 8002206:	bf00      	nop
 8002208:	40020010 	.word	0x40020010
 800220c:	40020028 	.word	0x40020028
 8002210:	40020040 	.word	0x40020040
 8002214:	40020058 	.word	0x40020058
 8002218:	40020070 	.word	0x40020070
 800221c:	40020088 	.word	0x40020088
 8002220:	400200a0 	.word	0x400200a0
 8002224:	400200b8 	.word	0x400200b8
 8002228:	40020410 	.word	0x40020410
 800222c:	40020428 	.word	0x40020428
 8002230:	40020440 	.word	0x40020440
 8002234:	40020458 	.word	0x40020458
 8002238:	40020470 	.word	0x40020470
 800223c:	40020488 	.word	0x40020488
 8002240:	400204a0 	.word	0x400204a0
 8002244:	400204b8 	.word	0x400204b8
 8002248:	58025408 	.word	0x58025408
 800224c:	5802541c 	.word	0x5802541c
 8002250:	58025430 	.word	0x58025430
 8002254:	58025444 	.word	0x58025444
 8002258:	58025458 	.word	0x58025458
 800225c:	5802546c 	.word	0x5802546c
 8002260:	58025480 	.word	0x58025480
 8002264:	58025494 	.word	0x58025494
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800227c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6d      	ldr	r2, [pc, #436]	@ (8002438 <HAL_DMA_Abort+0x444>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04a      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6b      	ldr	r2, [pc, #428]	@ (800243c <HAL_DMA_Abort+0x448>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d045      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6a      	ldr	r2, [pc, #424]	@ (8002440 <HAL_DMA_Abort+0x44c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d040      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a68      	ldr	r2, [pc, #416]	@ (8002444 <HAL_DMA_Abort+0x450>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d03b      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a67      	ldr	r2, [pc, #412]	@ (8002448 <HAL_DMA_Abort+0x454>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d036      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a65      	ldr	r2, [pc, #404]	@ (800244c <HAL_DMA_Abort+0x458>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a64      	ldr	r2, [pc, #400]	@ (8002450 <HAL_DMA_Abort+0x45c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d02c      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a62      	ldr	r2, [pc, #392]	@ (8002454 <HAL_DMA_Abort+0x460>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d027      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a61      	ldr	r2, [pc, #388]	@ (8002458 <HAL_DMA_Abort+0x464>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5f      	ldr	r2, [pc, #380]	@ (800245c <HAL_DMA_Abort+0x468>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01d      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002460 <HAL_DMA_Abort+0x46c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d018      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_DMA_Abort+0x470>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002468 <HAL_DMA_Abort+0x474>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a59      	ldr	r2, [pc, #356]	@ (800246c <HAL_DMA_Abort+0x478>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_DMA_Abort+0x47c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Abort+0x32a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a56      	ldr	r2, [pc, #344]	@ (8002474 <HAL_DMA_Abort+0x480>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <HAL_DMA_Abort+0x33c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e007      	b.n	8002340 <HAL_DMA_Abort+0x34c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002340:	e013      	b.n	800236a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002342:	f7ff fc93 	bl	8001c6c <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b05      	cmp	r3, #5
 800234e:	d90c      	bls.n	800236a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e12d      	b.n	80025c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e5      	bne.n	8002342 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2f      	ldr	r2, [pc, #188]	@ (8002438 <HAL_DMA_Abort+0x444>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <HAL_DMA_Abort+0x448>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2c      	ldr	r2, [pc, #176]	@ (8002440 <HAL_DMA_Abort+0x44c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2a      	ldr	r2, [pc, #168]	@ (8002444 <HAL_DMA_Abort+0x450>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a29      	ldr	r2, [pc, #164]	@ (8002448 <HAL_DMA_Abort+0x454>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <HAL_DMA_Abort+0x458>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a26      	ldr	r2, [pc, #152]	@ (8002450 <HAL_DMA_Abort+0x45c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a24      	ldr	r2, [pc, #144]	@ (8002454 <HAL_DMA_Abort+0x460>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <HAL_DMA_Abort+0x464>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a21      	ldr	r2, [pc, #132]	@ (800245c <HAL_DMA_Abort+0x468>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <HAL_DMA_Abort+0x46c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002464 <HAL_DMA_Abort+0x470>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <HAL_DMA_Abort+0x474>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1b      	ldr	r2, [pc, #108]	@ (800246c <HAL_DMA_Abort+0x478>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1a      	ldr	r2, [pc, #104]	@ (8002470 <HAL_DMA_Abort+0x47c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort+0x422>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_DMA_Abort+0x480>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_DMA_Abort+0x426>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_DMA_Abort+0x428>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02b      	beq.n	8002478 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	223f      	movs	r2, #63	@ 0x3f
 8002430:	409a      	lsls	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	e02a      	b.n	800248e <HAL_DMA_Abort+0x49a>
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4f      	ldr	r2, [pc, #316]	@ (80025d0 <HAL_DMA_Abort+0x5dc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d072      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4d      	ldr	r2, [pc, #308]	@ (80025d4 <HAL_DMA_Abort+0x5e0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d06d      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a4c      	ldr	r2, [pc, #304]	@ (80025d8 <HAL_DMA_Abort+0x5e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d068      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <HAL_DMA_Abort+0x5e8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d063      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a49      	ldr	r2, [pc, #292]	@ (80025e0 <HAL_DMA_Abort+0x5ec>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d05e      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a47      	ldr	r2, [pc, #284]	@ (80025e4 <HAL_DMA_Abort+0x5f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d059      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a46      	ldr	r2, [pc, #280]	@ (80025e8 <HAL_DMA_Abort+0x5f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d054      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a44      	ldr	r2, [pc, #272]	@ (80025ec <HAL_DMA_Abort+0x5f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04f      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a43      	ldr	r2, [pc, #268]	@ (80025f0 <HAL_DMA_Abort+0x5fc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04a      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a41      	ldr	r2, [pc, #260]	@ (80025f4 <HAL_DMA_Abort+0x600>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d045      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <HAL_DMA_Abort+0x604>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d040      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3e      	ldr	r2, [pc, #248]	@ (80025fc <HAL_DMA_Abort+0x608>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d03b      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a3d      	ldr	r2, [pc, #244]	@ (8002600 <HAL_DMA_Abort+0x60c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d036      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3b      	ldr	r2, [pc, #236]	@ (8002604 <HAL_DMA_Abort+0x610>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d031      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3a      	ldr	r2, [pc, #232]	@ (8002608 <HAL_DMA_Abort+0x614>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d02c      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a38      	ldr	r2, [pc, #224]	@ (800260c <HAL_DMA_Abort+0x618>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d027      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a37      	ldr	r2, [pc, #220]	@ (8002610 <HAL_DMA_Abort+0x61c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a35      	ldr	r2, [pc, #212]	@ (8002614 <HAL_DMA_Abort+0x620>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01d      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a34      	ldr	r2, [pc, #208]	@ (8002618 <HAL_DMA_Abort+0x624>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d018      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_DMA_Abort+0x628>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <HAL_DMA_Abort+0x62c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2f      	ldr	r2, [pc, #188]	@ (8002624 <HAL_DMA_Abort+0x630>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2e      	ldr	r2, [pc, #184]	@ (8002628 <HAL_DMA_Abort+0x634>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort+0x58a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2c      	ldr	r2, [pc, #176]	@ (800262c <HAL_DMA_Abort+0x638>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Abort+0x58e>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_DMA_Abort+0x590>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002590:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494

08002630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e237      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e22c      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5c      	ldr	r2, [pc, #368]	@ (80027d0 <HAL_DMA_Abort_IT+0x1a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5b      	ldr	r2, [pc, #364]	@ (80027d4 <HAL_DMA_Abort_IT+0x1a4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a59      	ldr	r2, [pc, #356]	@ (80027d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_DMA_Abort_IT+0x1ac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a56      	ldr	r2, [pc, #344]	@ (80027e0 <HAL_DMA_Abort_IT+0x1b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a55      	ldr	r2, [pc, #340]	@ (80027e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a53      	ldr	r2, [pc, #332]	@ (80027e8 <HAL_DMA_Abort_IT+0x1b8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a52      	ldr	r2, [pc, #328]	@ (80027ec <HAL_DMA_Abort_IT+0x1bc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a50      	ldr	r2, [pc, #320]	@ (80027f0 <HAL_DMA_Abort_IT+0x1c0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4f      	ldr	r2, [pc, #316]	@ (80027f4 <HAL_DMA_Abort_IT+0x1c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4d      	ldr	r2, [pc, #308]	@ (80027f8 <HAL_DMA_Abort_IT+0x1c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a4c      	ldr	r2, [pc, #304]	@ (80027fc <HAL_DMA_Abort_IT+0x1cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002800 <HAL_DMA_Abort_IT+0x1d0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a49      	ldr	r2, [pc, #292]	@ (8002804 <HAL_DMA_Abort_IT+0x1d4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_DMA_Abort_IT+0x1d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_DMA_Abort_IT+0x1dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Abort_IT+0xcc>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_DMA_Abort_IT+0xce>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8086 	beq.w	8002810 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <HAL_DMA_Abort_IT+0x1a0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d04a      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2e      	ldr	r2, [pc, #184]	@ (80027d4 <HAL_DMA_Abort_IT+0x1a4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d045      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2c      	ldr	r2, [pc, #176]	@ (80027d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d040      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2b      	ldr	r2, [pc, #172]	@ (80027dc <HAL_DMA_Abort_IT+0x1ac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d03b      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a29      	ldr	r2, [pc, #164]	@ (80027e0 <HAL_DMA_Abort_IT+0x1b0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d036      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a28      	ldr	r2, [pc, #160]	@ (80027e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d031      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a26      	ldr	r2, [pc, #152]	@ (80027e8 <HAL_DMA_Abort_IT+0x1b8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02c      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a25      	ldr	r2, [pc, #148]	@ (80027ec <HAL_DMA_Abort_IT+0x1bc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d027      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <HAL_DMA_Abort_IT+0x1c0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d022      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <HAL_DMA_Abort_IT+0x1c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d01d      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a20      	ldr	r2, [pc, #128]	@ (80027f8 <HAL_DMA_Abort_IT+0x1c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d018      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1f      	ldr	r2, [pc, #124]	@ (80027fc <HAL_DMA_Abort_IT+0x1cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_DMA_Abort_IT+0x1d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1c      	ldr	r2, [pc, #112]	@ (8002804 <HAL_DMA_Abort_IT+0x1d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1a      	ldr	r2, [pc, #104]	@ (8002808 <HAL_DMA_Abort_IT+0x1d8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_DMA_Abort_IT+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <HAL_DMA_Abort_IT+0x18e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e178      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e16f      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
 80027d0:	40020010 	.word	0x40020010
 80027d4:	40020028 	.word	0x40020028
 80027d8:	40020040 	.word	0x40020040
 80027dc:	40020058 	.word	0x40020058
 80027e0:	40020070 	.word	0x40020070
 80027e4:	40020088 	.word	0x40020088
 80027e8:	400200a0 	.word	0x400200a0
 80027ec:	400200b8 	.word	0x400200b8
 80027f0:	40020410 	.word	0x40020410
 80027f4:	40020428 	.word	0x40020428
 80027f8:	40020440 	.word	0x40020440
 80027fc:	40020458 	.word	0x40020458
 8002800:	40020470 	.word	0x40020470
 8002804:	40020488 	.word	0x40020488
 8002808:	400204a0 	.word	0x400204a0
 800280c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6c      	ldr	r2, [pc, #432]	@ (80029d8 <HAL_DMA_Abort_IT+0x3a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6b      	ldr	r2, [pc, #428]	@ (80029dc <HAL_DMA_Abort_IT+0x3ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d045      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_DMA_Abort_IT+0x3b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d040      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a68      	ldr	r2, [pc, #416]	@ (80029e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d03b      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a66      	ldr	r2, [pc, #408]	@ (80029e8 <HAL_DMA_Abort_IT+0x3b8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_DMA_Abort_IT+0x3bc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a63      	ldr	r2, [pc, #396]	@ (80029f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a62      	ldr	r2, [pc, #392]	@ (80029f4 <HAL_DMA_Abort_IT+0x3c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a60      	ldr	r2, [pc, #384]	@ (80029f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5f      	ldr	r2, [pc, #380]	@ (80029fc <HAL_DMA_Abort_IT+0x3cc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5d      	ldr	r2, [pc, #372]	@ (8002a00 <HAL_DMA_Abort_IT+0x3d0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_DMA_Abort_IT+0x3d4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <HAL_DMA_Abort_IT+0x3d8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a59      	ldr	r2, [pc, #356]	@ (8002a0c <HAL_DMA_Abort_IT+0x3dc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a57      	ldr	r2, [pc, #348]	@ (8002a10 <HAL_DMA_Abort_IT+0x3e0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a56      	ldr	r2, [pc, #344]	@ (8002a14 <HAL_DMA_Abort_IT+0x3e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_DMA_Abort_IT+0x2a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_DMA_Abort_IT+0x2b2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	@ (80029d8 <HAL_DMA_Abort_IT+0x3a8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d072      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3a      	ldr	r2, [pc, #232]	@ (80029dc <HAL_DMA_Abort_IT+0x3ac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d06d      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a39      	ldr	r2, [pc, #228]	@ (80029e0 <HAL_DMA_Abort_IT+0x3b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d068      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a37      	ldr	r2, [pc, #220]	@ (80029e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d063      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a36      	ldr	r2, [pc, #216]	@ (80029e8 <HAL_DMA_Abort_IT+0x3b8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d05e      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a34      	ldr	r2, [pc, #208]	@ (80029ec <HAL_DMA_Abort_IT+0x3bc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d059      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a33      	ldr	r2, [pc, #204]	@ (80029f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d054      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a31      	ldr	r2, [pc, #196]	@ (80029f4 <HAL_DMA_Abort_IT+0x3c4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04f      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a30      	ldr	r2, [pc, #192]	@ (80029f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04a      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2e      	ldr	r2, [pc, #184]	@ (80029fc <HAL_DMA_Abort_IT+0x3cc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d045      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a00 <HAL_DMA_Abort_IT+0x3d0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d040      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2b      	ldr	r2, [pc, #172]	@ (8002a04 <HAL_DMA_Abort_IT+0x3d4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d03b      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a08 <HAL_DMA_Abort_IT+0x3d8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d036      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	@ (8002a0c <HAL_DMA_Abort_IT+0x3dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <HAL_DMA_Abort_IT+0x3e0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d02c      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a25      	ldr	r2, [pc, #148]	@ (8002a14 <HAL_DMA_Abort_IT+0x3e4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d027      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a24      	ldr	r2, [pc, #144]	@ (8002a18 <HAL_DMA_Abort_IT+0x3e8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a22      	ldr	r2, [pc, #136]	@ (8002a1c <HAL_DMA_Abort_IT+0x3ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01d      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a21      	ldr	r2, [pc, #132]	@ (8002a20 <HAL_DMA_Abort_IT+0x3f0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_DMA_Abort_IT+0x3f4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <HAL_DMA_Abort_IT+0x3f8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <HAL_DMA_Abort_IT+0x3fc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_DMA_Abort_IT+0x400>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	@ (8002a34 <HAL_DMA_Abort_IT+0x404>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d132      	bne.n	8002a38 <HAL_DMA_Abort_IT+0x408>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e031      	b.n	8002a3a <HAL_DMA_Abort_IT+0x40a>
 80029d6:	bf00      	nop
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
 8002a18:	58025408 	.word	0x58025408
 8002a1c:	5802541c 	.word	0x5802541c
 8002a20:	58025430 	.word	0x58025430
 8002a24:	58025444 	.word	0x58025444
 8002a28:	58025458 	.word	0x58025458
 8002a2c:	5802546c 	.word	0x5802546c
 8002a30:	58025480 	.word	0x58025480
 8002a34:	58025494 	.word	0x58025494
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop

08002abc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b098      	sub	sp, #96	@ 0x60
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002ac4:	4a84      	ldr	r2, [pc, #528]	@ (8002cd8 <HAL_FDCAN_Init+0x21c>)
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4611      	mov	r1, r2
 8002acc:	224c      	movs	r2, #76	@ 0x4c
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f007 fd52 	bl	800a578 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1c6      	b.n	8002e6c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cdc <HAL_FDCAN_Init+0x220>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d106      	bne.n	8002af6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fce6 	bl	80014dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0210 	bic.w	r2, r2, #16
 8002b1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7ff f8a4 	bl	8001c6c <HAL_GetTick>
 8002b24:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b26:	e014      	b.n	8002b52 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b28:	f7ff f8a0 	bl	8001c6c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b0a      	cmp	r3, #10
 8002b34:	d90d      	bls.n	8002b52 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e18c      	b.n	8002e6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d0e3      	beq.n	8002b28 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b70:	f7ff f87c 	bl	8001c6c <HAL_GetTick>
 8002b74:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b76:	e014      	b.n	8002ba2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b78:	f7ff f878 	bl	8001c6c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b0a      	cmp	r3, #10
 8002b84:	d90d      	bls.n	8002ba2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e164      	b.n	8002e6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0e3      	beq.n	8002b78 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0202 	orr.w	r2, r2, #2
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7c1b      	ldrb	r3, [r3, #16]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e007      	b.n	8002bea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7c5b      	ldrb	r3, [r3, #17]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	e007      	b.n	8002c14 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c12:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7c9b      	ldrb	r3, [r3, #18]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	e007      	b.n	8002c3e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c3c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002c62:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0210 	bic.w	r2, r2, #16
 8002c72:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d108      	bne.n	8002c8e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0204 	orr.w	r2, r2, #4
 8002c8a:	619a      	str	r2, [r3, #24]
 8002c8c:	e030      	b.n	8002cf0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02c      	beq.n	8002cf0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d020      	beq.n	8002ce0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0210 	orr.w	r2, r2, #16
 8002cbc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d114      	bne.n	8002cf0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	619a      	str	r2, [r3, #24]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_FDCAN_Init+0x234>
 8002cd8:	0800aeb0 	.word	0x0800aeb0
 8002cdc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d00:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d18:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d1a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d24:	d115      	bne.n	8002d52 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	3b01      	subs	r3, #1
 8002d32:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d34:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d3e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	3b01      	subs	r3, #1
 8002d48:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d4e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d50:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	4413      	add	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002d86:	f023 0107 	bic.w	r1, r3, #7
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3360      	adds	r3, #96	@ 0x60
 8002d92:	443b      	add	r3, r7
 8002d94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d011      	beq.n	8002dce <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002db2:	f023 0107 	bic.w	r1, r3, #7
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3360      	adds	r3, #96	@ 0x60
 8002dbe:	443b      	add	r3, r7
 8002dc0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002dde:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3360      	adds	r3, #96	@ 0x60
 8002dea:	443b      	add	r3, r7
 8002dec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002df0:	011a      	lsls	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002e0c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	3360      	adds	r3, #96	@ 0x60
 8002e18:	443b      	add	r3, r7
 8002e1a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_FDCAN_Init+0x3b8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d107      	bne.n	8002e44 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f022 0203 	bic.w	r2, r2, #3
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fd81 	bl	8003964 <FDCAN_CalcultateRamBlockAddresses>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002e68:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3760      	adds	r7, #96	@ 0x60
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	4000a000 	.word	0x4000a000

08002e78 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d111      	bne.n	8002eb0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e008      	b.n	8002ec2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d141      	bne.n	8002f6a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002eee:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e038      	b.n	8002f7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e026      	b.n	8002f7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fe93 	bl	8003c70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e008      	b.n	8002f7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	@ 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002f9c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002f9e:	7efb      	ldrb	r3, [r7, #27]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f040 8149 	bne.w	8003238 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d14c      	bne.n	8003046 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002fb4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e13c      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fe6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e12a      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003004:	d10a      	bne.n	800301c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800300e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003012:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003016:	d101      	bne.n	800301c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003018:	2301      	movs	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	69f9      	ldr	r1, [r7, #28]
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
 8003044:	e068      	b.n	8003118 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b41      	cmp	r3, #65	@ 0x41
 800304a:	d14c      	bne.n	80030e6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003054:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0ec      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003086:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0da      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a4:	d10a      	bne.n	80030bc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b6:	d101      	bne.n	80030bc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80030b8:	2301      	movs	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d8:	69f9      	ldr	r1, [r7, #28]
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	e018      	b.n	8003118 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d309      	bcc.n	8003104 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0a2      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e005      	b.n	8003148 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	3304      	adds	r3, #4
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e1b      	lsrs	r3, r3, #24
 800319c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0fda      	lsrs	r2, r3, #31
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	3304      	adds	r3, #4
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	e00a      	b.n	80031d4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	441a      	add	r2, r3
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	440b      	add	r3, r1
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	3301      	adds	r3, #1
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	461a      	mov	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d3ec      	bcc.n	80031be <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d105      	bne.n	80031f6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80031f4:	e01e      	b.n	8003234 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b41      	cmp	r3, #65	@ 0x41
 80031fa:	d105      	bne.n	8003208 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003206:	e015      	b.n	8003234 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b1f      	cmp	r3, #31
 800320c:	d808      	bhi.n	8003220 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800321e:	e009      	b.n	8003234 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e008      	b.n	800324a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323e:	f043 0208 	orr.w	r2, r3, #8
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	372c      	adds	r7, #44	@ 0x2c
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	0800af0c 	.word	0x0800af0c

0800325c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800326e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <HAL_FDCAN_ActivateNotification+0x20>
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d155      	bne.n	8003328 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	65da      	str	r2, [r3, #92]	@ 0x5c
 800329a:	e014      	b.n	80032c6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d108      	bne.n	80032be <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0202 	orr.w	r2, r2, #2
 80032ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032bc:	e003      	b.n	80032c6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2203      	movs	r2, #3
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	430a      	orrs	r2, r1
 80032e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <HAL_FDCAN_ActivateNotification+0xec>)
 800330c:	4013      	ands	r3, r2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	430b      	orrs	r3, r1
 8003314:	6553      	str	r3, [r2, #84]	@ 0x54
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0f9b      	lsrs	r3, r3, #30
 800331e:	490b      	ldr	r1, [pc, #44]	@ (800334c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e008      	b.n	800333a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	3fcfffff 	.word	0x3fcfffff
 800334c:	4000a800 	.word	0x4000a800

08003350 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b096      	sub	sp, #88	@ 0x58
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003358:	4b9a      	ldr	r3, [pc, #616]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	079b      	lsls	r3, r3, #30
 800335e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003360:	4b98      	ldr	r3, [pc, #608]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	079b      	lsls	r3, r3, #30
 8003366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003368:	4013      	ands	r3, r2
 800336a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003372:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003376:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003380:	4013      	ands	r3, r2
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003398:	4013      	ands	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b0:	4013      	ands	r3, r2
 80033b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c8:	4013      	ands	r3, r2
 80033ca:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80033d6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033e0:	4013      	ands	r3, r2
 80033e2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003414:	651a      	str	r2, [r3, #80]	@ 0x50
 8003416:	4b6b      	ldr	r3, [pc, #428]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fa54 	bl	80038ca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003424:	0a9b      	lsrs	r3, r3, #10
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01d      	beq.n	800346a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	0a9b      	lsrs	r3, r3, #10
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800344c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800344e:	4013      	ands	r3, r2
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800345a:	651a      	str	r2, [r3, #80]	@ 0x50
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003462:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa07 	bl	8003878 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003476:	4b54      	ldr	r3, [pc, #336]	@ (80035c8 <HAL_FDCAN_IRQHandler+0x278>)
 8003478:	400b      	ands	r3, r1
 800347a:	6513      	str	r3, [r2, #80]	@ 0x50
 800347c:	4a51      	ldr	r2, [pc, #324]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	0f9b      	lsrs	r3, r3, #30
 8003482:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003484:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9c0 	bl	800380c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800348c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003498:	4b4b      	ldr	r3, [pc, #300]	@ (80035c8 <HAL_FDCAN_IRQHandler+0x278>)
 800349a:	400b      	ands	r3, r1
 800349c:	6513      	str	r3, [r2, #80]	@ 0x50
 800349e:	4a49      	ldr	r2, [pc, #292]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 80034a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a2:	0f9b      	lsrs	r3, r3, #30
 80034a4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80034a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9ba 	bl	8003822 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80034ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80034ba:	4b43      	ldr	r3, [pc, #268]	@ (80035c8 <HAL_FDCAN_IRQHandler+0x278>)
 80034bc:	400b      	ands	r3, r1
 80034be:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c0:	4a40      	ldr	r2, [pc, #256]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 80034c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c4:	0f9b      	lsrs	r3, r3, #30
 80034c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80034c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f9b8 	bl	8001840 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80034d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_FDCAN_IRQHandler+0x278>)
 80034de:	400b      	ands	r3, r1
 80034e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e2:	4a38      	ldr	r2, [pc, #224]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 80034e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034e6:	0f9b      	lsrs	r3, r3, #30
 80034e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80034ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9a3 	bl	8003838 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80034f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f4:	0adb      	lsrs	r3, r3, #11
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003500:	0adb      	lsrs	r3, r3, #11
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003512:	651a      	str	r2, [r3, #80]	@ 0x50
 8003514:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f997 	bl	800384e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003522:	0a5b      	lsrs	r3, r3, #9
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01d      	beq.n	8003568 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003540:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354c:	4013      	ands	r3, r2
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003558:	651a      	str	r2, [r3, #80]	@ 0x50
 800355a:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003560:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f97d 	bl	8003862 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356a:	0cdb      	lsrs	r3, r3, #19
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	0cdb      	lsrs	r3, r3, #19
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003588:	651a      	str	r2, [r3, #80]	@ 0x50
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f97c 	bl	800388e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80035a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80035b8:	4b02      	ldr	r3, [pc, #8]	@ (80035c4 <HAL_FDCAN_IRQHandler+0x274>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	e004      	b.n	80035cc <HAL_FDCAN_IRQHandler+0x27c>
 80035c2:	bf00      	nop
 80035c4:	4000a800 	.word	0x4000a800
 80035c8:	3fcfffff 	.word	0x3fcfffff
 80035cc:	f000 f969 	bl	80038a2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80035d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80035dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80035f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80035f2:	4b83      	ldr	r3, [pc, #524]	@ (8003800 <HAL_FDCAN_IRQHandler+0x4b0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f95c 	bl	80038b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80035fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003600:	0c5b      	lsrs	r3, r3, #17
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	0c5b      	lsrs	r3, r3, #17
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00f      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800361e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003620:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800362c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003642:	4b70      	ldr	r3, [pc, #448]	@ (8003804 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003644:	400b      	ands	r3, r1
 8003646:	6513      	str	r3, [r2, #80]	@ 0x50
 8003648:	4a6d      	ldr	r2, [pc, #436]	@ (8003800 <HAL_FDCAN_IRQHandler+0x4b0>)
 800364a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364c:	0f9b      	lsrs	r3, r3, #30
 800364e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f94d 	bl	80038f2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003664:	4b67      	ldr	r3, [pc, #412]	@ (8003804 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003666:	400b      	ands	r3, r1
 8003668:	6513      	str	r3, [r2, #80]	@ 0x50
 800366a:	4a65      	ldr	r2, [pc, #404]	@ (8003800 <HAL_FDCAN_IRQHandler+0x4b0>)
 800366c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366e:	0f9b      	lsrs	r3, r3, #30
 8003670:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a60      	ldr	r2, [pc, #384]	@ (8003808 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	f040 80ac 	bne.w	80037e6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a4 	beq.w	80037e6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b2:	4013      	ands	r3, r2
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ca:	4013      	ands	r3, r2
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	4013      	ands	r3, r2
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80036f0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	4013      	ands	r3, r2
 80036fc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003708:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	4013      	ands	r3, r2
 8003714:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003732:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003734:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8e6 	bl	8003908 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003748:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800374a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8e6 	bl	800391e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01a      	beq.n	8003794 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d014      	beq.n	8003794 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b29b      	uxth	r3, r3
 8003774:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003780:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2240      	movs	r2, #64	@ 0x40
 8003788:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	6939      	ldr	r1, [r7, #16]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8d0 	bl	8003934 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80037a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8d1 	bl	800394c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f874 	bl	80038de <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80037f6:	bf00      	nop
 80037f8:	3758      	adds	r7, #88	@ 0x58
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	4000a800 	.word	0x4000a800
 8003804:	3fcfffff 	.word	0x3fcfffff
 8003808:	4000a000 	.word	0x4000a000

0800380c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800397a:	4ba7      	ldr	r3, [pc, #668]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800397c:	4013      	ands	r3, r2
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	0091      	lsls	r1, r2, #2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	430b      	orrs	r3, r1
 8003988:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003994:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	041a      	lsls	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039ba:	4b97      	ldr	r3, [pc, #604]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	0091      	lsls	r1, r2, #2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4413      	add	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80039fc:	4b86      	ldr	r3, [pc, #536]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	0091      	lsls	r1, r2, #2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	041a      	lsls	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4413      	add	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a44:	4b74      	ldr	r3, [pc, #464]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	0091      	lsls	r1, r2, #2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4413      	add	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003a8c:	4b62      	ldr	r3, [pc, #392]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	0091      	lsls	r1, r2, #2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003ab8:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	0091      	lsls	r1, r2, #2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	4413      	add	r3, r2
 8003af0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	0091      	lsls	r1, r2, #2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	430b      	orrs	r3, r1
 8003b08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b14:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b30:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b38:	061a      	lsls	r2, r3, #24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b48:	4b34      	ldr	r3, [pc, #208]	@ (8003c1c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009a      	lsls	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003c00:	441a      	add	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	4a04      	ldr	r2, [pc, #16]	@ (8003c20 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d915      	bls.n	8003c40 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003c14:	e006      	b.n	8003c24 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003c16:	bf00      	nop
 8003c18:	ffff0003 	.word	0xffff0003
 8003c1c:	10002b00 	.word	0x10002b00
 8003c20:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c2a:	f043 0220 	orr.w	r2, r3, #32
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e010      	b.n	8003c62 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e005      	b.n	8003c54 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d3f3      	bcc.n	8003c48 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	@ 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003c8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e00a      	b.n	8003cb2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003ca4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003caa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cb0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cbc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003cc2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003cc8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e020      	b.n	8003d4a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3302      	adds	r3, #2
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d20:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	440b      	add	r3, r1
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d2e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	440a      	add	r2, r1
 8003d36:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d38:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3304      	adds	r3, #4
 8003d42:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3304      	adds	r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <FDCAN_CopyMessageToRAM+0xf8>)
 8003d50:	5cd3      	ldrb	r3, [r2, r3]
 8003d52:	461a      	mov	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d3d6      	bcc.n	8003d08 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	3724      	adds	r7, #36	@ 0x24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	0800af0c 	.word	0x0800af0c

08003d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	@ 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d7a:	4b89      	ldr	r3, [pc, #548]	@ (8003fa0 <HAL_GPIO_Init+0x234>)
 8003d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d7e:	e194      	b.n	80040aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8186 	beq.w	80040a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d005      	beq.n	8003db0 <HAL_GPIO_Init+0x44>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d130      	bne.n	8003e12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de6:	2201      	movs	r2, #1
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0201 	and.w	r2, r3, #1
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d017      	beq.n	8003e4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d123      	bne.n	8003ea2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80e0 	beq.w	80040a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <HAL_GPIO_Init+0x238>)
 8003ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <HAL_GPIO_Init+0x238>)
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa4 <HAL_GPIO_Init+0x238>)
 8003ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f02:	4a29      	ldr	r2, [pc, #164]	@ (8003fa8 <HAL_GPIO_Init+0x23c>)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	220f      	movs	r2, #15
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a20      	ldr	r2, [pc, #128]	@ (8003fac <HAL_GPIO_Init+0x240>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d052      	beq.n	8003fd4 <HAL_GPIO_Init+0x268>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb0 <HAL_GPIO_Init+0x244>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_GPIO_Init+0x22e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_GPIO_Init+0x248>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <HAL_GPIO_Init+0x22a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_GPIO_Init+0x24c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d025      	beq.n	8003f92 <HAL_GPIO_Init+0x226>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_GPIO_Init+0x250>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <HAL_GPIO_Init+0x222>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_GPIO_Init+0x254>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x21e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc4 <HAL_GPIO_Init+0x258>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x21a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a19      	ldr	r2, [pc, #100]	@ (8003fc8 <HAL_GPIO_Init+0x25c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x216>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <HAL_GPIO_Init+0x260>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <HAL_GPIO_Init+0x264>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x20e>
 8003f76:	2309      	movs	r3, #9
 8003f78:	e02d      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	e02b      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	e029      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f82:	2307      	movs	r3, #7
 8003f84:	e027      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f86:	2306      	movs	r3, #6
 8003f88:	e025      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f8a:	2305      	movs	r3, #5
 8003f8c:	e023      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e021      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e01f      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e01d      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01b      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f9e:	bf00      	nop
 8003fa0:	58000080 	.word	0x58000080
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	58000400 	.word	0x58000400
 8003fac:	58020000 	.word	0x58020000
 8003fb0:	58020400 	.word	0x58020400
 8003fb4:	58020800 	.word	0x58020800
 8003fb8:	58020c00 	.word	0x58020c00
 8003fbc:	58021000 	.word	0x58021000
 8003fc0:	58021400 	.word	0x58021400
 8003fc4:	58021800 	.word	0x58021800
 8003fc8:	58021c00 	.word	0x58021c00
 8003fcc:	58022000 	.word	0x58022000
 8003fd0:	58022400 	.word	0x58022400
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	f002 0203 	and.w	r2, r2, #3
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	4093      	lsls	r3, r2
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe6:	4938      	ldr	r1, [pc, #224]	@ (80040c8 <HAL_GPIO_Init+0x35c>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800401a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f ae63 	bne.w	8003d80 <HAL_GPIO_Init+0x14>
  }
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	3724      	adds	r7, #36	@ 0x24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	58000400 	.word	0x58000400

080040cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
 80040d8:	4613      	mov	r3, r2
 80040da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040e8:	e003      	b.n	80040f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	041a      	lsls	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004108:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_PWREx_ConfigSupply+0x70>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d00a      	beq.n	800412a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004114:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <HAL_PWREx_ConfigSupply+0x70>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01f      	b.n	8004166 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e01d      	b.n	8004166 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800412a:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_PWREx_ConfigSupply+0x70>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 0207 	bic.w	r2, r3, #7
 8004132:	490f      	ldr	r1, [pc, #60]	@ (8004170 <HAL_PWREx_ConfigSupply+0x70>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800413a:	f7fd fd97 	bl	8001c6c <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004140:	e009      	b.n	8004156 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004142:	f7fd fd93 	bl	8001c6c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004150:	d901      	bls.n	8004156 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e007      	b.n	8004166 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <HAL_PWREx_ConfigSupply+0x70>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004162:	d1ee      	bne.n	8004142 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	58024800 	.word	0x58024800

08004174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08c      	sub	sp, #48	@ 0x30
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f000 bc48 	b.w	8004a18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8088 	beq.w	80042a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b99      	ldr	r3, [pc, #612]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041a0:	4b96      	ldr	r3, [pc, #600]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d007      	beq.n	80041bc <HAL_RCC_OscConfig+0x48>
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	2b18      	cmp	r3, #24
 80041b0:	d111      	bne.n	80041d6 <HAL_RCC_OscConfig+0x62>
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b8f      	ldr	r3, [pc, #572]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d06d      	beq.n	80042a4 <HAL_RCC_OscConfig+0x130>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d169      	bne.n	80042a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f000 bc21 	b.w	8004a18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x7a>
 80041e0:	4b86      	ldr	r3, [pc, #536]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a85      	ldr	r2, [pc, #532]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x9c>
 80041f6:	4b81      	ldr	r3, [pc, #516]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a80      	ldr	r2, [pc, #512]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b7e      	ldr	r3, [pc, #504]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7d      	ldr	r2, [pc, #500]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0xc0>
 800421a:	4b78      	ldr	r3, [pc, #480]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a77      	ldr	r2, [pc, #476]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b75      	ldr	r3, [pc, #468]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a74      	ldr	r2, [pc, #464]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 8004234:	4b71      	ldr	r3, [pc, #452]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a70      	ldr	r2, [pc, #448]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b6e      	ldr	r3, [pc, #440]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6d      	ldr	r2, [pc, #436]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800424a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fd0a 	bl	8001c6c <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd fd06 	bl	8001c6c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e3d4      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800426e:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd fcf6 	bl	8001c6c <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd fcf2 	bl	8001c6c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	@ 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e3c0      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004296:	4b59      	ldr	r3, [pc, #356]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x110>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80ca 	beq.w	8004448 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b4:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042be:	4b4f      	ldr	r3, [pc, #316]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_RCC_OscConfig+0x166>
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2b18      	cmp	r3, #24
 80042ce:	d156      	bne.n	800437e <HAL_RCC_OscConfig+0x20a>
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d151      	bne.n	800437e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042da:	4b48      	ldr	r3, [pc, #288]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x17e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e392      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042f2:	4b42      	ldr	r3, [pc, #264]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0219 	bic.w	r2, r3, #25
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	493f      	ldr	r1, [pc, #252]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fcb2 	bl	8001c6c <HAL_GetTick>
 8004308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430c:	f7fd fcae 	bl	8001c6c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e37c      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431e:	4b37      	ldr	r3, [pc, #220]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	f7fd fccf 	bl	8001ccc <HAL_GetREVID>
 800432e:	4603      	mov	r3, r0
 8004330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004334:	4293      	cmp	r3, r2
 8004336:	d817      	bhi.n	8004368 <HAL_RCC_OscConfig+0x1f4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d108      	bne.n	8004352 <HAL_RCC_OscConfig+0x1de>
 8004340:	4b2e      	ldr	r3, [pc, #184]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004348:	4a2c      	ldr	r2, [pc, #176]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004350:	e07a      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b2a      	ldr	r3, [pc, #168]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	031b      	lsls	r3, r3, #12
 8004360:	4926      	ldr	r1, [pc, #152]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004366:	e06f      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	4921      	ldr	r1, [pc, #132]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437c:	e064      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d047      	beq.n	8004416 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0219 	bic.w	r2, r3, #25
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	491a      	ldr	r1, [pc, #104]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fc68 	bl	8001c6c <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fd fc64 	bl	8001c6c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e332      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043be:	f7fd fc85 	bl	8001ccc <HAL_GetREVID>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d819      	bhi.n	8004400 <HAL_RCC_OscConfig+0x28c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d108      	bne.n	80043e6 <HAL_RCC_OscConfig+0x272>
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043dc:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043e2:	6053      	str	r3, [r2, #4]
 80043e4:	e030      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	4901      	ldr	r1, [pc, #4]	@ (80043fc <HAL_RCC_OscConfig+0x288>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 80043fa:	e025      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
 80043fc:	58024400 	.word	0x58024400
 8004400:	4b9a      	ldr	r3, [pc, #616]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	4997      	ldr	r1, [pc, #604]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e018      	b.n	8004448 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b95      	ldr	r3, [pc, #596]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a94      	ldr	r2, [pc, #592]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd fc23 	bl	8001c6c <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442a:	f7fd fc1f 	bl	8001c6c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e2ed      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800443c:	4b8b      	ldr	r3, [pc, #556]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a9 	beq.w	80045a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004456:	4b85      	ldr	r3, [pc, #532]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004460:	4b82      	ldr	r3, [pc, #520]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d007      	beq.n	800447c <HAL_RCC_OscConfig+0x308>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b18      	cmp	r3, #24
 8004470:	d13a      	bne.n	80044e8 <HAL_RCC_OscConfig+0x374>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d135      	bne.n	80044e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800447c:	4b7b      	ldr	r3, [pc, #492]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_OscConfig+0x320>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b80      	cmp	r3, #128	@ 0x80
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e2c1      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004494:	f7fd fc1a 	bl	8001ccc <HAL_GetREVID>
 8004498:	4603      	mov	r3, r0
 800449a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800449e:	4293      	cmp	r3, r2
 80044a0:	d817      	bhi.n	80044d2 <HAL_RCC_OscConfig+0x35e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0x348>
 80044aa:	4b70      	ldr	r3, [pc, #448]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80044b2:	4a6e      	ldr	r2, [pc, #440]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ba:	e075      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044bc:	4b6b      	ldr	r3, [pc, #428]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	069b      	lsls	r3, r3, #26
 80044ca:	4968      	ldr	r1, [pc, #416]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044d0:	e06a      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d2:	4b66      	ldr	r3, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	4962      	ldr	r1, [pc, #392]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044e6:	e05f      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d042      	beq.n	8004576 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044f0:	4b5e      	ldr	r3, [pc, #376]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5d      	ldr	r2, [pc, #372]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fbb6 	bl	8001c6c <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004504:	f7fd fbb2 	bl	8001c6c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e280      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004516:	4b55      	ldr	r3, [pc, #340]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004522:	f7fd fbd3 	bl	8001ccc <HAL_GetREVID>
 8004526:	4603      	mov	r3, r0
 8004528:	f241 0203 	movw	r2, #4099	@ 0x1003
 800452c:	4293      	cmp	r3, r2
 800452e:	d817      	bhi.n	8004560 <HAL_RCC_OscConfig+0x3ec>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	2b20      	cmp	r3, #32
 8004536:	d108      	bne.n	800454a <HAL_RCC_OscConfig+0x3d6>
 8004538:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004540:	4a4a      	ldr	r2, [pc, #296]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004546:	6053      	str	r3, [r2, #4]
 8004548:	e02e      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
 800454a:	4b48      	ldr	r3, [pc, #288]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	069b      	lsls	r3, r3, #26
 8004558:	4944      	ldr	r1, [pc, #272]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
 800455e:	e023      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
 8004560:	4b42      	ldr	r3, [pc, #264]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	493f      	ldr	r1, [pc, #252]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	60cb      	str	r3, [r1, #12]
 8004574:	e018      	b.n	80045a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004576:	4b3d      	ldr	r3, [pc, #244]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3c      	ldr	r2, [pc, #240]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800457c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fb73 	bl	8001c6c <HAL_GetTick>
 8004586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800458a:	f7fd fb6f 	bl	8001c6c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e23d      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800459c:	4b33      	ldr	r3, [pc, #204]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d036      	beq.n	8004622 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d019      	beq.n	80045f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c0:	4a2a      	ldr	r2, [pc, #168]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fd fb50 	bl	8001c6c <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d0:	f7fd fb4c 	bl	8001c6c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e21a      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x45c>
 80045ee:	e018      	b.n	8004622 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f0:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fd fb36 	bl	8001c6c <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd fb32 	bl	8001c6c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e200      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d039      	beq.n	80046a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01c      	beq.n	8004670 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800463c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004642:	f7fd fb13 	bl	8001c6c <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464a:	f7fd fb0f 	bl	8001c6c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1dd      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800465c:	4b03      	ldr	r3, [pc, #12]	@ (800466c <HAL_RCC_OscConfig+0x4f8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x4d6>
 8004668:	e01b      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
 800466a:	bf00      	nop
 800466c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004670:	4b9b      	ldr	r3, [pc, #620]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a9a      	ldr	r2, [pc, #616]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800467a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800467c:	f7fd faf6 	bl	8001c6c <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004684:	f7fd faf2 	bl	8001c6c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1c0      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004696:	4b92      	ldr	r3, [pc, #584]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8081 	beq.w	80047b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046b0:	4b8c      	ldr	r3, [pc, #560]	@ (80048e4 <HAL_RCC_OscConfig+0x770>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a8b      	ldr	r2, [pc, #556]	@ (80048e4 <HAL_RCC_OscConfig+0x770>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046bc:	f7fd fad6 	bl	8001c6c <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c4:	f7fd fad2 	bl	8001c6c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	@ 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e1a0      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046d6:	4b83      	ldr	r3, [pc, #524]	@ (80048e4 <HAL_RCC_OscConfig+0x770>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d106      	bne.n	80046f8 <HAL_RCC_OscConfig+0x584>
 80046ea:	4b7d      	ldr	r3, [pc, #500]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ee:	4a7c      	ldr	r2, [pc, #496]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f6:	e02d      	b.n	8004754 <HAL_RCC_OscConfig+0x5e0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10c      	bne.n	800471a <HAL_RCC_OscConfig+0x5a6>
 8004700:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a76      	ldr	r2, [pc, #472]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	@ 0x70
 800470c:	4b74      	ldr	r3, [pc, #464]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	4a73      	ldr	r2, [pc, #460]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	@ 0x70
 8004718:	e01c      	b.n	8004754 <HAL_RCC_OscConfig+0x5e0>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b05      	cmp	r3, #5
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x5c8>
 8004722:	4b6f      	ldr	r3, [pc, #444]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	4a6e      	ldr	r2, [pc, #440]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	@ 0x70
 800472e:	4b6c      	ldr	r3, [pc, #432]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	4a6b      	ldr	r2, [pc, #428]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	@ 0x70
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0x5e0>
 800473c:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004740:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	6713      	str	r3, [r2, #112]	@ 0x70
 8004748:	4b65      	ldr	r3, [pc, #404]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	4a64      	ldr	r2, [pc, #400]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800474e:	f023 0304 	bic.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd fa86 	bl	8001c6c <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004762:	e00a      	b.n	800477a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fd fa82 	bl	8001c6c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e14e      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477a:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ee      	beq.n	8004764 <HAL_RCC_OscConfig+0x5f0>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fa70 	bl	8001c6c <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd fa6c 	bl	8001c6c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e138      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047a6:	4b4e      	ldr	r3, [pc, #312]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ee      	bne.n	8004790 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 812d 	beq.w	8004a16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047bc:	4b48      	ldr	r3, [pc, #288]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c4:	2b18      	cmp	r3, #24
 80047c6:	f000 80bd 	beq.w	8004944 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	f040 809e 	bne.w	8004910 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fd fa44 	bl	8001c6c <HAL_GetTick>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fd fa40 	bl	8001c6c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e10e      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047fa:	4b39      	ldr	r3, [pc, #228]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004806:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800480a:	4b37      	ldr	r3, [pc, #220]	@ (80048e8 <HAL_RCC_OscConfig+0x774>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	430a      	orrs	r2, r1
 800481a:	4931      	ldr	r1, [pc, #196]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	3b01      	subs	r3, #1
 8004826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	3b01      	subs	r3, #1
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	b29b      	uxth	r3, r3
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	3b01      	subs	r3, #1
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	3b01      	subs	r3, #1
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004850:	4923      	ldr	r1, [pc, #140]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004856:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4a21      	ldr	r2, [pc, #132]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004862:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004866:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <HAL_RCC_OscConfig+0x778>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800486e:	00d2      	lsls	r2, r2, #3
 8004870:	491b      	ldr	r1, [pc, #108]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f023 020c 	bic.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	4917      	ldr	r1, [pc, #92]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	f023 0202 	bic.w	r2, r3, #2
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	4912      	ldr	r1, [pc, #72]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800489a:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	4a10      	ldr	r2, [pc, #64]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a6:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4a0d      	ldr	r2, [pc, #52]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	4a0a      	ldr	r2, [pc, #40]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048be:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	4a07      	ldr	r2, [pc, #28]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a04      	ldr	r2, [pc, #16]	@ (80048e0 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd f9c9 	bl	8001c6c <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048dc:	e011      	b.n	8004902 <HAL_RCC_OscConfig+0x78e>
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400
 80048e4:	58024800 	.word	0x58024800
 80048e8:	fffffc0c 	.word	0xfffffc0c
 80048ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd f9bc 	bl	8001c6c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e08a      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004902:	4b47      	ldr	r3, [pc, #284]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x77c>
 800490e:	e082      	b.n	8004a16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004910:	4b43      	ldr	r3, [pc, #268]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a42      	ldr	r2, [pc, #264]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800491a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd f9a6 	bl	8001c6c <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd f9a2 	bl	8001c6c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e070      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004936:	4b3a      	ldr	r3, [pc, #232]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x7b0>
 8004942:	e068      	b.n	8004a16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004944:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800494a:	4b35      	ldr	r3, [pc, #212]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	2b01      	cmp	r3, #1
 8004956:	d031      	beq.n	80049bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f003 0203 	and.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d12a      	bne.n	80049bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d122      	bne.n	80049bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d11a      	bne.n	80049bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d111      	bne.n	80049bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0e1b      	lsrs	r3, r3, #24
 80049ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e02b      	b.n	8004a18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049c0:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	08db      	lsrs	r3, r3, #3
 80049c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d01f      	beq.n	8004a16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049d6:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049da:	4a11      	ldr	r2, [pc, #68]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e2:	f7fd f943 	bl	8001c6c <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80049e8:	bf00      	nop
 80049ea:	f7fd f93f 	bl	8001c6c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d0f9      	beq.n	80049ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 80049f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <HAL_RCC_OscConfig+0x8b0>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a02:	00d2      	lsls	r2, r2, #3
 8004a04:	4906      	ldr	r1, [pc, #24]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <HAL_RCC_OscConfig+0x8ac>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3730      	adds	r7, #48	@ 0x30
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	58024400 	.word	0x58024400
 8004a24:	ffff0007 	.word	0xffff0007

08004a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e19c      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d910      	bls.n	8004a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b87      	ldr	r3, [pc, #540]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 020f 	bic.w	r2, r3, #15
 8004a52:	4985      	ldr	r1, [pc, #532]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5a:	4b83      	ldr	r3, [pc, #524]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e184      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d908      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a88:	4b78      	ldr	r3, [pc, #480]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	4975      	ldr	r1, [pc, #468]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	4b70      	ldr	r3, [pc, #448]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d908      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	496a      	ldr	r1, [pc, #424]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	4b64      	ldr	r3, [pc, #400]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d908      	bls.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ae4:	4b61      	ldr	r3, [pc, #388]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	495e      	ldr	r1, [pc, #376]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d010      	beq.n	8004b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d908      	bls.n	8004b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b12:	4b56      	ldr	r3, [pc, #344]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4953      	ldr	r1, [pc, #332]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4b4d      	ldr	r3, [pc, #308]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d908      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b4a      	ldr	r3, [pc, #296]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f023 020f 	bic.w	r2, r3, #15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4947      	ldr	r1, [pc, #284]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d055      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b5e:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4940      	ldr	r1, [pc, #256]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b78:	4b3c      	ldr	r3, [pc, #240]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d121      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0f6      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b90:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d115      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0ea      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ba8:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0de      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0d6      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc8:	4b28      	ldr	r3, [pc, #160]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4925      	ldr	r1, [pc, #148]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fd f847 	bl	8001c6c <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be2:	f7fd f843 	bl	8001c6c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e0be      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d1eb      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d208      	bcs.n	8004c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f023 020f 	bic.w	r2, r3, #15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	490e      	ldr	r1, [pc, #56]	@ (8004c6c <HAL_RCC_ClockConfig+0x244>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d214      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 020f 	bic.w	r2, r3, #15
 8004c4e:	4906      	ldr	r1, [pc, #24]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <HAL_RCC_ClockConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e086      	b.n	8004d76 <HAL_RCC_ClockConfig+0x34e>
 8004c68:	52002000 	.word	0x52002000
 8004c6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	4b3f      	ldr	r3, [pc, #252]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d208      	bcs.n	8004c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	4939      	ldr	r1, [pc, #228]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	4b34      	ldr	r3, [pc, #208]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d208      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cba:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	492e      	ldr	r1, [pc, #184]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	4b28      	ldr	r3, [pc, #160]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d208      	bcs.n	8004cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce8:	4b25      	ldr	r3, [pc, #148]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	4922      	ldr	r1, [pc, #136]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d208      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d16:	4b1a      	ldr	r3, [pc, #104]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4917      	ldr	r1, [pc, #92]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d28:	f000 f834 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4912      	ldr	r1, [pc, #72]	@ (8004d84 <HAL_RCC_ClockConfig+0x35c>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d46:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <HAL_RCC_ClockConfig+0x358>)
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d84 <HAL_RCC_ClockConfig+0x35c>)
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <HAL_RCC_ClockConfig+0x360>)
 8004d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d60:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <HAL_RCC_ClockConfig+0x364>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <HAL_RCC_ClockConfig+0x368>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc ff34 	bl	8001bd8 <HAL_InitTick>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
 8004d84:	0800aefc 	.word	0x0800aefc
 8004d88:	24001018 	.word	0x24001018
 8004d8c:	24001014 	.word	0x24001014
 8004d90:	2400101c 	.word	0x2400101c

08004d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	@ 0x24
 8004d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da2:	2b18      	cmp	r3, #24
 8004da4:	f200 8155 	bhi.w	8005052 <HAL_RCC_GetSysClockFreq+0x2be>
 8004da8:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004e15 	.word	0x08004e15
 8004db4:	08005053 	.word	0x08005053
 8004db8:	08005053 	.word	0x08005053
 8004dbc:	08005053 	.word	0x08005053
 8004dc0:	08005053 	.word	0x08005053
 8004dc4:	08005053 	.word	0x08005053
 8004dc8:	08005053 	.word	0x08005053
 8004dcc:	08005053 	.word	0x08005053
 8004dd0:	08004e3b 	.word	0x08004e3b
 8004dd4:	08005053 	.word	0x08005053
 8004dd8:	08005053 	.word	0x08005053
 8004ddc:	08005053 	.word	0x08005053
 8004de0:	08005053 	.word	0x08005053
 8004de4:	08005053 	.word	0x08005053
 8004de8:	08005053 	.word	0x08005053
 8004dec:	08005053 	.word	0x08005053
 8004df0:	08004e41 	.word	0x08004e41
 8004df4:	08005053 	.word	0x08005053
 8004df8:	08005053 	.word	0x08005053
 8004dfc:	08005053 	.word	0x08005053
 8004e00:	08005053 	.word	0x08005053
 8004e04:	08005053 	.word	0x08005053
 8004e08:	08005053 	.word	0x08005053
 8004e0c:	08005053 	.word	0x08005053
 8004e10:	08004e47 	.word	0x08004e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e14:	4b94      	ldr	r3, [pc, #592]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e20:	4b91      	ldr	r3, [pc, #580]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	4a90      	ldr	r2, [pc, #576]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e32:	e111      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e34:	4b8d      	ldr	r3, [pc, #564]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e36:	61bb      	str	r3, [r7, #24]
      break;
 8004e38:	e10e      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e3c:	61bb      	str	r3, [r7, #24]
      break;
 8004e3e:	e10b      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e40:	4b8c      	ldr	r3, [pc, #560]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e42:	61bb      	str	r3, [r7, #24]
      break;
 8004e44:	e108      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e46:	4b88      	ldr	r3, [pc, #544]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e50:	4b85      	ldr	r3, [pc, #532]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e5c:	4b82      	ldr	r3, [pc, #520]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e66:	4b80      	ldr	r3, [pc, #512]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6a:	08db      	lsrs	r3, r3, #3
 8004e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80e1 	beq.w	800504c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	f000 8083 	beq.w	8004f98 <HAL_RCC_GetSysClockFreq+0x204>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	f200 80a1 	bhi.w	8004fdc <HAL_RCC_GetSysClockFreq+0x248>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d056      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ea6:	e099      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02d      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800506c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b62      	ldr	r3, [pc, #392]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f0e:	e087      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800507c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b51      	ldr	r3, [pc, #324]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f52:	e065      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f96:	e043      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b2f      	ldr	r3, [pc, #188]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fda:	e021      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b1e      	ldr	r3, [pc, #120]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800501e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005020:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005024:	0a5b      	lsrs	r3, r3, #9
 8005026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800502a:	3301      	adds	r3, #1
 800502c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005038:	edd7 6a07 	vldr	s13, [r7, #28]
 800503c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005044:	ee17 3a90 	vmov	r3, s15
 8005048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800504a:	e005      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
      break;
 8005050:	e002      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005054:	61bb      	str	r3, [r7, #24]
      break;
 8005056:	bf00      	nop
  }

  return sysclockfreq;
 8005058:	69bb      	ldr	r3, [r7, #24]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3724      	adds	r7, #36	@ 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	58024400 	.word	0x58024400
 800506c:	03d09000 	.word	0x03d09000
 8005070:	003d0900 	.word	0x003d0900
 8005074:	017d7840 	.word	0x017d7840
 8005078:	46000000 	.word	0x46000000
 800507c:	4c742400 	.word	0x4c742400
 8005080:	4a742400 	.word	0x4a742400
 8005084:	4bbebc20 	.word	0x4bbebc20

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800508e:	f7ff fe81 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	490f      	ldr	r1, [pc, #60]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x54>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ac:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	4a09      	ldr	r2, [pc, #36]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x54>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	4a07      	ldr	r2, [pc, #28]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80050c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050c6:	4a07      	ldr	r2, [pc, #28]	@ (80050e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050cc:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	58024400 	.word	0x58024400
 80050dc:	0800aefc 	.word	0x0800aefc
 80050e0:	24001018 	.word	0x24001018
 80050e4:	24001014 	.word	0x24001014

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80050ec:	f7ff ffcc 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4904      	ldr	r1, [pc, #16]	@ (8005110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	58024400 	.word	0x58024400
 8005110:	0800aefc 	.word	0x0800aefc

08005114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005118:	f7ff ffb6 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4904      	ldr	r1, [pc, #16]	@ (800513c <HAL_RCC_GetPCLK2Freq+0x28>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	58024400 	.word	0x58024400
 800513c:	0800aefc 	.word	0x0800aefc

08005140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005144:	b0ca      	sub	sp, #296	@ 0x128
 8005146:	af00      	add	r7, sp, #0
 8005148:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005164:	2500      	movs	r5, #0
 8005166:	ea54 0305 	orrs.w	r3, r4, r5
 800516a:	d049      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005176:	d02f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800517c:	d828      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800517e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005182:	d01a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005188:	d822      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800518e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005192:	d007      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005194:	e01c      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005196:	4bb8      	ldr	r3, [pc, #736]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	4ab7      	ldr	r2, [pc, #732]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800519c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051a2:	e01a      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	3308      	adds	r3, #8
 80051aa:	2102      	movs	r1, #2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fc8f 	bl	8006ad0 <RCCEx_PLL2_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051b8:	e00f      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051be:	3328      	adds	r3, #40	@ 0x28
 80051c0:	2102      	movs	r1, #2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fd36 	bl	8006c34 <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051ce:	e004      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80051f6:	e003      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800520c:	f04f 0900 	mov.w	r9, #0
 8005210:	ea58 0309 	orrs.w	r3, r8, r9
 8005214:	d047      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521c:	2b04      	cmp	r3, #4
 800521e:	d82a      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005220:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800523d 	.word	0x0800523d
 800522c:	0800524b 	.word	0x0800524b
 8005230:	08005261 	.word	0x08005261
 8005234:	0800527f 	.word	0x0800527f
 8005238:	0800527f 	.word	0x0800527f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523c:	4b8e      	ldr	r3, [pc, #568]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a8d      	ldr	r2, [pc, #564]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005248:	e01a      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524e:	3308      	adds	r3, #8
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fc3c 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800525e:	e00f      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	3328      	adds	r3, #40	@ 0x28
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fce3 	bl	8006c34 <RCCEx_PLL3_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005274:	e004      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800527e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005288:	4b7b      	ldr	r3, [pc, #492]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528c:	f023 0107 	bic.w	r1, r3, #7
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	4a78      	ldr	r2, [pc, #480]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6513      	str	r3, [r2, #80]	@ 0x50
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80052b2:	f04f 0b00 	mov.w	fp, #0
 80052b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80052ba:	d04c      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c6:	d030      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052cc:	d829      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d0:	d02d      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d4:	d825      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d018      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052da:	2b80      	cmp	r3, #128	@ 0x80
 80052dc:	d821      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	d007      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80052e6:	e01c      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b63      	ldr	r3, [pc, #396]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	4a62      	ldr	r2, [pc, #392]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052f4:	e01c      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	3308      	adds	r3, #8
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fbe6 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800530a:	e011      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	3328      	adds	r3, #40	@ 0x28
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f001 fc8d 	bl	8006c34 <RCCEx_PLL3_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800532e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005338:	4b4f      	ldr	r3, [pc, #316]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005346:	4a4c      	ldr	r2, [pc, #304]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6513      	str	r3, [r2, #80]	@ 0x50
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005362:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800536c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d053      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800537e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005382:	d035      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005384:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005388:	d82e      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800538a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800538e:	d031      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005390:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005394:	d828      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800539a:	d01a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800539c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a0:	d822      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053aa:	d007      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053ac:	e01c      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4a31      	ldr	r2, [pc, #196]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	3308      	adds	r3, #8
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fb83 	bl	8006ad0 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053d0:	e011      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	3328      	adds	r3, #40	@ 0x28
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fc2a 	bl	8006c34 <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053e6:	e006      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800540e:	4a1a      	ldr	r2, [pc, #104]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6593      	str	r3, [r2, #88]	@ 0x58
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800542a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005434:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d056      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800544a:	d038      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800544c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005450:	d831      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005452:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005456:	d034      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005458:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800545c:	d82b      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800545e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005462:	d01d      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005468:	d825      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800546e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005474:	e01f      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4ba2      	ldr	r3, [pc, #648]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	4aa1      	ldr	r2, [pc, #644]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005488:	e01c      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	3308      	adds	r3, #8
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fb1c 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800549e:	e011      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	3328      	adds	r3, #40	@ 0x28
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fbc3 	bl	8006c34 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054dc:	4a8a      	ldr	r2, [pc, #552]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80054f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005502:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d03a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	2b30      	cmp	r3, #48	@ 0x30
 8005514:	d01f      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005516:	2b30      	cmp	r3, #48	@ 0x30
 8005518:	d819      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800551a:	2b20      	cmp	r3, #32
 800551c:	d00c      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800551e:	2b20      	cmp	r3, #32
 8005520:	d815      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005526:	2b10      	cmp	r3, #16
 8005528:	d111      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552a:	4b77      	ldr	r3, [pc, #476]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	4a76      	ldr	r2, [pc, #472]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	3308      	adds	r3, #8
 800553e:	2102      	movs	r1, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fac5 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005564:	4b68      	ldr	r3, [pc, #416]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005568:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005574:	430b      	orrs	r3, r1
 8005576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800558e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005598:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d051      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ac:	d035      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b2:	d82e      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055b8:	d031      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055be:	d828      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055c4:	d01a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ca:	d822      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d4:	d007      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055d6:	e01c      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055e4:	e01c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ea:	3308      	adds	r3, #8
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fa6e 	bl	8006ad0 <RCCEx_PLL2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	3328      	adds	r3, #40	@ 0x28
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fb15 	bl	8006c34 <RCCEx_PLL3_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005628:	4b37      	ldr	r3, [pc, #220]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005636:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005638:	430b      	orrs	r3, r1
 800563a:	6513      	str	r3, [r2, #80]	@ 0x50
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800565c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d056      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800566c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005670:	d033      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005672:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005676:	d82c      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005678:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800567c:	d02f      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800567e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005682:	d826      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005688:	d02b      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800568a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800568e:	d820      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005694:	d012      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800569a:	d81a      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d022      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a4:	d115      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056aa:	3308      	adds	r3, #8
 80056ac:	2101      	movs	r1, #1
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fa0e 	bl	8006ad0 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056ba:	e015      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	3328      	adds	r3, #40	@ 0x28
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fab5 	bl	8006c34 <RCCEx_PLL3_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056d0:	e00a      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056d8:	e006      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056da:	bf00      	nop
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fe:	4a02      	ldr	r2, [pc, #8]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6513      	str	r3, [r2, #80]	@ 0x50
 8005704:	e006      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005706:	bf00      	nop
 8005708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800572a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d055      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800573c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005740:	d033      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005746:	d82c      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574c:	d02f      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005752:	d826      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005758:	d02b      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800575a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800575e:	d820      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005764:	d012      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800576a:	d81a      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d022      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005774:	d115      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3308      	adds	r3, #8
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f9a6 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800578a:	e015      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	3328      	adds	r3, #40	@ 0x28
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fa4d 	bl	8006c34 <RCCEx_PLL3_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057a0:	e00a      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057a8:	e006      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057aa:	bf00      	nop
 80057ac:	e004      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057c0:	4ba3      	ldr	r3, [pc, #652]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057d0:	4a9f      	ldr	r2, [pc, #636]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d2:	430b      	orrs	r3, r1
 80057d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d6:	e003      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80057ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80057f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057fa:	460b      	mov	r3, r1
 80057fc:	4313      	orrs	r3, r2
 80057fe:	d037      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800580a:	d00e      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800580c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005810:	d816      	bhi.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800581a:	d111      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	4a8b      	ldr	r2, [pc, #556]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	3308      	adds	r3, #8
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f001 f94c 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800583e:	e004      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005852:	4b7f      	ldr	r3, [pc, #508]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005856:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	4a7b      	ldr	r2, [pc, #492]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005862:	430b      	orrs	r3, r1
 8005864:	6513      	str	r3, [r2, #80]	@ 0x50
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800587c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005886:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d039      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005896:	2b03      	cmp	r3, #3
 8005898:	d81c      	bhi.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058b1 	.word	0x080058b1
 80058a8:	080058bf 	.word	0x080058bf
 80058ac:	080058dd 	.word	0x080058dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b0:	4b67      	ldr	r3, [pc, #412]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	4a66      	ldr	r2, [pc, #408]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058bc:	e00f      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	3308      	adds	r3, #8
 80058c4:	2102      	movs	r1, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f902 	bl	8006ad0 <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058d2:	e004      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058da:	e000      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80058dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	f023 0103 	bic.w	r1, r3, #3
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f4:	4a56      	ldr	r2, [pc, #344]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f6:	430b      	orrs	r3, r1
 80058f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058fa:	e003      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800591a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800591e:	460b      	mov	r3, r1
 8005920:	4313      	orrs	r3, r2
 8005922:	f000 809f 	beq.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005926:	4b4b      	ldr	r3, [pc, #300]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a4a      	ldr	r2, [pc, #296]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005932:	f7fc f99b 	bl	8001c6c <HAL_GetTick>
 8005936:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800593a:	e00b      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593c:	f7fc f996 	bl	8001c6c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b64      	cmp	r3, #100	@ 0x64
 800594a:	d903      	bls.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005952:	e005      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005954:	4b3f      	ldr	r3, [pc, #252]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ed      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005964:	2b00      	cmp	r3, #0
 8005966:	d179      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005968:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800596a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005974:	4053      	eors	r3, r2
 8005976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597e:	4b34      	ldr	r3, [pc, #208]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005986:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800598a:	4b31      	ldr	r3, [pc, #196]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598e:	4a30      	ldr	r2, [pc, #192]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005996:	4b2e      	ldr	r3, [pc, #184]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b6:	d118      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fc f958 	bl	8001c6c <HAL_GetTick>
 80059bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c0:	e00d      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc f953 	bl	8001c6c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80059cc:	1ad2      	subs	r2, r2, r3
 80059ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d903      	bls.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80059dc:	e005      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059de:	4b1c      	ldr	r3, [pc, #112]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0eb      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80059ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d129      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a02:	d10e      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a14:	091a      	lsrs	r2, r3, #4
 8005a16:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6113      	str	r3, [r2, #16]
 8005a20:	e005      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4a0a      	ldr	r2, [pc, #40]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a2c:	6113      	str	r3, [r2, #16]
 8005a2e:	4b08      	ldr	r3, [pc, #32]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3e:	4a04      	ldr	r2, [pc, #16]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a44:	e00e      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005a4e:	e009      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a50:	58024400 	.word	0x58024400
 8005a54:	58024800 	.word	0x58024800
 8005a58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	f002 0301 	and.w	r3, r2, #1
 8005a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a74:	2300      	movs	r3, #0
 8005a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f000 8089 	beq.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8c:	2b28      	cmp	r3, #40	@ 0x28
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005a90:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005b71 	.word	0x08005b71
 8005a9c:	08005b69 	.word	0x08005b69
 8005aa0:	08005b69 	.word	0x08005b69
 8005aa4:	08005b69 	.word	0x08005b69
 8005aa8:	08005b69 	.word	0x08005b69
 8005aac:	08005b69 	.word	0x08005b69
 8005ab0:	08005b69 	.word	0x08005b69
 8005ab4:	08005b69 	.word	0x08005b69
 8005ab8:	08005b3d 	.word	0x08005b3d
 8005abc:	08005b69 	.word	0x08005b69
 8005ac0:	08005b69 	.word	0x08005b69
 8005ac4:	08005b69 	.word	0x08005b69
 8005ac8:	08005b69 	.word	0x08005b69
 8005acc:	08005b69 	.word	0x08005b69
 8005ad0:	08005b69 	.word	0x08005b69
 8005ad4:	08005b69 	.word	0x08005b69
 8005ad8:	08005b53 	.word	0x08005b53
 8005adc:	08005b69 	.word	0x08005b69
 8005ae0:	08005b69 	.word	0x08005b69
 8005ae4:	08005b69 	.word	0x08005b69
 8005ae8:	08005b69 	.word	0x08005b69
 8005aec:	08005b69 	.word	0x08005b69
 8005af0:	08005b69 	.word	0x08005b69
 8005af4:	08005b69 	.word	0x08005b69
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b69 	.word	0x08005b69
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b69 	.word	0x08005b69
 8005b2c:	08005b69 	.word	0x08005b69
 8005b30:	08005b69 	.word	0x08005b69
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005b71 	.word	0x08005b71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	3308      	adds	r3, #8
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ffc3 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	3328      	adds	r3, #40	@ 0x28
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 f86a 	bl	8006c34 <RCCEx_PLL3_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b7a:	4bbf      	ldr	r3, [pc, #764]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b88:	4abb      	ldr	r2, [pc, #748]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f002 0302 	and.w	r3, r2, #2
 8005ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005bae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d041      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d824      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005be1 	.word	0x08005be1
 8005bd0:	08005bf7 	.word	0x08005bf7
 8005bd4:	08005c15 	.word	0x08005c15
 8005bd8:	08005c15 	.word	0x08005c15
 8005bdc:	08005c15 	.word	0x08005c15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	3308      	adds	r3, #8
 8005be6:	2101      	movs	r1, #1
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ff71 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e00f      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	3328      	adds	r3, #40	@ 0x28
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f818 	bl	8006c34 <RCCEx_PLL3_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e004      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c12:	e000      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c1e:	4b96      	ldr	r3, [pc, #600]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	f023 0107 	bic.w	r1, r3, #7
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2c:	4a92      	ldr	r2, [pc, #584]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c32:	e003      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f002 0304 	and.w	r3, r2, #4
 8005c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	d044      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	d825      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005c89 	.word	0x08005c89
 8005c78:	08005c9f 	.word	0x08005c9f
 8005c7c:	08005cbd 	.word	0x08005cbd
 8005c80:	08005cbd 	.word	0x08005cbd
 8005c84:	08005cbd 	.word	0x08005cbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 ff1d 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c9c:	e00f      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca2:	3328      	adds	r3, #40	@ 0x28
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 ffc4 	bl	8006c34 <RCCEx_PLL3_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cb2:	e004      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cba:	e000      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	f023 0107 	bic.w	r1, r3, #7
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd6:	4a68      	ldr	r2, [pc, #416]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cdc:	e003      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f002 0320 	and.w	r3, r2, #32
 8005cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d00:	460b      	mov	r3, r1
 8005d02:	4313      	orrs	r3, r2
 8005d04:	d055      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d12:	d033      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d18:	d82c      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d02f      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d24:	d826      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d2a:	d02b      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d30:	d820      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d36:	d012      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d3c:	d81a      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d022      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d46:	d115      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 febd 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e015      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	3328      	adds	r3, #40	@ 0x28
 8005d64:	2102      	movs	r1, #2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff64 	bl	8006c34 <RCCEx_PLL3_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d72:	e00a      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d7a:	e006      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d7c:	bf00      	nop
 8005d7e:	e004      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d80:	bf00      	nop
 8005d82:	e002      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d84:	bf00      	nop
 8005d86:	e000      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d92:	4b39      	ldr	r3, [pc, #228]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da2:	4a35      	ldr	r2, [pc, #212]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005dc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d058      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005dde:	d033      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005de0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005de4:	d82c      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	d02f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df0:	d826      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005df2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005df6:	d02b      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dfc:	d820      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e02:	d012      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e08:	d81a      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d022      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e12:	d115      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	3308      	adds	r3, #8
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fe57 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e28:	e015      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	3328      	adds	r3, #40	@ 0x28
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fefe 	bl	8006c34 <RCCEx_PLL3_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e46:	e006      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e48:	bf00      	nop
 8005e4a:	e004      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e4c:	bf00      	nop
 8005e4e:	e002      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e50:	bf00      	nop
 8005e52:	e000      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10e      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e5e:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e6e:	4a02      	ldr	r2, [pc, #8]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e74:	e006      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	d055      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005eb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005eb6:	d82c      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	d02f      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec2:	d826      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ec4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ec8:	d02b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005eca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ece:	d820      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed4:	d012      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ed6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eda:	d81a      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee4:	d115      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	3308      	adds	r3, #8
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fdee 	bl	8006ad0 <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005efa:	e015      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	2102      	movs	r1, #2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fe95 	bl	8006c34 <RCCEx_PLL3_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f10:	e00a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f18:	e006      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f30:	4ba1      	ldr	r3, [pc, #644]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f40:	4a9d      	ldr	r2, [pc, #628]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f46:	e003      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 0308 	and.w	r3, r2, #8
 8005f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d01e      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	3328      	adds	r3, #40	@ 0x28
 8005f84:	2102      	movs	r1, #2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fe54 	bl	8006c34 <RCCEx_PLL3_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f98:	4b87      	ldr	r3, [pc, #540]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa8:	4a83      	ldr	r2, [pc, #524]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f002 0310 	and.w	r3, r2, #16
 8005fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005fc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d01e      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fda:	d10c      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	3328      	adds	r3, #40	@ 0x28
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fe25 	bl	8006c34 <RCCEx_PLL3_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ff6:	4b70      	ldr	r3, [pc, #448]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006006:	4a6c      	ldr	r2, [pc, #432]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006008:	430b      	orrs	r3, r1
 800600a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006022:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	d03e      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006038:	d022      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800603a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800603e:	d81b      	bhi.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006048:	d00b      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800604a:	e015      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	3308      	adds	r3, #8
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fd3b 	bl	8006ad0 <RCCEx_PLL2_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006060:	e00f      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3328      	adds	r3, #40	@ 0x28
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fde2 	bl	8006c34 <RCCEx_PLL3_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800608a:	4b4b      	ldr	r3, [pc, #300]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800609a:	4a47      	ldr	r2, [pc, #284]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800609c:	430b      	orrs	r3, r1
 800609e:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a0:	e003      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80060b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060b8:	2300      	movs	r3, #0
 80060ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060d2:	d01f      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060d8:	d818      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060de:	d003      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80060e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060e4:	d007      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80060e6:	e011      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e8:	4b33      	ldr	r3, [pc, #204]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	4a32      	ldr	r2, [pc, #200]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80060f4:	e00f      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3328      	adds	r3, #40	@ 0x28
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fd98 	bl	8006c34 <RCCEx_PLL3_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800610a:	e004      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006112:	e000      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800611e:	4b26      	ldr	r3, [pc, #152]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006122:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612e:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006130:	430b      	orrs	r3, r1
 8006132:	6553      	str	r3, [r2, #84]	@ 0x54
 8006134:	e003      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800614a:	673b      	str	r3, [r7, #112]	@ 0x70
 800614c:	2300      	movs	r3, #0
 800614e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006150:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006154:	460b      	mov	r3, r1
 8006156:	4313      	orrs	r3, r2
 8006158:	d034      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006168:	d007      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800616a:	e011      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616c:	4b12      	ldr	r3, [pc, #72]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	4a11      	ldr	r2, [pc, #68]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006178:	e00e      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	3308      	adds	r3, #8
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fca4 	bl	8006ad0 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800618e:	e003      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10d      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ae:	4a02      	ldr	r2, [pc, #8]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b0:	430b      	orrs	r3, r1
 80061b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061b4:	e006      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80061d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061d2:	2300      	movs	r3, #0
 80061d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d00c      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	3328      	adds	r3, #40	@ 0x28
 80061e6:	2102      	movs	r1, #2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fd23 	bl	8006c34 <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006206:	663b      	str	r3, [r7, #96]	@ 0x60
 8006208:	2300      	movs	r3, #0
 800620a:	667b      	str	r3, [r7, #100]	@ 0x64
 800620c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d038      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800621e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006222:	d018      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006228:	d811      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800622a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622e:	d014      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006234:	d80b      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800623a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623e:	d106      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4bc3      	ldr	r3, [pc, #780]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4ac2      	ldr	r2, [pc, #776]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800624c:	e008      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006254:	e004      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006256:	bf00      	nop
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800625e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006268:	4bb9      	ldr	r3, [pc, #740]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800626a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006278:	4ab5      	ldr	r2, [pc, #724]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627a:	430b      	orrs	r3, r1
 800627c:	6553      	str	r3, [r2, #84]	@ 0x54
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006296:	2300      	movs	r3, #0
 8006298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800629a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062a4:	4baa      	ldr	r3, [pc, #680]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b2:	4aa7      	ldr	r2, [pc, #668]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80062c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c6:	2300      	movs	r3, #0
 80062c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80062ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d00a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80062e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062e6:	430b      	orrs	r3, r1
 80062e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80062f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062f8:	2300      	movs	r3, #0
 80062fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006306:	4b92      	ldr	r3, [pc, #584]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006314:	4a8e      	ldr	r2, [pc, #568]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006326:	643b      	str	r3, [r7, #64]	@ 0x40
 8006328:	2300      	movs	r3, #0
 800632a:	647b      	str	r3, [r7, #68]	@ 0x44
 800632c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006336:	4b86      	ldr	r3, [pc, #536]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	4a85      	ldr	r2, [pc, #532]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006340:	6113      	str	r3, [r2, #16]
 8006342:	4b83      	ldr	r3, [pc, #524]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006344:	6919      	ldr	r1, [r3, #16]
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800634e:	4a80      	ldr	r2, [pc, #512]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006362:	2300      	movs	r3, #0
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006366:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006370:	4b77      	ldr	r3, [pc, #476]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006374:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	4a74      	ldr	r2, [pc, #464]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006380:	430b      	orrs	r3, r1
 8006382:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
 8006392:	2300      	movs	r3, #0
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
 8006396:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063b0:	4a67      	ldr	r2, [pc, #412]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b2:	430b      	orrs	r3, r1
 80063b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	2100      	movs	r1, #0
 80063c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d011      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	3308      	adds	r3, #8
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fb78 	bl	8006ad0 <RCCEx_PLL2_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	2100      	movs	r1, #0
 8006400:	6239      	str	r1, [r7, #32]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
 8006408:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800640c:	460b      	mov	r3, r1
 800640e:	4313      	orrs	r3, r2
 8006410:	d011      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006416:	3308      	adds	r3, #8
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb58 	bl	8006ad0 <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	2100      	movs	r1, #0
 8006440:	61b9      	str	r1, [r7, #24]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d011      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	3308      	adds	r3, #8
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fb38 	bl	8006ad0 <RCCEx_PLL2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	2100      	movs	r1, #0
 8006480:	6139      	str	r1, [r7, #16]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800648c:	460b      	mov	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	d011      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006496:	3328      	adds	r3, #40	@ 0x28
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fbca 	bl	8006c34 <RCCEx_PLL3_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	2100      	movs	r1, #0
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d011      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	3328      	adds	r3, #40	@ 0x28
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fbaa 	bl	8006c34 <RCCEx_PLL3_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80064e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	2100      	movs	r1, #0
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	e9d7 1200 	ldrd	r1, r2, [r7]
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d011      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	3328      	adds	r3, #40	@ 0x28
 8006518:	2102      	movs	r1, #2
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fb8a 	bl	8006c34 <RCCEx_PLL3_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006536:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e000      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
}
 8006544:	4618      	mov	r0, r3
 8006546:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800654a:	46bd      	mov	sp, r7
 800654c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006550:	58024400 	.word	0x58024400

08006554 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006558:	f7fe fd96 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4904      	ldr	r1, [pc, #16]	@ (800657c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58024400 	.word	0x58024400
 800657c:	0800aefc 	.word	0x0800aefc

08006580 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	@ 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006588:	4ba1      	ldr	r3, [pc, #644]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006592:	4b9f      	ldr	r3, [pc, #636]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006596:	0b1b      	lsrs	r3, r3, #12
 8006598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800659c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800659e:	4b9c      	ldr	r3, [pc, #624]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065aa:	4b99      	ldr	r3, [pc, #612]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8111 	beq.w	80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f000 8083 	beq.w	80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f200 80a1 	bhi.w	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d056      	beq.n	8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065ea:	e099      	b.n	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b88      	ldr	r3, [pc, #544]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02d      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f8:	4b85      	ldr	r3, [pc, #532]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a84      	ldr	r2, [pc, #528]	@ (8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b7b      	ldr	r3, [pc, #492]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a03 	vldr	s12, [r7, #12]
 8006636:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006652:	e087      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800681c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	4b6a      	ldr	r3, [pc, #424]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	ed97 6a03 	vldr	s12, [r7, #12]
 800667a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800667e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006696:	e065      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80066be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066da:	e043      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b48      	ldr	r3, [pc, #288]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006702:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671e:	e021      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b37      	ldr	r3, [pc, #220]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a03 	vldr	s12, [r7, #12]
 8006746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006762:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006764:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800677a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800677e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800678a:	ee17 2a90 	vmov	r2, s15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006792:	4b1f      	ldr	r3, [pc, #124]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b8:	ee17 2a90 	vmov	r2, s15
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067c0:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067da:	edd7 6a07 	vldr	s13, [r7, #28]
 80067de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e6:	ee17 2a90 	vmov	r2, s15
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067ee:	e008      	b.n	8006802 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
}
 8006802:	bf00      	nop
 8006804:	3724      	adds	r7, #36	@ 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
 8006814:	03d09000 	.word	0x03d09000
 8006818:	46000000 	.word	0x46000000
 800681c:	4c742400 	.word	0x4c742400
 8006820:	4a742400 	.word	0x4a742400
 8006824:	4bbebc20 	.word	0x4bbebc20

08006828 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006828:	b480      	push	{r7}
 800682a:	b089      	sub	sp, #36	@ 0x24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006830:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800683a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	0d1b      	lsrs	r3, r3, #20
 8006840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006844:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006846:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006852:	4b99      	ldr	r3, [pc, #612]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8111 	beq.w	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f000 8083 	beq.w	8006984 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d056      	beq.n	8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006892:	e099      	b.n	80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b88      	ldr	r3, [pc, #544]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a0:	4b85      	ldr	r3, [pc, #532]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	4a84      	ldr	r2, [pc, #528]	@ (8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068fa:	e087      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800693e:	e065      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b59      	ldr	r3, [pc, #356]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a03 	vldr	s12, [r7, #12]
 8006966:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006982:	e043      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b48      	ldr	r3, [pc, #288]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c6:	e021      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	0a5b      	lsrs	r3, r3, #9
 8006a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a32:	ee17 2a90 	vmov	r2, s15
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a60:	ee17 2a90 	vmov	r2, s15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a68:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8e:	ee17 2a90 	vmov	r2, s15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	3724      	adds	r7, #36	@ 0x24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	03d09000 	.word	0x03d09000
 8006ac0:	46000000 	.word	0x46000000
 8006ac4:	4c742400 	.word	0x4c742400
 8006ac8:	4a742400 	.word	0x4a742400
 8006acc:	4bbebc20 	.word	0x4bbebc20

08006ad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ade:	4b53      	ldr	r3, [pc, #332]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d101      	bne.n	8006aee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e099      	b.n	8006c22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006aee:	4b4f      	ldr	r3, [pc, #316]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a4e      	ldr	r2, [pc, #312]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006af4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fb f8b7 	bl	8001c6c <HAL_GetTick>
 8006afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b00:	e008      	b.n	8006b14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b02:	f7fb f8b3 	bl	8001c6c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e086      	b.n	8006c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b14:	4b45      	ldr	r3, [pc, #276]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f0      	bne.n	8006b02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b20:	4b42      	ldr	r3, [pc, #264]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	493f      	ldr	r1, [pc, #252]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	025b      	lsls	r3, r3, #9
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	061b      	lsls	r3, r3, #24
 8006b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b64:	4931      	ldr	r1, [pc, #196]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b6a:	4b30      	ldr	r3, [pc, #192]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	492d      	ldr	r1, [pc, #180]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	f023 0220 	bic.w	r2, r3, #32
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	4928      	ldr	r1, [pc, #160]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b8e:	4b27      	ldr	r3, [pc, #156]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4a26      	ldr	r2, [pc, #152]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b94:	f023 0310 	bic.w	r3, r3, #16
 8006b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b9a:	4b24      	ldr	r3, [pc, #144]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b9e:	4b24      	ldr	r3, [pc, #144]	@ (8006c30 <RCCEx_PLL2_Config+0x160>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	69d2      	ldr	r2, [r2, #28]
 8006ba6:	00d2      	lsls	r2, r2, #3
 8006ba8:	4920      	ldr	r1, [pc, #128]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006bae:	4b1f      	ldr	r3, [pc, #124]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bb4:	f043 0310 	orr.w	r3, r3, #16
 8006bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a19      	ldr	r2, [pc, #100]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bcc:	e00f      	b.n	8006bee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d106      	bne.n	8006be2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006bd4:	4b15      	ldr	r3, [pc, #84]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	4a14      	ldr	r2, [pc, #80]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006be0:	e005      	b.n	8006bee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	4a11      	ldr	r2, [pc, #68]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006bee:	4b0f      	ldr	r3, [pc, #60]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006bf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfa:	f7fb f837 	bl	8001c6c <HAL_GetTick>
 8006bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c00:	e008      	b.n	8006c14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c02:	f7fb f833 	bl	8001c6c <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e006      	b.n	8006c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <RCCEx_PLL2_Config+0x15c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	ffff0007 	.word	0xffff0007

08006c34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c42:	4b53      	ldr	r3, [pc, #332]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d101      	bne.n	8006c52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e099      	b.n	8006d86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c52:	4b4f      	ldr	r3, [pc, #316]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4e      	ldr	r2, [pc, #312]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c5e:	f7fb f805 	bl	8001c6c <HAL_GetTick>
 8006c62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c64:	e008      	b.n	8006c78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c66:	f7fb f801 	bl	8001c6c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e086      	b.n	8006d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c78:	4b45      	ldr	r3, [pc, #276]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c84:	4b42      	ldr	r3, [pc, #264]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	051b      	lsls	r3, r3, #20
 8006c92:	493f      	ldr	r1, [pc, #252]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	061b      	lsls	r3, r3, #24
 8006cc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cc8:	4931      	ldr	r1, [pc, #196]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006cce:	4b30      	ldr	r3, [pc, #192]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	492d      	ldr	r1, [pc, #180]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4928      	ldr	r1, [pc, #160]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006cf2:	4b27      	ldr	r3, [pc, #156]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	4a26      	ldr	r2, [pc, #152]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cfe:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d02:	4b24      	ldr	r3, [pc, #144]	@ (8006d94 <RCCEx_PLL3_Config+0x160>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	69d2      	ldr	r2, [r2, #28]
 8006d0a:	00d2      	lsls	r2, r2, #3
 8006d0c:	4920      	ldr	r1, [pc, #128]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d12:	4b1f      	ldr	r3, [pc, #124]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	4a1e      	ldr	r2, [pc, #120]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d24:	4b1a      	ldr	r3, [pc, #104]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	4a19      	ldr	r2, [pc, #100]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d30:	e00f      	b.n	8006d52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d38:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	4a14      	ldr	r2, [pc, #80]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d44:	e005      	b.n	8006d52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d46:	4b12      	ldr	r3, [pc, #72]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d52:	4b0f      	ldr	r3, [pc, #60]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0e      	ldr	r2, [pc, #56]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5e:	f7fa ff85 	bl	8001c6c <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d64:	e008      	b.n	8006d78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d66:	f7fa ff81 	bl	8001c6c <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	ffff0007 	.word	0xffff0007

08006d98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e10f      	b.n	8006fca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a87      	ldr	r2, [pc, #540]	@ (8006fd4 <HAL_SPI_Init+0x23c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <HAL_SPI_Init+0x42>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a86      	ldr	r2, [pc, #536]	@ (8006fd8 <HAL_SPI_Init+0x240>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00a      	beq.n	8006dda <HAL_SPI_Init+0x42>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a84      	ldr	r2, [pc, #528]	@ (8006fdc <HAL_SPI_Init+0x244>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d005      	beq.n	8006dda <HAL_SPI_Init+0x42>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	d901      	bls.n	8006dda <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e0f7      	b.n	8006fca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fe2e 	bl	8007a3c <SPI_GetPacketSize>
 8006de0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a7b      	ldr	r2, [pc, #492]	@ (8006fd4 <HAL_SPI_Init+0x23c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00c      	beq.n	8006e06 <HAL_SPI_Init+0x6e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a79      	ldr	r2, [pc, #484]	@ (8006fd8 <HAL_SPI_Init+0x240>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <HAL_SPI_Init+0x6e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a78      	ldr	r2, [pc, #480]	@ (8006fdc <HAL_SPI_Init+0x244>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Init+0x6e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d811      	bhi.n	8006e2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e0a:	4a72      	ldr	r2, [pc, #456]	@ (8006fd4 <HAL_SPI_Init+0x23c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a70      	ldr	r2, [pc, #448]	@ (8006fd8 <HAL_SPI_Init+0x240>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_SPI_Init+0x8c>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8006fdc <HAL_SPI_Init+0x244>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d104      	bne.n	8006e2e <HAL_SPI_Init+0x96>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d901      	bls.n	8006e2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e0cd      	b.n	8006fca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fa fbcc 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006e6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e74:	d119      	bne.n	8006eaa <HAL_SPI_Init+0x112>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e7e:	d103      	bne.n	8006e88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10c      	bne.n	8006eaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e98:	d107      	bne.n	8006eaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ea8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00f      	beq.n	8006ed6 <HAL_SPI_Init+0x13e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d90b      	bls.n	8006ed6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e007      	b.n	8006ee6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef8:	ea42 0103 	orr.w	r1, r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f46:	ea42 0103 	orr.w	r1, r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d113      	bne.n	8006f86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40013000 	.word	0x40013000
 8006fd8:	40003800 	.word	0x40003800
 8006fdc:	40003c00 	.word	0x40003c00

08006fe0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3320      	adds	r3, #32
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ff8:	f7fa fe38 	bl	8001c6c <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d001      	beq.n	800700e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
 800700c:	e1d1      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_Transmit+0x3a>
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e1c9      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit+0x4c>
 8007028:	2302      	movs	r3, #2
 800702a:	e1c2      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007084:	d108      	bne.n	8007098 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e009      	b.n	80070ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80070aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4b96      	ldr	r3, [pc, #600]	@ (800730c <HAL_SPI_Transmit+0x32c>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	88f9      	ldrh	r1, [r7, #6]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070d8:	d107      	bne.n	80070ea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d947      	bls.n	8007182 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80070f2:	e03f      	b.n	8007174 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d114      	bne.n	800712c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800712a:	e023      	b.n	8007174 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800712c:	f7fa fd9e 	bl	8001c6c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d803      	bhi.n	8007144 <HAL_SPI_Transmit+0x164>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d102      	bne.n	800714a <HAL_SPI_Transmit+0x16a>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d114      	bne.n	8007174 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fba8 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e11e      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1b9      	bne.n	80070f4 <HAL_SPI_Transmit+0x114>
 8007180:	e0f1      	b.n	8007366 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b07      	cmp	r3, #7
 8007188:	f240 80e6 	bls.w	8007358 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800718c:	e05d      	b.n	800724a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d132      	bne.n	8007202 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d918      	bls.n	80071da <HAL_SPI_Transmit+0x1fa>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d014      	beq.n	80071da <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b02      	subs	r3, #2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80071d8:	e037      	b.n	800724a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e8:	1c9a      	adds	r2, r3, #2
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007200:	e023      	b.n	800724a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007202:	f7fa fd33 	bl	8001c6c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d803      	bhi.n	800721a <HAL_SPI_Transmit+0x23a>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d102      	bne.n	8007220 <HAL_SPI_Transmit+0x240>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d114      	bne.n	800724a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fb3d 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800722c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0b3      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d19b      	bne.n	800718e <HAL_SPI_Transmit+0x1ae>
 8007256:	e086      	b.n	8007366 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d154      	bne.n	8007310 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b03      	cmp	r3, #3
 8007270:	d918      	bls.n	80072a4 <HAL_SPI_Transmit+0x2c4>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007276:	2b40      	cmp	r3, #64	@ 0x40
 8007278:	d914      	bls.n	80072a4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728a:	1d1a      	adds	r2, r3, #4
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b04      	subs	r3, #4
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80072a2:	e059      	b.n	8007358 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d917      	bls.n	80072e0 <HAL_SPI_Transmit+0x300>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d013      	beq.n	80072e0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	881a      	ldrh	r2, [r3, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b02      	subs	r3, #2
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80072de:	e03b      	b.n	8007358 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3320      	adds	r3, #32
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800730a:	e025      	b.n	8007358 <HAL_SPI_Transmit+0x378>
 800730c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007310:	f7fa fcac 	bl	8001c6c <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d803      	bhi.n	8007328 <HAL_SPI_Transmit+0x348>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d102      	bne.n	800732e <HAL_SPI_Transmit+0x34e>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d114      	bne.n	8007358 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fab6 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e02c      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	f47f af79 	bne.w	8007258 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	2108      	movs	r1, #8
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fb35 	bl	80079e0 <SPI_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fa87 	bl	80078a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3301      	adds	r3, #1
 80073d6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3330      	adds	r3, #48	@ 0x30
 80073de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e0:	f7fa fc44 	bl	8001c6c <HAL_GetTick>
 80073e4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d001      	beq.n	80073f6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
 80073f4:	e250      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_SPI_Receive+0x46>
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e248      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_SPI_Receive+0x58>
 8007410:	2302      	movs	r3, #2
 8007412:	e241      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2204      	movs	r2, #4
 8007420:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	88fa      	ldrh	r2, [r7, #6]
 8007436:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800746c:	d108      	bne.n	8007480 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e009      	b.n	8007494 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007492:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	4b95      	ldr	r3, [pc, #596]	@ (80076f0 <HAL_SPI_Receive+0x334>)
 800749c:	4013      	ands	r3, r2
 800749e:	88f9      	ldrh	r1, [r7, #6]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074c0:	d107      	bne.n	80074d2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d96c      	bls.n	80075b4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80074da:	e064      	b.n	80075a6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d114      	bne.n	800751c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800751a:	e044      	b.n	80075a6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007522:	b29b      	uxth	r3, r3
 8007524:	8bfa      	ldrh	r2, [r7, #30]
 8007526:	429a      	cmp	r2, r3
 8007528:	d919      	bls.n	800755e <HAL_SPI_Receive+0x1a2>
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d014      	beq.n	800755e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800753c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800753e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800755c:	e023      	b.n	80075a6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800755e:	f7fa fb85 	bl	8001c6c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d803      	bhi.n	8007576 <HAL_SPI_Receive+0x1ba>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d102      	bne.n	800757c <HAL_SPI_Receive+0x1c0>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d114      	bne.n	80075a6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f98f 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e178      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d194      	bne.n	80074dc <HAL_SPI_Receive+0x120>
 80075b2:	e15e      	b.n	8007872 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	f240 8153 	bls.w	8007864 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80075be:	e08f      	b.n	80076e0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d114      	bne.n	8007600 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	8812      	ldrh	r2, [r2, #0]
 80075de:	b292      	uxth	r2, r2
 80075e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075fe:	e06f      	b.n	80076e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007606:	b29b      	uxth	r3, r3
 8007608:	8bfa      	ldrh	r2, [r7, #30]
 800760a:	429a      	cmp	r2, r3
 800760c:	d924      	bls.n	8007658 <HAL_SPI_Receive+0x29c>
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01f      	beq.n	8007658 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	8812      	ldrh	r2, [r2, #0]
 8007620:	b292      	uxth	r2, r2
 8007622:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	8812      	ldrh	r2, [r2, #0]
 8007636:	b292      	uxth	r2, r2
 8007638:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800763e:	1c9a      	adds	r2, r3, #2
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b02      	subs	r3, #2
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007656:	e043      	b.n	80076e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	d119      	bne.n	8007698 <HAL_SPI_Receive+0x2dc>
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d014      	beq.n	8007698 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	8812      	ldrh	r2, [r2, #0]
 8007676:	b292      	uxth	r2, r2
 8007678:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007696:	e023      	b.n	80076e0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007698:	f7fa fae8 	bl	8001c6c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d803      	bhi.n	80076b0 <HAL_SPI_Receive+0x2f4>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d102      	bne.n	80076b6 <HAL_SPI_Receive+0x2fa>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d114      	bne.n	80076e0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f8f2 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e0db      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f af69 	bne.w	80075c0 <HAL_SPI_Receive+0x204>
 80076ee:	e0c0      	b.n	8007872 <HAL_SPI_Receive+0x4b6>
 80076f0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d117      	bne.n	800773a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007738:	e094      	b.n	8007864 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007740:	b29b      	uxth	r3, r3
 8007742:	8bfa      	ldrh	r2, [r7, #30]
 8007744:	429a      	cmp	r2, r3
 8007746:	d946      	bls.n	80077d6 <HAL_SPI_Receive+0x41a>
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d041      	beq.n	80077d6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800775e:	7812      	ldrb	r2, [r2, #0]
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b04      	subs	r3, #4
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077d4:	e046      	b.n	8007864 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d81c      	bhi.n	800781c <HAL_SPI_Receive+0x460>
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800781a:	e023      	b.n	8007864 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800781c:	f7fa fa26 	bl	8001c6c <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d803      	bhi.n	8007834 <HAL_SPI_Receive+0x478>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d102      	bne.n	800783a <HAL_SPI_Receive+0x47e>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d114      	bne.n	8007864 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f830 	bl	80078a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007846:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e019      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	f47f af41 	bne.w	80076f4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f814 	bl	80078a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007896:	2300      	movs	r3, #0
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0208 	orr.w	r2, r2, #8
 80078be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0210 	orr.w	r2, r2, #16
 80078ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6919      	ldr	r1, [r3, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b3c      	ldr	r3, [pc, #240]	@ (80079dc <SPI_CloseTransfer+0x13c>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80078fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b04      	cmp	r3, #4
 800790a:	d014      	beq.n	8007936 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00f      	beq.n	8007936 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800791c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0220 	orr.w	r2, r2, #32
 8007934:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d014      	beq.n	800796c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00f      	beq.n	800796c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800796a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00f      	beq.n	8007996 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797c:	f043 0201 	orr.w	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007994:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a6:	f043 0208 	orr.w	r2, r3, #8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	fffffc90 	.word	0xfffffc90

080079e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80079f0:	e010      	b.n	8007a14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079f2:	f7fa f93b 	bl	8001c6c <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d803      	bhi.n	8007a0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d102      	bne.n	8007a10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e00f      	b.n	8007a34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695a      	ldr	r2, [r3, #20]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	bf0c      	ite	eq
 8007a24:	2301      	moveq	r3, #1
 8007a26:	2300      	movne	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d0df      	beq.n	80079f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3307      	adds	r3, #7
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e042      	b.n	8007b0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7f9 fe0a 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2224      	movs	r2, #36	@ 0x24
 8007aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fb29 	bl	8009114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fdbe 	bl	8008644 <UART_SetConfig>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e01b      	b.n	8007b0a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ae0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007af0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fba8 	bl	8009258 <UART_CheckIdleState>
 8007b08:	4603      	mov	r3, r0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b08a      	sub	sp, #40	@ 0x28
 8007b16:	af02      	add	r7, sp, #8
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d17b      	bne.n	8007c24 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_UART_Transmit+0x26>
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e074      	b.n	8007c26 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2221      	movs	r2, #33	@ 0x21
 8007b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b4c:	f7fa f88e 	bl	8001c6c <HAL_GetTick>
 8007b50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	88fa      	ldrh	r2, [r7, #6]
 8007b5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6a:	d108      	bne.n	8007b7e <HAL_UART_Transmit+0x6c>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	e003      	b.n	8007b86 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b86:	e030      	b.n	8007bea <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2180      	movs	r1, #128	@ 0x80
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fc0a 	bl	80093ac <UART_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e03d      	b.n	8007c26 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	e007      	b.n	8007bd8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1c8      	bne.n	8007b88 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2140      	movs	r1, #64	@ 0x40
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f001 fbd3 	bl	80093ac <UART_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e006      	b.n	8007c26 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b08a      	sub	sp, #40	@ 0x28
 8007c32:	af02      	add	r7, sp, #8
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	603b      	str	r3, [r7, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	f040 80b5 	bne.w	8007db4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_UART_Receive+0x28>
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e0ad      	b.n	8007db6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2222      	movs	r2, #34	@ 0x22
 8007c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c70:	f7f9 fffc 	bl	8001c6c <HAL_GetTick>
 8007c74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8e:	d10e      	bne.n	8007cae <HAL_UART_Receive+0x80>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <HAL_UART_Receive+0x76>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ca2:	e02d      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	22ff      	movs	r2, #255	@ 0xff
 8007ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cac:	e028      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <HAL_UART_Receive+0xa4>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <HAL_UART_Receive+0x9a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	22ff      	movs	r2, #255	@ 0xff
 8007cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cc6:	e01b      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	227f      	movs	r2, #127	@ 0x7f
 8007ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cd0:	e016      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cda:	d10d      	bne.n	8007cf8 <HAL_UART_Receive+0xca>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_UART_Receive+0xc0>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	227f      	movs	r2, #127	@ 0x7f
 8007ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cec:	e008      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	223f      	movs	r2, #63	@ 0x3f
 8007cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cf6:	e003      	b.n	8007d00 <HAL_UART_Receive+0xd2>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d10:	d108      	bne.n	8007d24 <HAL_UART_Receive+0xf6>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	e003      	b.n	8007d2c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007d2c:	e036      	b.n	8007d9c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2200      	movs	r2, #0
 8007d36:	2120      	movs	r1, #32
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f001 fb37 	bl	80093ac <UART_WaitOnFlagUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e032      	b.n	8007db6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10c      	bne.n	8007d70 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	8a7b      	ldrh	r3, [r7, #18]
 8007d60:	4013      	ands	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	e00c      	b.n	8007d8a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	8a7b      	ldrh	r3, [r7, #18]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	3301      	adds	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1c2      	bne.n	8007d2e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	e000      	b.n	8007db6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
  }
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	@ 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d137      	bne.n	8007e48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <HAL_UART_Receive_IT+0x24>
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e030      	b.n	8007e4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a18      	ldr	r2, [pc, #96]	@ (8007e54 <HAL_UART_Receive_IT+0x94>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d01f      	beq.n	8007e38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d018      	beq.n	8007e38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	613b      	str	r3, [r7, #16]
   return(result);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	69f9      	ldr	r1, [r7, #28]
 8007e2a:	6a3a      	ldr	r2, [r7, #32]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 fb22 	bl	8009488 <UART_Start_Receive_IT>
 8007e44:	4603      	mov	r3, r0
 8007e46:	e000      	b.n	8007e4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3728      	adds	r7, #40	@ 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	58000c00 	.word	0x58000c00

08007e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b0ba      	sub	sp, #232	@ 0xe8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e86:	4013      	ands	r3, r2
 8007e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11b      	bne.n	8007ecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8393 	beq.w	80085e8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
      }
      return;
 8007eca:	e38d      	b.n	80085e8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8123 	beq.w	800811c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007eda:	4b8d      	ldr	r3, [pc, #564]	@ (8008110 <HAL_UART_IRQHandler+0x2b8>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ee6:	4b8b      	ldr	r3, [pc, #556]	@ (8008114 <HAL_UART_IRQHandler+0x2bc>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8116 	beq.w	800811c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d011      	beq.n	8007f20 <HAL_UART_IRQHandler+0xc8>
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f16:	f043 0201 	orr.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d011      	beq.n	8007f50 <HAL_UART_IRQHandler+0xf8>
 8007f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f46:	f043 0204 	orr.w	r2, r3, #4
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d011      	beq.n	8007f80 <HAL_UART_IRQHandler+0x128>
 8007f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f76:	f043 0202 	orr.w	r2, r3, #2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d017      	beq.n	8007fbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d105      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8008110 <HAL_UART_IRQHandler+0x2b8>)
 8007f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb2:	f043 0208 	orr.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d012      	beq.n	8007fee <HAL_UART_IRQHandler+0x196>
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00c      	beq.n	8007fee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe4:	f043 0220 	orr.w	r2, r3, #32
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 82f9 	beq.w	80085ec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d013      	beq.n	800802e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008034:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b40      	cmp	r3, #64	@ 0x40
 8008044:	d005      	beq.n	8008052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800804a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800804e:	2b00      	cmp	r3, #0
 8008050:	d054      	beq.n	80080fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fb3a 	bl	80096cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d146      	bne.n	80080f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800807c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3308      	adds	r3, #8
 800808e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800809e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1d9      	bne.n	8008066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d017      	beq.n	80080ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c2:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <HAL_UART_IRQHandler+0x2c0>)
 80080c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fa faaf 	bl	8002630 <HAL_DMA_Abort_IT>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d019      	beq.n	800810c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ea:	e00f      	b.n	800810c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fa93 	bl	8008618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f2:	e00b      	b.n	800810c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa8f 	bl	8008618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fa:	e007      	b.n	800810c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fa8b 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800810a:	e26f      	b.n	80085ec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	bf00      	nop
    return;
 800810e:	e26d      	b.n	80085ec <HAL_UART_IRQHandler+0x794>
 8008110:	10000001 	.word	0x10000001
 8008114:	04000120 	.word	0x04000120
 8008118:	08009799 	.word	0x08009799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008120:	2b01      	cmp	r3, #1
 8008122:	f040 8203 	bne.w	800852c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 81fc 	beq.w	800852c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 81f5 	beq.w	800852c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2210      	movs	r2, #16
 8008148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008154:	2b40      	cmp	r3, #64	@ 0x40
 8008156:	f040 816d 	bne.w	8008434 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4aa4      	ldr	r2, [pc, #656]	@ (80083f4 <HAL_UART_IRQHandler+0x59c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d068      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4aa1      	ldr	r2, [pc, #644]	@ (80083f8 <HAL_UART_IRQHandler+0x5a0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d061      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a9f      	ldr	r2, [pc, #636]	@ (80083fc <HAL_UART_IRQHandler+0x5a4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d05a      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a9c      	ldr	r2, [pc, #624]	@ (8008400 <HAL_UART_IRQHandler+0x5a8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d053      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a9a      	ldr	r2, [pc, #616]	@ (8008404 <HAL_UART_IRQHandler+0x5ac>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d04c      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a97      	ldr	r2, [pc, #604]	@ (8008408 <HAL_UART_IRQHandler+0x5b0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d045      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a95      	ldr	r2, [pc, #596]	@ (800840c <HAL_UART_IRQHandler+0x5b4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d03e      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a92      	ldr	r2, [pc, #584]	@ (8008410 <HAL_UART_IRQHandler+0x5b8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d037      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a90      	ldr	r2, [pc, #576]	@ (8008414 <HAL_UART_IRQHandler+0x5bc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d030      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a8d      	ldr	r2, [pc, #564]	@ (8008418 <HAL_UART_IRQHandler+0x5c0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d029      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a8b      	ldr	r2, [pc, #556]	@ (800841c <HAL_UART_IRQHandler+0x5c4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a88      	ldr	r2, [pc, #544]	@ (8008420 <HAL_UART_IRQHandler+0x5c8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d01b      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a86      	ldr	r2, [pc, #536]	@ (8008424 <HAL_UART_IRQHandler+0x5cc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d014      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a83      	ldr	r2, [pc, #524]	@ (8008428 <HAL_UART_IRQHandler+0x5d0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00d      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a81      	ldr	r2, [pc, #516]	@ (800842c <HAL_UART_IRQHandler+0x5d4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d006      	beq.n	800823a <HAL_UART_IRQHandler+0x3e2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a7e      	ldr	r2, [pc, #504]	@ (8008430 <HAL_UART_IRQHandler+0x5d8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d106      	bne.n	8008248 <HAL_UART_IRQHandler+0x3f0>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	b29b      	uxth	r3, r3
 8008246:	e005      	b.n	8008254 <HAL_UART_IRQHandler+0x3fc>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80ad 	beq.w	80083bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008268:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800826c:	429a      	cmp	r2, r3
 800826e:	f080 80a5 	bcs.w	80083bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008288:	f000 8087 	beq.w	800839a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1da      	bne.n	800828c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008302:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800830c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e1      	bne.n	80082d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008336:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008338:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800833c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e3      	bne.n	8008312 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008368:	f023 0310 	bic.w	r3, r3, #16
 800836c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	461a      	mov	r2, r3
 8008376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800837a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800837c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e4      	bne.n	8008358 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008394:	4618      	mov	r0, r3
 8008396:	f7f9 fe2d 	bl	8001ff4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f939 	bl	800862c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80083ba:	e119      	b.n	80085f0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f040 8112 	bne.w	80085f0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d8:	f040 810a 	bne.w	80085f0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f91e 	bl	800862c <HAL_UARTEx_RxEventCallback>
      return;
 80083f0:	e0fe      	b.n	80085f0 <HAL_UART_IRQHandler+0x798>
 80083f2:	bf00      	nop
 80083f4:	40020010 	.word	0x40020010
 80083f8:	40020028 	.word	0x40020028
 80083fc:	40020040 	.word	0x40020040
 8008400:	40020058 	.word	0x40020058
 8008404:	40020070 	.word	0x40020070
 8008408:	40020088 	.word	0x40020088
 800840c:	400200a0 	.word	0x400200a0
 8008410:	400200b8 	.word	0x400200b8
 8008414:	40020410 	.word	0x40020410
 8008418:	40020428 	.word	0x40020428
 800841c:	40020440 	.word	0x40020440
 8008420:	40020458 	.word	0x40020458
 8008424:	40020470 	.word	0x40020470
 8008428:	40020488 	.word	0x40020488
 800842c:	400204a0 	.word	0x400204a0
 8008430:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008440:	b29b      	uxth	r3, r3
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800844e:	b29b      	uxth	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80cf 	beq.w	80085f4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 80ca 	beq.w	80085f4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008482:	647b      	str	r3, [r7, #68]	@ 0x44
 8008484:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e4      	bne.n	8008460 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3a      	ldr	r2, [r7, #32]
 80084a8:	4b55      	ldr	r3, [pc, #340]	@ (8008600 <HAL_UART_IRQHandler+0x7a8>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80084bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0310 	bic.w	r3, r3, #16
 80084f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69b9      	ldr	r1, [r7, #24]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	617b      	str	r3, [r7, #20]
   return(result);
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e4      	bne.n	80084e2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800851e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f881 	bl	800862c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800852a:	e063      	b.n	80085f4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00e      	beq.n	8008556 <HAL_UART_IRQHandler+0x6fe>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800854c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 fe80 	bl	800a254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008554:	e051      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855e:	2b00      	cmp	r3, #0
 8008560:	d014      	beq.n	800858c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800856e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800857e:	2b00      	cmp	r3, #0
 8008580:	d03a      	beq.n	80085f8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
    }
    return;
 800858a:	e035      	b.n	80085f8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <HAL_UART_IRQHandler+0x754>
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800859c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 f909 	bl	80097bc <UART_EndTransmit_IT>
    return;
 80085aa:	e026      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <HAL_UART_IRQHandler+0x774>
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fe59 	bl	800a27c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ca:	e016      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <HAL_UART_IRQHandler+0x7a2>
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da0c      	bge.n	80085fa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fe41 	bl	800a268 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e6:	e008      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
      return;
 80085e8:	bf00      	nop
 80085ea:	e006      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
    return;
 80085ec:	bf00      	nop
 80085ee:	e004      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
      return;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
      return;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_UART_IRQHandler+0x7a2>
    return;
 80085f8:	bf00      	nop
  }
}
 80085fa:	37e8      	adds	r7, #232	@ 0xe8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	effffffe 	.word	0xeffffffe

08008604 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008648:	b092      	sub	sp, #72	@ 0x48
 800864a:	af00      	add	r7, sp, #0
 800864c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	431a      	orrs	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	431a      	orrs	r2, r3
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	4313      	orrs	r3, r2
 800866a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4bbe      	ldr	r3, [pc, #760]	@ (800896c <UART_SetConfig+0x328>)
 8008674:	4013      	ands	r3, r2
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	6812      	ldr	r2, [r2, #0]
 800867a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800867c:	430b      	orrs	r3, r1
 800867e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4ab3      	ldr	r2, [pc, #716]	@ (8008970 <UART_SetConfig+0x32c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086ac:	4313      	orrs	r3, r2
 80086ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	4baf      	ldr	r3, [pc, #700]	@ (8008974 <UART_SetConfig+0x330>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086c0:	430b      	orrs	r3, r1
 80086c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ca:	f023 010f 	bic.w	r1, r3, #15
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4aa6      	ldr	r2, [pc, #664]	@ (8008978 <UART_SetConfig+0x334>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d177      	bne.n	80087d4 <UART_SetConfig+0x190>
 80086e4:	4ba5      	ldr	r3, [pc, #660]	@ (800897c <UART_SetConfig+0x338>)
 80086e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086ec:	2b28      	cmp	r3, #40	@ 0x28
 80086ee:	d86d      	bhi.n	80087cc <UART_SetConfig+0x188>
 80086f0:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0xb4>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800879d 	.word	0x0800879d
 80086fc:	080087cd 	.word	0x080087cd
 8008700:	080087cd 	.word	0x080087cd
 8008704:	080087cd 	.word	0x080087cd
 8008708:	080087cd 	.word	0x080087cd
 800870c:	080087cd 	.word	0x080087cd
 8008710:	080087cd 	.word	0x080087cd
 8008714:	080087cd 	.word	0x080087cd
 8008718:	080087a5 	.word	0x080087a5
 800871c:	080087cd 	.word	0x080087cd
 8008720:	080087cd 	.word	0x080087cd
 8008724:	080087cd 	.word	0x080087cd
 8008728:	080087cd 	.word	0x080087cd
 800872c:	080087cd 	.word	0x080087cd
 8008730:	080087cd 	.word	0x080087cd
 8008734:	080087cd 	.word	0x080087cd
 8008738:	080087ad 	.word	0x080087ad
 800873c:	080087cd 	.word	0x080087cd
 8008740:	080087cd 	.word	0x080087cd
 8008744:	080087cd 	.word	0x080087cd
 8008748:	080087cd 	.word	0x080087cd
 800874c:	080087cd 	.word	0x080087cd
 8008750:	080087cd 	.word	0x080087cd
 8008754:	080087cd 	.word	0x080087cd
 8008758:	080087b5 	.word	0x080087b5
 800875c:	080087cd 	.word	0x080087cd
 8008760:	080087cd 	.word	0x080087cd
 8008764:	080087cd 	.word	0x080087cd
 8008768:	080087cd 	.word	0x080087cd
 800876c:	080087cd 	.word	0x080087cd
 8008770:	080087cd 	.word	0x080087cd
 8008774:	080087cd 	.word	0x080087cd
 8008778:	080087bd 	.word	0x080087bd
 800877c:	080087cd 	.word	0x080087cd
 8008780:	080087cd 	.word	0x080087cd
 8008784:	080087cd 	.word	0x080087cd
 8008788:	080087cd 	.word	0x080087cd
 800878c:	080087cd 	.word	0x080087cd
 8008790:	080087cd 	.word	0x080087cd
 8008794:	080087cd 	.word	0x080087cd
 8008798:	080087c5 	.word	0x080087c5
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e222      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e21e      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e21a      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e216      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087bc:	2320      	movs	r3, #32
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e212      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087c4:	2340      	movs	r3, #64	@ 0x40
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e20e      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087cc:	2380      	movs	r3, #128	@ 0x80
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e20a      	b.n	8008bea <UART_SetConfig+0x5a6>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a69      	ldr	r2, [pc, #420]	@ (8008980 <UART_SetConfig+0x33c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d130      	bne.n	8008840 <UART_SetConfig+0x1fc>
 80087de:	4b67      	ldr	r3, [pc, #412]	@ (800897c <UART_SetConfig+0x338>)
 80087e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d826      	bhi.n	8008838 <UART_SetConfig+0x1f4>
 80087ea:	a201      	add	r2, pc, #4	@ (adr r2, 80087f0 <UART_SetConfig+0x1ac>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008809 	.word	0x08008809
 80087f4:	08008811 	.word	0x08008811
 80087f8:	08008819 	.word	0x08008819
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008829 	.word	0x08008829
 8008804:	08008831 	.word	0x08008831
 8008808:	2300      	movs	r3, #0
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e1ec      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e1e8      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e1e4      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e1e0      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008828:	2320      	movs	r3, #32
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882e:	e1dc      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008830:	2340      	movs	r3, #64	@ 0x40
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008836:	e1d8      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008838:	2380      	movs	r3, #128	@ 0x80
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883e:	e1d4      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a4f      	ldr	r2, [pc, #316]	@ (8008984 <UART_SetConfig+0x340>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d130      	bne.n	80088ac <UART_SetConfig+0x268>
 800884a:	4b4c      	ldr	r3, [pc, #304]	@ (800897c <UART_SetConfig+0x338>)
 800884c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	2b05      	cmp	r3, #5
 8008854:	d826      	bhi.n	80088a4 <UART_SetConfig+0x260>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <UART_SetConfig+0x218>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008875 	.word	0x08008875
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008885 	.word	0x08008885
 8008868:	0800888d 	.word	0x0800888d
 800886c:	08008895 	.word	0x08008895
 8008870:	0800889d 	.word	0x0800889d
 8008874:	2300      	movs	r3, #0
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e1b6      	b.n	8008bea <UART_SetConfig+0x5a6>
 800887c:	2304      	movs	r3, #4
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e1b2      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008884:	2308      	movs	r3, #8
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e1ae      	b.n	8008bea <UART_SetConfig+0x5a6>
 800888c:	2310      	movs	r3, #16
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e1aa      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008894:	2320      	movs	r3, #32
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e1a6      	b.n	8008bea <UART_SetConfig+0x5a6>
 800889c:	2340      	movs	r3, #64	@ 0x40
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a2:	e1a2      	b.n	8008bea <UART_SetConfig+0x5a6>
 80088a4:	2380      	movs	r3, #128	@ 0x80
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088aa:	e19e      	b.n	8008bea <UART_SetConfig+0x5a6>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a35      	ldr	r2, [pc, #212]	@ (8008988 <UART_SetConfig+0x344>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d130      	bne.n	8008918 <UART_SetConfig+0x2d4>
 80088b6:	4b31      	ldr	r3, [pc, #196]	@ (800897c <UART_SetConfig+0x338>)
 80088b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d826      	bhi.n	8008910 <UART_SetConfig+0x2cc>
 80088c2:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <UART_SetConfig+0x284>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088e1 	.word	0x080088e1
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	080088f1 	.word	0x080088f1
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	08008901 	.word	0x08008901
 80088dc:	08008909 	.word	0x08008909
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e180      	b.n	8008bea <UART_SetConfig+0x5a6>
 80088e8:	2304      	movs	r3, #4
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e17c      	b.n	8008bea <UART_SetConfig+0x5a6>
 80088f0:	2308      	movs	r3, #8
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e178      	b.n	8008bea <UART_SetConfig+0x5a6>
 80088f8:	2310      	movs	r3, #16
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e174      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008900:	2320      	movs	r3, #32
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e170      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008908:	2340      	movs	r3, #64	@ 0x40
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890e:	e16c      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008910:	2380      	movs	r3, #128	@ 0x80
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008916:	e168      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1b      	ldr	r2, [pc, #108]	@ (800898c <UART_SetConfig+0x348>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d142      	bne.n	80089a8 <UART_SetConfig+0x364>
 8008922:	4b16      	ldr	r3, [pc, #88]	@ (800897c <UART_SetConfig+0x338>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b05      	cmp	r3, #5
 800892c:	d838      	bhi.n	80089a0 <UART_SetConfig+0x35c>
 800892e:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <UART_SetConfig+0x2f0>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008955 	.word	0x08008955
 800893c:	0800895d 	.word	0x0800895d
 8008940:	08008965 	.word	0x08008965
 8008944:	08008991 	.word	0x08008991
 8008948:	08008999 	.word	0x08008999
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e14a      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e146      	b.n	8008bea <UART_SetConfig+0x5a6>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e142      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e13e      	b.n	8008bea <UART_SetConfig+0x5a6>
 800896c:	cfff69f3 	.word	0xcfff69f3
 8008970:	58000c00 	.word	0x58000c00
 8008974:	11fff4ff 	.word	0x11fff4ff
 8008978:	40011000 	.word	0x40011000
 800897c:	58024400 	.word	0x58024400
 8008980:	40004400 	.word	0x40004400
 8008984:	40004800 	.word	0x40004800
 8008988:	40004c00 	.word	0x40004c00
 800898c:	40005000 	.word	0x40005000
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e128      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e124      	b.n	8008bea <UART_SetConfig+0x5a6>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e120      	b.n	8008bea <UART_SetConfig+0x5a6>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4acb      	ldr	r2, [pc, #812]	@ (8008cdc <UART_SetConfig+0x698>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d176      	bne.n	8008aa0 <UART_SetConfig+0x45c>
 80089b2:	4bcb      	ldr	r3, [pc, #812]	@ (8008ce0 <UART_SetConfig+0x69c>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089ba:	2b28      	cmp	r3, #40	@ 0x28
 80089bc:	d86c      	bhi.n	8008a98 <UART_SetConfig+0x454>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x380>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	08008a69 	.word	0x08008a69
 80089c8:	08008a99 	.word	0x08008a99
 80089cc:	08008a99 	.word	0x08008a99
 80089d0:	08008a99 	.word	0x08008a99
 80089d4:	08008a99 	.word	0x08008a99
 80089d8:	08008a99 	.word	0x08008a99
 80089dc:	08008a99 	.word	0x08008a99
 80089e0:	08008a99 	.word	0x08008a99
 80089e4:	08008a71 	.word	0x08008a71
 80089e8:	08008a99 	.word	0x08008a99
 80089ec:	08008a99 	.word	0x08008a99
 80089f0:	08008a99 	.word	0x08008a99
 80089f4:	08008a99 	.word	0x08008a99
 80089f8:	08008a99 	.word	0x08008a99
 80089fc:	08008a99 	.word	0x08008a99
 8008a00:	08008a99 	.word	0x08008a99
 8008a04:	08008a79 	.word	0x08008a79
 8008a08:	08008a99 	.word	0x08008a99
 8008a0c:	08008a99 	.word	0x08008a99
 8008a10:	08008a99 	.word	0x08008a99
 8008a14:	08008a99 	.word	0x08008a99
 8008a18:	08008a99 	.word	0x08008a99
 8008a1c:	08008a99 	.word	0x08008a99
 8008a20:	08008a99 	.word	0x08008a99
 8008a24:	08008a81 	.word	0x08008a81
 8008a28:	08008a99 	.word	0x08008a99
 8008a2c:	08008a99 	.word	0x08008a99
 8008a30:	08008a99 	.word	0x08008a99
 8008a34:	08008a99 	.word	0x08008a99
 8008a38:	08008a99 	.word	0x08008a99
 8008a3c:	08008a99 	.word	0x08008a99
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008a89 	.word	0x08008a89
 8008a48:	08008a99 	.word	0x08008a99
 8008a4c:	08008a99 	.word	0x08008a99
 8008a50:	08008a99 	.word	0x08008a99
 8008a54:	08008a99 	.word	0x08008a99
 8008a58:	08008a99 	.word	0x08008a99
 8008a5c:	08008a99 	.word	0x08008a99
 8008a60:	08008a99 	.word	0x08008a99
 8008a64:	08008a91 	.word	0x08008a91
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e0bc      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a70:	2304      	movs	r3, #4
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e0b8      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a78:	2308      	movs	r3, #8
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e0b4      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a80:	2310      	movs	r3, #16
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e0b0      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a88:	2320      	movs	r3, #32
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e0ac      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a90:	2340      	movs	r3, #64	@ 0x40
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e0a8      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008a98:	2380      	movs	r3, #128	@ 0x80
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9e:	e0a4      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a8f      	ldr	r2, [pc, #572]	@ (8008ce4 <UART_SetConfig+0x6a0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d130      	bne.n	8008b0c <UART_SetConfig+0x4c8>
 8008aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8008ce0 <UART_SetConfig+0x69c>)
 8008aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d826      	bhi.n	8008b04 <UART_SetConfig+0x4c0>
 8008ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8008abc <UART_SetConfig+0x478>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008ad5 	.word	0x08008ad5
 8008ac0:	08008add 	.word	0x08008add
 8008ac4:	08008ae5 	.word	0x08008ae5
 8008ac8:	08008aed 	.word	0x08008aed
 8008acc:	08008af5 	.word	0x08008af5
 8008ad0:	08008afd 	.word	0x08008afd
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e086      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008adc:	2304      	movs	r3, #4
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e082      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e07e      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008aec:	2310      	movs	r3, #16
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e07a      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008af4:	2320      	movs	r3, #32
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e076      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008afc:	2340      	movs	r3, #64	@ 0x40
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e072      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b04:	2380      	movs	r3, #128	@ 0x80
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0a:	e06e      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a75      	ldr	r2, [pc, #468]	@ (8008ce8 <UART_SetConfig+0x6a4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d130      	bne.n	8008b78 <UART_SetConfig+0x534>
 8008b16:	4b72      	ldr	r3, [pc, #456]	@ (8008ce0 <UART_SetConfig+0x69c>)
 8008b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d826      	bhi.n	8008b70 <UART_SetConfig+0x52c>
 8008b22:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <UART_SetConfig+0x4e4>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b49 	.word	0x08008b49
 8008b30:	08008b51 	.word	0x08008b51
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b69 	.word	0x08008b69
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e050      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b48:	2304      	movs	r3, #4
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e04c      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b50:	2308      	movs	r3, #8
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e048      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e044      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b60:	2320      	movs	r3, #32
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e040      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b68:	2340      	movs	r3, #64	@ 0x40
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e03c      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b70:	2380      	movs	r3, #128	@ 0x80
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e038      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a5b      	ldr	r2, [pc, #364]	@ (8008cec <UART_SetConfig+0x6a8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d130      	bne.n	8008be4 <UART_SetConfig+0x5a0>
 8008b82:	4b57      	ldr	r3, [pc, #348]	@ (8008ce0 <UART_SetConfig+0x69c>)
 8008b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	d826      	bhi.n	8008bdc <UART_SetConfig+0x598>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <UART_SetConfig+0x550>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008bad 	.word	0x08008bad
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bbd 	.word	0x08008bbd
 8008ba0:	08008bc5 	.word	0x08008bc5
 8008ba4:	08008bcd 	.word	0x08008bcd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2302      	movs	r3, #2
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e01a      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e016      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e012      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e00e      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e00a      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bd4:	2340      	movs	r3, #64	@ 0x40
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e006      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008bdc:	2380      	movs	r3, #128	@ 0x80
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e002      	b.n	8008bea <UART_SetConfig+0x5a6>
 8008be4:	2380      	movs	r3, #128	@ 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a3f      	ldr	r2, [pc, #252]	@ (8008cec <UART_SetConfig+0x6a8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	f040 80f8 	bne.w	8008de6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	dc46      	bgt.n	8008c8c <UART_SetConfig+0x648>
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	f2c0 8082 	blt.w	8008d08 <UART_SetConfig+0x6c4>
 8008c04:	3b02      	subs	r3, #2
 8008c06:	2b1e      	cmp	r3, #30
 8008c08:	d87e      	bhi.n	8008d08 <UART_SetConfig+0x6c4>
 8008c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <UART_SetConfig+0x5cc>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c93 	.word	0x08008c93
 8008c14:	08008d09 	.word	0x08008d09
 8008c18:	08008c9b 	.word	0x08008c9b
 8008c1c:	08008d09 	.word	0x08008d09
 8008c20:	08008d09 	.word	0x08008d09
 8008c24:	08008d09 	.word	0x08008d09
 8008c28:	08008cab 	.word	0x08008cab
 8008c2c:	08008d09 	.word	0x08008d09
 8008c30:	08008d09 	.word	0x08008d09
 8008c34:	08008d09 	.word	0x08008d09
 8008c38:	08008d09 	.word	0x08008d09
 8008c3c:	08008d09 	.word	0x08008d09
 8008c40:	08008d09 	.word	0x08008d09
 8008c44:	08008d09 	.word	0x08008d09
 8008c48:	08008cbb 	.word	0x08008cbb
 8008c4c:	08008d09 	.word	0x08008d09
 8008c50:	08008d09 	.word	0x08008d09
 8008c54:	08008d09 	.word	0x08008d09
 8008c58:	08008d09 	.word	0x08008d09
 8008c5c:	08008d09 	.word	0x08008d09
 8008c60:	08008d09 	.word	0x08008d09
 8008c64:	08008d09 	.word	0x08008d09
 8008c68:	08008d09 	.word	0x08008d09
 8008c6c:	08008d09 	.word	0x08008d09
 8008c70:	08008d09 	.word	0x08008d09
 8008c74:	08008d09 	.word	0x08008d09
 8008c78:	08008d09 	.word	0x08008d09
 8008c7c:	08008d09 	.word	0x08008d09
 8008c80:	08008d09 	.word	0x08008d09
 8008c84:	08008d09 	.word	0x08008d09
 8008c88:	08008cfb 	.word	0x08008cfb
 8008c8c:	2b40      	cmp	r3, #64	@ 0x40
 8008c8e:	d037      	beq.n	8008d00 <UART_SetConfig+0x6bc>
 8008c90:	e03a      	b.n	8008d08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c92:	f7fd fc5f 	bl	8006554 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c98:	e03c      	b.n	8008d14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fc6e 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca8:	e034      	b.n	8008d14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008caa:	f107 0318 	add.w	r3, r7, #24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd fdba 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb8:	e02c      	b.n	8008d14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cba:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <UART_SetConfig+0x69c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cc6:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <UART_SetConfig+0x69c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	08db      	lsrs	r3, r3, #3
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	4a07      	ldr	r2, [pc, #28]	@ (8008cf0 <UART_SetConfig+0x6ac>)
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cd8:	e01c      	b.n	8008d14 <UART_SetConfig+0x6d0>
 8008cda:	bf00      	nop
 8008cdc:	40011400 	.word	0x40011400
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	40007800 	.word	0x40007800
 8008ce8:	40007c00 	.word	0x40007c00
 8008cec:	58000c00 	.word	0x58000c00
 8008cf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8008f6c <UART_SetConfig+0x928>)
 8008cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf8:	e00c      	b.n	8008d14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8008f70 <UART_SetConfig+0x92c>)
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cfe:	e009      	b.n	8008d14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d06:	e005      	b.n	8008d14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 81de 	beq.w	80090d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d20:	4a94      	ldr	r2, [pc, #592]	@ (8008f74 <UART_SetConfig+0x930>)
 8008d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d26:	461a      	mov	r2, r3
 8008d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	4613      	mov	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d305      	bcc.n	8008d4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d903      	bls.n	8008d54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d52:	e1c1      	b.n	80090d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d56:	2200      	movs	r2, #0
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	60fa      	str	r2, [r7, #12]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	4a84      	ldr	r2, [pc, #528]	@ (8008f74 <UART_SetConfig+0x930>)
 8008d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2200      	movs	r2, #0
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d76:	f7f7 fb0b 	bl	8000390 <__aeabi_uldivmod>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4619      	mov	r1, r3
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	020b      	lsls	r3, r1, #8
 8008d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d90:	0202      	lsls	r2, r0, #8
 8008d92:	6979      	ldr	r1, [r7, #20]
 8008d94:	6849      	ldr	r1, [r1, #4]
 8008d96:	0849      	lsrs	r1, r1, #1
 8008d98:	2000      	movs	r0, #0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	eb12 0804 	adds.w	r8, r2, r4
 8008da2:	eb43 0905 	adc.w	r9, r3, r5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	469a      	mov	sl, r3
 8008dae:	4693      	mov	fp, r2
 8008db0:	4652      	mov	r2, sl
 8008db2:	465b      	mov	r3, fp
 8008db4:	4640      	mov	r0, r8
 8008db6:	4649      	mov	r1, r9
 8008db8:	f7f7 faea 	bl	8000390 <__aeabi_uldivmod>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dca:	d308      	bcc.n	8008dde <UART_SetConfig+0x79a>
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dd2:	d204      	bcs.n	8008dde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dda:	60da      	str	r2, [r3, #12]
 8008ddc:	e17c      	b.n	80090d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008de4:	e178      	b.n	80090d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dee:	f040 80c5 	bne.w	8008f7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008df2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	dc48      	bgt.n	8008e8c <UART_SetConfig+0x848>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	db7b      	blt.n	8008ef6 <UART_SetConfig+0x8b2>
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d879      	bhi.n	8008ef6 <UART_SetConfig+0x8b2>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <UART_SetConfig+0x7c4>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e93 	.word	0x08008e93
 8008e0c:	08008e9b 	.word	0x08008e9b
 8008e10:	08008ef7 	.word	0x08008ef7
 8008e14:	08008ef7 	.word	0x08008ef7
 8008e18:	08008ea3 	.word	0x08008ea3
 8008e1c:	08008ef7 	.word	0x08008ef7
 8008e20:	08008ef7 	.word	0x08008ef7
 8008e24:	08008ef7 	.word	0x08008ef7
 8008e28:	08008eb3 	.word	0x08008eb3
 8008e2c:	08008ef7 	.word	0x08008ef7
 8008e30:	08008ef7 	.word	0x08008ef7
 8008e34:	08008ef7 	.word	0x08008ef7
 8008e38:	08008ef7 	.word	0x08008ef7
 8008e3c:	08008ef7 	.word	0x08008ef7
 8008e40:	08008ef7 	.word	0x08008ef7
 8008e44:	08008ef7 	.word	0x08008ef7
 8008e48:	08008ec3 	.word	0x08008ec3
 8008e4c:	08008ef7 	.word	0x08008ef7
 8008e50:	08008ef7 	.word	0x08008ef7
 8008e54:	08008ef7 	.word	0x08008ef7
 8008e58:	08008ef7 	.word	0x08008ef7
 8008e5c:	08008ef7 	.word	0x08008ef7
 8008e60:	08008ef7 	.word	0x08008ef7
 8008e64:	08008ef7 	.word	0x08008ef7
 8008e68:	08008ef7 	.word	0x08008ef7
 8008e6c:	08008ef7 	.word	0x08008ef7
 8008e70:	08008ef7 	.word	0x08008ef7
 8008e74:	08008ef7 	.word	0x08008ef7
 8008e78:	08008ef7 	.word	0x08008ef7
 8008e7c:	08008ef7 	.word	0x08008ef7
 8008e80:	08008ef7 	.word	0x08008ef7
 8008e84:	08008ef7 	.word	0x08008ef7
 8008e88:	08008ee9 	.word	0x08008ee9
 8008e8c:	2b40      	cmp	r3, #64	@ 0x40
 8008e8e:	d02e      	beq.n	8008eee <UART_SetConfig+0x8aa>
 8008e90:	e031      	b.n	8008ef6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e92:	f7fc f929 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8008e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e98:	e033      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e9a:	f7fc f93b 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 8008e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ea0:	e02f      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd fb6a 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb0:	e027      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb2:	f107 0318 	add.w	r3, r7, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fd fcb6 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e01f      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f78 <UART_SetConfig+0x934>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ece:	4b2a      	ldr	r3, [pc, #168]	@ (8008f78 <UART_SetConfig+0x934>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	08db      	lsrs	r3, r3, #3
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	4a24      	ldr	r2, [pc, #144]	@ (8008f6c <UART_SetConfig+0x928>)
 8008eda:	fa22 f303 	lsr.w	r3, r2, r3
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ee0:	e00f      	b.n	8008f02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ee2:	4b22      	ldr	r3, [pc, #136]	@ (8008f6c <UART_SetConfig+0x928>)
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee6:	e00c      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ee8:	4b21      	ldr	r3, [pc, #132]	@ (8008f70 <UART_SetConfig+0x92c>)
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e009      	b.n	8008f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef4:	e005      	b.n	8008f02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 80e7 	beq.w	80090d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0e:	4a19      	ldr	r2, [pc, #100]	@ (8008f74 <UART_SetConfig+0x930>)
 8008f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f1c:	005a      	lsls	r2, r3, #1
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	085b      	lsrs	r3, r3, #1
 8008f24:	441a      	add	r2, r3
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	2b0f      	cmp	r3, #15
 8008f34:	d916      	bls.n	8008f64 <UART_SetConfig+0x920>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f3c:	d212      	bcs.n	8008f64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f023 030f 	bic.w	r3, r3, #15
 8008f46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f56:	4313      	orrs	r3, r2
 8008f58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008f60:	60da      	str	r2, [r3, #12]
 8008f62:	e0b9      	b.n	80090d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f6a:	e0b5      	b.n	80090d8 <UART_SetConfig+0xa94>
 8008f6c:	03d09000 	.word	0x03d09000
 8008f70:	003d0900 	.word	0x003d0900
 8008f74:	0800af1c 	.word	0x0800af1c
 8008f78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	dc49      	bgt.n	8009018 <UART_SetConfig+0x9d4>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	db7c      	blt.n	8009082 <UART_SetConfig+0xa3e>
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d87a      	bhi.n	8009082 <UART_SetConfig+0xa3e>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0x950>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	0800901f 	.word	0x0800901f
 8008f98:	08009027 	.word	0x08009027
 8008f9c:	08009083 	.word	0x08009083
 8008fa0:	08009083 	.word	0x08009083
 8008fa4:	0800902f 	.word	0x0800902f
 8008fa8:	08009083 	.word	0x08009083
 8008fac:	08009083 	.word	0x08009083
 8008fb0:	08009083 	.word	0x08009083
 8008fb4:	0800903f 	.word	0x0800903f
 8008fb8:	08009083 	.word	0x08009083
 8008fbc:	08009083 	.word	0x08009083
 8008fc0:	08009083 	.word	0x08009083
 8008fc4:	08009083 	.word	0x08009083
 8008fc8:	08009083 	.word	0x08009083
 8008fcc:	08009083 	.word	0x08009083
 8008fd0:	08009083 	.word	0x08009083
 8008fd4:	0800904f 	.word	0x0800904f
 8008fd8:	08009083 	.word	0x08009083
 8008fdc:	08009083 	.word	0x08009083
 8008fe0:	08009083 	.word	0x08009083
 8008fe4:	08009083 	.word	0x08009083
 8008fe8:	08009083 	.word	0x08009083
 8008fec:	08009083 	.word	0x08009083
 8008ff0:	08009083 	.word	0x08009083
 8008ff4:	08009083 	.word	0x08009083
 8008ff8:	08009083 	.word	0x08009083
 8008ffc:	08009083 	.word	0x08009083
 8009000:	08009083 	.word	0x08009083
 8009004:	08009083 	.word	0x08009083
 8009008:	08009083 	.word	0x08009083
 800900c:	08009083 	.word	0x08009083
 8009010:	08009083 	.word	0x08009083
 8009014:	08009075 	.word	0x08009075
 8009018:	2b40      	cmp	r3, #64	@ 0x40
 800901a:	d02e      	beq.n	800907a <UART_SetConfig+0xa36>
 800901c:	e031      	b.n	8009082 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800901e:	f7fc f863 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8009022:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009024:	e033      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009026:	f7fc f875 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 800902a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800902c:	e02f      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800902e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009032:	4618      	mov	r0, r3
 8009034:	f7fd faa4 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903c:	e027      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800903e:	f107 0318 	add.w	r3, r7, #24
 8009042:	4618      	mov	r0, r3
 8009044:	f7fd fbf0 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904c:	e01f      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800904e:	4b2d      	ldr	r3, [pc, #180]	@ (8009104 <UART_SetConfig+0xac0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800905a:	4b2a      	ldr	r3, [pc, #168]	@ (8009104 <UART_SetConfig+0xac0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	08db      	lsrs	r3, r3, #3
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	4a28      	ldr	r2, [pc, #160]	@ (8009108 <UART_SetConfig+0xac4>)
 8009066:	fa22 f303 	lsr.w	r3, r2, r3
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800906c:	e00f      	b.n	800908e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800906e:	4b26      	ldr	r3, [pc, #152]	@ (8009108 <UART_SetConfig+0xac4>)
 8009070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009072:	e00c      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009074:	4b25      	ldr	r3, [pc, #148]	@ (800910c <UART_SetConfig+0xac8>)
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009078:	e009      	b.n	800908e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009080:	e005      	b.n	800908e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800908c:	bf00      	nop
    }

    if (pclk != 0U)
 800908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d021      	beq.n	80090d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	4a1d      	ldr	r2, [pc, #116]	@ (8009110 <UART_SetConfig+0xacc>)
 800909a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909e:	461a      	mov	r2, r3
 80090a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	441a      	add	r2, r3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d909      	bls.n	80090d2 <UART_SetConfig+0xa8e>
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c4:	d205      	bcs.n	80090d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60da      	str	r2, [r3, #12]
 80090d0:	e002      	b.n	80090d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2201      	movs	r2, #1
 80090dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2200      	movs	r2, #0
 80090ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2200      	movs	r2, #0
 80090f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80090f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3748      	adds	r7, #72	@ 0x48
 80090fc:	46bd      	mov	sp, r7
 80090fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009102:	bf00      	nop
 8009104:	58024400 	.word	0x58024400
 8009108:	03d09000 	.word	0x03d09000
 800910c:	003d0900 	.word	0x003d0900
 8009110:	0800af1c 	.word	0x0800af1c

08009114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01a      	beq.n	800922a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009212:	d10a      	bne.n	800922a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	605a      	str	r2, [r3, #4]
  }
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b098      	sub	sp, #96	@ 0x60
 800925c:	af02      	add	r7, sp, #8
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009268:	f7f8 fd00 	bl	8001c6c <HAL_GetTick>
 800926c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b08      	cmp	r3, #8
 800927a:	d12f      	bne.n	80092dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800927c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009284:	2200      	movs	r2, #0
 8009286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f88e 	bl	80093ac <UART_WaitOnFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d022      	beq.n	80092dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e063      	b.n	80093a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d149      	bne.n	800937e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f2:	2200      	movs	r2, #0
 80092f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f857 	bl	80093ac <UART_WaitOnFlagUntilTimeout>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d03c      	beq.n	800937e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	623b      	str	r3, [r7, #32]
   return(result);
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009322:	633b      	str	r3, [r7, #48]	@ 0x30
 8009324:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e6      	bne.n	8009304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	60fb      	str	r3, [r7, #12]
   return(result);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f023 0301 	bic.w	r3, r3, #1
 800934c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009356:	61fa      	str	r2, [r7, #28]
 8009358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	69b9      	ldr	r1, [r7, #24]
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	617b      	str	r3, [r7, #20]
   return(result);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e5      	bne.n	8009336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e012      	b.n	80093a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3758      	adds	r7, #88	@ 0x58
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	4613      	mov	r3, r2
 80093ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093bc:	e04f      	b.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c4:	d04b      	beq.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c6:	f7f8 fc51 	bl	8001c6c <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d302      	bcc.n	80093dc <UART_WaitOnFlagUntilTimeout+0x30>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e04e      	b.n	800947e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0304 	and.w	r3, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d037      	beq.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b80      	cmp	r3, #128	@ 0x80
 80093f2:	d034      	beq.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	d031      	beq.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b08      	cmp	r3, #8
 8009406:	d110      	bne.n	800942a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2208      	movs	r2, #8
 800940e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f95b 	bl	80096cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2208      	movs	r2, #8
 800941a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e029      	b.n	800947e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009438:	d111      	bne.n	800945e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f941 	bl	80096cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e00f      	b.n	800947e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	4013      	ands	r3, r2
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	bf0c      	ite	eq
 800946e:	2301      	moveq	r3, #1
 8009470:	2300      	movne	r3, #0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	429a      	cmp	r2, r3
 800947a:	d0a0      	beq.n	80093be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009488:	b480      	push	{r7}
 800948a:	b0a3      	sub	sp, #140	@ 0x8c
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	88fa      	ldrh	r2, [r7, #6]
 80094a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ba:	d10e      	bne.n	80094da <UART_Start_Receive_IT+0x52>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <UART_Start_Receive_IT+0x48>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80094ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094ce:	e02d      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	22ff      	movs	r2, #255	@ 0xff
 80094d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094d8:	e028      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10d      	bne.n	80094fe <UART_Start_Receive_IT+0x76>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <UART_Start_Receive_IT+0x6c>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	22ff      	movs	r2, #255	@ 0xff
 80094ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094f2:	e01b      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	227f      	movs	r2, #127	@ 0x7f
 80094f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094fc:	e016      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009506:	d10d      	bne.n	8009524 <UART_Start_Receive_IT+0x9c>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <UART_Start_Receive_IT+0x92>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	227f      	movs	r2, #127	@ 0x7f
 8009514:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009518:	e008      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	223f      	movs	r2, #63	@ 0x3f
 800951e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009522:	e003      	b.n	800952c <UART_Start_Receive_IT+0xa4>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2222      	movs	r2, #34	@ 0x22
 8009538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3308      	adds	r3, #8
 8009542:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800954c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800954e:	f043 0301 	orr.w	r3, r3, #1
 8009552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009560:	673a      	str	r2, [r7, #112]	@ 0x70
 8009562:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009566:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800956e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e3      	bne.n	800953c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800957c:	d14f      	bne.n	800961e <UART_Start_Receive_IT+0x196>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009584:	88fa      	ldrh	r2, [r7, #6]
 8009586:	429a      	cmp	r2, r3
 8009588:	d349      	bcc.n	800961e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009592:	d107      	bne.n	80095a4 <UART_Start_Receive_IT+0x11c>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4a47      	ldr	r2, [pc, #284]	@ (80096bc <UART_Start_Receive_IT+0x234>)
 80095a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80095a2:	e002      	b.n	80095aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4a46      	ldr	r2, [pc, #280]	@ (80096c0 <UART_Start_Receive_IT+0x238>)
 80095a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01a      	beq.n	80095e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80095c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80095da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80095e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e4      	bne.n	80095b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009608:	64ba      	str	r2, [r7, #72]	@ 0x48
 800960a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800960e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_Start_Receive_IT+0x160>
 800961c:	e046      	b.n	80096ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009626:	d107      	bne.n	8009638 <UART_Start_Receive_IT+0x1b0>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d103      	bne.n	8009638 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a24      	ldr	r2, [pc, #144]	@ (80096c4 <UART_Start_Receive_IT+0x23c>)
 8009634:	675a      	str	r2, [r3, #116]	@ 0x74
 8009636:	e002      	b.n	800963e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a23      	ldr	r2, [pc, #140]	@ (80096c8 <UART_Start_Receive_IT+0x240>)
 800963c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d019      	beq.n	800967a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800965a:	677b      	str	r3, [r7, #116]	@ 0x74
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800966a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e6      	bne.n	8009646 <UART_Start_Receive_IT+0x1be>
 8009678:	e018      	b.n	80096ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	613b      	str	r3, [r7, #16]
   return(result);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f043 0320 	orr.w	r3, r3, #32
 800968e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009698:	623b      	str	r3, [r7, #32]
 800969a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	69f9      	ldr	r1, [r7, #28]
 800969e:	6a3a      	ldr	r2, [r7, #32]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	378c      	adds	r7, #140	@ 0x8c
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	08009ee9 	.word	0x08009ee9
 80096c0:	08009b85 	.word	0x08009b85
 80096c4:	080099cd 	.word	0x080099cd
 80096c8:	08009815 	.word	0x08009815

080096cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b095      	sub	sp, #84	@ 0x54
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	61fb      	str	r3, [r7, #28]
   return(result);
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	4b1e      	ldr	r3, [pc, #120]	@ (8009794 <UART_EndRxTransfer+0xc8>)
 800971a:	4013      	ands	r3, r2
 800971c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973e:	2b01      	cmp	r3, #1
 8009740:	d118      	bne.n	8009774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f023 0310 	bic.w	r3, r3, #16
 8009756:	647b      	str	r3, [r7, #68]	@ 0x44
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6979      	ldr	r1, [r7, #20]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	613b      	str	r3, [r7, #16]
   return(result);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e6      	bne.n	8009742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009788:	bf00      	nop
 800978a:	3754      	adds	r7, #84	@ 0x54
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	effffffe 	.word	0xeffffffe

08009798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7fe ff32 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d8:	61fb      	str	r3, [r7, #28]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	61bb      	str	r3, [r7, #24]
 80097e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6979      	ldr	r1, [r7, #20]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	613b      	str	r3, [r7, #16]
   return(result);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e6      	bne.n	80097c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7fe fefd 	bl	8008604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800980a:	bf00      	nop
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b09c      	sub	sp, #112	@ 0x70
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009822:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800982c:	2b22      	cmp	r3, #34	@ 0x22
 800982e:	f040 80be 	bne.w	80099ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009838:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800983c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009840:	b2d9      	uxtb	r1, r3
 8009842:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984c:	400a      	ands	r2, r1
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009862:	b29b      	uxth	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	f040 80a1 	bne.w	80099be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800988a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800988c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800989a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800989c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e6      	bne.n	800987c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c0:	f023 0301 	bic.w	r3, r3, #1
 80098c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80098d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a33      	ldr	r2, [pc, #204]	@ (80099c8 <UART_RxISR_8BIT+0x1b4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d01f      	beq.n	8009940 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d018      	beq.n	8009940 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	623b      	str	r3, [r7, #32]
   return(result);
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009922:	663b      	str	r3, [r7, #96]	@ 0x60
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800992c:	633b      	str	r3, [r7, #48]	@ 0x30
 800992e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e6      	bne.n	800990e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009944:	2b01      	cmp	r3, #1
 8009946:	d12e      	bne.n	80099a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	60fb      	str	r3, [r7, #12]
   return(result);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0310 	bic.w	r3, r3, #16
 8009962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	69b9      	ldr	r1, [r7, #24]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	617b      	str	r3, [r7, #20]
   return(result);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e6      	bne.n	800994e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	f003 0310 	and.w	r3, r3, #16
 800998a:	2b10      	cmp	r3, #16
 800998c:	d103      	bne.n	8009996 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2210      	movs	r2, #16
 8009994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fe fe44 	bl	800862c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099a4:	e00b      	b.n	80099be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7f7 ffa8 	bl	80018fc <HAL_UART_RxCpltCallback>
}
 80099ac:	e007      	b.n	80099be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699a      	ldr	r2, [r3, #24]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0208 	orr.w	r2, r2, #8
 80099bc:	619a      	str	r2, [r3, #24]
}
 80099be:	bf00      	nop
 80099c0:	3770      	adds	r7, #112	@ 0x70
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	58000c00 	.word	0x58000c00

080099cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b09c      	sub	sp, #112	@ 0x70
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80099da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e4:	2b22      	cmp	r3, #34	@ 0x22
 80099e6:	f040 80be 	bne.w	8009b66 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80099fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80099fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a02:	4013      	ands	r3, r2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0e:	1c9a      	adds	r2, r3, #2
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f040 80a1 	bne.w	8009b76 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e6      	bne.n	8009a34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a33      	ldr	r2, [pc, #204]	@ (8009b80 <UART_RxISR_16BIT+0x1b4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d01f      	beq.n	8009af8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ae6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e6      	bne.n	8009ac6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d12e      	bne.n	8009b5e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	e853 3f00 	ldrex	r3, [r3]
 8009b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f023 0310 	bic.w	r3, r3, #16
 8009b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b28:	6979      	ldr	r1, [r7, #20]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	e841 2300 	strex	r3, r2, [r1]
 8009b30:	613b      	str	r3, [r7, #16]
   return(result);
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e6      	bne.n	8009b06 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f003 0310 	and.w	r3, r3, #16
 8009b42:	2b10      	cmp	r3, #16
 8009b44:	d103      	bne.n	8009b4e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2210      	movs	r2, #16
 8009b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fe fd68 	bl	800862c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b5c:	e00b      	b.n	8009b76 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f7 fecc 	bl	80018fc <HAL_UART_RxCpltCallback>
}
 8009b64:	e007      	b.n	8009b76 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	699a      	ldr	r2, [r3, #24]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0208 	orr.w	r2, r2, #8
 8009b74:	619a      	str	r2, [r3, #24]
}
 8009b76:	bf00      	nop
 8009b78:	3770      	adds	r7, #112	@ 0x70
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	58000c00 	.word	0x58000c00

08009b84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b0ac      	sub	sp, #176	@ 0xb0
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b92:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bba:	2b22      	cmp	r3, #34	@ 0x22
 8009bbc:	f040 8181 	bne.w	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bc6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bca:	e124      	b.n	8009e16 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009bd6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009bda:	b2d9      	uxtb	r1, r3
 8009bdc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be6:	400a      	ands	r2, r1
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d053      	beq.n	8009cc6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d011      	beq.n	8009c4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c44:	f043 0201 	orr.w	r2, r3, #1
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d011      	beq.n	8009c7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00b      	beq.n	8009c7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c74:	f043 0204 	orr.w	r2, r3, #4
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d011      	beq.n	8009cae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2204      	movs	r2, #4
 8009c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca4:	f043 0202 	orr.w	r2, r3, #2
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7fe fcad 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f040 80a1 	bne.w	8009e16 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cf8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009cfc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e4      	bne.n	8009cd4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009d1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8009edc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d2e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009d30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009d34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009d3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e3      	bne.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a61      	ldr	r2, [pc, #388]	@ (8009ee0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d021      	beq.n	8009da4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01a      	beq.n	8009da4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d92:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e4      	bne.n	8009d6e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d130      	bne.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	f023 0310 	bic.w	r3, r3, #16
 8009dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b10      	cmp	r3, #16
 8009df4:	d103      	bne.n	8009dfe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7fe fc10 	bl	800862c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009e0c:	e00e      	b.n	8009e2c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7f7 fd74 	bl	80018fc <HAL_UART_RxCpltCallback>
        break;
 8009e14:	e00a      	b.n	8009e2c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e16:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d006      	beq.n	8009e2c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f47f aed0 	bne.w	8009bcc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e32:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d049      	beq.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e44:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d242      	bcs.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e3      	bne.n	8009e4c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a17      	ldr	r2, [pc, #92]	@ (8009ee4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009e88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f043 0320 	orr.w	r3, r3, #32
 8009e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6979      	ldr	r1, [r7, #20]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e4      	bne.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ec0:	e007      	b.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f042 0208 	orr.w	r2, r2, #8
 8009ed0:	619a      	str	r2, [r3, #24]
}
 8009ed2:	bf00      	nop
 8009ed4:	37b0      	adds	r7, #176	@ 0xb0
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	effffffe 	.word	0xeffffffe
 8009ee0:	58000c00 	.word	0x58000c00
 8009ee4:	08009815 	.word	0x08009815

08009ee8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b0ae      	sub	sp, #184	@ 0xb8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ef6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f1e:	2b22      	cmp	r3, #34	@ 0x22
 8009f20:	f040 8185 	bne.w	800a22e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f2e:	e128      	b.n	800a182 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f36:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009f46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f58:	1c9a      	adds	r2, r3, #2
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d053      	beq.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d011      	beq.n	8009fb6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fac:	f043 0201 	orr.w	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d011      	beq.n	8009fe6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fdc:	f043 0204 	orr.w	r2, r3, #4
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2204      	movs	r2, #4
 800a004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a00c:	f043 0202 	orr.w	r2, r3, #2
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fe faf9 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a034:	b29b      	uxth	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	f040 80a3 	bne.w	800a182 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a04a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a04c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a05e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a062:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a066:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e2      	bne.n	800a03c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3308      	adds	r3, #8
 800a07c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a086:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a088:	4b6f      	ldr	r3, [pc, #444]	@ (800a248 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a09a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a09c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e3      	bne.n	800a076 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a61      	ldr	r2, [pc, #388]	@ (800a24c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d021      	beq.n	800a110 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01a      	beq.n	800a110 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a0fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a102:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a10a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e4      	bne.n	800a0da <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a114:	2b01      	cmp	r3, #1
 800a116:	d130      	bne.n	800a17a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12e:	f023 0310 	bic.w	r3, r3, #16
 800a132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a140:	647b      	str	r3, [r7, #68]	@ 0x44
 800a142:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a148:	e841 2300 	strex	r3, r2, [r1]
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e4      	bne.n	800a11e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d103      	bne.n	800a16a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2210      	movs	r2, #16
 800a168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fe fa5a 	bl	800862c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a178:	e00e      	b.n	800a198 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7f7 fbbe 	bl	80018fc <HAL_UART_RxCpltCallback>
        break;
 800a180:	e00a      	b.n	800a198 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a182:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a186:	2b00      	cmp	r3, #0
 800a188:	d006      	beq.n	800a198 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a18a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	f47f aecc 	bne.w	8009f30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a19e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d049      	beq.n	800a23e <UART_RxISR_16BIT_FIFOEN+0x356>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1b0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d242      	bcs.n	800a23e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a1dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e3      	bne.n	800a1b8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a1f4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	60fb      	str	r3, [r7, #12]
   return(result);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f043 0320 	orr.w	r3, r3, #32
 800a20a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	69b9      	ldr	r1, [r7, #24]
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	617b      	str	r3, [r7, #20]
   return(result);
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e4      	bne.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a22c:	e007      	b.n	800a23e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	699a      	ldr	r2, [r3, #24]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f042 0208 	orr.w	r2, r2, #8
 800a23c:	619a      	str	r2, [r3, #24]
}
 800a23e:	bf00      	nop
 800a240:	37b8      	adds	r7, #184	@ 0xb8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	effffffe 	.word	0xeffffffe
 800a24c:	58000c00 	.word	0x58000c00
 800a250:	080099cd 	.word	0x080099cd

0800a254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e027      	b.n	800a2f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2224      	movs	r2, #36	@ 0x24
 800a2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0201 	bic.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a2d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a316:	2302      	movs	r3, #2
 800a318:	e02d      	b.n	800a376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2224      	movs	r2, #36	@ 0x24
 800a326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f850 	bl	800a3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2220      	movs	r2, #32
 800a368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a392:	2302      	movs	r3, #2
 800a394:	e02d      	b.n	800a3f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2224      	movs	r2, #36	@ 0x24
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f812 	bl	800a3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d108      	bne.n	800a41e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a41c:	e031      	b.n	800a482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a41e:	2310      	movs	r3, #16
 800a420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a422:	2310      	movs	r3, #16
 800a424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	0e5b      	lsrs	r3, r3, #25
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	0f5b      	lsrs	r3, r3, #29
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	7b3a      	ldrb	r2, [r7, #12]
 800a44a:	4911      	ldr	r1, [pc, #68]	@ (800a490 <UARTEx_SetNbDataToProcess+0x94>)
 800a44c:	5c8a      	ldrb	r2, [r1, r2]
 800a44e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a452:	7b3a      	ldrb	r2, [r7, #12]
 800a454:	490f      	ldr	r1, [pc, #60]	@ (800a494 <UARTEx_SetNbDataToProcess+0x98>)
 800a456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a458:	fb93 f3f2 	sdiv	r3, r3, r2
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	7b7a      	ldrb	r2, [r7, #13]
 800a468:	4909      	ldr	r1, [pc, #36]	@ (800a490 <UARTEx_SetNbDataToProcess+0x94>)
 800a46a:	5c8a      	ldrb	r2, [r1, r2]
 800a46c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a470:	7b7a      	ldrb	r2, [r7, #13]
 800a472:	4908      	ldr	r1, [pc, #32]	@ (800a494 <UARTEx_SetNbDataToProcess+0x98>)
 800a474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a476:	fb93 f3f2 	sdiv	r3, r3, r2
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	0800af34 	.word	0x0800af34
 800a494:	0800af3c 	.word	0x0800af3c

0800a498 <_vsniprintf_r>:
 800a498:	b530      	push	{r4, r5, lr}
 800a49a:	4614      	mov	r4, r2
 800a49c:	2c00      	cmp	r4, #0
 800a49e:	b09b      	sub	sp, #108	@ 0x6c
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	da05      	bge.n	800a4b2 <_vsniprintf_r+0x1a>
 800a4a6:	238b      	movs	r3, #139	@ 0x8b
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	b01b      	add	sp, #108	@ 0x6c
 800a4b0:	bd30      	pop	{r4, r5, pc}
 800a4b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a4b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4c0:	bf14      	ite	ne
 800a4c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4c6:	4623      	moveq	r3, r4
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4d0:	9100      	str	r1, [sp, #0]
 800a4d2:	9104      	str	r1, [sp, #16]
 800a4d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a4d8:	4669      	mov	r1, sp
 800a4da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a4dc:	f000 f9ae 	bl	800a83c <_svfiprintf_r>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	bfbc      	itt	lt
 800a4e4:	238b      	movlt	r3, #139	@ 0x8b
 800a4e6:	602b      	strlt	r3, [r5, #0]
 800a4e8:	2c00      	cmp	r4, #0
 800a4ea:	d0e0      	beq.n	800a4ae <_vsniprintf_r+0x16>
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	e7dc      	b.n	800a4ae <_vsniprintf_r+0x16>

0800a4f4 <vsniprintf>:
 800a4f4:	b507      	push	{r0, r1, r2, lr}
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	460a      	mov	r2, r1
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4803      	ldr	r0, [pc, #12]	@ (800a50c <vsniprintf+0x18>)
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	f7ff ffc9 	bl	800a498 <_vsniprintf_r>
 800a506:	b003      	add	sp, #12
 800a508:	f85d fb04 	ldr.w	pc, [sp], #4
 800a50c:	24001024 	.word	0x24001024

0800a510 <memset>:
 800a510:	4402      	add	r2, r0
 800a512:	4603      	mov	r3, r0
 800a514:	4293      	cmp	r3, r2
 800a516:	d100      	bne.n	800a51a <memset+0xa>
 800a518:	4770      	bx	lr
 800a51a:	f803 1b01 	strb.w	r1, [r3], #1
 800a51e:	e7f9      	b.n	800a514 <memset+0x4>

0800a520 <__errno>:
 800a520:	4b01      	ldr	r3, [pc, #4]	@ (800a528 <__errno+0x8>)
 800a522:	6818      	ldr	r0, [r3, #0]
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	24001024 	.word	0x24001024

0800a52c <__libc_init_array>:
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	4d0d      	ldr	r5, [pc, #52]	@ (800a564 <__libc_init_array+0x38>)
 800a530:	4c0d      	ldr	r4, [pc, #52]	@ (800a568 <__libc_init_array+0x3c>)
 800a532:	1b64      	subs	r4, r4, r5
 800a534:	10a4      	asrs	r4, r4, #2
 800a536:	2600      	movs	r6, #0
 800a538:	42a6      	cmp	r6, r4
 800a53a:	d109      	bne.n	800a550 <__libc_init_array+0x24>
 800a53c:	4d0b      	ldr	r5, [pc, #44]	@ (800a56c <__libc_init_array+0x40>)
 800a53e:	4c0c      	ldr	r4, [pc, #48]	@ (800a570 <__libc_init_array+0x44>)
 800a540:	f000 fc64 	bl	800ae0c <_init>
 800a544:	1b64      	subs	r4, r4, r5
 800a546:	10a4      	asrs	r4, r4, #2
 800a548:	2600      	movs	r6, #0
 800a54a:	42a6      	cmp	r6, r4
 800a54c:	d105      	bne.n	800a55a <__libc_init_array+0x2e>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	f855 3b04 	ldr.w	r3, [r5], #4
 800a554:	4798      	blx	r3
 800a556:	3601      	adds	r6, #1
 800a558:	e7ee      	b.n	800a538 <__libc_init_array+0xc>
 800a55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55e:	4798      	blx	r3
 800a560:	3601      	adds	r6, #1
 800a562:	e7f2      	b.n	800a54a <__libc_init_array+0x1e>
 800a564:	0800af80 	.word	0x0800af80
 800a568:	0800af80 	.word	0x0800af80
 800a56c:	0800af80 	.word	0x0800af80
 800a570:	0800af84 	.word	0x0800af84

0800a574 <__retarget_lock_acquire_recursive>:
 800a574:	4770      	bx	lr

0800a576 <__retarget_lock_release_recursive>:
 800a576:	4770      	bx	lr

0800a578 <memcpy>:
 800a578:	440a      	add	r2, r1
 800a57a:	4291      	cmp	r1, r2
 800a57c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a580:	d100      	bne.n	800a584 <memcpy+0xc>
 800a582:	4770      	bx	lr
 800a584:	b510      	push	{r4, lr}
 800a586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a58e:	4291      	cmp	r1, r2
 800a590:	d1f9      	bne.n	800a586 <memcpy+0xe>
 800a592:	bd10      	pop	{r4, pc}

0800a594 <_free_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4605      	mov	r5, r0
 800a598:	2900      	cmp	r1, #0
 800a59a:	d041      	beq.n	800a620 <_free_r+0x8c>
 800a59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a0:	1f0c      	subs	r4, r1, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bfb8      	it	lt
 800a5a6:	18e4      	addlt	r4, r4, r3
 800a5a8:	f000 f8e0 	bl	800a76c <__malloc_lock>
 800a5ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a624 <_free_r+0x90>)
 800a5ae:	6813      	ldr	r3, [r2, #0]
 800a5b0:	b933      	cbnz	r3, 800a5c0 <_free_r+0x2c>
 800a5b2:	6063      	str	r3, [r4, #4]
 800a5b4:	6014      	str	r4, [r2, #0]
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5bc:	f000 b8dc 	b.w	800a778 <__malloc_unlock>
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	d908      	bls.n	800a5d6 <_free_r+0x42>
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	1821      	adds	r1, r4, r0
 800a5c8:	428b      	cmp	r3, r1
 800a5ca:	bf01      	itttt	eq
 800a5cc:	6819      	ldreq	r1, [r3, #0]
 800a5ce:	685b      	ldreq	r3, [r3, #4]
 800a5d0:	1809      	addeq	r1, r1, r0
 800a5d2:	6021      	streq	r1, [r4, #0]
 800a5d4:	e7ed      	b.n	800a5b2 <_free_r+0x1e>
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	b10b      	cbz	r3, 800a5e0 <_free_r+0x4c>
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d9fa      	bls.n	800a5d6 <_free_r+0x42>
 800a5e0:	6811      	ldr	r1, [r2, #0]
 800a5e2:	1850      	adds	r0, r2, r1
 800a5e4:	42a0      	cmp	r0, r4
 800a5e6:	d10b      	bne.n	800a600 <_free_r+0x6c>
 800a5e8:	6820      	ldr	r0, [r4, #0]
 800a5ea:	4401      	add	r1, r0
 800a5ec:	1850      	adds	r0, r2, r1
 800a5ee:	4283      	cmp	r3, r0
 800a5f0:	6011      	str	r1, [r2, #0]
 800a5f2:	d1e0      	bne.n	800a5b6 <_free_r+0x22>
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	6053      	str	r3, [r2, #4]
 800a5fa:	4408      	add	r0, r1
 800a5fc:	6010      	str	r0, [r2, #0]
 800a5fe:	e7da      	b.n	800a5b6 <_free_r+0x22>
 800a600:	d902      	bls.n	800a608 <_free_r+0x74>
 800a602:	230c      	movs	r3, #12
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	e7d6      	b.n	800a5b6 <_free_r+0x22>
 800a608:	6820      	ldr	r0, [r4, #0]
 800a60a:	1821      	adds	r1, r4, r0
 800a60c:	428b      	cmp	r3, r1
 800a60e:	bf04      	itt	eq
 800a610:	6819      	ldreq	r1, [r3, #0]
 800a612:	685b      	ldreq	r3, [r3, #4]
 800a614:	6063      	str	r3, [r4, #4]
 800a616:	bf04      	itt	eq
 800a618:	1809      	addeq	r1, r1, r0
 800a61a:	6021      	streq	r1, [r4, #0]
 800a61c:	6054      	str	r4, [r2, #4]
 800a61e:	e7ca      	b.n	800a5b6 <_free_r+0x22>
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	24001410 	.word	0x24001410

0800a628 <sbrk_aligned>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4e0f      	ldr	r6, [pc, #60]	@ (800a668 <sbrk_aligned+0x40>)
 800a62c:	460c      	mov	r4, r1
 800a62e:	6831      	ldr	r1, [r6, #0]
 800a630:	4605      	mov	r5, r0
 800a632:	b911      	cbnz	r1, 800a63a <sbrk_aligned+0x12>
 800a634:	f000 fba4 	bl	800ad80 <_sbrk_r>
 800a638:	6030      	str	r0, [r6, #0]
 800a63a:	4621      	mov	r1, r4
 800a63c:	4628      	mov	r0, r5
 800a63e:	f000 fb9f 	bl	800ad80 <_sbrk_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d103      	bne.n	800a64e <sbrk_aligned+0x26>
 800a646:	f04f 34ff 	mov.w	r4, #4294967295
 800a64a:	4620      	mov	r0, r4
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	1cc4      	adds	r4, r0, #3
 800a650:	f024 0403 	bic.w	r4, r4, #3
 800a654:	42a0      	cmp	r0, r4
 800a656:	d0f8      	beq.n	800a64a <sbrk_aligned+0x22>
 800a658:	1a21      	subs	r1, r4, r0
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 fb90 	bl	800ad80 <_sbrk_r>
 800a660:	3001      	adds	r0, #1
 800a662:	d1f2      	bne.n	800a64a <sbrk_aligned+0x22>
 800a664:	e7ef      	b.n	800a646 <sbrk_aligned+0x1e>
 800a666:	bf00      	nop
 800a668:	2400140c 	.word	0x2400140c

0800a66c <_malloc_r>:
 800a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a670:	1ccd      	adds	r5, r1, #3
 800a672:	f025 0503 	bic.w	r5, r5, #3
 800a676:	3508      	adds	r5, #8
 800a678:	2d0c      	cmp	r5, #12
 800a67a:	bf38      	it	cc
 800a67c:	250c      	movcc	r5, #12
 800a67e:	2d00      	cmp	r5, #0
 800a680:	4606      	mov	r6, r0
 800a682:	db01      	blt.n	800a688 <_malloc_r+0x1c>
 800a684:	42a9      	cmp	r1, r5
 800a686:	d904      	bls.n	800a692 <_malloc_r+0x26>
 800a688:	230c      	movs	r3, #12
 800a68a:	6033      	str	r3, [r6, #0]
 800a68c:	2000      	movs	r0, #0
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a768 <_malloc_r+0xfc>
 800a696:	f000 f869 	bl	800a76c <__malloc_lock>
 800a69a:	f8d8 3000 	ldr.w	r3, [r8]
 800a69e:	461c      	mov	r4, r3
 800a6a0:	bb44      	cbnz	r4, 800a6f4 <_malloc_r+0x88>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ffbf 	bl	800a628 <sbrk_aligned>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	d158      	bne.n	800a762 <_malloc_r+0xf6>
 800a6b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a6b4:	4627      	mov	r7, r4
 800a6b6:	2f00      	cmp	r7, #0
 800a6b8:	d143      	bne.n	800a742 <_malloc_r+0xd6>
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d04b      	beq.n	800a756 <_malloc_r+0xea>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	eb04 0903 	add.w	r9, r4, r3
 800a6c8:	f000 fb5a 	bl	800ad80 <_sbrk_r>
 800a6cc:	4581      	cmp	r9, r0
 800a6ce:	d142      	bne.n	800a756 <_malloc_r+0xea>
 800a6d0:	6821      	ldr	r1, [r4, #0]
 800a6d2:	1a6d      	subs	r5, r5, r1
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff ffa6 	bl	800a628 <sbrk_aligned>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d03a      	beq.n	800a756 <_malloc_r+0xea>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	442b      	add	r3, r5
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	bb62      	cbnz	r2, 800a748 <_malloc_r+0xdc>
 800a6ee:	f8c8 7000 	str.w	r7, [r8]
 800a6f2:	e00f      	b.n	800a714 <_malloc_r+0xa8>
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	1b52      	subs	r2, r2, r5
 800a6f8:	d420      	bmi.n	800a73c <_malloc_r+0xd0>
 800a6fa:	2a0b      	cmp	r2, #11
 800a6fc:	d917      	bls.n	800a72e <_malloc_r+0xc2>
 800a6fe:	1961      	adds	r1, r4, r5
 800a700:	42a3      	cmp	r3, r4
 800a702:	6025      	str	r5, [r4, #0]
 800a704:	bf18      	it	ne
 800a706:	6059      	strne	r1, [r3, #4]
 800a708:	6863      	ldr	r3, [r4, #4]
 800a70a:	bf08      	it	eq
 800a70c:	f8c8 1000 	streq.w	r1, [r8]
 800a710:	5162      	str	r2, [r4, r5]
 800a712:	604b      	str	r3, [r1, #4]
 800a714:	4630      	mov	r0, r6
 800a716:	f000 f82f 	bl	800a778 <__malloc_unlock>
 800a71a:	f104 000b 	add.w	r0, r4, #11
 800a71e:	1d23      	adds	r3, r4, #4
 800a720:	f020 0007 	bic.w	r0, r0, #7
 800a724:	1ac2      	subs	r2, r0, r3
 800a726:	bf1c      	itt	ne
 800a728:	1a1b      	subne	r3, r3, r0
 800a72a:	50a3      	strne	r3, [r4, r2]
 800a72c:	e7af      	b.n	800a68e <_malloc_r+0x22>
 800a72e:	6862      	ldr	r2, [r4, #4]
 800a730:	42a3      	cmp	r3, r4
 800a732:	bf0c      	ite	eq
 800a734:	f8c8 2000 	streq.w	r2, [r8]
 800a738:	605a      	strne	r2, [r3, #4]
 800a73a:	e7eb      	b.n	800a714 <_malloc_r+0xa8>
 800a73c:	4623      	mov	r3, r4
 800a73e:	6864      	ldr	r4, [r4, #4]
 800a740:	e7ae      	b.n	800a6a0 <_malloc_r+0x34>
 800a742:	463c      	mov	r4, r7
 800a744:	687f      	ldr	r7, [r7, #4]
 800a746:	e7b6      	b.n	800a6b6 <_malloc_r+0x4a>
 800a748:	461a      	mov	r2, r3
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d1fb      	bne.n	800a748 <_malloc_r+0xdc>
 800a750:	2300      	movs	r3, #0
 800a752:	6053      	str	r3, [r2, #4]
 800a754:	e7de      	b.n	800a714 <_malloc_r+0xa8>
 800a756:	230c      	movs	r3, #12
 800a758:	6033      	str	r3, [r6, #0]
 800a75a:	4630      	mov	r0, r6
 800a75c:	f000 f80c 	bl	800a778 <__malloc_unlock>
 800a760:	e794      	b.n	800a68c <_malloc_r+0x20>
 800a762:	6005      	str	r5, [r0, #0]
 800a764:	e7d6      	b.n	800a714 <_malloc_r+0xa8>
 800a766:	bf00      	nop
 800a768:	24001410 	.word	0x24001410

0800a76c <__malloc_lock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	@ (800a774 <__malloc_lock+0x8>)
 800a76e:	f7ff bf01 	b.w	800a574 <__retarget_lock_acquire_recursive>
 800a772:	bf00      	nop
 800a774:	24001408 	.word	0x24001408

0800a778 <__malloc_unlock>:
 800a778:	4801      	ldr	r0, [pc, #4]	@ (800a780 <__malloc_unlock+0x8>)
 800a77a:	f7ff befc 	b.w	800a576 <__retarget_lock_release_recursive>
 800a77e:	bf00      	nop
 800a780:	24001408 	.word	0x24001408

0800a784 <__ssputs_r>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	688e      	ldr	r6, [r1, #8]
 800a78a:	461f      	mov	r7, r3
 800a78c:	42be      	cmp	r6, r7
 800a78e:	680b      	ldr	r3, [r1, #0]
 800a790:	4682      	mov	sl, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4690      	mov	r8, r2
 800a796:	d82d      	bhi.n	800a7f4 <__ssputs_r+0x70>
 800a798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a79c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7a0:	d026      	beq.n	800a7f0 <__ssputs_r+0x6c>
 800a7a2:	6965      	ldr	r5, [r4, #20]
 800a7a4:	6909      	ldr	r1, [r1, #16]
 800a7a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7aa:	eba3 0901 	sub.w	r9, r3, r1
 800a7ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7b2:	1c7b      	adds	r3, r7, #1
 800a7b4:	444b      	add	r3, r9
 800a7b6:	106d      	asrs	r5, r5, #1
 800a7b8:	429d      	cmp	r5, r3
 800a7ba:	bf38      	it	cc
 800a7bc:	461d      	movcc	r5, r3
 800a7be:	0553      	lsls	r3, r2, #21
 800a7c0:	d527      	bpl.n	800a812 <__ssputs_r+0x8e>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	f7ff ff52 	bl	800a66c <_malloc_r>
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	b360      	cbz	r0, 800a826 <__ssputs_r+0xa2>
 800a7cc:	6921      	ldr	r1, [r4, #16]
 800a7ce:	464a      	mov	r2, r9
 800a7d0:	f7ff fed2 	bl	800a578 <memcpy>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	6126      	str	r6, [r4, #16]
 800a7e2:	6165      	str	r5, [r4, #20]
 800a7e4:	444e      	add	r6, r9
 800a7e6:	eba5 0509 	sub.w	r5, r5, r9
 800a7ea:	6026      	str	r6, [r4, #0]
 800a7ec:	60a5      	str	r5, [r4, #8]
 800a7ee:	463e      	mov	r6, r7
 800a7f0:	42be      	cmp	r6, r7
 800a7f2:	d900      	bls.n	800a7f6 <__ssputs_r+0x72>
 800a7f4:	463e      	mov	r6, r7
 800a7f6:	6820      	ldr	r0, [r4, #0]
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	f000 faa6 	bl	800ad4c <memmove>
 800a800:	68a3      	ldr	r3, [r4, #8]
 800a802:	1b9b      	subs	r3, r3, r6
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	4433      	add	r3, r6
 800a80a:	6023      	str	r3, [r4, #0]
 800a80c:	2000      	movs	r0, #0
 800a80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a812:	462a      	mov	r2, r5
 800a814:	f000 fac4 	bl	800ada0 <_realloc_r>
 800a818:	4606      	mov	r6, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d1e0      	bne.n	800a7e0 <__ssputs_r+0x5c>
 800a81e:	6921      	ldr	r1, [r4, #16]
 800a820:	4650      	mov	r0, sl
 800a822:	f7ff feb7 	bl	800a594 <_free_r>
 800a826:	230c      	movs	r3, #12
 800a828:	f8ca 3000 	str.w	r3, [sl]
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a832:	81a3      	strh	r3, [r4, #12]
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	e7e9      	b.n	800a80e <__ssputs_r+0x8a>
	...

0800a83c <_svfiprintf_r>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	4698      	mov	r8, r3
 800a842:	898b      	ldrh	r3, [r1, #12]
 800a844:	061b      	lsls	r3, r3, #24
 800a846:	b09d      	sub	sp, #116	@ 0x74
 800a848:	4607      	mov	r7, r0
 800a84a:	460d      	mov	r5, r1
 800a84c:	4614      	mov	r4, r2
 800a84e:	d510      	bpl.n	800a872 <_svfiprintf_r+0x36>
 800a850:	690b      	ldr	r3, [r1, #16]
 800a852:	b973      	cbnz	r3, 800a872 <_svfiprintf_r+0x36>
 800a854:	2140      	movs	r1, #64	@ 0x40
 800a856:	f7ff ff09 	bl	800a66c <_malloc_r>
 800a85a:	6028      	str	r0, [r5, #0]
 800a85c:	6128      	str	r0, [r5, #16]
 800a85e:	b930      	cbnz	r0, 800a86e <_svfiprintf_r+0x32>
 800a860:	230c      	movs	r3, #12
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	b01d      	add	sp, #116	@ 0x74
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	2340      	movs	r3, #64	@ 0x40
 800a870:	616b      	str	r3, [r5, #20]
 800a872:	2300      	movs	r3, #0
 800a874:	9309      	str	r3, [sp, #36]	@ 0x24
 800a876:	2320      	movs	r3, #32
 800a878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a880:	2330      	movs	r3, #48	@ 0x30
 800a882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa20 <_svfiprintf_r+0x1e4>
 800a886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a88a:	f04f 0901 	mov.w	r9, #1
 800a88e:	4623      	mov	r3, r4
 800a890:	469a      	mov	sl, r3
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	b10a      	cbz	r2, 800a89c <_svfiprintf_r+0x60>
 800a898:	2a25      	cmp	r2, #37	@ 0x25
 800a89a:	d1f9      	bne.n	800a890 <_svfiprintf_r+0x54>
 800a89c:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a0:	d00b      	beq.n	800a8ba <_svfiprintf_r+0x7e>
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ff6b 	bl	800a784 <__ssputs_r>
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f000 80a7 	beq.w	800aa02 <_svfiprintf_r+0x1c6>
 800a8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8b6:	445a      	add	r2, fp
 800a8b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 809f 	beq.w	800aa02 <_svfiprintf_r+0x1c6>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ce:	f10a 0a01 	add.w	sl, sl, #1
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8da:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8dc:	4654      	mov	r4, sl
 800a8de:	2205      	movs	r2, #5
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	484e      	ldr	r0, [pc, #312]	@ (800aa20 <_svfiprintf_r+0x1e4>)
 800a8e6:	f7f5 fd03 	bl	80002f0 <memchr>
 800a8ea:	9a04      	ldr	r2, [sp, #16]
 800a8ec:	b9d8      	cbnz	r0, 800a926 <_svfiprintf_r+0xea>
 800a8ee:	06d0      	lsls	r0, r2, #27
 800a8f0:	bf44      	itt	mi
 800a8f2:	2320      	movmi	r3, #32
 800a8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8f8:	0711      	lsls	r1, r2, #28
 800a8fa:	bf44      	itt	mi
 800a8fc:	232b      	movmi	r3, #43	@ 0x2b
 800a8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b2a      	cmp	r3, #42	@ 0x2a
 800a908:	d015      	beq.n	800a936 <_svfiprintf_r+0xfa>
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	4654      	mov	r4, sl
 800a90e:	2000      	movs	r0, #0
 800a910:	f04f 0c0a 	mov.w	ip, #10
 800a914:	4621      	mov	r1, r4
 800a916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a91a:	3b30      	subs	r3, #48	@ 0x30
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	d94b      	bls.n	800a9b8 <_svfiprintf_r+0x17c>
 800a920:	b1b0      	cbz	r0, 800a950 <_svfiprintf_r+0x114>
 800a922:	9207      	str	r2, [sp, #28]
 800a924:	e014      	b.n	800a950 <_svfiprintf_r+0x114>
 800a926:	eba0 0308 	sub.w	r3, r0, r8
 800a92a:	fa09 f303 	lsl.w	r3, r9, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	46a2      	mov	sl, r4
 800a934:	e7d2      	b.n	800a8dc <_svfiprintf_r+0xa0>
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	1d19      	adds	r1, r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	9103      	str	r1, [sp, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfbb      	ittet	lt
 800a942:	425b      	neglt	r3, r3
 800a944:	f042 0202 	orrlt.w	r2, r2, #2
 800a948:	9307      	strge	r3, [sp, #28]
 800a94a:	9307      	strlt	r3, [sp, #28]
 800a94c:	bfb8      	it	lt
 800a94e:	9204      	strlt	r2, [sp, #16]
 800a950:	7823      	ldrb	r3, [r4, #0]
 800a952:	2b2e      	cmp	r3, #46	@ 0x2e
 800a954:	d10a      	bne.n	800a96c <_svfiprintf_r+0x130>
 800a956:	7863      	ldrb	r3, [r4, #1]
 800a958:	2b2a      	cmp	r3, #42	@ 0x2a
 800a95a:	d132      	bne.n	800a9c2 <_svfiprintf_r+0x186>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	1d1a      	adds	r2, r3, #4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	9203      	str	r2, [sp, #12]
 800a964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a968:	3402      	adds	r4, #2
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa30 <_svfiprintf_r+0x1f4>
 800a970:	7821      	ldrb	r1, [r4, #0]
 800a972:	2203      	movs	r2, #3
 800a974:	4650      	mov	r0, sl
 800a976:	f7f5 fcbb 	bl	80002f0 <memchr>
 800a97a:	b138      	cbz	r0, 800a98c <_svfiprintf_r+0x150>
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	eba0 000a 	sub.w	r0, r0, sl
 800a982:	2240      	movs	r2, #64	@ 0x40
 800a984:	4082      	lsls	r2, r0
 800a986:	4313      	orrs	r3, r2
 800a988:	3401      	adds	r4, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a990:	4824      	ldr	r0, [pc, #144]	@ (800aa24 <_svfiprintf_r+0x1e8>)
 800a992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a996:	2206      	movs	r2, #6
 800a998:	f7f5 fcaa 	bl	80002f0 <memchr>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d036      	beq.n	800aa0e <_svfiprintf_r+0x1d2>
 800a9a0:	4b21      	ldr	r3, [pc, #132]	@ (800aa28 <_svfiprintf_r+0x1ec>)
 800a9a2:	bb1b      	cbnz	r3, 800a9ec <_svfiprintf_r+0x1b0>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	3307      	adds	r3, #7
 800a9a8:	f023 0307 	bic.w	r3, r3, #7
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	9303      	str	r3, [sp, #12]
 800a9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b2:	4433      	add	r3, r6
 800a9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b6:	e76a      	b.n	800a88e <_svfiprintf_r+0x52>
 800a9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9bc:	460c      	mov	r4, r1
 800a9be:	2001      	movs	r0, #1
 800a9c0:	e7a8      	b.n	800a914 <_svfiprintf_r+0xd8>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	3401      	adds	r4, #1
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	f04f 0c0a 	mov.w	ip, #10
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9d4:	3a30      	subs	r2, #48	@ 0x30
 800a9d6:	2a09      	cmp	r2, #9
 800a9d8:	d903      	bls.n	800a9e2 <_svfiprintf_r+0x1a6>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0c6      	beq.n	800a96c <_svfiprintf_r+0x130>
 800a9de:	9105      	str	r1, [sp, #20]
 800a9e0:	e7c4      	b.n	800a96c <_svfiprintf_r+0x130>
 800a9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e7f0      	b.n	800a9ce <_svfiprintf_r+0x192>
 800a9ec:	ab03      	add	r3, sp, #12
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800aa2c <_svfiprintf_r+0x1f0>)
 800a9f4:	a904      	add	r1, sp, #16
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f3af 8000 	nop.w
 800a9fc:	1c42      	adds	r2, r0, #1
 800a9fe:	4606      	mov	r6, r0
 800aa00:	d1d6      	bne.n	800a9b0 <_svfiprintf_r+0x174>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	065b      	lsls	r3, r3, #25
 800aa06:	f53f af2d 	bmi.w	800a864 <_svfiprintf_r+0x28>
 800aa0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa0c:	e72c      	b.n	800a868 <_svfiprintf_r+0x2c>
 800aa0e:	ab03      	add	r3, sp, #12
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	462a      	mov	r2, r5
 800aa14:	4b05      	ldr	r3, [pc, #20]	@ (800aa2c <_svfiprintf_r+0x1f0>)
 800aa16:	a904      	add	r1, sp, #16
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f000 f879 	bl	800ab10 <_printf_i>
 800aa1e:	e7ed      	b.n	800a9fc <_svfiprintf_r+0x1c0>
 800aa20:	0800af44 	.word	0x0800af44
 800aa24:	0800af4e 	.word	0x0800af4e
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	0800a785 	.word	0x0800a785
 800aa30:	0800af4a 	.word	0x0800af4a

0800aa34 <_printf_common>:
 800aa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa38:	4616      	mov	r6, r2
 800aa3a:	4698      	mov	r8, r3
 800aa3c:	688a      	ldr	r2, [r1, #8]
 800aa3e:	690b      	ldr	r3, [r1, #16]
 800aa40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa44:	4293      	cmp	r3, r2
 800aa46:	bfb8      	it	lt
 800aa48:	4613      	movlt	r3, r2
 800aa4a:	6033      	str	r3, [r6, #0]
 800aa4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa50:	4607      	mov	r7, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	b10a      	cbz	r2, 800aa5a <_printf_common+0x26>
 800aa56:	3301      	adds	r3, #1
 800aa58:	6033      	str	r3, [r6, #0]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	0699      	lsls	r1, r3, #26
 800aa5e:	bf42      	ittt	mi
 800aa60:	6833      	ldrmi	r3, [r6, #0]
 800aa62:	3302      	addmi	r3, #2
 800aa64:	6033      	strmi	r3, [r6, #0]
 800aa66:	6825      	ldr	r5, [r4, #0]
 800aa68:	f015 0506 	ands.w	r5, r5, #6
 800aa6c:	d106      	bne.n	800aa7c <_printf_common+0x48>
 800aa6e:	f104 0a19 	add.w	sl, r4, #25
 800aa72:	68e3      	ldr	r3, [r4, #12]
 800aa74:	6832      	ldr	r2, [r6, #0]
 800aa76:	1a9b      	subs	r3, r3, r2
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	dc26      	bgt.n	800aaca <_printf_common+0x96>
 800aa7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	3b00      	subs	r3, #0
 800aa84:	bf18      	it	ne
 800aa86:	2301      	movne	r3, #1
 800aa88:	0692      	lsls	r2, r2, #26
 800aa8a:	d42b      	bmi.n	800aae4 <_printf_common+0xb0>
 800aa8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa90:	4641      	mov	r1, r8
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c8      	blx	r9
 800aa96:	3001      	adds	r0, #1
 800aa98:	d01e      	beq.n	800aad8 <_printf_common+0xa4>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	6922      	ldr	r2, [r4, #16]
 800aa9e:	f003 0306 	and.w	r3, r3, #6
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	bf02      	ittt	eq
 800aaa6:	68e5      	ldreq	r5, [r4, #12]
 800aaa8:	6833      	ldreq	r3, [r6, #0]
 800aaaa:	1aed      	subeq	r5, r5, r3
 800aaac:	68a3      	ldr	r3, [r4, #8]
 800aaae:	bf0c      	ite	eq
 800aab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab4:	2500      	movne	r5, #0
 800aab6:	4293      	cmp	r3, r2
 800aab8:	bfc4      	itt	gt
 800aaba:	1a9b      	subgt	r3, r3, r2
 800aabc:	18ed      	addgt	r5, r5, r3
 800aabe:	2600      	movs	r6, #0
 800aac0:	341a      	adds	r4, #26
 800aac2:	42b5      	cmp	r5, r6
 800aac4:	d11a      	bne.n	800aafc <_printf_common+0xc8>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e008      	b.n	800aadc <_printf_common+0xa8>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4652      	mov	r2, sl
 800aace:	4641      	mov	r1, r8
 800aad0:	4638      	mov	r0, r7
 800aad2:	47c8      	blx	r9
 800aad4:	3001      	adds	r0, #1
 800aad6:	d103      	bne.n	800aae0 <_printf_common+0xac>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae0:	3501      	adds	r5, #1
 800aae2:	e7c6      	b.n	800aa72 <_printf_common+0x3e>
 800aae4:	18e1      	adds	r1, r4, r3
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	2030      	movs	r0, #48	@ 0x30
 800aaea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aaee:	4422      	add	r2, r4
 800aaf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aaf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aaf8:	3302      	adds	r3, #2
 800aafa:	e7c7      	b.n	800aa8c <_printf_common+0x58>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4622      	mov	r2, r4
 800ab00:	4641      	mov	r1, r8
 800ab02:	4638      	mov	r0, r7
 800ab04:	47c8      	blx	r9
 800ab06:	3001      	adds	r0, #1
 800ab08:	d0e6      	beq.n	800aad8 <_printf_common+0xa4>
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7d9      	b.n	800aac2 <_printf_common+0x8e>
	...

0800ab10 <_printf_i>:
 800ab10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab14:	7e0f      	ldrb	r7, [r1, #24]
 800ab16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab18:	2f78      	cmp	r7, #120	@ 0x78
 800ab1a:	4691      	mov	r9, r2
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	469a      	mov	sl, r3
 800ab22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab26:	d807      	bhi.n	800ab38 <_printf_i+0x28>
 800ab28:	2f62      	cmp	r7, #98	@ 0x62
 800ab2a:	d80a      	bhi.n	800ab42 <_printf_i+0x32>
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	f000 80d1 	beq.w	800acd4 <_printf_i+0x1c4>
 800ab32:	2f58      	cmp	r7, #88	@ 0x58
 800ab34:	f000 80b8 	beq.w	800aca8 <_printf_i+0x198>
 800ab38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab40:	e03a      	b.n	800abb8 <_printf_i+0xa8>
 800ab42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab46:	2b15      	cmp	r3, #21
 800ab48:	d8f6      	bhi.n	800ab38 <_printf_i+0x28>
 800ab4a:	a101      	add	r1, pc, #4	@ (adr r1, 800ab50 <_printf_i+0x40>)
 800ab4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab50:	0800aba9 	.word	0x0800aba9
 800ab54:	0800abbd 	.word	0x0800abbd
 800ab58:	0800ab39 	.word	0x0800ab39
 800ab5c:	0800ab39 	.word	0x0800ab39
 800ab60:	0800ab39 	.word	0x0800ab39
 800ab64:	0800ab39 	.word	0x0800ab39
 800ab68:	0800abbd 	.word	0x0800abbd
 800ab6c:	0800ab39 	.word	0x0800ab39
 800ab70:	0800ab39 	.word	0x0800ab39
 800ab74:	0800ab39 	.word	0x0800ab39
 800ab78:	0800ab39 	.word	0x0800ab39
 800ab7c:	0800acbb 	.word	0x0800acbb
 800ab80:	0800abe7 	.word	0x0800abe7
 800ab84:	0800ac75 	.word	0x0800ac75
 800ab88:	0800ab39 	.word	0x0800ab39
 800ab8c:	0800ab39 	.word	0x0800ab39
 800ab90:	0800acdd 	.word	0x0800acdd
 800ab94:	0800ab39 	.word	0x0800ab39
 800ab98:	0800abe7 	.word	0x0800abe7
 800ab9c:	0800ab39 	.word	0x0800ab39
 800aba0:	0800ab39 	.word	0x0800ab39
 800aba4:	0800ac7d 	.word	0x0800ac7d
 800aba8:	6833      	ldr	r3, [r6, #0]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6032      	str	r2, [r6, #0]
 800abb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abb8:	2301      	movs	r3, #1
 800abba:	e09c      	b.n	800acf6 <_printf_i+0x1e6>
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	6820      	ldr	r0, [r4, #0]
 800abc0:	1d19      	adds	r1, r3, #4
 800abc2:	6031      	str	r1, [r6, #0]
 800abc4:	0606      	lsls	r6, r0, #24
 800abc6:	d501      	bpl.n	800abcc <_printf_i+0xbc>
 800abc8:	681d      	ldr	r5, [r3, #0]
 800abca:	e003      	b.n	800abd4 <_printf_i+0xc4>
 800abcc:	0645      	lsls	r5, r0, #25
 800abce:	d5fb      	bpl.n	800abc8 <_printf_i+0xb8>
 800abd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	da03      	bge.n	800abe0 <_printf_i+0xd0>
 800abd8:	232d      	movs	r3, #45	@ 0x2d
 800abda:	426d      	negs	r5, r5
 800abdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abe0:	4858      	ldr	r0, [pc, #352]	@ (800ad44 <_printf_i+0x234>)
 800abe2:	230a      	movs	r3, #10
 800abe4:	e011      	b.n	800ac0a <_printf_i+0xfa>
 800abe6:	6821      	ldr	r1, [r4, #0]
 800abe8:	6833      	ldr	r3, [r6, #0]
 800abea:	0608      	lsls	r0, r1, #24
 800abec:	f853 5b04 	ldr.w	r5, [r3], #4
 800abf0:	d402      	bmi.n	800abf8 <_printf_i+0xe8>
 800abf2:	0649      	lsls	r1, r1, #25
 800abf4:	bf48      	it	mi
 800abf6:	b2ad      	uxthmi	r5, r5
 800abf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800abfa:	4852      	ldr	r0, [pc, #328]	@ (800ad44 <_printf_i+0x234>)
 800abfc:	6033      	str	r3, [r6, #0]
 800abfe:	bf14      	ite	ne
 800ac00:	230a      	movne	r3, #10
 800ac02:	2308      	moveq	r3, #8
 800ac04:	2100      	movs	r1, #0
 800ac06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac0a:	6866      	ldr	r6, [r4, #4]
 800ac0c:	60a6      	str	r6, [r4, #8]
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	db05      	blt.n	800ac1e <_printf_i+0x10e>
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	432e      	orrs	r6, r5
 800ac16:	f021 0104 	bic.w	r1, r1, #4
 800ac1a:	6021      	str	r1, [r4, #0]
 800ac1c:	d04b      	beq.n	800acb6 <_printf_i+0x1a6>
 800ac1e:	4616      	mov	r6, r2
 800ac20:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac24:	fb03 5711 	mls	r7, r3, r1, r5
 800ac28:	5dc7      	ldrb	r7, [r0, r7]
 800ac2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac2e:	462f      	mov	r7, r5
 800ac30:	42bb      	cmp	r3, r7
 800ac32:	460d      	mov	r5, r1
 800ac34:	d9f4      	bls.n	800ac20 <_printf_i+0x110>
 800ac36:	2b08      	cmp	r3, #8
 800ac38:	d10b      	bne.n	800ac52 <_printf_i+0x142>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	07df      	lsls	r7, r3, #31
 800ac3e:	d508      	bpl.n	800ac52 <_printf_i+0x142>
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	6861      	ldr	r1, [r4, #4]
 800ac44:	4299      	cmp	r1, r3
 800ac46:	bfde      	ittt	le
 800ac48:	2330      	movle	r3, #48	@ 0x30
 800ac4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac52:	1b92      	subs	r2, r2, r6
 800ac54:	6122      	str	r2, [r4, #16]
 800ac56:	f8cd a000 	str.w	sl, [sp]
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	aa03      	add	r2, sp, #12
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4640      	mov	r0, r8
 800ac62:	f7ff fee7 	bl	800aa34 <_printf_common>
 800ac66:	3001      	adds	r0, #1
 800ac68:	d14a      	bne.n	800ad00 <_printf_i+0x1f0>
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6e:	b004      	add	sp, #16
 800ac70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	f043 0320 	orr.w	r3, r3, #32
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	4832      	ldr	r0, [pc, #200]	@ (800ad48 <_printf_i+0x238>)
 800ac7e:	2778      	movs	r7, #120	@ 0x78
 800ac80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	6831      	ldr	r1, [r6, #0]
 800ac88:	061f      	lsls	r7, r3, #24
 800ac8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac8e:	d402      	bmi.n	800ac96 <_printf_i+0x186>
 800ac90:	065f      	lsls	r7, r3, #25
 800ac92:	bf48      	it	mi
 800ac94:	b2ad      	uxthmi	r5, r5
 800ac96:	6031      	str	r1, [r6, #0]
 800ac98:	07d9      	lsls	r1, r3, #31
 800ac9a:	bf44      	itt	mi
 800ac9c:	f043 0320 	orrmi.w	r3, r3, #32
 800aca0:	6023      	strmi	r3, [r4, #0]
 800aca2:	b11d      	cbz	r5, 800acac <_printf_i+0x19c>
 800aca4:	2310      	movs	r3, #16
 800aca6:	e7ad      	b.n	800ac04 <_printf_i+0xf4>
 800aca8:	4826      	ldr	r0, [pc, #152]	@ (800ad44 <_printf_i+0x234>)
 800acaa:	e7e9      	b.n	800ac80 <_printf_i+0x170>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	f023 0320 	bic.w	r3, r3, #32
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	e7f6      	b.n	800aca4 <_printf_i+0x194>
 800acb6:	4616      	mov	r6, r2
 800acb8:	e7bd      	b.n	800ac36 <_printf_i+0x126>
 800acba:	6833      	ldr	r3, [r6, #0]
 800acbc:	6825      	ldr	r5, [r4, #0]
 800acbe:	6961      	ldr	r1, [r4, #20]
 800acc0:	1d18      	adds	r0, r3, #4
 800acc2:	6030      	str	r0, [r6, #0]
 800acc4:	062e      	lsls	r6, r5, #24
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	d501      	bpl.n	800acce <_printf_i+0x1be>
 800acca:	6019      	str	r1, [r3, #0]
 800accc:	e002      	b.n	800acd4 <_printf_i+0x1c4>
 800acce:	0668      	lsls	r0, r5, #25
 800acd0:	d5fb      	bpl.n	800acca <_printf_i+0x1ba>
 800acd2:	8019      	strh	r1, [r3, #0]
 800acd4:	2300      	movs	r3, #0
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	4616      	mov	r6, r2
 800acda:	e7bc      	b.n	800ac56 <_printf_i+0x146>
 800acdc:	6833      	ldr	r3, [r6, #0]
 800acde:	1d1a      	adds	r2, r3, #4
 800ace0:	6032      	str	r2, [r6, #0]
 800ace2:	681e      	ldr	r6, [r3, #0]
 800ace4:	6862      	ldr	r2, [r4, #4]
 800ace6:	2100      	movs	r1, #0
 800ace8:	4630      	mov	r0, r6
 800acea:	f7f5 fb01 	bl	80002f0 <memchr>
 800acee:	b108      	cbz	r0, 800acf4 <_printf_i+0x1e4>
 800acf0:	1b80      	subs	r0, r0, r6
 800acf2:	6060      	str	r0, [r4, #4]
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	2300      	movs	r3, #0
 800acfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acfe:	e7aa      	b.n	800ac56 <_printf_i+0x146>
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	4632      	mov	r2, r6
 800ad04:	4649      	mov	r1, r9
 800ad06:	4640      	mov	r0, r8
 800ad08:	47d0      	blx	sl
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d0ad      	beq.n	800ac6a <_printf_i+0x15a>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	079b      	lsls	r3, r3, #30
 800ad12:	d413      	bmi.n	800ad3c <_printf_i+0x22c>
 800ad14:	68e0      	ldr	r0, [r4, #12]
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	4298      	cmp	r0, r3
 800ad1a:	bfb8      	it	lt
 800ad1c:	4618      	movlt	r0, r3
 800ad1e:	e7a6      	b.n	800ac6e <_printf_i+0x15e>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4632      	mov	r2, r6
 800ad24:	4649      	mov	r1, r9
 800ad26:	4640      	mov	r0, r8
 800ad28:	47d0      	blx	sl
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d09d      	beq.n	800ac6a <_printf_i+0x15a>
 800ad2e:	3501      	adds	r5, #1
 800ad30:	68e3      	ldr	r3, [r4, #12]
 800ad32:	9903      	ldr	r1, [sp, #12]
 800ad34:	1a5b      	subs	r3, r3, r1
 800ad36:	42ab      	cmp	r3, r5
 800ad38:	dcf2      	bgt.n	800ad20 <_printf_i+0x210>
 800ad3a:	e7eb      	b.n	800ad14 <_printf_i+0x204>
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	f104 0619 	add.w	r6, r4, #25
 800ad42:	e7f5      	b.n	800ad30 <_printf_i+0x220>
 800ad44:	0800af55 	.word	0x0800af55
 800ad48:	0800af66 	.word	0x0800af66

0800ad4c <memmove>:
 800ad4c:	4288      	cmp	r0, r1
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	eb01 0402 	add.w	r4, r1, r2
 800ad54:	d902      	bls.n	800ad5c <memmove+0x10>
 800ad56:	4284      	cmp	r4, r0
 800ad58:	4623      	mov	r3, r4
 800ad5a:	d807      	bhi.n	800ad6c <memmove+0x20>
 800ad5c:	1e43      	subs	r3, r0, #1
 800ad5e:	42a1      	cmp	r1, r4
 800ad60:	d008      	beq.n	800ad74 <memmove+0x28>
 800ad62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad6a:	e7f8      	b.n	800ad5e <memmove+0x12>
 800ad6c:	4402      	add	r2, r0
 800ad6e:	4601      	mov	r1, r0
 800ad70:	428a      	cmp	r2, r1
 800ad72:	d100      	bne.n	800ad76 <memmove+0x2a>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad7e:	e7f7      	b.n	800ad70 <memmove+0x24>

0800ad80 <_sbrk_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	@ (800ad9c <_sbrk_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f6 fdce 	bl	800192c <_sbrk>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_sbrk_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_sbrk_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	24001404 	.word	0x24001404

0800ada0 <_realloc_r>:
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	4607      	mov	r7, r0
 800ada6:	4614      	mov	r4, r2
 800ada8:	460d      	mov	r5, r1
 800adaa:	b921      	cbnz	r1, 800adb6 <_realloc_r+0x16>
 800adac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb0:	4611      	mov	r1, r2
 800adb2:	f7ff bc5b 	b.w	800a66c <_malloc_r>
 800adb6:	b92a      	cbnz	r2, 800adc4 <_realloc_r+0x24>
 800adb8:	f7ff fbec 	bl	800a594 <_free_r>
 800adbc:	4625      	mov	r5, r4
 800adbe:	4628      	mov	r0, r5
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc4:	f000 f81a 	bl	800adfc <_malloc_usable_size_r>
 800adc8:	4284      	cmp	r4, r0
 800adca:	4606      	mov	r6, r0
 800adcc:	d802      	bhi.n	800add4 <_realloc_r+0x34>
 800adce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800add2:	d8f4      	bhi.n	800adbe <_realloc_r+0x1e>
 800add4:	4621      	mov	r1, r4
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff fc48 	bl	800a66c <_malloc_r>
 800addc:	4680      	mov	r8, r0
 800adde:	b908      	cbnz	r0, 800ade4 <_realloc_r+0x44>
 800ade0:	4645      	mov	r5, r8
 800ade2:	e7ec      	b.n	800adbe <_realloc_r+0x1e>
 800ade4:	42b4      	cmp	r4, r6
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	bf28      	it	cs
 800adec:	4632      	movcs	r2, r6
 800adee:	f7ff fbc3 	bl	800a578 <memcpy>
 800adf2:	4629      	mov	r1, r5
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff fbcd 	bl	800a594 <_free_r>
 800adfa:	e7f1      	b.n	800ade0 <_realloc_r+0x40>

0800adfc <_malloc_usable_size_r>:
 800adfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae00:	1f18      	subs	r0, r3, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfbc      	itt	lt
 800ae06:	580b      	ldrlt	r3, [r1, r0]
 800ae08:	18c0      	addlt	r0, r0, r3
 800ae0a:	4770      	bx	lr

0800ae0c <_init>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr

0800ae18 <_fini>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	bf00      	nop
 800ae1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1e:	bc08      	pop	{r3}
 800ae20:	469e      	mov	lr, r3
 800ae22:	4770      	bx	lr
