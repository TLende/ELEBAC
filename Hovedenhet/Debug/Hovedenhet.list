
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008fbc  08008fbc  00009fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08009138  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013b0  24000060  08009198  0000b060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001410  08009198  0000b410  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 10 .debug_info   000187bf  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c3c  00000000  00000000  0002384d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001070  00000000  00000000  00026490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000caa  00000000  00000000  00027500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003976c  00000000  00000000  000281aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015b3b  00000000  00000000  00061916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169bf7  00000000  00000000  00077451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e1048  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ac8  00000000  00000000  001e108c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001e5b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008fa4 	.word	0x08008fa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08008fa4 	.word	0x08008fa4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f001 ff90 	bl	8002626 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f001 f81e 	bl	800174c <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010dc 	.word	0x240010dc
 800071c:	24000080 	.word	0x24000080
 8000720:	24001100 	.word	0x24001100

08000724 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800072e:	f000 fce7 	bl	8001100 <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000738:	4b67      	ldr	r3, [pc, #412]	@ (80008d8 <Flash_Init+0x1b4>)
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 faf3 	bl	8000d28 <Read_Status_Register>
 8000742:	4603      	mov	r3, r0
 8000744:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800074e:	4b62      	ldr	r3, [pc, #392]	@ (80008d8 <Flash_Init+0x1b4>)
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	7eba      	ldrb	r2, [r7, #26]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb16 	bl	8000d88 <Write_Status_Register>
 800075c:	e011      	b.n	8000782 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800075e:	4b5e      	ldr	r3, [pc, #376]	@ (80008d8 <Flash_Init+0x1b4>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fae0 	bl	8000d28 <Read_Status_Register>
 8000768:	4603      	mov	r3, r0
 800076a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000774:	4b58      	ldr	r3, [pc, #352]	@ (80008d8 <Flash_Init+0x1b4>)
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fb03 	bl	8000d88 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 8000782:	4b55      	ldr	r3, [pc, #340]	@ (80008d8 <Flash_Init+0x1b4>)
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 face 	bl	8000d28 <Read_Status_Register>
 800078c:	4603      	mov	r3, r0
 800078e:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000790:	7e7b      	ldrb	r3, [r7, #25]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 8000798:	7e7b      	ldrb	r3, [r7, #25]
 800079a:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800079e:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007a0:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <Flash_Init+0x1b4>)
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	7e7a      	ldrb	r2, [r7, #25]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 faed 	bl	8000d88 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007c4:	e031      	b.n	800082a <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007ca:	f107 0108 	add.w	r1, r7, #8
 80007ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d0:	2210      	movs	r2, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f950 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e013      	b.n	8000806 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d109      	bne.n	8000800 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007ec:	2201      	movs	r2, #1
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	dde8      	ble.n	80007de <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000818:	3340      	adds	r3, #64	@ 0x40
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800081c:	e005      	b.n	800082a <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 8000824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000826:	3b40      	subs	r3, #64	@ 0x40
 8000828:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800082a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800082c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000830:	4293      	cmp	r3, r2
 8000832:	d1c8      	bne.n	80007c6 <Flash_Init+0xa2>
 8000834:	e000      	b.n	8000838 <Flash_Init+0x114>
				break;
 8000836:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 800083c:	e02a      	b.n	8000894 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000842:	f107 0108 	add.w	r1, r7, #8
 8000846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000848:	2210      	movs	r2, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f914 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e013      	b.n	800087e <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000856:	f107 0208 	add.w	r2, r7, #8
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2bff      	cmp	r3, #255	@ 0xff
 8000862:	d109      	bne.n	8000878 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3301      	adds	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	dde8      	ble.n	8000856 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	4293      	cmp	r3, r2
 800088c:	d002      	beq.n	8000894 <Flash_Init+0x170>
			Temp_Page++;
 800088e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089a:	4293      	cmp	r3, r2
 800089c:	d1cf      	bne.n	800083e <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <Flash_Init+0x1b8>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008a4:	461a      	mov	r2, r3
 80008a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008a8:	8153      	strh	r3, [r2, #10]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <Flash_Init+0x1b8>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b0:	895b      	ldrh	r3, [r3, #10]
 80008b2:	099b      	lsrs	r3, r3, #6
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Flash_Init+0x1b8>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008bc:	811a      	strh	r2, [r3, #8]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <Flash_Init+0x1b8>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c4:	895b      	ldrh	r3, [r3, #10]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <Flash_Init+0x1bc>)
 80008ca:	f000 fbf3 	bl	80010b4 <USART3_Printf>
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2400009c 	.word	0x2400009c
 80008dc:	240000a4 	.word	0x240000a4
 80008e0:	08008fbc 	.word	0x08008fbc

080008e4 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fa18 	bl	8000d28 <Read_Status_Register>
 80008f8:	4603      	mov	r3, r0
 80008fa:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 80008fc:	2064      	movs	r0, #100	@ 0x64
 80008fe:	f000 fbaf 	bl	8001060 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 8000902:	793b      	ldrb	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fa0f 	bl	8000d28 <Read_Status_Register>
 800090a:	4603      	mov	r3, r0
 800090c:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f000 fba6 	bl	8001060 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa06 	bl	8000d28 <Read_Status_Register>
 800091c:	4603      	mov	r3, r0
 800091e:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f000 fb9d 	bl	8001060 <delay_ns>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <Write_Data+0x94>)
 800093e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000942:	895b      	ldrh	r3, [r3, #10]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d108      	bne.n	800095a <Write_Data+0x2a>
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <Write_Data+0x94>)
 800094a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <Write_Data+0x2a>
		Block_Erase(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb4f 	bl	8000ff8 <Block_Erase>
	}
	uint16_t count=0;
 800095a:	2300      	movs	r3, #0
 800095c:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800095e:	e028      	b.n	80009b2 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <Write_Data+0x94>)
 8000962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <Write_Data+0x94>)
 8000970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <Write_Data+0x94>)
 800097a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800097e:	6053      	str	r3, [r2, #4]
		data++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <Write_Data+0x94>)
 8000988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <Write_Data+0x94>)
 8000994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000998:	801a      	strh	r2, [r3, #0]
		count++;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	3301      	adds	r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <Write_Data+0x94>)
 80009a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009ac:	d301      	bcc.n	80009b2 <Write_Data+0x82>
			Write_to_page();
 80009ae:	f000 f80b 	bl	80009c8 <Write_to_page>
	while(count<lenght){
 80009b2:	89fa      	ldrh	r2, [r7, #14]
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d2      	bcc.n	8000960 <Write_Data+0x30>
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240000a4 	.word	0x240000a4

080009c8 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(Flash.Buffer_flip==0){
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <Write_to_page+0xa8>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d116      	bne.n	8000a06 <Write_to_page+0x3e>
		Flash.Buffer_flip=1;
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <Write_to_page+0xa8>)
 80009da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009de:	2201      	movs	r2, #1
 80009e0:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <Write_to_page+0xa8>)
 80009e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <Write_to_page+0xac>)
 80009ec:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <Write_to_page+0xa8>)
 80009f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009f4:	2200      	movs	r2, #0
 80009f6:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 80009f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009fc:	491c      	ldr	r1, [pc, #112]	@ (8000a70 <Write_to_page+0xa8>)
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fa24 	bl	8000e4c <Write_Data_Buffer>
 8000a04:	e015      	b.n	8000a32 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_flip=0;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <Write_to_page+0xa8>)
 8000a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <Write_to_page+0xa8>)
 8000a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1a:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a2a:	4912      	ldr	r1, [pc, #72]	@ (8000a74 <Write_to_page+0xac>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fa0d 	bl	8000e4c <Write_Data_Buffer>
	}
	Write_Data_Flash(Flash.Page_Index);
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <Write_to_page+0xa8>)
 8000a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a38:	895b      	ldrh	r3, [r3, #10]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa42 	bl	8000ec4 <Write_Data_Flash>
	Flash.Page_Index++;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <Write_to_page+0xa8>)
 8000a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <Write_to_page+0xa8>)
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a52:	815a      	strh	r2, [r3, #10]
	Flash.Buffer_Index=0;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <Write_to_page+0xa8>)
 8000a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <Write_to_page+0xa8>)
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	895b      	ldrh	r3, [r3, #10]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f81c 	bl	8000aa4 <Automatic_Block_Managment>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	240000a4 	.word	0x240000a4
 8000a74:	240008a4 	.word	0x240008a4

08000a78 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa4e 	bl	8000f2c <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 fa7b 	bl	8000f90 <Read_Data_Buffer>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aba:	891b      	ldrh	r3, [r3, #8]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d00a      	beq.n	8000ad8 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa97 	bl	8000ff8 <Block_Erase>
		Flash.Block_Mem=Block;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	8113      	strh	r3, [r2, #8]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000ad6:	e005      	b.n	8000ae4 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ade:	461a      	mov	r2, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	8113      	strh	r3, [r2, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240000a4 	.word	0x240000a4

08000af0 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000af6:	482c      	ldr	r0, [pc, #176]	@ (8000ba8 <Chip_Erase+0xb8>)
 8000af8:	f000 fadc 	bl	80010b4 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2201      	movs	r2, #1
 8000b02:	492a      	ldr	r1, [pc, #168]	@ (8000bac <Chip_Erase+0xbc>)
 8000b04:	482a      	ldr	r0, [pc, #168]	@ (8000bb0 <Chip_Erase+0xc0>)
 8000b06:	f006 fc3e 	bl	8007386 <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <Chip_Erase+0xbc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b59      	cmp	r3, #89	@ 0x59
 8000b10:	d143      	bne.n	8000b9a <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000b12:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <Chip_Erase+0xc4>)
 8000b14:	f000 face 	bl	80010b4 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e009      	b.n	8000b32 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa66 	bl	8000ff8 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b38:	ddf1      	ble.n	8000b1e <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
		Flash.Page_Index=0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	815a      	strh	r2, [r3, #10]
		Flash.Block_Mem=0;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b54:	2200      	movs	r2, #0
 8000b56:	811a      	strh	r2, [r3, #8]
		Flash.Buffer_flip=0;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b5e:	2200      	movs	r2, #0
 8000b60:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b6c:	6053      	str	r3, [r2, #4]

		Flash_Data* pointer = &Flash;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b70:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b78:	21ff      	movs	r1, #255	@ 0xff
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 fd94 	bl	80086a8 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8a:	21ff      	movs	r1, #255	@ 0xff
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fd8b 	bl	80086a8 <memset>
		USART3_Printf("Ferdig\r\n");
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <Chip_Erase+0xcc>)
 8000b94:	f000 fa8e 	bl	80010b4 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b98:	e002      	b.n	8000ba0 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b9a:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <Chip_Erase+0xd0>)
 8000b9c:	f000 fa8a 	bl	80010b4 <USART3_Printf>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08008fd4 	.word	0x08008fd4
 8000bac:	2400007d 	.word	0x2400007d
 8000bb0:	24001228 	.word	0x24001228
 8000bb4:	08009008 	.word	0x08009008
 8000bb8:	240000a4 	.word	0x240000a4
 8000bbc:	0800901c 	.word	0x0800901c
 8000bc0:	08009028 	.word	0x08009028

08000bc4 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b089      	sub	sp, #36	@ 0x24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f9a9 	bl	8000f2c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000bda:	88f9      	ldrh	r1, [r7, #6]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	3b01      	subs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	b28b      	uxth	r3, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	4698      	mov	r8, r3
 8000be8:	4691      	mov	r9, r2
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bfe:	b28b      	uxth	r3, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	461c      	mov	r4, r3
 8000c04:	4615      	mov	r5, r2
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	00eb      	lsls	r3, r5, #3
 8000c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c14:	00e2      	lsls	r2, r4, #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	3307      	adds	r3, #7
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c22:	466b      	mov	r3, sp
 8000c24:	3300      	adds	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000c46:	f002 fded 	bl	8003824 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c4a:	2364      	movs	r3, #100	@ 0x64
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4922      	ldr	r1, [pc, #136]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c50:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c52:	f005 fd71 	bl	8006738 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	4820      	ldr	r0, [pc, #128]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c60:	f005 ff58 	bl	8006b14 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3303      	adds	r3, #3
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	330b      	adds	r3, #11
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c7c:	e018      	b.n	8000cb0 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c7e:	8bf9      	ldrh	r1, [r7, #30]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <Read_Data_Cont+0x120>)
 8000c86:	f000 fa15 	bl	80010b4 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c94:	f005 ff3e 	bl	8006b14 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	330b      	adds	r3, #11
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cb6:	d103      	bne.n	8000cc0 <Read_Data_Cont+0xfc>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	7bdb      	ldrb	r3, [r3, #15]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d0de      	beq.n	8000c7e <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000cc6:	f002 fdad 	bl	8003824 <HAL_GPIO_WritePin>
 8000cca:	46b5      	mov	sp, r6
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	@ 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000090 	.word	0x24000090
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240011a0 	.word	0x240011a0
 8000ce4:	08009040 	.word	0x08009040

08000ce8 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <Write_Enable+0x34>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <Write_Enable+0x38>)
 8000cf8:	f002 fd94 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cfc:	2364      	movs	r3, #100	@ 0x64
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <Write_Enable+0x34>)
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <Write_Enable+0x3c>)
 8000d04:	f005 fd18 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <Write_Enable+0x38>)
 8000d0e:	f002 fd89 	bl	8003824 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d12:	2064      	movs	r0, #100	@ 0x64
 8000d14:	f000 f9a4 	bl	8001060 <delay_ns>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000090 	.word	0x24000090
 8000d20:	58020000 	.word	0x58020000
 8000d24:	240011a0 	.word	0x240011a0

08000d28 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d34:	220f      	movs	r2, #15
 8000d36:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d44:	f002 fd6e 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	490a      	ldr	r1, [pc, #40]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d50:	f005 fcf2 	bl	8006738 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d54:	2364      	movs	r3, #100	@ 0x64
 8000d56:	2201      	movs	r2, #1
 8000d58:	490a      	ldr	r1, [pc, #40]	@ (8000d84 <Read_Status_Register+0x5c>)
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d5c:	f005 feda 	bl	8006b14 <HAL_SPI_Receive>
	csHIGH();
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d66:	f002 fd5d 	bl	8003824 <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d6a:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d6c:	795b      	ldrb	r3, [r3, #5]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000090 	.word	0x24000090
 8000d7c:	58020000 	.word	0x58020000
 8000d80:	240011a0 	.word	0x240011a0
 8000d84:	24000095 	.word	0x24000095

08000d88 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <Write_Status_Register+0x54>)
 8000db0:	f002 fd38 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000db4:	2364      	movs	r3, #100	@ 0x64
 8000db6:	2203      	movs	r2, #3
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <Write_Status_Register+0x58>)
 8000dbc:	f005 fcbc 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <Write_Status_Register+0x54>)
 8000dc6:	f002 fd2d 	bl	8003824 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f000 f948 	bl	8001060 <delay_ns>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000090 	.word	0x24000090
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	240011a0 	.word	0x240011a0

08000de4 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <Read_ID+0x5c>)
 8000dec:	229f      	movs	r2, #159	@ 0x9f
 8000dee:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <Read_ID+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <Read_ID+0x60>)
 8000dfc:	f002 fd12 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	2202      	movs	r2, #2
 8000e04:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <Read_ID+0x5c>)
 8000e06:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <Read_ID+0x64>)
 8000e08:	f005 fc96 	bl	8006738 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e0c:	1d39      	adds	r1, r7, #4
 8000e0e:	2364      	movs	r3, #100	@ 0x64
 8000e10:	2204      	movs	r2, #4
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <Read_ID+0x64>)
 8000e14:	f005 fe7e 	bl	8006b14 <HAL_SPI_Receive>
	csHIGH();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <Read_ID+0x60>)
 8000e1e:	f002 fd01 	bl	8003824 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f000 f91c 	bl	8001060 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	041a      	lsls	r2, r3, #16
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	79b9      	ldrb	r1, [r7, #6]
 8000e32:	430b      	orrs	r3, r1
 8000e34:	4313      	orrs	r3, r2
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000090 	.word	0x24000090
 8000e44:	58020000 	.word	0x58020000
 8000e48:	240011a0 	.word	0x240011a0

08000e4c <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e5c:	f7ff ff44 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e70:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e78:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000e80:	f002 fcd0 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e84:	2364      	movs	r3, #100	@ 0x64
 8000e86:	2203      	movs	r2, #3
 8000e88:	490b      	ldr	r1, [pc, #44]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e8c:	f005 fc54 	bl	8006738 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e90:	88ba      	ldrh	r2, [r7, #4]
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e9a:	f005 fc4d 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000ea4:	f002 fcbe 	bl	8003824 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f000 f8d9 	bl	8001060 <delay_ns>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000090 	.word	0x24000090
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	240011a0 	.word	0x240011a0

08000ec4 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000ece:	f7ff ff0b 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ee8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ef0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000ef8:	f002 fc94 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	2204      	movs	r2, #4
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <Write_Data_Flash+0x64>)
 8000f04:	f005 fc18 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000f0e:	f002 fc89 	bl	8003824 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f12:	f000 f8f5 	bl	8001100 <W25N_WaitForReady>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000090 	.word	0x24000090
 8000f24:	58020000 	.word	0x58020000
 8000f28:	240011a0 	.word	0x240011a0

08000f2c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f38:	2213      	movs	r2, #19
 8000f3a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f4c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f54:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f5c:	f002 fc62 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	2204      	movs	r2, #4
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <Select_Page_Read+0x60>)
 8000f68:	f005 fbe6 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f72:	f002 fc57 	bl	8003824 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f76:	f000 f8c3 	bl	8001100 <W25N_WaitForReady>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000090 	.word	0x24000090
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	240011a0 	.word	0x240011a0

08000f90 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fba:	f002 fc33 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	490a      	ldr	r1, [pc, #40]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fc6:	f005 fbb7 	bl	8006738 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fd4:	f005 fd9e 	bl	8006b14 <HAL_SPI_Receive>
	csHIGH();
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fde:	f002 fc21 	bl	8003824 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000090 	.word	0x24000090
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	240011a0 	.word	0x240011a0

08000ff8 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8001002:	f7ff fe71 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <Block_Erase+0x5c>)
 8001008:	22d8      	movs	r2, #216	@ 0xd8
 800100a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <Block_Erase+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <Block_Erase+0x5c>)
 800101c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <Block_Erase+0x5c>)
 8001024:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <Block_Erase+0x60>)
 800102c:	f002 fbfa 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	2204      	movs	r2, #4
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <Block_Erase+0x5c>)
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <Block_Erase+0x64>)
 8001038:	f005 fb7e 	bl	8006738 <HAL_SPI_Transmit>
	csHIGH();
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <Block_Erase+0x60>)
 8001042:	f002 fbef 	bl	8003824 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001046:	f000 f85b 	bl	8001100 <W25N_WaitForReady>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000090 	.word	0x24000090
 8001058:	58020000 	.word	0x58020000
 800105c:	240011a0 	.word	0x240011a0

08001060 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <delay_ns+0x48>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0a5b      	lsrs	r3, r3, #9
 800106e:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <delay_ns+0x4c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	09db      	lsrs	r3, r3, #7
 8001076:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <delay_ns+0x50>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001088:	bf00      	nop
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <delay_ns+0x50>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f8      	bhi.n	800108a <delay_ns+0x2a>
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000000 	.word	0x24000000
 80010ac:	00044b83 	.word	0x00044b83
 80010b0:	e0001000 	.word	0xe0001000

080010b4 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010b4:	b40f      	push	{r0, r1, r2, r3}
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b0a2      	sub	sp, #136	@ 0x88
 80010ba:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010c0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010c2:	f107 0008 	add.w	r0, r7, #8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	f007 fadd 	bl	800868c <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f902 	bl	80002e0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f107 0108 	add.w	r1, r7, #8
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <USART3_Printf+0x48>)
 80010ea:	f006 f8be 	bl	800726a <HAL_UART_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	3788      	adds	r7, #136	@ 0x88
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f8:	b004      	add	sp, #16
 80010fa:	4770      	bx	lr
 80010fc:	24001228 	.word	0x24001228

08001100 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f7ff ffab 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800110a:	e002      	b.n	8001112 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f7ff ffa7 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <W25N_WaitForReady+0x2c>)
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe06 	bl	8000d28 <Read_Status_Register>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f2      	bne.n	800110c <W25N_WaitForReady+0xc>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2400009c 	.word	0x2400009c

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001134:	f000 fade 	bl	80016f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fe46 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f85a 	bl	80011f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 8001140:	f000 fa78 	bl	8001634 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 f9fe 	bl	8001544 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001148:	f000 f8d0 	bl	80012ec <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800114c:	f000 f958 	bl	8001400 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001150:	f000 f9ac 	bl	80014ac <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fae5 	bl	8000724 <Flash_Init>
  Flash.ID=Read_ID();
 800115a:	f7ff fe43 	bl	8000de4 <Read_ID>
 800115e:	4603      	mov	r3, r0
 8001160:	4a1f      	ldr	r2, [pc, #124]	@ (80011e0 <main+0xb0>)
 8001162:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001166:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  Read_Register(SR);
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <main+0xb4>)
 800116a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800116e:	f7ff fbb9 	bl	80008e4 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 8001172:	2364      	movs	r3, #100	@ 0x64
 8001174:	2201      	movs	r2, #1
 8001176:	491c      	ldr	r1, [pc, #112]	@ (80011e8 <main+0xb8>)
 8001178:	481c      	ldr	r0, [pc, #112]	@ (80011ec <main+0xbc>)
 800117a:	f006 f904 	bl	8007386 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <main+0xb8>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b31      	cmp	r3, #49	@ 0x31
 8001184:	d105      	bne.n	8001192 <main+0x62>
		  command = 0;
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <main+0xb8>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
		  Read_Data_Cont(16);
 800118c:	2010      	movs	r0, #16
 800118e:	f7ff fd19 	bl	8000bc4 <Read_Data_Cont>
	  }

	  //Start
	  if(command==0x32){
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <main+0xb8>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b32      	cmp	r3, #50	@ 0x32
 8001198:	d109      	bne.n	80011ae <main+0x7e>
		  command=0;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <main+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
		  Start_Flight_Recording=1;
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <main+0xc0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 80011a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011aa:	f7ff fa87 	bl	80006bc <CAN_SendMessage>
	  }

	  //Stop
	  if(command==0x33){
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <main+0xb8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b33      	cmp	r3, #51	@ 0x33
 80011b4:	d109      	bne.n	80011ca <main+0x9a>
		  Start_Flight_Recording=0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <main+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
		  command=0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <main+0xb8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 80011c2:	f240 1001 	movw	r0, #257	@ 0x101
 80011c6:	f7ff fa79 	bl	80006bc <CAN_SendMessage>
	  }

	  //Erase
	  if(command==0x34){
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <main+0xb8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b34      	cmp	r3, #52	@ 0x34
 80011d0:	d1ca      	bne.n	8001168 <main+0x38>
		  command=0;
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <main+0xb8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		  Chip_Erase();
 80011d8:	f7ff fc8a 	bl	8000af0 <Chip_Erase>
	  Read_Register(SR);
 80011dc:	e7c4      	b.n	8001168 <main+0x38>
 80011de:	bf00      	nop
 80011e0:	240000a4 	.word	0x240000a4
 80011e4:	2400009c 	.word	0x2400009c
 80011e8:	2400007d 	.word	0x2400007d
 80011ec:	24001228 	.word	0x24001228
 80011f0:	2400007c 	.word	0x2400007c

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09c      	sub	sp, #112	@ 0x70
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fe:	224c      	movs	r2, #76	@ 0x4c
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f007 fa50 	bl	80086a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2220      	movs	r2, #32
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f007 fa4a 	bl	80086a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001214:	2002      	movs	r0, #2
 8001216:	f002 fb1f 	bl	8003858 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <SystemClock_Config+0xf0>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <SystemClock_Config+0xf0>)
 8001224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <SystemClock_Config+0xf0>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <SystemClock_Config+0xf4>)
 8001236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001238:	4a2b      	ldr	r2, [pc, #172]	@ (80012e8 <SystemClock_Config+0xf4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <SystemClock_Config+0xf4>)
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800124c:	bf00      	nop
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <SystemClock_Config+0xf0>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800125a:	d1f8      	bne.n	800124e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125c:	2302      	movs	r3, #2
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001260:	2301      	movs	r3, #1
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	2300      	movs	r3, #0
 800126e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001274:	233c      	movs	r3, #60	@ 0x3c
 8001276:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800127c:	230a      	movs	r3, #10
 800127e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001284:	230c      	movs	r3, #12
 8001286:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001288:	2300      	movs	r3, #0
 800128a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fb19 	bl	80038cc <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012a0:	f000 fa54 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	233f      	movs	r3, #63	@ 0x3f
 80012a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2303      	movs	r3, #3
 80012aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012b0:	2308      	movs	r3, #8
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2104      	movs	r1, #4
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 ff58 	bl	8004180 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012d6:	f000 fa39 	bl	800174c <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3770      	adds	r7, #112	@ 0x70
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024800 	.word	0x58024800
 80012e8:	58000400 	.word	0x58000400

080012ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80012f2:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <MX_FDCAN1_Init+0x108>)
 80012f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012f8:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <MX_FDCAN1_Init+0x108>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fe:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001302:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <MX_FDCAN1_Init+0x108>)
 8001304:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001310:	4b39      	ldr	r3, [pc, #228]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001312:	4a3a      	ldr	r2, [pc, #232]	@ (80013fc <MX_FDCAN1_Init+0x110>)
 8001314:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800131c:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001324:	2200      	movs	r2, #0
 8001326:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001328:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800132a:	2200      	movs	r2, #0
 800132c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800132e:	4b32      	ldr	r3, [pc, #200]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001330:	2200      	movs	r2, #0
 8001332:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001334:	4b30      	ldr	r3, [pc, #192]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001336:	2201      	movs	r2, #1
 8001338:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800133a:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800133c:	2202      	movs	r2, #2
 800133e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001340:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001342:	2205      	movs	r2, #5
 8001344:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001348:	2202      	movs	r2, #2
 800134a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800134e:	2201      	movs	r2, #1
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001354:	2203      	movs	r2, #3
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800135a:	2204      	movs	r2, #4
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001360:	2203      	movs	r2, #3
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001378:	2240      	movs	r2, #64	@ 0x40
 800137a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800137e:	2204      	movs	r2, #4
 8001380:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001384:	2200      	movs	r2, #0
 8001386:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800138a:	2204      	movs	r2, #4
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001390:	2200      	movs	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 8001396:	2204      	movs	r2, #4
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013b8:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013ba:	f000 ff2b 	bl	8002214 <HAL_FDCAN_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80013c4:	f000 f9c2 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013ca:	f001 f901 	bl	80025d0 <HAL_FDCAN_Start>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80013d4:	f000 f9ba 	bl	800174c <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_FDCAN1_Init+0x10c>)
 80013de:	f001 fae9 	bl	80029b4 <HAL_FDCAN_ActivateNotification>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80013e8:	f000 f9b0 	bl	800174c <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58024400 	.word	0x58024400
 80013f8:	24001100 	.word	0x24001100
 80013fc:	4000a000 	.word	0x4000a000

08001400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001404:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001406:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <MX_SPI1_Init+0xa8>)
 8001408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800140c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800141a:	2207      	movs	r2, #7
 800141c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800142c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001458:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_SPI1_Init+0xa4>)
 8001492:	f005 f82d 	bl	80064f0 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800149c:	f000 f956 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	240011a0 	.word	0x240011a0
 80014a8:	40013000 	.word	0x40013000

080014ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014b0:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014b2:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <MX_USART3_UART_Init+0x94>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f4:	4811      	ldr	r0, [pc, #68]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014f6:	f005 fe68 	bl	80071ca <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 f924 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_USART3_UART_Init+0x90>)
 8001508:	f006 ffc7 	bl	800849a <HAL_UARTEx_SetTxFifoThreshold>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001512:	f000 f91b 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4808      	ldr	r0, [pc, #32]	@ (800153c <MX_USART3_UART_Init+0x90>)
 800151a:	f006 fffc 	bl	8008516 <HAL_UARTEx_SetRxFifoThreshold>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001524:	f000 f912 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_USART3_UART_Init+0x90>)
 800152a:	f006 ff7d 	bl	8008428 <HAL_UARTEx_DisableFifoMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 f90a 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	24001228 	.word	0x24001228
 8001540:	40004800 	.word	0x40004800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <MX_GPIO_Init+0xe4>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001560:	4a31      	ldr	r2, [pc, #196]	@ (8001628 <MX_GPIO_Init+0xe4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <MX_GPIO_Init+0xe4>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <MX_GPIO_Init+0xe4>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	4a2a      	ldr	r2, [pc, #168]	@ (8001628 <MX_GPIO_Init+0xe4>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <MX_GPIO_Init+0xe4>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MX_GPIO_Init+0xe4>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159c:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <MX_GPIO_Init+0xe4>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_GPIO_Init+0xe4>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2110      	movs	r1, #16
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <MX_GPIO_Init+0xe8>)
 80015d8:	f002 f924 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <MX_GPIO_Init+0xec>)
 80015e2:	f002 f91f 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80015e6:	2310      	movs	r3, #16
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <MX_GPIO_Init+0xe8>)
 80015fe:	f001 ff61 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001602:	2310      	movs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_GPIO_Init+0xec>)
 800161a:	f001 ff53 	bl	80034c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
 800162c:	58020000 	.word	0x58020000
 8001630:	58021800 	.word	0x58021800

08001634 <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <init+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001640:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <init+0xb0>)
 8001642:	22a0      	movs	r2, #160	@ 0xa0
 8001644:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001646:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <init+0xb0>)
 8001648:	2200      	movs	r2, #0
 800164a:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <init+0xb0>)
 800164e:	22b0      	movs	r2, #176	@ 0xb0
 8001650:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <init+0xb0>)
 8001654:	2200      	movs	r2, #0
 8001656:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <init+0xb0>)
 800165a:	22c0      	movs	r2, #192	@ 0xc0
 800165c:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <init+0xb4>)
 8001660:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001668:	21ff      	movs	r1, #255	@ 0xff
 800166a:	4618      	mov	r0, r3
 800166c:	f007 f81c 	bl	80086a8 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800167a:	21ff      	movs	r1, #255	@ 0xff
 800167c:	4618      	mov	r0, r3
 800167e:	f007 f813 	bl	80086a8 <memset>
	Flash.Buffer_Index = 0;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <init+0xb4>)
 8001684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001688:	2200      	movs	r2, #0
 800168a:	801a      	strh	r2, [r3, #0]
	Flash.Buffer_flip = 0;
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <init+0xb4>)
 800168e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001692:	2200      	movs	r2, #0
 8001694:	709a      	strb	r2, [r3, #2]
	Flash.Block_Mem = 0;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <init+0xb4>)
 8001698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169c:	2200      	movs	r2, #0
 800169e:	811a      	strh	r2, [r3, #8]
	Flash.Page_Index = 0;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <init+0xb4>)
 80016a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a6:	2200      	movs	r2, #0
 80016a8:	815a      	strh	r2, [r3, #10]
	Flash.ID = 0;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <init+0xb4>)
 80016ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b0:	461a      	mov	r2, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	60d3      	str	r3, [r2, #12]
	Flash.Buffer_p = Flash.Buffer_0;
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <init+0xb4>)
 80016b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016bc:	461a      	mov	r2, r3
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <init+0xb4>)
 80016c0:	6053      	str	r3, [r2, #4]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <init+0xb8>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <init+0xb8>)
 80016c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016cc:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <init+0xbc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <init+0xbc>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2400009c 	.word	0x2400009c
 80016e8:	240000a4 	.word	0x240000a4
 80016ec:	e000edf0 	.word	0xe000edf0
 80016f0:	e0001000 	.word	0xe0001000

080016f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001706:	f000 fd0d 	bl	8002124 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800170e:	2300      	movs	r3, #0
 8001710:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001716:	231f      	movs	r3, #31
 8001718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800171a:	2387      	movs	r3, #135	@ 0x87
 800171c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800171e:	2300      	movs	r3, #0
 8001720:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001722:	2300      	movs	r3, #0
 8001724:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd2b 	bl	8002194 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800173e:	2004      	movs	r0, #4
 8001740:	f000 fd08 	bl	8002154 <HAL_MPU_Enable>

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <Error_Handler+0x10>)
 8001752:	f000 ff3d 	bl	80025d0 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	24001100 	.word	0x24001100

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_MspInit+0x30>)
 8001768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x30>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x30>)
 8001778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58024400 	.word	0x58024400

08001794 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0ba      	sub	sp, #232	@ 0xe8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	22c0      	movs	r2, #192	@ 0xc0
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 ff77 	bl	80086a8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a33      	ldr	r2, [pc, #204]	@ (800188c <HAL_FDCAN_MspInit+0xf8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d15f      	bne.n	8001884 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80017d4:	230a      	movs	r3, #10
 80017d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80017dc:	2314      	movs	r3, #20
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80017e4:	23c0      	movs	r3, #192	@ 0xc0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80017e8:	2320      	movs	r3, #32
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80017f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f84b 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001808:	f7ff ffa0 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 800180e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001812:	4a1f      	ldr	r2, [pc, #124]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001818:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 800181e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_FDCAN_MspInit+0xfc>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001862:	2309      	movs	r3, #9
 8001864:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800186c:	4619      	mov	r1, r3
 800186e:	4809      	ldr	r0, [pc, #36]	@ (8001894 <HAL_FDCAN_MspInit+0x100>)
 8001870:	f001 fe28 	bl	80034c4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2013      	movs	r0, #19
 800187a:	f000 fc1e 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800187e:	2013      	movs	r0, #19
 8001880:	f000 fc35 	bl	80020ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	37e8      	adds	r7, #232	@ 0xe8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	4000a000 	.word	0x4000a000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020400 	.word	0x58020400

08001898 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0ba      	sub	sp, #232	@ 0xe8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	22c0      	movs	r2, #192	@ 0xc0
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 fef5 	bl	80086a8 <memset>
  if(hspi->Instance==SPI1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a26      	ldr	r2, [pc, #152]	@ (800195c <HAL_SPI_MspInit+0xc4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d144      	bne.n	8001952 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 ffdb 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80018e8:	f7ff ff30 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 80018ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 80018f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 80018fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_SPI_MspInit+0xc8>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001928:	23e0      	movs	r3, #224	@ 0xe0
 800192a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001940:	2305      	movs	r3, #5
 8001942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <HAL_SPI_MspInit+0xcc>)
 800194e:	f001 fdb9 	bl	80034c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001952:	bf00      	nop
 8001954:	37e8      	adds	r7, #232	@ 0xe8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40013000 	.word	0x40013000
 8001960:	58024400 	.word	0x58024400
 8001964:	58020000 	.word	0x58020000

08001968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ba      	sub	sp, #232	@ 0xe8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	22c0      	movs	r2, #192	@ 0xc0
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f006 fe8d 	bl	80086a8 <memset>
  if(huart->Instance==USART3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <HAL_UART_MspInit+0xc8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d146      	bne.n	8001a26 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001998:	f04f 0202 	mov.w	r2, #2
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 ff72 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019ba:	f7ff fec7 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 8001a22:	f001 fd4f 	bl	80034c4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	37e8      	adds	r7, #232	@ 0xe8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004800 	.word	0x40004800
 8001a34:	58024400 	.word	0x58024400
 8001a38:	58020c00 	.word	0x58020c00

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 fa0a 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001a98:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <SysTick_Handler+0x28>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SysTick_Handler+0x2c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <SysTick_Handler+0x2c>)
 8001aa8:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001aaa:	e002      	b.n	8001ab2 <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <SysTick_Handler+0x2c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2400007c 	.word	0x2400007c
 8001abc:	240012bc 	.word	0x240012bc

08001ac0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001ac6:	f000 ffef 	bl	8002aa8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	24001100 	.word	0x24001100

08001ad4 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8001ade:	e03f      	b.n	8001b60 <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8001ae0:	23f0      	movs	r3, #240	@ 0xf0
 8001ae2:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001ae4:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	3301      	adds	r3, #1
 8001aee:	b292      	uxth	r2, r2
 8001af0:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001af4:	7a1b      	ldrb	r3, [r3, #8]
 8001af6:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001afa:	7a5b      	ldrb	r3, [r3, #9]
 8001afc:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b00:	7a9b      	ldrb	r3, [r3, #10]
 8001b02:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b06:	7adb      	ldrb	r3, [r3, #11]
 8001b08:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b0c:	7b1b      	ldrb	r3, [r3, #12]
 8001b0e:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b12:	7b5b      	ldrb	r3, [r3, #13]
 8001b14:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 8001b16:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b18:	7b9b      	ldrb	r3, [r3, #14]
 8001b1a:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b1e:	7bdb      	ldrb	r3, [r3, #15]
 8001b20:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e1b      	lsrs	r3, r3, #24
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2110      	movs	r1, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fee8 	bl	8000930 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b62:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001b64:	2140      	movs	r1, #64	@ 0x40
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b68:	f000 fdb8 	bl	80026dc <HAL_FDCAN_GetRxMessage>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0b6      	beq.n	8001ae0 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	240010b4 	.word	0x240010b4
 8001b80:	24000080 	.word	0x24000080
 8001b84:	240012bc 	.word	0x240012bc
 8001b88:	2400007c 	.word	0x2400007c
 8001b8c:	24000088 	.word	0x24000088
 8001b90:	24001100 	.word	0x24001100

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f006 fd78 	bl	80086b8 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	24080000 	.word	0x24080000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	240012c0 	.word	0x240012c0
 8001bfc:	24001410 	.word	0x24001410

08001c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <SystemInit+0x114>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0a:	4a42      	ldr	r2, [pc, #264]	@ (8001d14 <SystemInit+0x114>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c14:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <SystemInit+0x118>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d807      	bhi.n	8001c30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c20:	4b3d      	ldr	r3, [pc, #244]	@ (8001d18 <SystemInit+0x118>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 030f 	bic.w	r3, r3, #15
 8001c28:	4a3b      	ldr	r2, [pc, #236]	@ (8001d18 <SystemInit+0x118>)
 8001c2a:	f043 0307 	orr.w	r3, r3, #7
 8001c2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c30:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <SystemInit+0x11c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a39      	ldr	r2, [pc, #228]	@ (8001d1c <SystemInit+0x11c>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c3c:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <SystemInit+0x11c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <SystemInit+0x11c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4935      	ldr	r1, [pc, #212]	@ (8001d1c <SystemInit+0x11c>)
 8001c48:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <SystemInit+0x120>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c4e:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <SystemInit+0x118>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <SystemInit+0x118>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 030f 	bic.w	r3, r3, #15
 8001c62:	4a2d      	ldr	r2, [pc, #180]	@ (8001d18 <SystemInit+0x118>)
 8001c64:	f043 0307 	orr.w	r3, r3, #7
 8001c68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <SystemInit+0x11c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <SystemInit+0x11c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <SystemInit+0x11c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <SystemInit+0x11c>)
 8001c7e:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <SystemInit+0x124>)
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <SystemInit+0x11c>)
 8001c84:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <SystemInit+0x128>)
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <SystemInit+0x11c>)
 8001c8a:	4a28      	ldr	r2, [pc, #160]	@ (8001d2c <SystemInit+0x12c>)
 8001c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c8e:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <SystemInit+0x11c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <SystemInit+0x11c>)
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <SystemInit+0x12c>)
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <SystemInit+0x11c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <SystemInit+0x11c>)
 8001ca2:	4a22      	ldr	r2, [pc, #136]	@ (8001d2c <SystemInit+0x12c>)
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <SystemInit+0x11c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <SystemInit+0x11c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d1c <SystemInit+0x11c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <SystemInit+0x11c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <SystemInit+0x130>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <SystemInit+0x134>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cca:	d202      	bcs.n	8001cd2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <SystemInit+0x138>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <SystemInit+0x11c>)
 8001cd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d113      	bne.n	8001d08 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <SystemInit+0x11c>)
 8001ce2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <SystemInit+0x11c>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <SystemInit+0x13c>)
 8001cf2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <SystemInit+0x11c>)
 8001cfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cfe:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <SystemInit+0x11c>)
 8001d00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	52002000 	.word	0x52002000
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d24:	02020200 	.word	0x02020200
 8001d28:	01ff0000 	.word	0x01ff0000
 8001d2c:	01010280 	.word	0x01010280
 8001d30:	5c001000 	.word	0x5c001000
 8001d34:	ffff0000 	.word	0xffff0000
 8001d38:	51008108 	.word	0x51008108
 8001d3c:	52004000 	.word	0x52004000

08001d40 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d50:	bf00      	nop
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f9      	beq.n	8001d52 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	58024800 	.word	0x58024800

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001dac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d74:	f7ff ffe4 	bl	8001d40 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d78:	f7ff ff42 	bl	8001c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f006 fc8f 	bl	80086c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff f9c3 	bl	8001130 <main>
  bx  lr
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001db4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001db8:	08009138 	.word	0x08009138
  ldr r2, =_sbss
 8001dbc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001dc0:	24001410 	.word	0x24001410

08001dc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC3_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f000 f968 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dd4:	f002 fb8a 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_Init+0x68>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	4913      	ldr	r1, [pc, #76]	@ (8001e34 <HAL_Init+0x6c>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_Init+0x68>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <HAL_Init+0x6c>)
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <HAL_Init+0x70>)
 8001e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_Init+0x74>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f814 	bl	8001e40 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e002      	b.n	8001e28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e22:	f7ff fc9d 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	080090ac 	.word	0x080090ac
 8001e38:	24000004 	.word	0x24000004
 8001e3c:	24000000 	.word	0x24000000

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_InitTick+0x60>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e021      	b.n	8001e98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <HAL_InitTick+0x64>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_InitTick+0x60>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f94d 	bl	800210a <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f917 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ea8 <HAL_InitTick+0x68>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2400000c 	.word	0x2400000c
 8001ea4:	24000000 	.word	0x24000000
 8001ea8:	24000008 	.word	0x24000008

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2400000c 	.word	0x2400000c
 8001ed0:	240012c4 	.word	0x240012c4

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	240012c4 	.word	0x240012c4

08001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <HAL_GetREVID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	5c001000 	.word	0x5c001000

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002128:	f3bf 8f5f 	dmb	sy
}
 800212c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_MPU_Disable+0x28>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	4a06      	ldr	r2, [pc, #24]	@ (800214c <HAL_MPU_Disable+0x28>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002138:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_MPU_Disable+0x2c>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	e000ed90 	.word	0xe000ed90

08002154 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <HAL_MPU_Enable+0x38>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_MPU_Enable+0x3c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	4a09      	ldr	r2, [pc, #36]	@ (8002190 <HAL_MPU_Enable+0x3c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002172:	f3bf 8f4f 	dsb	sy
}
 8002176:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002178:	f3bf 8f6f 	isb	sy
}
 800217c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed90 	.word	0xe000ed90
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	785a      	ldrb	r2, [r3, #1]
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7b1b      	ldrb	r3, [r3, #12]
 80021bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7adb      	ldrb	r3, [r3, #11]
 80021c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7a9b      	ldrb	r3, [r3, #10]
 80021ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b5b      	ldrb	r3, [r3, #13]
 80021d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7b9b      	ldrb	r3, [r3, #14]
 80021da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7bdb      	ldrb	r3, [r3, #15]
 80021e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7a5b      	ldrb	r3, [r3, #9]
 80021ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7a1b      	ldrb	r3, [r3, #8]
 80021f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002200:	6113      	str	r3, [r2, #16]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed90 	.word	0xe000ed90

08002214 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b098      	sub	sp, #96	@ 0x60
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800221c:	4a84      	ldr	r2, [pc, #528]	@ (8002430 <HAL_FDCAN_Init+0x21c>)
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	4611      	mov	r1, r2
 8002224:	224c      	movs	r2, #76	@ 0x4c
 8002226:	4618      	mov	r0, r3
 8002228:	f006 fa72 	bl	8008710 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1c6      	b.n	80025c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <HAL_FDCAN_Init+0x220>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d106      	bne.n	800224e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fa96 	bl	8001794 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0210 	bic.w	r2, r2, #16
 8002276:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7ff fe2c 	bl	8001ed4 <HAL_GetTick>
 800227c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800227e:	e014      	b.n	80022aa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002280:	f7ff fe28 	bl	8001ed4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d90d      	bls.n	80022aa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e18c      	b.n	80025c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d0e3      	beq.n	8002280 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c8:	f7ff fe04 	bl	8001ed4 <HAL_GetTick>
 80022cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022ce:	e014      	b.n	80022fa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022d0:	f7ff fe00 	bl	8001ed4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b0a      	cmp	r3, #10
 80022dc:	d90d      	bls.n	80022fa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e164      	b.n	80025c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0e3      	beq.n	80022d0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0202 	orr.w	r2, r2, #2
 8002316:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7c1b      	ldrb	r3, [r3, #16]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800232e:	619a      	str	r2, [r3, #24]
 8002330:	e007      	b.n	8002342 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002340:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7c5b      	ldrb	r3, [r3, #17]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002358:	619a      	str	r2, [r3, #24]
 800235a:	e007      	b.n	800236c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800236a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7c9b      	ldrb	r3, [r3, #18]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	e007      	b.n	8002396 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002394:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80023ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0204 	orr.w	r2, r2, #4
 80023e2:	619a      	str	r2, [r3, #24]
 80023e4:	e030      	b.n	8002448 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d02c      	beq.n	8002448 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d020      	beq.n	8002438 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002404:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0210 	orr.w	r2, r2, #16
 8002414:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d114      	bne.n	8002448 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	619a      	str	r2, [r3, #24]
 800242e:	e00b      	b.n	8002448 <HAL_FDCAN_Init+0x234>
 8002430:	08009060 	.word	0x08009060
 8002434:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	3b01      	subs	r3, #1
 800244e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	3b01      	subs	r3, #1
 8002456:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002458:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002460:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	3b01      	subs	r3, #1
 800246a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002470:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002472:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800247c:	d115      	bne.n	80024aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	3b01      	subs	r3, #1
 800248a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800248c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002496:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80024a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	4413      	add	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80024de:	f023 0107 	bic.w	r1, r3, #7
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	3360      	adds	r3, #96	@ 0x60
 80024ea:	443b      	add	r3, r7
 80024ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d011      	beq.n	8002526 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800250a:	f023 0107 	bic.w	r1, r3, #7
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3360      	adds	r3, #96	@ 0x60
 8002516:	443b      	add	r3, r7
 8002518:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002536:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	3360      	adds	r3, #96	@ 0x60
 8002542:	443b      	add	r3, r7
 8002544:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002548:	011a      	lsls	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002564:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3360      	adds	r3, #96	@ 0x60
 8002570:	443b      	add	r3, r7
 8002572:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_FDCAN_Init+0x3b8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d107      	bne.n	800259c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f022 0203 	bic.w	r2, r2, #3
 800259a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fd81 	bl	80030bc <FDCAN_CalcultateRamBlockAddresses>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80025c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3760      	adds	r7, #96	@ 0x60
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	4000a000 	.word	0x4000a000

080025d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d111      	bne.n	8002608 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e008      	b.n	800261a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800260e:	f043 0204 	orr.w	r2, r3, #4
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d141      	bne.n	80026c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002646:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e038      	b.n	80026d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800266a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002678:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e026      	b.n	80026d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fe93 	bl	80033c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80026b2:	2201      	movs	r2, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e008      	b.n	80026d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026c8:	f043 0208 	orr.w	r2, r3, #8
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80026dc:	b480      	push	{r7}
 80026de:	b08b      	sub	sp, #44	@ 0x2c
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80026f4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80026f6:	7efb      	ldrb	r3, [r7, #27]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 8149 	bne.w	8002990 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d14c      	bne.n	800279e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800270c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e13c      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800273e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e12a      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800275c:	d10a      	bne.n	8002774 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800276a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800276e:	d101      	bne.n	8002774 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
 800279c:	e068      	b.n	8002870 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b41      	cmp	r3, #65	@ 0x41
 80027a2:	d14c      	bne.n	800283e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0ec      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0da      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027fc:	d10a      	bne.n	8002814 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800280a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800280e:	d101      	bne.n	8002814 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002810:	2301      	movs	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002830:	69f9      	ldr	r1, [r7, #28]
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
 800283c:	e018      	b.n	8002870 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	429a      	cmp	r2, r3
 8002846:	d309      	bcc.n	800285c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0a2      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e005      	b.n	80028a0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	3304      	adds	r3, #4
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 020f 	and.w	r2, r3, #15
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e1b      	lsrs	r3, r3, #24
 80028f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0fda      	lsrs	r2, r3, #31
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3304      	adds	r3, #4
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	e00a      	b.n	800292c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	441a      	add	r2, r3
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	440b      	add	r3, r1
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	3301      	adds	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	461a      	mov	r2, r3
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	4293      	cmp	r3, r2
 800293a:	d3ec      	bcc.n	8002916 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	d105      	bne.n	800294e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800294c:	e01e      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b41      	cmp	r3, #65	@ 0x41
 8002952:	d105      	bne.n	8002960 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800295e:	e015      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b1f      	cmp	r3, #31
 8002964:	d808      	bhi.n	8002978 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002976:	e009      	b.n	800298c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 021f 	and.w	r2, r3, #31
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f202 	lsl.w	r2, r1, r2
 8002988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e008      	b.n	80029a2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002996:	f043 0208 	orr.w	r2, r3, #8
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	372c      	adds	r7, #44	@ 0x2c
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	080090bc 	.word	0x080090bc

080029b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80029c6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d002      	beq.n	80029d4 <HAL_FDCAN_ActivateNotification+0x20>
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d155      	bne.n	8002a80 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029f2:	e014      	b.n	8002a1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4013      	ands	r3, r2
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d108      	bne.n	8002a16 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0202 	orr.w	r2, r2, #2
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a14:	e003      	b.n	8002a1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_FDCAN_ActivateNotification+0xec>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0f9b      	lsrs	r3, r3, #30
 8002a76:	490b      	ldr	r1, [pc, #44]	@ (8002aa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e008      	b.n	8002a92 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	3fcfffff 	.word	0x3fcfffff
 8002aa4:	4000a800 	.word	0x4000a800

08002aa8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b096      	sub	sp, #88	@ 0x58
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002ab0:	4b9a      	ldr	r3, [pc, #616]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	079b      	lsls	r3, r3, #30
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002ab8:	4b98      	ldr	r3, [pc, #608]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	079b      	lsls	r3, r3, #30
 8002abe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ace:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ad8:	4013      	ands	r3, r2
 8002ada:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002af0:	4013      	ands	r3, r2
 8002af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b08:	4013      	ands	r3, r2
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b12:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b20:	4013      	ands	r3, r2
 8002b22:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8002b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b38:	4013      	ands	r3, r2
 8002b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa54 	bl	8003022 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7c:	0a9b      	lsrs	r3, r3, #10
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01d      	beq.n	8002bc2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	0a9b      	lsrs	r3, r3, #10
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bb4:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002bba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa07 	bl	8002fd0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bce:	4b54      	ldr	r3, [pc, #336]	@ (8002d20 <HAL_FDCAN_IRQHandler+0x278>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bd4:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd8:	0f9b      	lsrs	r3, r3, #30
 8002bda:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002bdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9c0 	bl	8002f64 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <HAL_FDCAN_IRQHandler+0x278>)
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bf6:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bfa:	0f9b      	lsrs	r3, r3, #30
 8002bfc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f9ba 	bl	8002f7a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c12:	4b43      	ldr	r3, [pc, #268]	@ (8002d20 <HAL_FDCAN_IRQHandler+0x278>)
 8002c14:	400b      	ands	r3, r1
 8002c16:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c18:	4a40      	ldr	r2, [pc, #256]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1c:	0f9b      	lsrs	r3, r3, #30
 8002c1e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002c20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe ff56 	bl	8001ad4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002c34:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <HAL_FDCAN_IRQHandler+0x278>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c3a:	4a38      	ldr	r2, [pc, #224]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3e:	0f9b      	lsrs	r3, r3, #30
 8002c40:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002c42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9a3 	bl	8002f90 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4c:	0adb      	lsrs	r3, r3, #11
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c58:	0adb      	lsrs	r3, r3, #11
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f997 	bl	8002fa6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01d      	beq.n	8002cc0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c86:	0a5b      	lsrs	r3, r3, #9
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f97d 	bl	8002fba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc2:	0cdb      	lsrs	r3, r3, #19
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cce:	0cdb      	lsrs	r3, r3, #19
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ce0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f97c 	bl	8002fe6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <HAL_FDCAN_IRQHandler+0x274>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	e004      	b.n	8002d24 <HAL_FDCAN_IRQHandler+0x27c>
 8002d1a:	bf00      	nop
 8002d1c:	4000a800 	.word	0x4000a800
 8002d20:	3fcfffff 	.word	0x3fcfffff
 8002d24:	f000 f969 	bl	8002ffa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	0c9b      	lsrs	r3, r3, #18
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d48:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d4a:	4b83      	ldr	r3, [pc, #524]	@ (8002f58 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f95c 	bl	800300e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d58:	0c5b      	lsrs	r3, r3, #17
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	0c5b      	lsrs	r3, r3, #17
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00f      	beq.n	8002d8e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d76:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d78:	4b77      	ldr	r3, [pc, #476]	@ (8002f58 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d9a:	4b70      	ldr	r3, [pc, #448]	@ (8002f5c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002da0:	4a6d      	ldr	r2, [pc, #436]	@ (8002f58 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da4:	0f9b      	lsrs	r3, r3, #30
 8002da6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f94d 	bl	800304a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d011      	beq.n	8002dda <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dbc:	4b67      	ldr	r3, [pc, #412]	@ (8002f5c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dc2:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc6:	0f9b      	lsrs	r3, r3, #30
 8002dc8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a60      	ldr	r2, [pc, #384]	@ (8002f60 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	f040 80ac 	bne.w	8002f3e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a4 	beq.w	8002f3e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e22:	4013      	ands	r3, r2
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002e48:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	4013      	ands	r3, r2
 8002e54:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002e60:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e8a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8e6 	bl	8003060 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f8e6 	bl	8003076 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d014      	beq.n	8002eec <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	6939      	ldr	r1, [r7, #16]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8d0 	bl	800308c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002efa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8d1 	bl	80030a4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f874 	bl	8003036 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3758      	adds	r7, #88	@ 0x58
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	4000a800 	.word	0x4000a800
 8002f5c:	3fcfffff 	.word	0x3fcfffff
 8002f60:	4000a000 	.word	0x4000a000

08002f64 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80030d2:	4ba7      	ldr	r3, [pc, #668]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	0091      	lsls	r1, r2, #2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	430b      	orrs	r3, r1
 80030e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ec:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4413      	add	r3, r2
 8003108:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003112:	4b97      	ldr	r3, [pc, #604]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003114:	4013      	ands	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	0091      	lsls	r1, r2, #2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	430b      	orrs	r3, r1
 8003120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003154:	4b86      	ldr	r3, [pc, #536]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003156:	4013      	ands	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	0091      	lsls	r1, r2, #2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800316e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	041a      	lsls	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800319c:	4b74      	ldr	r3, [pc, #464]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	0091      	lsls	r1, r2, #2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031b6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	041a      	lsls	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	4413      	add	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80031e4:	4b62      	ldr	r3, [pc, #392]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	0091      	lsls	r1, r2, #2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003210:	4b57      	ldr	r3, [pc, #348]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	0091      	lsls	r1, r2, #2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800322a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	041a      	lsls	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003252:	4b47      	ldr	r3, [pc, #284]	@ (8003370 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003254:	4013      	ands	r3, r2
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	0091      	lsls	r1, r2, #2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	430b      	orrs	r3, r1
 8003260:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800326c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003288:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	061a      	lsls	r2, r3, #24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a0:	4b34      	ldr	r3, [pc, #208]	@ (8003374 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80032a2:	4413      	add	r3, r2
 80032a4:	009a      	lsls	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d915      	bls.n	8003398 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800336c:	e006      	b.n	800337c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800336e:	bf00      	nop
 8003370:	ffff0003 	.word	0xffff0003
 8003374:	10002b00 	.word	0x10002b00
 8003378:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2203      	movs	r2, #3
 8003390:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e010      	b.n	80033ba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e005      	b.n	80033ac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3f3      	bcc.n	80033a0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop

080033c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	@ 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80033e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e00a      	b.n	800340a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80033fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003402:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003408:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003414:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800341a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003420:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	3304      	adds	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	3304      	adds	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e020      	b.n	80034a2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3303      	adds	r3, #3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3302      	adds	r3, #2
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	440b      	add	r3, r1
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003478:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	440b      	add	r3, r1
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003486:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	440a      	add	r2, r1
 800348e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003490:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3304      	adds	r3, #4
 800349a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3304      	adds	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	4a06      	ldr	r2, [pc, #24]	@ (80034c0 <FDCAN_CopyMessageToRAM+0xf8>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	461a      	mov	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d3d6      	bcc.n	8003460 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	3724      	adds	r7, #36	@ 0x24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	080090bc 	.word	0x080090bc

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034d2:	4b89      	ldr	r3, [pc, #548]	@ (80036f8 <HAL_GPIO_Init+0x234>)
 80034d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034d6:	e194      	b.n	8003802 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8186 	beq.w	80037fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d005      	beq.n	8003508 <HAL_GPIO_Init+0x44>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d130      	bne.n	800356a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800353e:	2201      	movs	r2, #1
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0201 	and.w	r2, r3, #1
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d017      	beq.n	80035a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d123      	bne.n	80035fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	08da      	lsrs	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3208      	adds	r2, #8
 80035f4:	69b9      	ldr	r1, [r7, #24]
 80035f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0203 	and.w	r2, r3, #3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80e0 	beq.w	80037fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363c:	4b2f      	ldr	r3, [pc, #188]	@ (80036fc <HAL_GPIO_Init+0x238>)
 800363e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003642:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <HAL_GPIO_Init+0x238>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_GPIO_Init+0x238>)
 800364e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800365a:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <HAL_GPIO_Init+0x23c>)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3302      	adds	r3, #2
 8003662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a20      	ldr	r2, [pc, #128]	@ (8003704 <HAL_GPIO_Init+0x240>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d052      	beq.n	800372c <HAL_GPIO_Init+0x268>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <HAL_GPIO_Init+0x244>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d031      	beq.n	80036f2 <HAL_GPIO_Init+0x22e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <HAL_GPIO_Init+0x248>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02b      	beq.n	80036ee <HAL_GPIO_Init+0x22a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <HAL_GPIO_Init+0x24c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d025      	beq.n	80036ea <HAL_GPIO_Init+0x226>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <HAL_GPIO_Init+0x250>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <HAL_GPIO_Init+0x222>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_GPIO_Init+0x254>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <HAL_GPIO_Init+0x21e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1a      	ldr	r2, [pc, #104]	@ (800371c <HAL_GPIO_Init+0x258>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x21a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_GPIO_Init+0x25c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x216>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <HAL_GPIO_Init+0x260>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x212>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a17      	ldr	r2, [pc, #92]	@ (8003728 <HAL_GPIO_Init+0x264>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x20e>
 80036ce:	2309      	movs	r3, #9
 80036d0:	e02d      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036d2:	230a      	movs	r3, #10
 80036d4:	e02b      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036d6:	2308      	movs	r3, #8
 80036d8:	e029      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036da:	2307      	movs	r3, #7
 80036dc:	e027      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036de:	2306      	movs	r3, #6
 80036e0:	e025      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036e2:	2305      	movs	r3, #5
 80036e4:	e023      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036e6:	2304      	movs	r3, #4
 80036e8:	e021      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e01f      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e01d      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e01b      	b.n	800372e <HAL_GPIO_Init+0x26a>
 80036f6:	bf00      	nop
 80036f8:	58000080 	.word	0x58000080
 80036fc:	58024400 	.word	0x58024400
 8003700:	58000400 	.word	0x58000400
 8003704:	58020000 	.word	0x58020000
 8003708:	58020400 	.word	0x58020400
 800370c:	58020800 	.word	0x58020800
 8003710:	58020c00 	.word	0x58020c00
 8003714:	58021000 	.word	0x58021000
 8003718:	58021400 	.word	0x58021400
 800371c:	58021800 	.word	0x58021800
 8003720:	58021c00 	.word	0x58021c00
 8003724:	58022000 	.word	0x58022000
 8003728:	58022400 	.word	0x58022400
 800372c:	2300      	movs	r3, #0
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	f002 0203 	and.w	r2, r2, #3
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	4093      	lsls	r3, r2
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800373e:	4938      	ldr	r1, [pc, #224]	@ (8003820 <HAL_GPIO_Init+0x35c>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f ae63 	bne.w	80034d8 <HAL_GPIO_Init+0x14>
  }
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	3724      	adds	r7, #36	@ 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	58000400 	.word	0x58000400

08003824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003834:	787b      	ldrb	r3, [r7, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003840:	e003      	b.n	800384a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	041a      	lsls	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	619a      	str	r2, [r3, #24]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <HAL_PWREx_ConfigSupply+0x70>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00a      	beq.n	8003882 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800386c:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <HAL_PWREx_ConfigSupply+0x70>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e01f      	b.n	80038be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e01d      	b.n	80038be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003882:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <HAL_PWREx_ConfigSupply+0x70>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	490f      	ldr	r1, [pc, #60]	@ (80038c8 <HAL_PWREx_ConfigSupply+0x70>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003892:	f7fe fb1f 	bl	8001ed4 <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003898:	e009      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800389a:	f7fe fb1b 	bl	8001ed4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038a8:	d901      	bls.n	80038ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e007      	b.n	80038be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_PWREx_ConfigSupply+0x70>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ba:	d1ee      	bne.n	800389a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	58024800 	.word	0x58024800

080038cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	@ 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f000 bc48 	b.w	8004170 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8088 	beq.w	80039fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b99      	ldr	r3, [pc, #612]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f8:	4b96      	ldr	r3, [pc, #600]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	2b10      	cmp	r3, #16
 8003902:	d007      	beq.n	8003914 <HAL_RCC_OscConfig+0x48>
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	2b18      	cmp	r3, #24
 8003908:	d111      	bne.n	800392e <HAL_RCC_OscConfig+0x62>
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d10c      	bne.n	800392e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d06d      	beq.n	80039fc <HAL_RCC_OscConfig+0x130>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d169      	bne.n	80039fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f000 bc21 	b.w	8004170 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x7a>
 8003938:	4b86      	ldr	r3, [pc, #536]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a85      	ldr	r2, [pc, #532]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e02e      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x9c>
 800394e:	4b81      	ldr	r3, [pc, #516]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a80      	ldr	r2, [pc, #512]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0xc0>
 8003972:	4b78      	ldr	r3, [pc, #480]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a77      	ldr	r2, [pc, #476]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b75      	ldr	r3, [pc, #468]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a74      	ldr	r2, [pc, #464]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xd8>
 800398c:	4b71      	ldr	r3, [pc, #452]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a70      	ldr	r2, [pc, #448]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b6e      	ldr	r3, [pc, #440]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6d      	ldr	r2, [pc, #436]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fa92 	bl	8001ed4 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fa8e 	bl	8001ed4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e3d4      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c6:	4b63      	ldr	r3, [pc, #396]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fa7e 	bl	8001ed4 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fa7a 	bl	8001ed4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e3c0      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ee:	4b59      	ldr	r3, [pc, #356]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x110>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80ca 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0c:	4b51      	ldr	r3, [pc, #324]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a16:	4b4f      	ldr	r3, [pc, #316]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_RCC_OscConfig+0x166>
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	2b18      	cmp	r3, #24
 8003a26:	d156      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x20a>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d151      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a32:	4b48      	ldr	r3, [pc, #288]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e392      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a4a:	4b42      	ldr	r3, [pc, #264]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0219 	bic.w	r2, r3, #25
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	493f      	ldr	r1, [pc, #252]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fa3a 	bl	8001ed4 <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fa36 	bl	8001ed4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e37c      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a76:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	f7fe fa33 	bl	8001eec <HAL_GetREVID>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d817      	bhi.n	8003ac0 <HAL_RCC_OscConfig+0x1f4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b40      	cmp	r3, #64	@ 0x40
 8003a96:	d108      	bne.n	8003aaa <HAL_RCC_OscConfig+0x1de>
 8003a98:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	e07a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	031b      	lsls	r3, r3, #12
 8003ab8:	4926      	ldr	r1, [pc, #152]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abe:	e06f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	4921      	ldr	r1, [pc, #132]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad4:	e064      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d047      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0219 	bic.w	r2, r3, #25
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	491a      	ldr	r1, [pc, #104]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f9f0 	bl	8001ed4 <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe f9ec 	bl	8001ed4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e332      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0a:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	f7fe f9e9 	bl	8001eec <HAL_GetREVID>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d819      	bhi.n	8003b58 <HAL_RCC_OscConfig+0x28c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d108      	bne.n	8003b3e <HAL_RCC_OscConfig+0x272>
 8003b2c:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b34:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3a:	6053      	str	r3, [r2, #4]
 8003b3c:	e030      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	031b      	lsls	r3, r3, #12
 8003b4c:	4901      	ldr	r1, [pc, #4]	@ (8003b54 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
 8003b52:	e025      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
 8003b54:	58024400 	.word	0x58024400
 8003b58:	4b9a      	ldr	r3, [pc, #616]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	4997      	ldr	r1, [pc, #604]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	e018      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b95      	ldr	r3, [pc, #596]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a94      	ldr	r2, [pc, #592]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f9ab 	bl	8001ed4 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fe f9a7 	bl	8001ed4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2ed      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b94:	4b8b      	ldr	r3, [pc, #556]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a9 	beq.w	8003d00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bae:	4b85      	ldr	r3, [pc, #532]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb8:	4b82      	ldr	r3, [pc, #520]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d007      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x308>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b18      	cmp	r3, #24
 8003bc8:	d13a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x374>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d135      	bne.n	8003c40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_OscConfig+0x320>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e2c1      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bec:	f7fe f97e 	bl	8001eec <HAL_GetREVID>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d817      	bhi.n	8003c2a <HAL_RCC_OscConfig+0x35e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d108      	bne.n	8003c14 <HAL_RCC_OscConfig+0x348>
 8003c02:	4b70      	ldr	r3, [pc, #448]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c12:	e075      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c14:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	4968      	ldr	r1, [pc, #416]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c28:	e06a      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2a:	4b66      	ldr	r3, [pc, #408]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	4962      	ldr	r1, [pc, #392]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c3e:	e05f      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d042      	beq.n	8003cce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c48:	4b5e      	ldr	r3, [pc, #376]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f93e 	bl	8001ed4 <HAL_GetTick>
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5c:	f7fe f93a 	bl	8001ed4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e280      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c6e:	4b55      	ldr	r3, [pc, #340]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7a:	f7fe f937 	bl	8001eec <HAL_GetREVID>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d817      	bhi.n	8003cb8 <HAL_RCC_OscConfig+0x3ec>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d108      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x3d6>
 8003c90:	4b4c      	ldr	r3, [pc, #304]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c98:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c9e:	6053      	str	r3, [r2, #4]
 8003ca0:	e02e      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
 8003ca2:	4b48      	ldr	r3, [pc, #288]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	069b      	lsls	r3, r3, #26
 8003cb0:	4944      	ldr	r1, [pc, #272]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e023      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
 8003cb8:	4b42      	ldr	r3, [pc, #264]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	493f      	ldr	r1, [pc, #252]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
 8003ccc:	e018      	b.n	8003d00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cce:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fe f8fb 	bl	8001ed4 <HAL_GetTick>
 8003cde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ce2:	f7fe f8f7 	bl	8001ed4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e23d      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf4:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d036      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d019      	beq.n	8003d48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d14:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d18:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe f8d8 	bl	8001ed4 <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe f8d4 	bl	8001ed4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e21a      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d3a:	4b22      	ldr	r3, [pc, #136]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x45c>
 8003d46:	e018      	b.n	8003d7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d48:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe f8be 	bl	8001ed4 <HAL_GetTick>
 8003d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fe f8ba 	bl	8001ed4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e200      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d039      	beq.n	8003dfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01c      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f89b 	bl	8001ed4 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da2:	f7fe f897 	bl	8001ed4 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1dd      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4d6>
 8003dc0:	e01b      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
 8003dc2:	bf00      	nop
 8003dc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dc8:	4b9b      	ldr	r3, [pc, #620]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a9a      	ldr	r2, [pc, #616]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dd4:	f7fe f87e 	bl	8001ed4 <HAL_GetTick>
 8003dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ddc:	f7fe f87a 	bl	8001ed4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1c0      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dee:	4b92      	ldr	r3, [pc, #584]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8081 	beq.w	8003f0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e08:	4b8c      	ldr	r3, [pc, #560]	@ (800403c <HAL_RCC_OscConfig+0x770>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a8b      	ldr	r2, [pc, #556]	@ (800403c <HAL_RCC_OscConfig+0x770>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e14:	f7fe f85e 	bl	8001ed4 <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fe f85a 	bl	8001ed4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	@ 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1a0      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2e:	4b83      	ldr	r3, [pc, #524]	@ (800403c <HAL_RCC_OscConfig+0x770>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x584>
 8003e42:	4b7d      	ldr	r3, [pc, #500]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	4a7c      	ldr	r2, [pc, #496]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4e:	e02d      	b.n	8003eac <HAL_RCC_OscConfig+0x5e0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x5a6>
 8003e58:	4b77      	ldr	r3, [pc, #476]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a76      	ldr	r2, [pc, #472]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	4b74      	ldr	r3, [pc, #464]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e68:	4a73      	ldr	r2, [pc, #460]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e6a:	f023 0304 	bic.w	r3, r3, #4
 8003e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x5e0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c8>
 8003e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e86:	4b6c      	ldr	r3, [pc, #432]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0x5e0>
 8003e94:	4b68      	ldr	r3, [pc, #416]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	4a67      	ldr	r2, [pc, #412]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea0:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a64      	ldr	r2, [pc, #400]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fe f80e 	bl	8001ed4 <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f80a 	bl	8001ed4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e14e      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed2:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <HAL_RCC_OscConfig+0x5f0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd fff8 	bl	8001ed4 <HAL_GetTick>
 8003ee4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fff4 	bl	8001ed4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e138      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003efe:	4b4e      	ldr	r3, [pc, #312]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ee      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 812d 	beq.w	800416e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f14:	4b48      	ldr	r3, [pc, #288]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1c:	2b18      	cmp	r3, #24
 8003f1e:	f000 80bd 	beq.w	800409c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	f040 809e 	bne.w	8004068 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b42      	ldr	r3, [pc, #264]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a41      	ldr	r2, [pc, #260]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd ffcc 	bl	8001ed4 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd ffc8 	bl	8001ed4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e10e      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5e:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f62:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCC_OscConfig+0x774>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f6e:	0112      	lsls	r2, r2, #4
 8003f70:	430a      	orrs	r2, r1
 8003f72:	4931      	ldr	r1, [pc, #196]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f86:	3b01      	subs	r3, #1
 8003f88:	025b      	lsls	r3, r3, #9
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f92:	3b01      	subs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fa8:	4923      	ldr	r1, [pc, #140]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	4a21      	ldr	r2, [pc, #132]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fba:	4b1f      	ldr	r3, [pc, #124]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fbe:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <HAL_RCC_OscConfig+0x778>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fc6:	00d2      	lsls	r2, r2, #3
 8003fc8:	491b      	ldr	r1, [pc, #108]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	f023 020c 	bic.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4917      	ldr	r1, [pc, #92]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fe0:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f023 0202 	bic.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	4912      	ldr	r1, [pc, #72]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ff2:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a10      	ldr	r2, [pc, #64]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4a0d      	ldr	r2, [pc, #52]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a07      	ldr	r2, [pc, #28]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a04      	ldr	r2, [pc, #16]	@ (8004038 <HAL_RCC_OscConfig+0x76c>)
 8004028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd ff51 	bl	8001ed4 <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004034:	e011      	b.n	800405a <HAL_RCC_OscConfig+0x78e>
 8004036:	bf00      	nop
 8004038:	58024400 	.word	0x58024400
 800403c:	58024800 	.word	0x58024800
 8004040:	fffffc0c 	.word	0xfffffc0c
 8004044:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd ff44 	bl	8001ed4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e08a      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800405a:	4b47      	ldr	r3, [pc, #284]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x77c>
 8004066:	e082      	b.n	800416e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a42      	ldr	r2, [pc, #264]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd ff2e 	bl	8001ed4 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd ff2a 	bl	8001ed4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e070      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408e:	4b3a      	ldr	r3, [pc, #232]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x7b0>
 800409a:	e068      	b.n	800416e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040a2:	4b35      	ldr	r3, [pc, #212]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d031      	beq.n	8004114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f003 0203 	and.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d12a      	bne.n	8004114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d122      	bne.n	8004114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11a      	bne.n	8004114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0a5b      	lsrs	r3, r3, #9
 80040e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d111      	bne.n	8004114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d108      	bne.n	8004114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02b      	b.n	8004170 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004118:	4b17      	ldr	r3, [pc, #92]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800411a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004122:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	429a      	cmp	r2, r3
 800412c:	d01f      	beq.n	800416e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4a11      	ldr	r2, [pc, #68]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800413a:	f7fd fecb 	bl	8001ed4 <HAL_GetTick>
 800413e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004140:	bf00      	nop
 8004142:	f7fd fec7 	bl	8001ed4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	4293      	cmp	r3, r2
 800414c:	d0f9      	beq.n	8004142 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800414e:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <HAL_RCC_OscConfig+0x8b0>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	4906      	ldr	r1, [pc, #24]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 800415e:	4313      	orrs	r3, r2
 8004160:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <HAL_RCC_OscConfig+0x8ac>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3730      	adds	r7, #48	@ 0x30
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	58024400 	.word	0x58024400
 800417c:	ffff0007 	.word	0xffff0007

08004180 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e19c      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b8a      	ldr	r3, [pc, #552]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d910      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b87      	ldr	r3, [pc, #540]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 020f 	bic.w	r2, r3, #15
 80041aa:	4985      	ldr	r1, [pc, #532]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b83      	ldr	r3, [pc, #524]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e184      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	4b7b      	ldr	r3, [pc, #492]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041dc:	429a      	cmp	r2, r3
 80041de:	d908      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041e0:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	4975      	ldr	r1, [pc, #468]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	4b70      	ldr	r3, [pc, #448]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800420a:	429a      	cmp	r2, r3
 800420c:	d908      	bls.n	8004220 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800420e:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	496a      	ldr	r1, [pc, #424]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800421c:	4313      	orrs	r3, r2
 800421e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	4b64      	ldr	r3, [pc, #400]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004238:	429a      	cmp	r2, r3
 800423a:	d908      	bls.n	800424e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800423c:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	495e      	ldr	r1, [pc, #376]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800424a:	4313      	orrs	r3, r2
 800424c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d010      	beq.n	800427c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	4b59      	ldr	r3, [pc, #356]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004266:	429a      	cmp	r2, r3
 8004268:	d908      	bls.n	800427c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800426a:	4b56      	ldr	r3, [pc, #344]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4953      	ldr	r1, [pc, #332]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004278:	4313      	orrs	r3, r2
 800427a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	429a      	cmp	r2, r3
 8004296:	d908      	bls.n	80042aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f023 020f 	bic.w	r2, r3, #15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4947      	ldr	r1, [pc, #284]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d055      	beq.n	8004362 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042b6:	4b43      	ldr	r3, [pc, #268]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4940      	ldr	r1, [pc, #256]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d0:	4b3c      	ldr	r3, [pc, #240]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d121      	bne.n	8004320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0f6      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042e8:	4b36      	ldr	r3, [pc, #216]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d115      	bne.n	8004320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0ea      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004300:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0de      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004310:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0d6      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f023 0207 	bic.w	r2, r3, #7
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4925      	ldr	r1, [pc, #148]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004332:	f7fd fdcf 	bl	8001ed4 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004338:	e00a      	b.n	8004350 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433a:	f7fd fdcb 	bl	8001ed4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0be      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004350:	4b1c      	ldr	r3, [pc, #112]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	429a      	cmp	r2, r3
 8004360:	d1eb      	bne.n	800433a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	429a      	cmp	r2, r3
 800437c:	d208      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437e:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f023 020f 	bic.w	r2, r3, #15
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	490e      	ldr	r1, [pc, #56]	@ (80043c4 <HAL_RCC_ClockConfig+0x244>)
 800438c:	4313      	orrs	r3, r2
 800438e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d214      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 020f 	bic.w	r2, r3, #15
 80043a6:	4906      	ldr	r1, [pc, #24]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e086      	b.n	80044ce <HAL_RCC_ClockConfig+0x34e>
 80043c0:	52002000 	.word	0x52002000
 80043c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043e4:	4b3c      	ldr	r3, [pc, #240]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4939      	ldr	r1, [pc, #228]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d010      	beq.n	8004424 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800440e:	429a      	cmp	r2, r3
 8004410:	d208      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	492e      	ldr	r1, [pc, #184]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004420:	4313      	orrs	r3, r2
 8004422:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800443c:	429a      	cmp	r2, r3
 800443e:	d208      	bcs.n	8004452 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4922      	ldr	r1, [pc, #136]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 800444e:	4313      	orrs	r3, r2
 8004450:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800446a:	429a      	cmp	r2, r3
 800446c:	d208      	bcs.n	8004480 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800446e:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4917      	ldr	r1, [pc, #92]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 800447c:	4313      	orrs	r3, r2
 800447e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004480:	f000 f834 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	4912      	ldr	r1, [pc, #72]	@ (80044dc <HAL_RCC_ClockConfig+0x35c>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800449e:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <HAL_RCC_ClockConfig+0x358>)
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	4a0d      	ldr	r2, [pc, #52]	@ (80044dc <HAL_RCC_ClockConfig+0x35c>)
 80044a8:	5cd3      	ldrb	r3, [r2, r3]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <HAL_RCC_ClockConfig+0x360>)
 80044b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044b8:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <HAL_RCC_ClockConfig+0x364>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044be:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <HAL_RCC_ClockConfig+0x368>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd fcbc 	bl	8001e40 <HAL_InitTick>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
 80044dc:	080090ac 	.word	0x080090ac
 80044e0:	24000004 	.word	0x24000004
 80044e4:	24000000 	.word	0x24000000
 80044e8:	24000008 	.word	0x24000008

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	@ 0x24
 80044f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f2:	4bb3      	ldr	r3, [pc, #716]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044fa:	2b18      	cmp	r3, #24
 80044fc:	f200 8155 	bhi.w	80047aa <HAL_RCC_GetSysClockFreq+0x2be>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800456d 	.word	0x0800456d
 800450c:	080047ab 	.word	0x080047ab
 8004510:	080047ab 	.word	0x080047ab
 8004514:	080047ab 	.word	0x080047ab
 8004518:	080047ab 	.word	0x080047ab
 800451c:	080047ab 	.word	0x080047ab
 8004520:	080047ab 	.word	0x080047ab
 8004524:	080047ab 	.word	0x080047ab
 8004528:	08004593 	.word	0x08004593
 800452c:	080047ab 	.word	0x080047ab
 8004530:	080047ab 	.word	0x080047ab
 8004534:	080047ab 	.word	0x080047ab
 8004538:	080047ab 	.word	0x080047ab
 800453c:	080047ab 	.word	0x080047ab
 8004540:	080047ab 	.word	0x080047ab
 8004544:	080047ab 	.word	0x080047ab
 8004548:	08004599 	.word	0x08004599
 800454c:	080047ab 	.word	0x080047ab
 8004550:	080047ab 	.word	0x080047ab
 8004554:	080047ab 	.word	0x080047ab
 8004558:	080047ab 	.word	0x080047ab
 800455c:	080047ab 	.word	0x080047ab
 8004560:	080047ab 	.word	0x080047ab
 8004564:	080047ab 	.word	0x080047ab
 8004568:	0800459f 	.word	0x0800459f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800456c:	4b94      	ldr	r3, [pc, #592]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004578:	4b91      	ldr	r3, [pc, #580]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	4a90      	ldr	r2, [pc, #576]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800458a:	e111      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800458c:	4b8d      	ldr	r3, [pc, #564]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800458e:	61bb      	str	r3, [r7, #24]
      break;
 8004590:	e10e      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004592:	4b8d      	ldr	r3, [pc, #564]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004594:	61bb      	str	r3, [r7, #24]
      break;
 8004596:	e10b      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004598:	4b8c      	ldr	r3, [pc, #560]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800459a:	61bb      	str	r3, [r7, #24]
      break;
 800459c:	e108      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800459e:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045a8:	4b85      	ldr	r3, [pc, #532]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045b4:	4b82      	ldr	r3, [pc, #520]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045be:	4b80      	ldr	r3, [pc, #512]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80e1 	beq.w	80047a4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	f000 8083 	beq.w	80046f0 <HAL_RCC_GetSysClockFreq+0x204>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f200 80a1 	bhi.w	8004734 <HAL_RCC_GetSysClockFreq+0x248>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x114>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d056      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80045fe:	e099      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004600:	4b6f      	ldr	r3, [pc, #444]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02d      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800460c:	4b6c      	ldr	r3, [pc, #432]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	4a6b      	ldr	r2, [pc, #428]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004636:	4b62      	ldr	r3, [pc, #392]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004646:	ed97 6a02 	vldr	s12, [r7, #8]
 800464a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800464e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004662:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004666:	e087      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467a:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	ed97 6a02 	vldr	s12, [r7, #8]
 800468e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046aa:	e065      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ee:	e043      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b2f      	ldr	r3, [pc, #188]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a02 	vldr	s12, [r7, #8]
 8004716:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004732:	e021      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004776:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004778:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	0a5b      	lsrs	r3, r3, #9
 800477e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004782:	3301      	adds	r3, #1
 8004784:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004790:	edd7 6a07 	vldr	s13, [r7, #28]
 8004794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479c:	ee17 3a90 	vmov	r3, s15
 80047a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
      break;
 80047a8:	e002      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047ac:	61bb      	str	r3, [r7, #24]
      break;
 80047ae:	bf00      	nop
  }

  return sysclockfreq;
 80047b0:	69bb      	ldr	r3, [r7, #24]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	@ 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	58024400 	.word	0x58024400
 80047c4:	03d09000 	.word	0x03d09000
 80047c8:	003d0900 	.word	0x003d0900
 80047cc:	017d7840 	.word	0x017d7840
 80047d0:	46000000 	.word	0x46000000
 80047d4:	4c742400 	.word	0x4c742400
 80047d8:	4a742400 	.word	0x4a742400
 80047dc:	4bbebc20 	.word	0x4bbebc20

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047e6:	f7ff fe81 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_RCC_GetHCLKFreq+0x50>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	490f      	ldr	r1, [pc, #60]	@ (8004834 <HAL_RCC_GetHCLKFreq+0x54>)
 80047f8:	5ccb      	ldrb	r3, [r1, r3]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004804:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_RCC_GetHCLKFreq+0x50>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <HAL_RCC_GetHCLKFreq+0x54>)
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	fa22 f303 	lsr.w	r3, r2, r3
 800481a:	4a07      	ldr	r2, [pc, #28]	@ (8004838 <HAL_RCC_GetHCLKFreq+0x58>)
 800481c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800481e:	4a07      	ldr	r2, [pc, #28]	@ (800483c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <HAL_RCC_GetHCLKFreq+0x58>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	080090ac 	.word	0x080090ac
 8004838:	24000004 	.word	0x24000004
 800483c:	24000000 	.word	0x24000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004844:	f7ff ffcc 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	58024400 	.word	0x58024400
 8004868:	080090ac 	.word	0x080090ac

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004870:	f7ff ffb6 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	58024400 	.word	0x58024400
 8004894:	080090ac 	.word	0x080090ac

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800489c:	b0ca      	sub	sp, #296	@ 0x128
 800489e:	af00      	add	r7, sp, #0
 80048a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80048bc:	2500      	movs	r5, #0
 80048be:	ea54 0305 	orrs.w	r3, r4, r5
 80048c2:	d049      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048ce:	d02f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048d4:	d828      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048da:	d01a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048e0:	d822      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ea:	d007      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ec:	e01c      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4bb8      	ldr	r3, [pc, #736]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	4ab7      	ldr	r2, [pc, #732]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048fa:	e01a      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	3308      	adds	r3, #8
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fc8f 	bl	8006228 <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004910:	e00f      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	3328      	adds	r3, #40	@ 0x28
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fd36 	bl	800638c <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004926:	e004      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800493a:	4ba5      	ldr	r3, [pc, #660]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800493c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004948:	4aa1      	ldr	r2, [pc, #644]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800494a:	430b      	orrs	r3, r1
 800494c:	6513      	str	r3, [r2, #80]	@ 0x50
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004964:	f04f 0900 	mov.w	r9, #0
 8004968:	ea58 0309 	orrs.w	r3, r8, r9
 800496c:	d047      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004974:	2b04      	cmp	r3, #4
 8004976:	d82a      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004995 	.word	0x08004995
 8004984:	080049a3 	.word	0x080049a3
 8004988:	080049b9 	.word	0x080049b9
 800498c:	080049d7 	.word	0x080049d7
 8004990:	080049d7 	.word	0x080049d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004994:	4b8e      	ldr	r3, [pc, #568]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	4a8d      	ldr	r2, [pc, #564]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e01a      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	3308      	adds	r3, #8
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fc3c 	bl	8006228 <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b6:	e00f      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3328      	adds	r3, #40	@ 0x28
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fce3 	bl	800638c <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e4:	f023 0107 	bic.w	r1, r3, #7
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	4a78      	ldr	r2, [pc, #480]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a0a:	f04f 0b00 	mov.w	fp, #0
 8004a0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a12:	d04c      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1e:	d030      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a24:	d829      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a28:	d02d      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a2c:	d825      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a2e:	2b80      	cmp	r3, #128	@ 0x80
 8004a30:	d018      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a32:	2b80      	cmp	r3, #128	@ 0x80
 8004a34:	d821      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a3a:	2b40      	cmp	r3, #64	@ 0x40
 8004a3c:	d007      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a3e:	e01c      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4b63      	ldr	r3, [pc, #396]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	4a62      	ldr	r2, [pc, #392]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e01c      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fbe6 	bl	8006228 <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a62:	e011      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fc8d 	bl	800638c <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a78:	e006      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a80:	e002      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a90:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a94:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004aba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004ac4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d053      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ada:	d035      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004adc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ae0:	d82e      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ae6:	d031      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ae8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004aec:	d828      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004af2:	d01a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004af4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004af8:	d822      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004afe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b02:	d007      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004b04:	e01c      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b06:	4b32      	ldr	r3, [pc, #200]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b12:	e01c      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	3308      	adds	r3, #8
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fb83 	bl	8006228 <RCCEx_PLL2_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b28:	e011      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	3328      	adds	r3, #40	@ 0x28
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fc2a 	bl	800638c <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b3e:	e006      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b46:	e002      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b56:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b66:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d056      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba2:	d038      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ba4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba8:	d831      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004baa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bae:	d034      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004bb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bb4:	d82b      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bba:	d01d      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bc0:	d825      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bcc:	e01f      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004bce:	bf00      	nop
 8004bd0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd4:	4ba2      	ldr	r3, [pc, #648]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4aa1      	ldr	r2, [pc, #644]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004be0:	e01c      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	3308      	adds	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fb1c 	bl	8006228 <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bf6:	e011      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	3328      	adds	r3, #40	@ 0x28
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fbc3 	bl	800638c <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e006      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c14:	e002      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c24:	4b8e      	ldr	r3, [pc, #568]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c34:	4a8a      	ldr	r2, [pc, #552]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c36:	430b      	orrs	r3, r1
 8004c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3a:	e003      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d03a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6a:	2b30      	cmp	r3, #48	@ 0x30
 8004c6c:	d01f      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c6e:	2b30      	cmp	r3, #48	@ 0x30
 8004c70:	d819      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d00c      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d815      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d019      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d111      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4b77      	ldr	r3, [pc, #476]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	4a76      	ldr	r2, [pc, #472]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c8e:	e011      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	3308      	adds	r3, #8
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 fac5 	bl	8006228 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cbc:	4b68      	ldr	r3, [pc, #416]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cca:	4a65      	ldr	r2, [pc, #404]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ce6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d051      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d04:	d035      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d0a:	d82e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d10:	d031      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d16:	d828      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1c:	d01a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d22:	d822      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a4a      	ldr	r2, [pc, #296]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	3308      	adds	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fa6e 	bl	8006228 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	3328      	adds	r3, #40	@ 0x28
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fb15 	bl	800638c <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d80:	4b37      	ldr	r3, [pc, #220]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	4a34      	ldr	r2, [pc, #208]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004db4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d056      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc8:	d033      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004dca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dce:	d82c      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dd4:	d02f      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dda:	d826      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004de0:	d02b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004de2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004de6:	d820      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dec:	d012      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df2:	d81a      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d115      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3308      	adds	r3, #8
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 fa0e 	bl	8006228 <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e12:	e015      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	3328      	adds	r3, #40	@ 0x28
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fab5 	bl	800638c <RCCEx_PLL3_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e28:	e00a      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e32:	bf00      	nop
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10d      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e56:	4a02      	ldr	r2, [pc, #8]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e5c:	e006      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d055      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e98:	d033      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9e:	d82c      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d02f      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	d826      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004eac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eb0:	d02b      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004eb6:	d820      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ebc:	d012      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec2:	d81a      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ecc:	d115      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 f9a6 	bl	8006228 <RCCEx_PLL2_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ee2:	e015      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	3328      	adds	r3, #40	@ 0x28
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fa4d 	bl	800638c <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f18:	4ba3      	ldr	r3, [pc, #652]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f28:	4a9f      	ldr	r2, [pc, #636]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f2e:	e003      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d037      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f62:	d00e      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f68:	d816      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f72:	d111      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f74:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a8b      	ldr	r2, [pc, #556]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	3308      	adds	r3, #8
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f94c 	bl	8006228 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004faa:	4b7f      	ldr	r3, [pc, #508]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a7b      	ldr	r2, [pc, #492]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fbe:	e003      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	d039      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d81c      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	08005009 	.word	0x08005009
 8005000:	08005017 	.word	0x08005017
 8005004:	08005035 	.word	0x08005035
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005008:	4b67      	ldr	r3, [pc, #412]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4a66      	ldr	r2, [pc, #408]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005014:	e00f      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	3308      	adds	r3, #8
 800501c:	2102      	movs	r1, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f902 	bl	8006228 <RCCEx_PLL2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800503e:	4b5a      	ldr	r3, [pc, #360]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	f023 0103 	bic.w	r1, r3, #3
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	4a56      	ldr	r2, [pc, #344]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800504e:	430b      	orrs	r3, r1
 8005050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	f000 809f 	beq.w	80051bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507e:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4a      	ldr	r2, [pc, #296]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508a:	f7fc ff23 	bl	8001ed4 <HAL_GetTick>
 800508e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005092:	e00b      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fc ff1e 	bl	8001ed4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b64      	cmp	r3, #100	@ 0x64
 80050a2:	d903      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050aa:	e005      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ac:	4b3f      	ldr	r3, [pc, #252]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ed      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d179      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050c0:	4b39      	ldr	r3, [pc, #228]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050cc:	4053      	eors	r3, r2
 80050ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050d6:	4b34      	ldr	r3, [pc, #208]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	4a30      	ldr	r2, [pc, #192]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ee:	4b2e      	ldr	r3, [pc, #184]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050fa:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005100:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800510a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800510e:	d118      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc fee0 	bl	8001ed4 <HAL_GetTick>
 8005114:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005118:	e00d      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fc fedb 	bl	8001ed4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	f241 3388 	movw	r3, #5000	@ 0x1388
 800512a:	429a      	cmp	r2, r3
 800512c:	d903      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005136:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0eb      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005146:	2b00      	cmp	r3, #0
 8005148:	d129      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800515a:	d10e      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800515c:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800516c:	091a      	lsrs	r2, r3, #4
 800516e:	4b10      	ldr	r3, [pc, #64]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005170:	4013      	ands	r3, r2
 8005172:	4a0d      	ldr	r2, [pc, #52]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6113      	str	r3, [r2, #16]
 8005178:	e005      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	4a0a      	ldr	r2, [pc, #40]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005180:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005184:	6113      	str	r3, [r2, #16]
 8005186:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005188:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005196:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	430b      	orrs	r3, r1
 800519a:	6713      	str	r3, [r2, #112]	@ 0x70
 800519c:	e00e      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80051a6:	e009      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80051a8:	58024400 	.word	0x58024400
 80051ac:	58024800 	.word	0x58024800
 80051b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f002 0301 	and.w	r3, r2, #1
 80051c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051cc:	2300      	movs	r3, #0
 80051ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	f000 8089 	beq.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e4:	2b28      	cmp	r3, #40	@ 0x28
 80051e6:	d86b      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051e8:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	080052c9 	.word	0x080052c9
 80051f4:	080052c1 	.word	0x080052c1
 80051f8:	080052c1 	.word	0x080052c1
 80051fc:	080052c1 	.word	0x080052c1
 8005200:	080052c1 	.word	0x080052c1
 8005204:	080052c1 	.word	0x080052c1
 8005208:	080052c1 	.word	0x080052c1
 800520c:	080052c1 	.word	0x080052c1
 8005210:	08005295 	.word	0x08005295
 8005214:	080052c1 	.word	0x080052c1
 8005218:	080052c1 	.word	0x080052c1
 800521c:	080052c1 	.word	0x080052c1
 8005220:	080052c1 	.word	0x080052c1
 8005224:	080052c1 	.word	0x080052c1
 8005228:	080052c1 	.word	0x080052c1
 800522c:	080052c1 	.word	0x080052c1
 8005230:	080052ab 	.word	0x080052ab
 8005234:	080052c1 	.word	0x080052c1
 8005238:	080052c1 	.word	0x080052c1
 800523c:	080052c1 	.word	0x080052c1
 8005240:	080052c1 	.word	0x080052c1
 8005244:	080052c1 	.word	0x080052c1
 8005248:	080052c1 	.word	0x080052c1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052c9 	.word	0x080052c9
 8005254:	080052c1 	.word	0x080052c1
 8005258:	080052c1 	.word	0x080052c1
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080052c1 	.word	0x080052c1
 8005264:	080052c1 	.word	0x080052c1
 8005268:	080052c1 	.word	0x080052c1
 800526c:	080052c1 	.word	0x080052c1
 8005270:	080052c9 	.word	0x080052c9
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052c9 	.word	0x080052c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005298:	3308      	adds	r3, #8
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f000 ffc3 	bl	8006228 <RCCEx_PLL2_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052a8:	e00f      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ae:	3328      	adds	r3, #40	@ 0x28
 80052b0:	2101      	movs	r1, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f86a 	bl	800638c <RCCEx_PLL3_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052be:	e004      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052c6:	e000      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80052c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052d2:	4bbf      	ldr	r3, [pc, #764]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052e0:	4abb      	ldr	r2, [pc, #748]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80052e6:	e003      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f002 0302 	and.w	r3, r2, #2
 80052fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005306:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d041      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005316:	2b05      	cmp	r3, #5
 8005318:	d824      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	0800536d 	.word	0x0800536d
 8005324:	08005339 	.word	0x08005339
 8005328:	0800534f 	.word	0x0800534f
 800532c:	0800536d 	.word	0x0800536d
 8005330:	0800536d 	.word	0x0800536d
 8005334:	0800536d 	.word	0x0800536d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	3308      	adds	r3, #8
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f000 ff71 	bl	8006228 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800534c:	e00f      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	3328      	adds	r3, #40	@ 0x28
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f818 	bl	800638c <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005362:	e004      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800536c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005376:	4b96      	ldr	r3, [pc, #600]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537a:	f023 0107 	bic.w	r1, r3, #7
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005384:	4a92      	ldr	r2, [pc, #584]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005386:	430b      	orrs	r3, r1
 8005388:	6553      	str	r3, [r2, #84]	@ 0x54
 800538a:	e003      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f002 0304 	and.w	r3, r2, #4
 80053a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a4:	2300      	movs	r3, #0
 80053a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	d044      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053bc:	2b05      	cmp	r3, #5
 80053be:	d825      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	08005415 	.word	0x08005415
 80053cc:	080053e1 	.word	0x080053e1
 80053d0:	080053f7 	.word	0x080053f7
 80053d4:	08005415 	.word	0x08005415
 80053d8:	08005415 	.word	0x08005415
 80053dc:	08005415 	.word	0x08005415
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e4:	3308      	adds	r3, #8
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 ff1d 	bl	8006228 <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053f4:	e00f      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	3328      	adds	r3, #40	@ 0x28
 80053fc:	2101      	movs	r1, #1
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 ffc4 	bl	800638c <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800540a:	e004      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800541e:	4b6c      	ldr	r3, [pc, #432]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005422:	f023 0107 	bic.w	r1, r3, #7
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542e:	4a68      	ldr	r2, [pc, #416]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6593      	str	r3, [r2, #88]	@ 0x58
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800543a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f002 0320 	and.w	r3, r2, #32
 800544a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005458:	460b      	mov	r3, r1
 800545a:	4313      	orrs	r3, r2
 800545c:	d055      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800546a:	d033      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800546c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005470:	d82c      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005476:	d02f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547c:	d826      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800547e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005482:	d02b      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005488:	d820      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800548a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800548e:	d012      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005494:	d81a      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d022      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800549e:	d115      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	3308      	adds	r3, #8
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 febd 	bl	8006228 <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054b4:	e015      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	3328      	adds	r3, #40	@ 0x28
 80054bc:	2102      	movs	r1, #2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 ff64 	bl	800638c <RCCEx_PLL3_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054ca:	e00a      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d2:	e006      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054d4:	bf00      	nop
 80054d6:	e004      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054d8:	bf00      	nop
 80054da:	e002      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	4a35      	ldr	r2, [pc, #212]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005500:	e003      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005520:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d058      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005532:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005536:	d033      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005538:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800553c:	d82c      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005542:	d02f      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005548:	d826      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800554a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800554e:	d02b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005554:	d820      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800555a:	d012      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800555c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005560:	d81a      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d022      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556a:	d115      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	3308      	adds	r3, #8
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fe57 	bl	8006228 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005580:	e015      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	3328      	adds	r3, #40	@ 0x28
 8005588:	2102      	movs	r1, #2
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fefe 	bl	800638c <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005596:	e00a      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559e:	e006      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055a0:	bf00      	nop
 80055a2:	e004      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80055ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055c6:	4a02      	ldr	r2, [pc, #8]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80055cc:	e006      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055ce:	bf00      	nop
 80055d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055ec:	2300      	movs	r3, #0
 80055ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055f6:	460b      	mov	r3, r1
 80055f8:	4313      	orrs	r3, r2
 80055fa:	d055      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005604:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005608:	d033      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800560a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800560e:	d82c      	bhi.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005614:	d02f      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561a:	d826      	bhi.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800561c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005620:	d02b      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005622:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005626:	d820      	bhi.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562c:	d012      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800562e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005632:	d81a      	bhi.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d022      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563c:	d115      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005642:	3308      	adds	r3, #8
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fdee 	bl	8006228 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005652:	e015      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	3328      	adds	r3, #40	@ 0x28
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fe95 	bl	800638c <RCCEx_PLL3_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005668:	e00a      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005670:	e006      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005672:	bf00      	nop
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800567e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005688:	4ba1      	ldr	r3, [pc, #644]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005698:	4a9d      	ldr	r2, [pc, #628]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800569a:	430b      	orrs	r3, r1
 800569c:	6593      	str	r3, [r2, #88]	@ 0x58
 800569e:	e003      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f002 0308 	and.w	r3, r2, #8
 80056b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056b8:	2300      	movs	r3, #0
 80056ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d01e      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	3328      	adds	r3, #40	@ 0x28
 80056dc:	2102      	movs	r1, #2
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fe54 	bl	800638c <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056f0:	4b87      	ldr	r3, [pc, #540]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005700:	4a83      	ldr	r2, [pc, #524]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005702:	430b      	orrs	r3, r1
 8005704:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f002 0310 	and.w	r3, r2, #16
 8005712:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800571c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d01e      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005732:	d10c      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	3328      	adds	r3, #40	@ 0x28
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fe25 	bl	800638c <RCCEx_PLL3_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800574e:	4b70      	ldr	r3, [pc, #448]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800575e:	4a6c      	ldr	r2, [pc, #432]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800577a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d03e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800578c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005790:	d022      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005796:	d81b      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a0:	d00b      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80057a2:	e015      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a8:	3308      	adds	r3, #8
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fd3b 	bl	8006228 <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057b8:	e00f      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057be:	3328      	adds	r3, #40	@ 0x28
 80057c0:	2102      	movs	r1, #2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fde2 	bl	800638c <RCCEx_PLL3_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057ce:	e004      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d6:	e000      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057f2:	4a47      	ldr	r2, [pc, #284]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800580e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005810:	2300      	movs	r3, #0
 8005812:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005814:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005818:	460b      	mov	r3, r1
 800581a:	4313      	orrs	r3, r2
 800581c:	d03b      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800582a:	d01f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800582c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005830:	d818      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800583c:	d007      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800583e:	e011      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005840:	4b33      	ldr	r3, [pc, #204]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	4a32      	ldr	r2, [pc, #200]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800584c:	e00f      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005852:	3328      	adds	r3, #40	@ 0x28
 8005854:	2101      	movs	r1, #1
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd98 	bl	800638c <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005862:	e004      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005876:	4b26      	ldr	r3, [pc, #152]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005886:	4a22      	ldr	r2, [pc, #136]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005888:	430b      	orrs	r3, r1
 800588a:	6553      	str	r3, [r2, #84]	@ 0x54
 800588c:	e003      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80058a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80058a4:	2300      	movs	r3, #0
 80058a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80058a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80058ac:	460b      	mov	r3, r1
 80058ae:	4313      	orrs	r3, r2
 80058b0:	d034      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c0:	d007      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80058c2:	e011      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c4:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	4a11      	ldr	r2, [pc, #68]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058d0:	e00e      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	3308      	adds	r3, #8
 80058d8:	2102      	movs	r1, #2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fca4 	bl	8006228 <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005906:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005908:	430b      	orrs	r3, r1
 800590a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800590c:	e006      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800590e:	bf00      	nop
 8005910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800591c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800592a:	2300      	movs	r3, #0
 800592c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800592e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d00c      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	3328      	adds	r3, #40	@ 0x28
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fd23 	bl	800638c <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800595e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005960:	2300      	movs	r3, #0
 8005962:	667b      	str	r3, [r7, #100]	@ 0x64
 8005964:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d038      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800597a:	d018      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800597c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005980:	d811      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005986:	d014      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800598c:	d80b      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d011      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005996:	d106      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4bc3      	ldr	r3, [pc, #780]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	4ac2      	ldr	r2, [pc, #776]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80059a4:	e008      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80059b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059c0:	4bb9      	ldr	r3, [pc, #740]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d0:	4ab5      	ldr	r2, [pc, #724]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059ee:	2300      	movs	r3, #0
 80059f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059fc:	4baa      	ldr	r3, [pc, #680]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a0a:	4aa7      	ldr	r2, [pc, #668]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a1e:	2300      	movs	r3, #0
 8005a20:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a3c:	4a9a      	ldr	r2, [pc, #616]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a50:	2300      	movs	r3, #0
 8005a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a54:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a5e:	4b92      	ldr	r3, [pc, #584]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a62:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a80:	2300      	movs	r3, #0
 8005a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a8e:	4b86      	ldr	r3, [pc, #536]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	4a85      	ldr	r2, [pc, #532]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a98:	6113      	str	r3, [r2, #16]
 8005a9a:	4b83      	ldr	r3, [pc, #524]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9c:	6919      	ldr	r1, [r3, #16]
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aa6:	4a80      	ldr	r2, [pc, #512]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aba:	2300      	movs	r3, #0
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005abe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d009      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ac8:	4b77      	ldr	r3, [pc, #476]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005acc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	4a74      	ldr	r2, [pc, #464]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	2300      	movs	r3, #0
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005af8:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b08:	4a67      	ldr	r2, [pc, #412]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	2100      	movs	r1, #0
 8005b18:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b24:	460b      	mov	r3, r1
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d011      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	3308      	adds	r3, #8
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fb78 	bl	8006228 <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	2100      	movs	r1, #0
 8005b58:	6239      	str	r1, [r7, #32]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d011      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	3308      	adds	r3, #8
 8005b70:	2101      	movs	r1, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fb58 	bl	8006228 <RCCEx_PLL2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	2100      	movs	r1, #0
 8005b98:	61b9      	str	r1, [r7, #24]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	d011      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	3308      	adds	r3, #8
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fb38 	bl	8006228 <RCCEx_PLL2_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6139      	str	r1, [r7, #16]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	3328      	adds	r3, #40	@ 0x28
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fbca 	bl	800638c <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	2100      	movs	r1, #0
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d011      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	3328      	adds	r3, #40	@ 0x28
 8005c30:	2101      	movs	r1, #1
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fbaa 	bl	800638c <RCCEx_PLL3_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	2100      	movs	r1, #0
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d011      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	3328      	adds	r3, #40	@ 0x28
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fb8a 	bl	800638c <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca8:	58024400 	.word	0x58024400

08005cac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005cb0:	f7fe fd96 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4904      	ldr	r1, [pc, #16]	@ (8005cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	080090ac 	.word	0x080090ac

08005cd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	@ 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ce0:	4ba1      	ldr	r3, [pc, #644]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cea:	4b9f      	ldr	r3, [pc, #636]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	0b1b      	lsrs	r3, r3, #12
 8005cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cf6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d02:	4b99      	ldr	r3, [pc, #612]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8111 	beq.w	8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	f000 8083 	beq.w	8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	f200 80a1 	bhi.w	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d056      	beq.n	8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d42:	e099      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d44:	4b88      	ldr	r3, [pc, #544]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02d      	beq.n	8005dac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d50:	4b85      	ldr	r3, [pc, #532]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	08db      	lsrs	r3, r3, #3
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	4a84      	ldr	r2, [pc, #528]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005daa:	e087      	b.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dee:	e065      	b.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e02:	4b59      	ldr	r3, [pc, #356]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e32:	e043      	b.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b48      	ldr	r3, [pc, #288]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e76:	e021      	b.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b37      	ldr	r3, [pc, #220]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	0a5b      	lsrs	r3, r3, #9
 8005ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee2:	ee17 2a90 	vmov	r2, s15
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005eea:	4b1f      	ldr	r3, [pc, #124]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	0c1b      	lsrs	r3, r3, #16
 8005ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f10:	ee17 2a90 	vmov	r2, s15
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f18:	4b13      	ldr	r3, [pc, #76]	@ (8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3e:	ee17 2a90 	vmov	r2, s15
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f46:	e008      	b.n	8005f5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
}
 8005f5a:	bf00      	nop
 8005f5c:	3724      	adds	r7, #36	@ 0x24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	03d09000 	.word	0x03d09000
 8005f70:	46000000 	.word	0x46000000
 8005f74:	4c742400 	.word	0x4c742400
 8005f78:	4a742400 	.word	0x4a742400
 8005f7c:	4bbebc20 	.word	0x4bbebc20

08005f80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	@ 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f88:	4ba1      	ldr	r3, [pc, #644]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f92:	4b9f      	ldr	r3, [pc, #636]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	0d1b      	lsrs	r3, r3, #20
 8005f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005faa:	4b99      	ldr	r3, [pc, #612]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fae:	08db      	lsrs	r3, r3, #3
 8005fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8111 	beq.w	80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f000 8083 	beq.w	80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	f200 80a1 	bhi.w	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d056      	beq.n	8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fea:	e099      	b.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fec:	4b88      	ldr	r3, [pc, #544]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02d      	beq.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ff8:	4b85      	ldr	r3, [pc, #532]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	4a84      	ldr	r2, [pc, #528]	@ (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b7b      	ldr	r3, [pc, #492]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a03 	vldr	s12, [r7, #12]
 8006036:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006052:	e087      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b6a      	ldr	r3, [pc, #424]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a03 	vldr	s12, [r7, #12]
 800607a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006096:	e065      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b59      	ldr	r3, [pc, #356]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80060be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060da:	e043      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b48      	ldr	r3, [pc, #288]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006102:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611e:	e021      	b.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b37      	ldr	r3, [pc, #220]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006162:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006164:	4b2a      	ldr	r3, [pc, #168]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800617a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800617e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618a:	ee17 2a90 	vmov	r2, s15
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006192:	4b1f      	ldr	r3, [pc, #124]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b8:	ee17 2a90 	vmov	r2, s15
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061c0:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061ee:	e008      	b.n	8006202 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
}
 8006202:	bf00      	nop
 8006204:	3724      	adds	r7, #36	@ 0x24
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400
 8006214:	03d09000 	.word	0x03d09000
 8006218:	46000000 	.word	0x46000000
 800621c:	4c742400 	.word	0x4c742400
 8006220:	4a742400 	.word	0x4a742400
 8006224:	4bbebc20 	.word	0x4bbebc20

08006228 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006236:	4b53      	ldr	r3, [pc, #332]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b03      	cmp	r3, #3
 8006240:	d101      	bne.n	8006246 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e099      	b.n	800637a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006246:	4b4f      	ldr	r3, [pc, #316]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a4e      	ldr	r2, [pc, #312]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006252:	f7fb fe3f 	bl	8001ed4 <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006258:	e008      	b.n	800626c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800625a:	f7fb fe3b 	bl	8001ed4 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e086      	b.n	800637a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800626c:	4b45      	ldr	r3, [pc, #276]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006278:	4b42      	ldr	r3, [pc, #264]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	031b      	lsls	r3, r3, #12
 8006286:	493f      	ldr	r1, [pc, #252]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	628b      	str	r3, [r1, #40]	@ 0x28
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	3b01      	subs	r3, #1
 8006292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	3b01      	subs	r3, #1
 800629c:	025b      	lsls	r3, r3, #9
 800629e:	b29b      	uxth	r3, r3
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	061b      	lsls	r3, r3, #24
 80062b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062bc:	4931      	ldr	r1, [pc, #196]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80062c2:	4b30      	ldr	r3, [pc, #192]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	492d      	ldr	r1, [pc, #180]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	f023 0220 	bic.w	r2, r3, #32
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	4928      	ldr	r1, [pc, #160]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062e6:	4b27      	ldr	r3, [pc, #156]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	4a26      	ldr	r2, [pc, #152]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062ec:	f023 0310 	bic.w	r3, r3, #16
 80062f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062f2:	4b24      	ldr	r3, [pc, #144]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 80062f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062f6:	4b24      	ldr	r3, [pc, #144]	@ (8006388 <RCCEx_PLL2_Config+0x160>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	69d2      	ldr	r2, [r2, #28]
 80062fe:	00d2      	lsls	r2, r2, #3
 8006300:	4920      	ldr	r1, [pc, #128]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006302:	4313      	orrs	r3, r2
 8006304:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006306:	4b1f      	ldr	r3, [pc, #124]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630a:	4a1e      	ldr	r2, [pc, #120]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800630c:	f043 0310 	orr.w	r3, r3, #16
 8006310:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006318:	4b1a      	ldr	r3, [pc, #104]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800631e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006322:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006324:	e00f      	b.n	8006346 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800632c:	4b15      	ldr	r3, [pc, #84]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006338:	e005      	b.n	8006346 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800633a:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	4a11      	ldr	r2, [pc, #68]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006344:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0e      	ldr	r2, [pc, #56]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800634c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006352:	f7fb fdbf 	bl	8001ed4 <HAL_GetTick>
 8006356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006358:	e008      	b.n	800636c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800635a:	f7fb fdbb 	bl	8001ed4 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e006      	b.n	800637a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <RCCEx_PLL2_Config+0x15c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
 8006388:	ffff0007 	.word	0xffff0007

0800638c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800639a:	4b53      	ldr	r3, [pc, #332]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d101      	bne.n	80063aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e099      	b.n	80064de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063aa:	4b4f      	ldr	r3, [pc, #316]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a4e      	ldr	r2, [pc, #312]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b6:	f7fb fd8d 	bl	8001ed4 <HAL_GetTick>
 80063ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063be:	f7fb fd89 	bl	8001ed4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e086      	b.n	80064de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063d0:	4b45      	ldr	r3, [pc, #276]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063dc:	4b42      	ldr	r3, [pc, #264]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	051b      	lsls	r3, r3, #20
 80063ea:	493f      	ldr	r1, [pc, #252]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	025b      	lsls	r3, r3, #9
 8006402:	b29b      	uxth	r3, r3
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	3b01      	subs	r3, #1
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3b01      	subs	r3, #1
 800641a:	061b      	lsls	r3, r3, #24
 800641c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006420:	4931      	ldr	r1, [pc, #196]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006426:	4b30      	ldr	r3, [pc, #192]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	492d      	ldr	r1, [pc, #180]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006434:	4313      	orrs	r3, r2
 8006436:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006438:	4b2b      	ldr	r3, [pc, #172]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	4928      	ldr	r1, [pc, #160]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800644a:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	4a26      	ldr	r2, [pc, #152]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006456:	4b24      	ldr	r3, [pc, #144]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800645a:	4b24      	ldr	r3, [pc, #144]	@ (80064ec <RCCEx_PLL3_Config+0x160>)
 800645c:	4013      	ands	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	69d2      	ldr	r2, [r2, #28]
 8006462:	00d2      	lsls	r2, r2, #3
 8006464:	4920      	ldr	r1, [pc, #128]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006466:	4313      	orrs	r3, r2
 8006468:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800646a:	4b1f      	ldr	r3, [pc, #124]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006474:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800647c:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	4a19      	ldr	r2, [pc, #100]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006482:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006488:	e00f      	b.n	80064aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d106      	bne.n	800649e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006490:	4b15      	ldr	r3, [pc, #84]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	4a14      	ldr	r2, [pc, #80]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 8006496:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800649a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800649c:	e005      	b.n	80064aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800649e:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	4a11      	ldr	r2, [pc, #68]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80064a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064aa:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a0e      	ldr	r2, [pc, #56]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b6:	f7fb fd0d 	bl	8001ed4 <HAL_GetTick>
 80064ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064bc:	e008      	b.n	80064d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064be:	f7fb fd09 	bl	8001ed4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e006      	b.n	80064de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064d0:	4b05      	ldr	r3, [pc, #20]	@ (80064e8 <RCCEx_PLL3_Config+0x15c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	58024400 	.word	0x58024400
 80064ec:	ffff0007 	.word	0xffff0007

080064f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e10f      	b.n	8006722 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a87      	ldr	r2, [pc, #540]	@ (800672c <HAL_SPI_Init+0x23c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <HAL_SPI_Init+0x42>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a86      	ldr	r2, [pc, #536]	@ (8006730 <HAL_SPI_Init+0x240>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00a      	beq.n	8006532 <HAL_SPI_Init+0x42>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a84      	ldr	r2, [pc, #528]	@ (8006734 <HAL_SPI_Init+0x244>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d005      	beq.n	8006532 <HAL_SPI_Init+0x42>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d901      	bls.n	8006532 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0f7      	b.n	8006722 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fe2e 	bl	8007194 <SPI_GetPacketSize>
 8006538:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7b      	ldr	r2, [pc, #492]	@ (800672c <HAL_SPI_Init+0x23c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00c      	beq.n	800655e <HAL_SPI_Init+0x6e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a79      	ldr	r2, [pc, #484]	@ (8006730 <HAL_SPI_Init+0x240>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <HAL_SPI_Init+0x6e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a78      	ldr	r2, [pc, #480]	@ (8006734 <HAL_SPI_Init+0x244>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d002      	beq.n	800655e <HAL_SPI_Init+0x6e>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d811      	bhi.n	8006582 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006562:	4a72      	ldr	r2, [pc, #456]	@ (800672c <HAL_SPI_Init+0x23c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a70      	ldr	r2, [pc, #448]	@ (8006730 <HAL_SPI_Init+0x240>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <HAL_SPI_Init+0x8c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6f      	ldr	r2, [pc, #444]	@ (8006734 <HAL_SPI_Init+0x244>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d104      	bne.n	8006586 <HAL_SPI_Init+0x96>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b10      	cmp	r3, #16
 8006580:	d901      	bls.n	8006586 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e0cd      	b.n	8006722 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb f97c 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80065c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065cc:	d119      	bne.n	8006602 <HAL_SPI_Init+0x112>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d6:	d103      	bne.n	80065e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10c      	bne.n	8006602 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f0:	d107      	bne.n	8006602 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006600:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00f      	beq.n	800662e <HAL_SPI_Init+0x13e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b06      	cmp	r3, #6
 8006614:	d90b      	bls.n	800662e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e007      	b.n	800663e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800663c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69da      	ldr	r2, [r3, #28]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	431a      	orrs	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	ea42 0103 	orr.w	r1, r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669e:	ea42 0103 	orr.w	r1, r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d113      	bne.n	80066de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40013000 	.word	0x40013000
 8006730:	40003800 	.word	0x40003800
 8006734:	40003c00 	.word	0x40003c00

08006738 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3320      	adds	r3, #32
 800674e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006750:	f7fb fbc0 	bl	8001ed4 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	d001      	beq.n	8006766 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
 8006764:	e1d1      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_Transmit+0x3a>
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e1c9      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_SPI_Transmit+0x4c>
 8006780:	2302      	movs	r3, #2
 8006782:	e1c2      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2203      	movs	r2, #3
 8006790:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80067dc:	d108      	bne.n	80067f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e009      	b.n	8006804 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006802:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	4b96      	ldr	r3, [pc, #600]	@ (8006a64 <HAL_SPI_Transmit+0x32c>)
 800680c:	4013      	ands	r3, r2
 800680e:	88f9      	ldrh	r1, [r7, #6]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	430b      	orrs	r3, r1
 8006816:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006830:	d107      	bne.n	8006842 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d947      	bls.n	80068da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800684a:	e03f      	b.n	80068cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b02      	cmp	r3, #2
 8006858:	d114      	bne.n	8006884 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686a:	1d1a      	adds	r2, r3, #4
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006882:	e023      	b.n	80068cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006884:	f7fb fb26 	bl	8001ed4 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d803      	bhi.n	800689c <HAL_SPI_Transmit+0x164>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Transmit+0x16a>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d114      	bne.n	80068cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fba8 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e11e      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1b9      	bne.n	800684c <HAL_SPI_Transmit+0x114>
 80068d8:	e0f1      	b.n	8006abe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b07      	cmp	r3, #7
 80068e0:	f240 80e6 	bls.w	8006ab0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80068e4:	e05d      	b.n	80069a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d132      	bne.n	800695a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d918      	bls.n	8006932 <HAL_SPI_Transmit+0x1fa>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d014      	beq.n	8006932 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b02      	subs	r3, #2
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006930:	e037      	b.n	80069a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	881a      	ldrh	r2, [r3, #0]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006958:	e023      	b.n	80069a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800695a:	f7fb fabb 	bl	8001ed4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d803      	bhi.n	8006972 <HAL_SPI_Transmit+0x23a>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d102      	bne.n	8006978 <HAL_SPI_Transmit+0x240>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d114      	bne.n	80069a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fb3d 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006984:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e0b3      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d19b      	bne.n	80068e6 <HAL_SPI_Transmit+0x1ae>
 80069ae:	e086      	b.n	8006abe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d154      	bne.n	8006a68 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d918      	bls.n	80069fc <HAL_SPI_Transmit+0x2c4>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	2b40      	cmp	r3, #64	@ 0x40
 80069d0:	d914      	bls.n	80069fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e2:	1d1a      	adds	r2, r3, #4
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b04      	subs	r3, #4
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069fa:	e059      	b.n	8006ab0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d917      	bls.n	8006a38 <HAL_SPI_Transmit+0x300>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b02      	subs	r3, #2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a36:	e03b      	b.n	8006ab0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3320      	adds	r3, #32
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a62:	e025      	b.n	8006ab0 <HAL_SPI_Transmit+0x378>
 8006a64:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a68:	f7fb fa34 	bl	8001ed4 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d803      	bhi.n	8006a80 <HAL_SPI_Transmit+0x348>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d102      	bne.n	8006a86 <HAL_SPI_Transmit+0x34e>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d114      	bne.n	8006ab0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fab6 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e02c      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af79 	bne.w	80069b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2108      	movs	r1, #8
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fb35 	bl	8007138 <SPI_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fa87 	bl	8006ff8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop

08006b14 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3330      	adds	r3, #48	@ 0x30
 8006b36:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b38:	f7fb f9cc 	bl	8001ed4 <HAL_GetTick>
 8006b3c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d001      	beq.n	8006b4e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e250      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_SPI_Receive+0x46>
 8006b54:	88fb      	ldrh	r3, [r7, #6]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e248      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_SPI_Receive+0x58>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e241      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	88fa      	ldrh	r2, [r7, #6]
 8006b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006bc4:	d108      	bne.n	8006bd8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e009      	b.n	8006bec <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006bea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4b95      	ldr	r3, [pc, #596]	@ (8006e48 <HAL_SPI_Receive+0x334>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	88f9      	ldrh	r1, [r7, #6]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	6812      	ldr	r2, [r2, #0]
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c18:	d107      	bne.n	8006c2a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d96c      	bls.n	8006d0c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006c32:	e064      	b.n	8006cfe <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d114      	bne.n	8006c74 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c72:	e044      	b.n	8006cfe <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	8bfa      	ldrh	r2, [r7, #30]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d919      	bls.n	8006cb6 <HAL_SPI_Receive+0x1a2>
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d014      	beq.n	8006cb6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c96:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cb4:	e023      	b.n	8006cfe <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb6:	f7fb f90d 	bl	8001ed4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d803      	bhi.n	8006cce <HAL_SPI_Receive+0x1ba>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SPI_Receive+0x1c0>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d114      	bne.n	8006cfe <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f98f 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e178      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d194      	bne.n	8006c34 <HAL_SPI_Receive+0x120>
 8006d0a:	e15e      	b.n	8006fca <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b07      	cmp	r3, #7
 8006d12:	f240 8153 	bls.w	8006fbc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006d16:	e08f      	b.n	8006e38 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d114      	bne.n	8006d58 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	8812      	ldrh	r2, [r2, #0]
 8006d36:	b292      	uxth	r2, r2
 8006d38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3e:	1c9a      	adds	r2, r3, #2
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d56:	e06f      	b.n	8006e38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8bfa      	ldrh	r2, [r7, #30]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d924      	bls.n	8006db0 <HAL_SPI_Receive+0x29c>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01f      	beq.n	8006db0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	b292      	uxth	r2, r2
 8006d7a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d80:	1c9a      	adds	r2, r3, #2
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b02      	subs	r3, #2
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006dae:	e043      	b.n	8006e38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d119      	bne.n	8006df0 <HAL_SPI_Receive+0x2dc>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d014      	beq.n	8006df0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006dee:	e023      	b.n	8006e38 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df0:	f7fb f870 	bl	8001ed4 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d803      	bhi.n	8006e08 <HAL_SPI_Receive+0x2f4>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d102      	bne.n	8006e0e <HAL_SPI_Receive+0x2fa>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d114      	bne.n	8006e38 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f8f2 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0db      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f af69 	bne.w	8006d18 <HAL_SPI_Receive+0x204>
 8006e46:	e0c0      	b.n	8006fca <HAL_SPI_Receive+0x4b6>
 8006e48:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d117      	bne.n	8006e92 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e6e:	7812      	ldrb	r2, [r2, #0]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e90:	e094      	b.n	8006fbc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	8bfa      	ldrh	r2, [r7, #30]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d946      	bls.n	8006f2e <HAL_SPI_Receive+0x41a>
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d041      	beq.n	8006f2e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed2:	7812      	ldrb	r2, [r2, #0]
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b04      	subs	r3, #4
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f2c:	e046      	b.n	8006fbc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d81c      	bhi.n	8006f74 <HAL_SPI_Receive+0x460>
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d017      	beq.n	8006f74 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f72:	e023      	b.n	8006fbc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f74:	f7fa ffae 	bl	8001ed4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d803      	bhi.n	8006f8c <HAL_SPI_Receive+0x478>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d102      	bne.n	8006f92 <HAL_SPI_Receive+0x47e>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d114      	bne.n	8006fbc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f830 	bl	8006ff8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e019      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f47f af41 	bne.w	8006e4c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f814 	bl	8006ff8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006fee:	2300      	movs	r3, #0
  }
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0208 	orr.w	r2, r2, #8
 8007016:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0210 	orr.w	r2, r2, #16
 8007026:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6919      	ldr	r1, [r3, #16]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b3c      	ldr	r3, [pc, #240]	@ (8007134 <SPI_CloseTransfer+0x13c>)
 8007044:	400b      	ands	r3, r1
 8007046:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007056:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b04      	cmp	r3, #4
 8007062:	d014      	beq.n	800708e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00f      	beq.n	800708e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007074:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0220 	orr.w	r2, r2, #32
 800708c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d014      	beq.n	80070c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00f      	beq.n	80070c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00f      	beq.n	80070ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d4:	f043 0201 	orr.w	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070fe:	f043 0208 	orr.w	r2, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007116:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007128:	bf00      	nop
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	fffffc90 	.word	0xfffffc90

08007138 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007148:	e010      	b.n	800716c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714a:	f7fa fec3 	bl	8001ed4 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d803      	bhi.n	8007162 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d102      	bne.n	8007168 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e00f      	b.n	800718c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4013      	ands	r3, r2
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	429a      	cmp	r2, r3
 8007188:	d0df      	beq.n	800714a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3307      	adds	r3, #7
 80071b2:	08db      	lsrs	r3, r3, #3
 80071b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e042      	b.n	8007262 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fa fbba 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fee7 	bl	8007fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f97c 	bl	8007518 <UART_SetConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e01b      	b.n	8007262 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007238:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007248:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 ff66 	bl	800812c <UART_CheckIdleState>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b08a      	sub	sp, #40	@ 0x28
 800726e:	af02      	add	r7, sp, #8
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	4613      	mov	r3, r2
 8007278:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	2b20      	cmp	r3, #32
 8007282:	d17b      	bne.n	800737c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_UART_Transmit+0x26>
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e074      	b.n	800737e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2221      	movs	r2, #33	@ 0x21
 80072a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072a4:	f7fa fe16 	bl	8001ed4 <HAL_GetTick>
 80072a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c2:	d108      	bne.n	80072d6 <HAL_UART_Transmit+0x6c>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e003      	b.n	80072de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072de:	e030      	b.n	8007342 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	2180      	movs	r1, #128	@ 0x80
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 ffc8 	bl	8008280 <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e03d      	b.n	800737e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	3302      	adds	r3, #2
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	e007      	b.n	8007330 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1c8      	bne.n	80072e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2200      	movs	r2, #0
 8007356:	2140      	movs	r1, #64	@ 0x40
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 ff91 	bl	8008280 <UART_WaitOnFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e006      	b.n	800737e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b08a      	sub	sp, #40	@ 0x28
 800738a:	af02      	add	r7, sp, #8
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800739c:	2b20      	cmp	r3, #32
 800739e:	f040 80b5 	bne.w	800750c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_UART_Receive+0x28>
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e0ad      	b.n	800750e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2222      	movs	r2, #34	@ 0x22
 80073be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073c8:	f7fa fd84 	bl	8001ed4 <HAL_GetTick>
 80073cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e6:	d10e      	bne.n	8007406 <HAL_UART_Receive+0x80>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d105      	bne.n	80073fc <HAL_UART_Receive+0x76>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073fa:	e02d      	b.n	8007458 <HAL_UART_Receive+0xd2>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	22ff      	movs	r2, #255	@ 0xff
 8007400:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007404:	e028      	b.n	8007458 <HAL_UART_Receive+0xd2>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <HAL_UART_Receive+0xa4>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <HAL_UART_Receive+0x9a>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	22ff      	movs	r2, #255	@ 0xff
 800741a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800741e:	e01b      	b.n	8007458 <HAL_UART_Receive+0xd2>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	227f      	movs	r2, #127	@ 0x7f
 8007424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007428:	e016      	b.n	8007458 <HAL_UART_Receive+0xd2>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007432:	d10d      	bne.n	8007450 <HAL_UART_Receive+0xca>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_UART_Receive+0xc0>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	227f      	movs	r2, #127	@ 0x7f
 8007440:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007444:	e008      	b.n	8007458 <HAL_UART_Receive+0xd2>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	223f      	movs	r2, #63	@ 0x3f
 800744a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800744e:	e003      	b.n	8007458 <HAL_UART_Receive+0xd2>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800745e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007468:	d108      	bne.n	800747c <HAL_UART_Receive+0xf6>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	e003      	b.n	8007484 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007484:	e036      	b.n	80074f4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	2120      	movs	r1, #32
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fef5 	bl	8008280 <UART_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e032      	b.n	800750e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	8a7b      	ldrh	r3, [r7, #18]
 80074b8:	4013      	ands	r3, r2
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	3302      	adds	r3, #2
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e00c      	b.n	80074e2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	8a7b      	ldrh	r3, [r7, #18]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	4013      	ands	r3, r2
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1c2      	bne.n	8007486 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2220      	movs	r2, #32
 8007504:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	e000      	b.n	800750e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800750c:	2302      	movs	r3, #2
  }
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800751c:	b092      	sub	sp, #72	@ 0x48
 800751e:	af00      	add	r7, sp, #0
 8007520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	431a      	orrs	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	431a      	orrs	r2, r3
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	4313      	orrs	r3, r2
 800753e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4bbe      	ldr	r3, [pc, #760]	@ (8007840 <UART_SetConfig+0x328>)
 8007548:	4013      	ands	r3, r2
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007550:	430b      	orrs	r3, r1
 8007552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4ab3      	ldr	r2, [pc, #716]	@ (8007844 <UART_SetConfig+0x32c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007580:	4313      	orrs	r3, r2
 8007582:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	4baf      	ldr	r3, [pc, #700]	@ (8007848 <UART_SetConfig+0x330>)
 800758c:	4013      	ands	r3, r2
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007594:	430b      	orrs	r3, r1
 8007596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	f023 010f 	bic.w	r1, r3, #15
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4aa6      	ldr	r2, [pc, #664]	@ (800784c <UART_SetConfig+0x334>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d177      	bne.n	80076a8 <UART_SetConfig+0x190>
 80075b8:	4ba5      	ldr	r3, [pc, #660]	@ (8007850 <UART_SetConfig+0x338>)
 80075ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075c0:	2b28      	cmp	r3, #40	@ 0x28
 80075c2:	d86d      	bhi.n	80076a0 <UART_SetConfig+0x188>
 80075c4:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <UART_SetConfig+0xb4>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	08007671 	.word	0x08007671
 80075d0:	080076a1 	.word	0x080076a1
 80075d4:	080076a1 	.word	0x080076a1
 80075d8:	080076a1 	.word	0x080076a1
 80075dc:	080076a1 	.word	0x080076a1
 80075e0:	080076a1 	.word	0x080076a1
 80075e4:	080076a1 	.word	0x080076a1
 80075e8:	080076a1 	.word	0x080076a1
 80075ec:	08007679 	.word	0x08007679
 80075f0:	080076a1 	.word	0x080076a1
 80075f4:	080076a1 	.word	0x080076a1
 80075f8:	080076a1 	.word	0x080076a1
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076a1 	.word	0x080076a1
 8007604:	080076a1 	.word	0x080076a1
 8007608:	080076a1 	.word	0x080076a1
 800760c:	08007681 	.word	0x08007681
 8007610:	080076a1 	.word	0x080076a1
 8007614:	080076a1 	.word	0x080076a1
 8007618:	080076a1 	.word	0x080076a1
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076a1 	.word	0x080076a1
 8007624:	080076a1 	.word	0x080076a1
 8007628:	080076a1 	.word	0x080076a1
 800762c:	08007689 	.word	0x08007689
 8007630:	080076a1 	.word	0x080076a1
 8007634:	080076a1 	.word	0x080076a1
 8007638:	080076a1 	.word	0x080076a1
 800763c:	080076a1 	.word	0x080076a1
 8007640:	080076a1 	.word	0x080076a1
 8007644:	080076a1 	.word	0x080076a1
 8007648:	080076a1 	.word	0x080076a1
 800764c:	08007691 	.word	0x08007691
 8007650:	080076a1 	.word	0x080076a1
 8007654:	080076a1 	.word	0x080076a1
 8007658:	080076a1 	.word	0x080076a1
 800765c:	080076a1 	.word	0x080076a1
 8007660:	080076a1 	.word	0x080076a1
 8007664:	080076a1 	.word	0x080076a1
 8007668:	080076a1 	.word	0x080076a1
 800766c:	08007699 	.word	0x08007699
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e222      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e21e      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e21a      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e216      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007690:	2320      	movs	r3, #32
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e212      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007698:	2340      	movs	r3, #64	@ 0x40
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e20e      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e20a      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a69      	ldr	r2, [pc, #420]	@ (8007854 <UART_SetConfig+0x33c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d130      	bne.n	8007714 <UART_SetConfig+0x1fc>
 80076b2:	4b67      	ldr	r3, [pc, #412]	@ (8007850 <UART_SetConfig+0x338>)
 80076b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d826      	bhi.n	800770c <UART_SetConfig+0x1f4>
 80076be:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <UART_SetConfig+0x1ac>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076fd 	.word	0x080076fd
 80076d8:	08007705 	.word	0x08007705
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e1ec      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076e4:	2304      	movs	r3, #4
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e1e8      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076ec:	2308      	movs	r3, #8
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e1e4      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076f4:	2310      	movs	r3, #16
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e1e0      	b.n	8007abe <UART_SetConfig+0x5a6>
 80076fc:	2320      	movs	r3, #32
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e1dc      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e1d8      	b.n	8007abe <UART_SetConfig+0x5a6>
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e1d4      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a4f      	ldr	r2, [pc, #316]	@ (8007858 <UART_SetConfig+0x340>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d130      	bne.n	8007780 <UART_SetConfig+0x268>
 800771e:	4b4c      	ldr	r3, [pc, #304]	@ (8007850 <UART_SetConfig+0x338>)
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b05      	cmp	r3, #5
 8007728:	d826      	bhi.n	8007778 <UART_SetConfig+0x260>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x218>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007749 	.word	0x08007749
 8007734:	08007751 	.word	0x08007751
 8007738:	08007759 	.word	0x08007759
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e1b6      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e1b2      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e1ae      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e1aa      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007768:	2320      	movs	r3, #32
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e1a6      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e1a2      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e19e      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a35      	ldr	r2, [pc, #212]	@ (800785c <UART_SetConfig+0x344>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d130      	bne.n	80077ec <UART_SetConfig+0x2d4>
 800778a:	4b31      	ldr	r3, [pc, #196]	@ (8007850 <UART_SetConfig+0x338>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b05      	cmp	r3, #5
 8007794:	d826      	bhi.n	80077e4 <UART_SetConfig+0x2cc>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x284>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e180      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e17c      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e178      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e174      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077d4:	2320      	movs	r3, #32
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e170      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077dc:	2340      	movs	r3, #64	@ 0x40
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e16c      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e168      	b.n	8007abe <UART_SetConfig+0x5a6>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007860 <UART_SetConfig+0x348>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d142      	bne.n	800787c <UART_SetConfig+0x364>
 80077f6:	4b16      	ldr	r3, [pc, #88]	@ (8007850 <UART_SetConfig+0x338>)
 80077f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d838      	bhi.n	8007874 <UART_SetConfig+0x35c>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <UART_SetConfig+0x2f0>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007821 	.word	0x08007821
 800780c:	08007829 	.word	0x08007829
 8007810:	08007831 	.word	0x08007831
 8007814:	08007839 	.word	0x08007839
 8007818:	08007865 	.word	0x08007865
 800781c:	0800786d 	.word	0x0800786d
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e14a      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e146      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e142      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e13e      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007840:	cfff69f3 	.word	0xcfff69f3
 8007844:	58000c00 	.word	0x58000c00
 8007848:	11fff4ff 	.word	0x11fff4ff
 800784c:	40011000 	.word	0x40011000
 8007850:	58024400 	.word	0x58024400
 8007854:	40004400 	.word	0x40004400
 8007858:	40004800 	.word	0x40004800
 800785c:	40004c00 	.word	0x40004c00
 8007860:	40005000 	.word	0x40005000
 8007864:	2320      	movs	r3, #32
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e128      	b.n	8007abe <UART_SetConfig+0x5a6>
 800786c:	2340      	movs	r3, #64	@ 0x40
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e124      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007874:	2380      	movs	r3, #128	@ 0x80
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e120      	b.n	8007abe <UART_SetConfig+0x5a6>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4acb      	ldr	r2, [pc, #812]	@ (8007bb0 <UART_SetConfig+0x698>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d176      	bne.n	8007974 <UART_SetConfig+0x45c>
 8007886:	4bcb      	ldr	r3, [pc, #812]	@ (8007bb4 <UART_SetConfig+0x69c>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800788e:	2b28      	cmp	r3, #40	@ 0x28
 8007890:	d86c      	bhi.n	800796c <UART_SetConfig+0x454>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0x380>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	0800793d 	.word	0x0800793d
 800789c:	0800796d 	.word	0x0800796d
 80078a0:	0800796d 	.word	0x0800796d
 80078a4:	0800796d 	.word	0x0800796d
 80078a8:	0800796d 	.word	0x0800796d
 80078ac:	0800796d 	.word	0x0800796d
 80078b0:	0800796d 	.word	0x0800796d
 80078b4:	0800796d 	.word	0x0800796d
 80078b8:	08007945 	.word	0x08007945
 80078bc:	0800796d 	.word	0x0800796d
 80078c0:	0800796d 	.word	0x0800796d
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	0800796d 	.word	0x0800796d
 80078d0:	0800796d 	.word	0x0800796d
 80078d4:	0800796d 	.word	0x0800796d
 80078d8:	0800794d 	.word	0x0800794d
 80078dc:	0800796d 	.word	0x0800796d
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	0800796d 	.word	0x0800796d
 80078f0:	0800796d 	.word	0x0800796d
 80078f4:	0800796d 	.word	0x0800796d
 80078f8:	08007955 	.word	0x08007955
 80078fc:	0800796d 	.word	0x0800796d
 8007900:	0800796d 	.word	0x0800796d
 8007904:	0800796d 	.word	0x0800796d
 8007908:	0800796d 	.word	0x0800796d
 800790c:	0800796d 	.word	0x0800796d
 8007910:	0800796d 	.word	0x0800796d
 8007914:	0800796d 	.word	0x0800796d
 8007918:	0800795d 	.word	0x0800795d
 800791c:	0800796d 	.word	0x0800796d
 8007920:	0800796d 	.word	0x0800796d
 8007924:	0800796d 	.word	0x0800796d
 8007928:	0800796d 	.word	0x0800796d
 800792c:	0800796d 	.word	0x0800796d
 8007930:	0800796d 	.word	0x0800796d
 8007934:	0800796d 	.word	0x0800796d
 8007938:	08007965 	.word	0x08007965
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e0bc      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007944:	2304      	movs	r3, #4
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e0b8      	b.n	8007abe <UART_SetConfig+0x5a6>
 800794c:	2308      	movs	r3, #8
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e0b4      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007954:	2310      	movs	r3, #16
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e0b0      	b.n	8007abe <UART_SetConfig+0x5a6>
 800795c:	2320      	movs	r3, #32
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e0ac      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007964:	2340      	movs	r3, #64	@ 0x40
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e0a8      	b.n	8007abe <UART_SetConfig+0x5a6>
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e0a4      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a8f      	ldr	r2, [pc, #572]	@ (8007bb8 <UART_SetConfig+0x6a0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d130      	bne.n	80079e0 <UART_SetConfig+0x4c8>
 800797e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb4 <UART_SetConfig+0x69c>)
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b05      	cmp	r3, #5
 8007988:	d826      	bhi.n	80079d8 <UART_SetConfig+0x4c0>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x478>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a9 	.word	0x080079a9
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e086      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e082      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e07e      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e07a      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e076      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079d0:	2340      	movs	r3, #64	@ 0x40
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e072      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e06e      	b.n	8007abe <UART_SetConfig+0x5a6>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a75      	ldr	r2, [pc, #468]	@ (8007bbc <UART_SetConfig+0x6a4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d130      	bne.n	8007a4c <UART_SetConfig+0x534>
 80079ea:	4b72      	ldr	r3, [pc, #456]	@ (8007bb4 <UART_SetConfig+0x69c>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d826      	bhi.n	8007a44 <UART_SetConfig+0x52c>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0x4e4>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a15 	.word	0x08007a15
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	08007a25 	.word	0x08007a25
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e050      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e04c      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e048      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e044      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a34:	2320      	movs	r3, #32
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e040      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a3c:	2340      	movs	r3, #64	@ 0x40
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e03c      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a44:	2380      	movs	r3, #128	@ 0x80
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e038      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a5b      	ldr	r2, [pc, #364]	@ (8007bc0 <UART_SetConfig+0x6a8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d130      	bne.n	8007ab8 <UART_SetConfig+0x5a0>
 8007a56:	4b57      	ldr	r3, [pc, #348]	@ (8007bb4 <UART_SetConfig+0x69c>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d826      	bhi.n	8007ab0 <UART_SetConfig+0x598>
 8007a62:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0x550>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	2302      	movs	r3, #2
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e01a      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e016      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e012      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e00e      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e00a      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007aa8:	2340      	movs	r3, #64	@ 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e006      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007ab0:	2380      	movs	r3, #128	@ 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e002      	b.n	8007abe <UART_SetConfig+0x5a6>
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8007bc0 <UART_SetConfig+0x6a8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	f040 80f8 	bne.w	8007cba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	dc46      	bgt.n	8007b60 <UART_SetConfig+0x648>
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	f2c0 8082 	blt.w	8007bdc <UART_SetConfig+0x6c4>
 8007ad8:	3b02      	subs	r3, #2
 8007ada:	2b1e      	cmp	r3, #30
 8007adc:	d87e      	bhi.n	8007bdc <UART_SetConfig+0x6c4>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x5cc>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b67 	.word	0x08007b67
 8007ae8:	08007bdd 	.word	0x08007bdd
 8007aec:	08007b6f 	.word	0x08007b6f
 8007af0:	08007bdd 	.word	0x08007bdd
 8007af4:	08007bdd 	.word	0x08007bdd
 8007af8:	08007bdd 	.word	0x08007bdd
 8007afc:	08007b7f 	.word	0x08007b7f
 8007b00:	08007bdd 	.word	0x08007bdd
 8007b04:	08007bdd 	.word	0x08007bdd
 8007b08:	08007bdd 	.word	0x08007bdd
 8007b0c:	08007bdd 	.word	0x08007bdd
 8007b10:	08007bdd 	.word	0x08007bdd
 8007b14:	08007bdd 	.word	0x08007bdd
 8007b18:	08007bdd 	.word	0x08007bdd
 8007b1c:	08007b8f 	.word	0x08007b8f
 8007b20:	08007bdd 	.word	0x08007bdd
 8007b24:	08007bdd 	.word	0x08007bdd
 8007b28:	08007bdd 	.word	0x08007bdd
 8007b2c:	08007bdd 	.word	0x08007bdd
 8007b30:	08007bdd 	.word	0x08007bdd
 8007b34:	08007bdd 	.word	0x08007bdd
 8007b38:	08007bdd 	.word	0x08007bdd
 8007b3c:	08007bdd 	.word	0x08007bdd
 8007b40:	08007bdd 	.word	0x08007bdd
 8007b44:	08007bdd 	.word	0x08007bdd
 8007b48:	08007bdd 	.word	0x08007bdd
 8007b4c:	08007bdd 	.word	0x08007bdd
 8007b50:	08007bdd 	.word	0x08007bdd
 8007b54:	08007bdd 	.word	0x08007bdd
 8007b58:	08007bdd 	.word	0x08007bdd
 8007b5c:	08007bcf 	.word	0x08007bcf
 8007b60:	2b40      	cmp	r3, #64	@ 0x40
 8007b62:	d037      	beq.n	8007bd4 <UART_SetConfig+0x6bc>
 8007b64:	e03a      	b.n	8007bdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b66:	f7fe f8a1 	bl	8005cac <HAL_RCCEx_GetD3PCLK1Freq>
 8007b6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b6c:	e03c      	b.n	8007be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe f8b0 	bl	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7c:	e034      	b.n	8007be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b7e:	f107 0318 	add.w	r3, r7, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f9fc 	bl	8005f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8c:	e02c      	b.n	8007be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b8e:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <UART_SetConfig+0x69c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b9a:	4b06      	ldr	r3, [pc, #24]	@ (8007bb4 <UART_SetConfig+0x69c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	4a07      	ldr	r2, [pc, #28]	@ (8007bc4 <UART_SetConfig+0x6ac>)
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bac:	e01c      	b.n	8007be8 <UART_SetConfig+0x6d0>
 8007bae:	bf00      	nop
 8007bb0:	40011400 	.word	0x40011400
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	40007800 	.word	0x40007800
 8007bbc:	40007c00 	.word	0x40007c00
 8007bc0:	58000c00 	.word	0x58000c00
 8007bc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007bc8:	4b9d      	ldr	r3, [pc, #628]	@ (8007e40 <UART_SetConfig+0x928>)
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	e00c      	b.n	8007be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bce:	4b9d      	ldr	r3, [pc, #628]	@ (8007e44 <UART_SetConfig+0x92c>)
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd2:	e009      	b.n	8007be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bda:	e005      	b.n	8007be8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007be6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 81de 	beq.w	8007fac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	4a94      	ldr	r2, [pc, #592]	@ (8007e48 <UART_SetConfig+0x930>)
 8007bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d305      	bcc.n	8007c20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c26:	e1c1      	b.n	8007fac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	60fa      	str	r2, [r7, #12]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c34:	4a84      	ldr	r2, [pc, #528]	@ (8007e48 <UART_SetConfig+0x930>)
 8007c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c4a:	f7f8 fba1 	bl	8000390 <__aeabi_uldivmod>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	020b      	lsls	r3, r1, #8
 8007c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c64:	0202      	lsls	r2, r0, #8
 8007c66:	6979      	ldr	r1, [r7, #20]
 8007c68:	6849      	ldr	r1, [r1, #4]
 8007c6a:	0849      	lsrs	r1, r1, #1
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	4605      	mov	r5, r0
 8007c72:	eb12 0804 	adds.w	r8, r2, r4
 8007c76:	eb43 0905 	adc.w	r9, r3, r5
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	469a      	mov	sl, r3
 8007c82:	4693      	mov	fp, r2
 8007c84:	4652      	mov	r2, sl
 8007c86:	465b      	mov	r3, fp
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 fb80 	bl	8000390 <__aeabi_uldivmod>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4613      	mov	r3, r2
 8007c96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c9e:	d308      	bcc.n	8007cb2 <UART_SetConfig+0x79a>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca6:	d204      	bcs.n	8007cb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cae:	60da      	str	r2, [r3, #12]
 8007cb0:	e17c      	b.n	8007fac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cb8:	e178      	b.n	8007fac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc2:	f040 80c5 	bne.w	8007e50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	dc48      	bgt.n	8007d60 <UART_SetConfig+0x848>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	db7b      	blt.n	8007dca <UART_SetConfig+0x8b2>
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d879      	bhi.n	8007dca <UART_SetConfig+0x8b2>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x7c4>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d67 	.word	0x08007d67
 8007ce0:	08007d6f 	.word	0x08007d6f
 8007ce4:	08007dcb 	.word	0x08007dcb
 8007ce8:	08007dcb 	.word	0x08007dcb
 8007cec:	08007d77 	.word	0x08007d77
 8007cf0:	08007dcb 	.word	0x08007dcb
 8007cf4:	08007dcb 	.word	0x08007dcb
 8007cf8:	08007dcb 	.word	0x08007dcb
 8007cfc:	08007d87 	.word	0x08007d87
 8007d00:	08007dcb 	.word	0x08007dcb
 8007d04:	08007dcb 	.word	0x08007dcb
 8007d08:	08007dcb 	.word	0x08007dcb
 8007d0c:	08007dcb 	.word	0x08007dcb
 8007d10:	08007dcb 	.word	0x08007dcb
 8007d14:	08007dcb 	.word	0x08007dcb
 8007d18:	08007dcb 	.word	0x08007dcb
 8007d1c:	08007d97 	.word	0x08007d97
 8007d20:	08007dcb 	.word	0x08007dcb
 8007d24:	08007dcb 	.word	0x08007dcb
 8007d28:	08007dcb 	.word	0x08007dcb
 8007d2c:	08007dcb 	.word	0x08007dcb
 8007d30:	08007dcb 	.word	0x08007dcb
 8007d34:	08007dcb 	.word	0x08007dcb
 8007d38:	08007dcb 	.word	0x08007dcb
 8007d3c:	08007dcb 	.word	0x08007dcb
 8007d40:	08007dcb 	.word	0x08007dcb
 8007d44:	08007dcb 	.word	0x08007dcb
 8007d48:	08007dcb 	.word	0x08007dcb
 8007d4c:	08007dcb 	.word	0x08007dcb
 8007d50:	08007dcb 	.word	0x08007dcb
 8007d54:	08007dcb 	.word	0x08007dcb
 8007d58:	08007dcb 	.word	0x08007dcb
 8007d5c:	08007dbd 	.word	0x08007dbd
 8007d60:	2b40      	cmp	r3, #64	@ 0x40
 8007d62:	d02e      	beq.n	8007dc2 <UART_SetConfig+0x8aa>
 8007d64:	e031      	b.n	8007dca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d66:	f7fc fd6b 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8007d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d6c:	e033      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d6e:	f7fc fd7d 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8007d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d74:	e02f      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd ffac 	bl	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d84:	e027      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d86:	f107 0318 	add.w	r3, r7, #24
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe f8f8 	bl	8005f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d94:	e01f      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d96:	4b2d      	ldr	r3, [pc, #180]	@ (8007e4c <UART_SetConfig+0x934>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007da2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e4c <UART_SetConfig+0x934>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	4a24      	ldr	r2, [pc, #144]	@ (8007e40 <UART_SetConfig+0x928>)
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007db4:	e00f      	b.n	8007dd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007db6:	4b22      	ldr	r3, [pc, #136]	@ (8007e40 <UART_SetConfig+0x928>)
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dba:	e00c      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dbc:	4b21      	ldr	r3, [pc, #132]	@ (8007e44 <UART_SetConfig+0x92c>)
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc0:	e009      	b.n	8007dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc8:	e005      	b.n	8007dd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80e7 	beq.w	8007fac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	4a19      	ldr	r2, [pc, #100]	@ (8007e48 <UART_SetConfig+0x930>)
 8007de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007df0:	005a      	lsls	r2, r3, #1
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	441a      	add	r2, r3
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d916      	bls.n	8007e38 <UART_SetConfig+0x920>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e10:	d212      	bcs.n	8007e38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f023 030f 	bic.w	r3, r3, #15
 8007e1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	085b      	lsrs	r3, r3, #1
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e0b9      	b.n	8007fac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e3e:	e0b5      	b.n	8007fac <UART_SetConfig+0xa94>
 8007e40:	03d09000 	.word	0x03d09000
 8007e44:	003d0900 	.word	0x003d0900
 8007e48:	080090cc 	.word	0x080090cc
 8007e4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	dc49      	bgt.n	8007eec <UART_SetConfig+0x9d4>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	db7c      	blt.n	8007f56 <UART_SetConfig+0xa3e>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d87a      	bhi.n	8007f56 <UART_SetConfig+0xa3e>
 8007e60:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <UART_SetConfig+0x950>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007ef3 	.word	0x08007ef3
 8007e6c:	08007efb 	.word	0x08007efb
 8007e70:	08007f57 	.word	0x08007f57
 8007e74:	08007f57 	.word	0x08007f57
 8007e78:	08007f03 	.word	0x08007f03
 8007e7c:	08007f57 	.word	0x08007f57
 8007e80:	08007f57 	.word	0x08007f57
 8007e84:	08007f57 	.word	0x08007f57
 8007e88:	08007f13 	.word	0x08007f13
 8007e8c:	08007f57 	.word	0x08007f57
 8007e90:	08007f57 	.word	0x08007f57
 8007e94:	08007f57 	.word	0x08007f57
 8007e98:	08007f57 	.word	0x08007f57
 8007e9c:	08007f57 	.word	0x08007f57
 8007ea0:	08007f57 	.word	0x08007f57
 8007ea4:	08007f57 	.word	0x08007f57
 8007ea8:	08007f23 	.word	0x08007f23
 8007eac:	08007f57 	.word	0x08007f57
 8007eb0:	08007f57 	.word	0x08007f57
 8007eb4:	08007f57 	.word	0x08007f57
 8007eb8:	08007f57 	.word	0x08007f57
 8007ebc:	08007f57 	.word	0x08007f57
 8007ec0:	08007f57 	.word	0x08007f57
 8007ec4:	08007f57 	.word	0x08007f57
 8007ec8:	08007f57 	.word	0x08007f57
 8007ecc:	08007f57 	.word	0x08007f57
 8007ed0:	08007f57 	.word	0x08007f57
 8007ed4:	08007f57 	.word	0x08007f57
 8007ed8:	08007f57 	.word	0x08007f57
 8007edc:	08007f57 	.word	0x08007f57
 8007ee0:	08007f57 	.word	0x08007f57
 8007ee4:	08007f57 	.word	0x08007f57
 8007ee8:	08007f49 	.word	0x08007f49
 8007eec:	2b40      	cmp	r3, #64	@ 0x40
 8007eee:	d02e      	beq.n	8007f4e <UART_SetConfig+0xa36>
 8007ef0:	e031      	b.n	8007f56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ef2:	f7fc fca5 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8007ef6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e033      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007efa:	f7fc fcb7 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8007efe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f00:	e02f      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd fee6 	bl	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f10:	e027      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f12:	f107 0318 	add.w	r3, r7, #24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe f832 	bl	8005f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f20:	e01f      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f22:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd8 <UART_SetConfig+0xac0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8007fd8 <UART_SetConfig+0xac0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	08db      	lsrs	r3, r3, #3
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	4a28      	ldr	r2, [pc, #160]	@ (8007fdc <UART_SetConfig+0xac4>)
 8007f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f40:	e00f      	b.n	8007f62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <UART_SetConfig+0xac4>)
 8007f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f46:	e00c      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f48:	4b25      	ldr	r3, [pc, #148]	@ (8007fe0 <UART_SetConfig+0xac8>)
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4c:	e009      	b.n	8007f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f54:	e005      	b.n	8007f62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f60:	bf00      	nop
    }

    if (pclk != 0U)
 8007f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d021      	beq.n	8007fac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe4 <UART_SetConfig+0xacc>)
 8007f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	441a      	add	r2, r3
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	d909      	bls.n	8007fa6 <UART_SetConfig+0xa8e>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f98:	d205      	bcs.n	8007fa6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60da      	str	r2, [r3, #12]
 8007fa4:	e002      	b.n	8007fac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007fc8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3748      	adds	r7, #72	@ 0x48
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd6:	bf00      	nop
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	003d0900 	.word	0x003d0900
 8007fe4:	080090cc 	.word	0x080090cc

08007fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01a      	beq.n	80080fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e6:	d10a      	bne.n	80080fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b098      	sub	sp, #96	@ 0x60
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800813c:	f7f9 feca 	bl	8001ed4 <HAL_GetTick>
 8008140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b08      	cmp	r3, #8
 800814e:	d12f      	bne.n	80081b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008158:	2200      	movs	r2, #0
 800815a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f88e 	bl	8008280 <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d022      	beq.n	80081b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800817e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008188:	647b      	str	r3, [r7, #68]	@ 0x44
 800818a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800818e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e6      	bne.n	800816a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e063      	b.n	8008278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d149      	bne.n	8008252 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c6:	2200      	movs	r2, #0
 80081c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f857 	bl	8008280 <UART_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d03c      	beq.n	8008252 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	623b      	str	r3, [r7, #32]
   return(result);
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e6      	bne.n	80081d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	60fb      	str	r3, [r7, #12]
   return(result);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800822a:	61fa      	str	r2, [r7, #28]
 800822c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	69b9      	ldr	r1, [r7, #24]
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	617b      	str	r3, [r7, #20]
   return(result);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e012      	b.n	8008278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3758      	adds	r7, #88	@ 0x58
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008290:	e04f      	b.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d04b      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800829a:	f7f9 fe1b 	bl	8001ed4 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e04e      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d037      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b80      	cmp	r3, #128	@ 0x80
 80082c6:	d034      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	d031      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d110      	bne.n	80082fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2208      	movs	r2, #8
 80082e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f839 	bl	800835c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2208      	movs	r2, #8
 80082ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e029      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800830c:	d111      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f81f 	bl	800835c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e00f      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69da      	ldr	r2, [r3, #28]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4013      	ands	r3, r2
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	429a      	cmp	r2, r3
 800834e:	d0a0      	beq.n	8008292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b095      	sub	sp, #84	@ 0x54
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008378:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008382:	643b      	str	r3, [r7, #64]	@ 0x40
 8008384:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e6      	bne.n	8008364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008424 <UART_EndRxTransfer+0xc8>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e5      	bne.n	8008396 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d118      	bne.n	8008404 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6979      	ldr	r1, [r7, #20]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e6      	bne.n	80083d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008418:	bf00      	nop
 800841a:	3754      	adds	r7, #84	@ 0x54
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	effffffe 	.word	0xeffffffe

08008428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UARTEx_DisableFifoMode+0x16>
 800843a:	2302      	movs	r3, #2
 800843c:	e027      	b.n	800848e <HAL_UARTEx_DisableFifoMode+0x66>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	@ 0x24
 800844a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800846c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e02d      	b.n	800850e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2224      	movs	r2, #36	@ 0x24
 80084be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0201 	bic.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f850 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800852a:	2302      	movs	r3, #2
 800852c:	e02d      	b.n	800858a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2224      	movs	r2, #36	@ 0x24
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f812 	bl	8008594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d108      	bne.n	80085b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085b4:	e031      	b.n	800861a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085b6:	2310      	movs	r3, #16
 80085b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ba:	2310      	movs	r3, #16
 80085bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	0e5b      	lsrs	r3, r3, #25
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	0f5b      	lsrs	r3, r3, #29
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	7b3a      	ldrb	r2, [r7, #12]
 80085e2:	4911      	ldr	r1, [pc, #68]	@ (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 80085e4:	5c8a      	ldrb	r2, [r1, r2]
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ea:	7b3a      	ldrb	r2, [r7, #12]
 80085ec:	490f      	ldr	r1, [pc, #60]	@ (800862c <UARTEx_SetNbDataToProcess+0x98>)
 80085ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	7b7a      	ldrb	r2, [r7, #13]
 8008600:	4909      	ldr	r1, [pc, #36]	@ (8008628 <UARTEx_SetNbDataToProcess+0x94>)
 8008602:	5c8a      	ldrb	r2, [r1, r2]
 8008604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008608:	7b7a      	ldrb	r2, [r7, #13]
 800860a:	4908      	ldr	r1, [pc, #32]	@ (800862c <UARTEx_SetNbDataToProcess+0x98>)
 800860c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800860e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	080090e4 	.word	0x080090e4
 800862c:	080090ec 	.word	0x080090ec

08008630 <_vsniprintf_r>:
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	4614      	mov	r4, r2
 8008634:	2c00      	cmp	r4, #0
 8008636:	b09b      	sub	sp, #108	@ 0x6c
 8008638:	4605      	mov	r5, r0
 800863a:	461a      	mov	r2, r3
 800863c:	da05      	bge.n	800864a <_vsniprintf_r+0x1a>
 800863e:	238b      	movs	r3, #139	@ 0x8b
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	f04f 30ff 	mov.w	r0, #4294967295
 8008646:	b01b      	add	sp, #108	@ 0x6c
 8008648:	bd30      	pop	{r4, r5, pc}
 800864a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800864e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	9319      	str	r3, [sp, #100]	@ 0x64
 8008658:	bf14      	ite	ne
 800865a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800865e:	4623      	moveq	r3, r4
 8008660:	9302      	str	r3, [sp, #8]
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008668:	9100      	str	r1, [sp, #0]
 800866a:	9104      	str	r1, [sp, #16]
 800866c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008670:	4669      	mov	r1, sp
 8008672:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008674:	f000 f9ae 	bl	80089d4 <_svfiprintf_r>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	bfbc      	itt	lt
 800867c:	238b      	movlt	r3, #139	@ 0x8b
 800867e:	602b      	strlt	r3, [r5, #0]
 8008680:	2c00      	cmp	r4, #0
 8008682:	d0e0      	beq.n	8008646 <_vsniprintf_r+0x16>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	e7dc      	b.n	8008646 <_vsniprintf_r+0x16>

0800868c <vsniprintf>:
 800868c:	b507      	push	{r0, r1, r2, lr}
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	460a      	mov	r2, r1
 8008694:	4601      	mov	r1, r0
 8008696:	4803      	ldr	r0, [pc, #12]	@ (80086a4 <vsniprintf+0x18>)
 8008698:	6800      	ldr	r0, [r0, #0]
 800869a:	f7ff ffc9 	bl	8008630 <_vsniprintf_r>
 800869e:	b003      	add	sp, #12
 80086a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086a4:	24000010 	.word	0x24000010

080086a8 <memset>:
 80086a8:	4402      	add	r2, r0
 80086aa:	4603      	mov	r3, r0
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d100      	bne.n	80086b2 <memset+0xa>
 80086b0:	4770      	bx	lr
 80086b2:	f803 1b01 	strb.w	r1, [r3], #1
 80086b6:	e7f9      	b.n	80086ac <memset+0x4>

080086b8 <__errno>:
 80086b8:	4b01      	ldr	r3, [pc, #4]	@ (80086c0 <__errno+0x8>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	24000010 	.word	0x24000010

080086c4 <__libc_init_array>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4d0d      	ldr	r5, [pc, #52]	@ (80086fc <__libc_init_array+0x38>)
 80086c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008700 <__libc_init_array+0x3c>)
 80086ca:	1b64      	subs	r4, r4, r5
 80086cc:	10a4      	asrs	r4, r4, #2
 80086ce:	2600      	movs	r6, #0
 80086d0:	42a6      	cmp	r6, r4
 80086d2:	d109      	bne.n	80086e8 <__libc_init_array+0x24>
 80086d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008704 <__libc_init_array+0x40>)
 80086d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008708 <__libc_init_array+0x44>)
 80086d8:	f000 fc64 	bl	8008fa4 <_init>
 80086dc:	1b64      	subs	r4, r4, r5
 80086de:	10a4      	asrs	r4, r4, #2
 80086e0:	2600      	movs	r6, #0
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	d105      	bne.n	80086f2 <__libc_init_array+0x2e>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ec:	4798      	blx	r3
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7ee      	b.n	80086d0 <__libc_init_array+0xc>
 80086f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f6:	4798      	blx	r3
 80086f8:	3601      	adds	r6, #1
 80086fa:	e7f2      	b.n	80086e2 <__libc_init_array+0x1e>
 80086fc:	08009130 	.word	0x08009130
 8008700:	08009130 	.word	0x08009130
 8008704:	08009130 	.word	0x08009130
 8008708:	08009134 	.word	0x08009134

0800870c <__retarget_lock_acquire_recursive>:
 800870c:	4770      	bx	lr

0800870e <__retarget_lock_release_recursive>:
 800870e:	4770      	bx	lr

08008710 <memcpy>:
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	f100 33ff 	add.w	r3, r0, #4294967295
 8008718:	d100      	bne.n	800871c <memcpy+0xc>
 800871a:	4770      	bx	lr
 800871c:	b510      	push	{r4, lr}
 800871e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008726:	4291      	cmp	r1, r2
 8008728:	d1f9      	bne.n	800871e <memcpy+0xe>
 800872a:	bd10      	pop	{r4, pc}

0800872c <_free_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4605      	mov	r5, r0
 8008730:	2900      	cmp	r1, #0
 8008732:	d041      	beq.n	80087b8 <_free_r+0x8c>
 8008734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008738:	1f0c      	subs	r4, r1, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfb8      	it	lt
 800873e:	18e4      	addlt	r4, r4, r3
 8008740:	f000 f8e0 	bl	8008904 <__malloc_lock>
 8008744:	4a1d      	ldr	r2, [pc, #116]	@ (80087bc <_free_r+0x90>)
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	b933      	cbnz	r3, 8008758 <_free_r+0x2c>
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	6014      	str	r4, [r2, #0]
 800874e:	4628      	mov	r0, r5
 8008750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008754:	f000 b8dc 	b.w	8008910 <__malloc_unlock>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d908      	bls.n	800876e <_free_r+0x42>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	1821      	adds	r1, r4, r0
 8008760:	428b      	cmp	r3, r1
 8008762:	bf01      	itttt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	1809      	addeq	r1, r1, r0
 800876a:	6021      	streq	r1, [r4, #0]
 800876c:	e7ed      	b.n	800874a <_free_r+0x1e>
 800876e:	461a      	mov	r2, r3
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	b10b      	cbz	r3, 8008778 <_free_r+0x4c>
 8008774:	42a3      	cmp	r3, r4
 8008776:	d9fa      	bls.n	800876e <_free_r+0x42>
 8008778:	6811      	ldr	r1, [r2, #0]
 800877a:	1850      	adds	r0, r2, r1
 800877c:	42a0      	cmp	r0, r4
 800877e:	d10b      	bne.n	8008798 <_free_r+0x6c>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	4401      	add	r1, r0
 8008784:	1850      	adds	r0, r2, r1
 8008786:	4283      	cmp	r3, r0
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	d1e0      	bne.n	800874e <_free_r+0x22>
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	6053      	str	r3, [r2, #4]
 8008792:	4408      	add	r0, r1
 8008794:	6010      	str	r0, [r2, #0]
 8008796:	e7da      	b.n	800874e <_free_r+0x22>
 8008798:	d902      	bls.n	80087a0 <_free_r+0x74>
 800879a:	230c      	movs	r3, #12
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	e7d6      	b.n	800874e <_free_r+0x22>
 80087a0:	6820      	ldr	r0, [r4, #0]
 80087a2:	1821      	adds	r1, r4, r0
 80087a4:	428b      	cmp	r3, r1
 80087a6:	bf04      	itt	eq
 80087a8:	6819      	ldreq	r1, [r3, #0]
 80087aa:	685b      	ldreq	r3, [r3, #4]
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	bf04      	itt	eq
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	6054      	str	r4, [r2, #4]
 80087b6:	e7ca      	b.n	800874e <_free_r+0x22>
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	2400140c 	.word	0x2400140c

080087c0 <sbrk_aligned>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	4e0f      	ldr	r6, [pc, #60]	@ (8008800 <sbrk_aligned+0x40>)
 80087c4:	460c      	mov	r4, r1
 80087c6:	6831      	ldr	r1, [r6, #0]
 80087c8:	4605      	mov	r5, r0
 80087ca:	b911      	cbnz	r1, 80087d2 <sbrk_aligned+0x12>
 80087cc:	f000 fba4 	bl	8008f18 <_sbrk_r>
 80087d0:	6030      	str	r0, [r6, #0]
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 fb9f 	bl	8008f18 <_sbrk_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d103      	bne.n	80087e6 <sbrk_aligned+0x26>
 80087de:	f04f 34ff 	mov.w	r4, #4294967295
 80087e2:	4620      	mov	r0, r4
 80087e4:	bd70      	pop	{r4, r5, r6, pc}
 80087e6:	1cc4      	adds	r4, r0, #3
 80087e8:	f024 0403 	bic.w	r4, r4, #3
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d0f8      	beq.n	80087e2 <sbrk_aligned+0x22>
 80087f0:	1a21      	subs	r1, r4, r0
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 fb90 	bl	8008f18 <_sbrk_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d1f2      	bne.n	80087e2 <sbrk_aligned+0x22>
 80087fc:	e7ef      	b.n	80087de <sbrk_aligned+0x1e>
 80087fe:	bf00      	nop
 8008800:	24001408 	.word	0x24001408

08008804 <_malloc_r>:
 8008804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008808:	1ccd      	adds	r5, r1, #3
 800880a:	f025 0503 	bic.w	r5, r5, #3
 800880e:	3508      	adds	r5, #8
 8008810:	2d0c      	cmp	r5, #12
 8008812:	bf38      	it	cc
 8008814:	250c      	movcc	r5, #12
 8008816:	2d00      	cmp	r5, #0
 8008818:	4606      	mov	r6, r0
 800881a:	db01      	blt.n	8008820 <_malloc_r+0x1c>
 800881c:	42a9      	cmp	r1, r5
 800881e:	d904      	bls.n	800882a <_malloc_r+0x26>
 8008820:	230c      	movs	r3, #12
 8008822:	6033      	str	r3, [r6, #0]
 8008824:	2000      	movs	r0, #0
 8008826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008900 <_malloc_r+0xfc>
 800882e:	f000 f869 	bl	8008904 <__malloc_lock>
 8008832:	f8d8 3000 	ldr.w	r3, [r8]
 8008836:	461c      	mov	r4, r3
 8008838:	bb44      	cbnz	r4, 800888c <_malloc_r+0x88>
 800883a:	4629      	mov	r1, r5
 800883c:	4630      	mov	r0, r6
 800883e:	f7ff ffbf 	bl	80087c0 <sbrk_aligned>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	4604      	mov	r4, r0
 8008846:	d158      	bne.n	80088fa <_malloc_r+0xf6>
 8008848:	f8d8 4000 	ldr.w	r4, [r8]
 800884c:	4627      	mov	r7, r4
 800884e:	2f00      	cmp	r7, #0
 8008850:	d143      	bne.n	80088da <_malloc_r+0xd6>
 8008852:	2c00      	cmp	r4, #0
 8008854:	d04b      	beq.n	80088ee <_malloc_r+0xea>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	4639      	mov	r1, r7
 800885a:	4630      	mov	r0, r6
 800885c:	eb04 0903 	add.w	r9, r4, r3
 8008860:	f000 fb5a 	bl	8008f18 <_sbrk_r>
 8008864:	4581      	cmp	r9, r0
 8008866:	d142      	bne.n	80088ee <_malloc_r+0xea>
 8008868:	6821      	ldr	r1, [r4, #0]
 800886a:	1a6d      	subs	r5, r5, r1
 800886c:	4629      	mov	r1, r5
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ffa6 	bl	80087c0 <sbrk_aligned>
 8008874:	3001      	adds	r0, #1
 8008876:	d03a      	beq.n	80088ee <_malloc_r+0xea>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	442b      	add	r3, r5
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	f8d8 3000 	ldr.w	r3, [r8]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	bb62      	cbnz	r2, 80088e0 <_malloc_r+0xdc>
 8008886:	f8c8 7000 	str.w	r7, [r8]
 800888a:	e00f      	b.n	80088ac <_malloc_r+0xa8>
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	1b52      	subs	r2, r2, r5
 8008890:	d420      	bmi.n	80088d4 <_malloc_r+0xd0>
 8008892:	2a0b      	cmp	r2, #11
 8008894:	d917      	bls.n	80088c6 <_malloc_r+0xc2>
 8008896:	1961      	adds	r1, r4, r5
 8008898:	42a3      	cmp	r3, r4
 800889a:	6025      	str	r5, [r4, #0]
 800889c:	bf18      	it	ne
 800889e:	6059      	strne	r1, [r3, #4]
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	bf08      	it	eq
 80088a4:	f8c8 1000 	streq.w	r1, [r8]
 80088a8:	5162      	str	r2, [r4, r5]
 80088aa:	604b      	str	r3, [r1, #4]
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 f82f 	bl	8008910 <__malloc_unlock>
 80088b2:	f104 000b 	add.w	r0, r4, #11
 80088b6:	1d23      	adds	r3, r4, #4
 80088b8:	f020 0007 	bic.w	r0, r0, #7
 80088bc:	1ac2      	subs	r2, r0, r3
 80088be:	bf1c      	itt	ne
 80088c0:	1a1b      	subne	r3, r3, r0
 80088c2:	50a3      	strne	r3, [r4, r2]
 80088c4:	e7af      	b.n	8008826 <_malloc_r+0x22>
 80088c6:	6862      	ldr	r2, [r4, #4]
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	bf0c      	ite	eq
 80088cc:	f8c8 2000 	streq.w	r2, [r8]
 80088d0:	605a      	strne	r2, [r3, #4]
 80088d2:	e7eb      	b.n	80088ac <_malloc_r+0xa8>
 80088d4:	4623      	mov	r3, r4
 80088d6:	6864      	ldr	r4, [r4, #4]
 80088d8:	e7ae      	b.n	8008838 <_malloc_r+0x34>
 80088da:	463c      	mov	r4, r7
 80088dc:	687f      	ldr	r7, [r7, #4]
 80088de:	e7b6      	b.n	800884e <_malloc_r+0x4a>
 80088e0:	461a      	mov	r2, r3
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d1fb      	bne.n	80088e0 <_malloc_r+0xdc>
 80088e8:	2300      	movs	r3, #0
 80088ea:	6053      	str	r3, [r2, #4]
 80088ec:	e7de      	b.n	80088ac <_malloc_r+0xa8>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6033      	str	r3, [r6, #0]
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 f80c 	bl	8008910 <__malloc_unlock>
 80088f8:	e794      	b.n	8008824 <_malloc_r+0x20>
 80088fa:	6005      	str	r5, [r0, #0]
 80088fc:	e7d6      	b.n	80088ac <_malloc_r+0xa8>
 80088fe:	bf00      	nop
 8008900:	2400140c 	.word	0x2400140c

08008904 <__malloc_lock>:
 8008904:	4801      	ldr	r0, [pc, #4]	@ (800890c <__malloc_lock+0x8>)
 8008906:	f7ff bf01 	b.w	800870c <__retarget_lock_acquire_recursive>
 800890a:	bf00      	nop
 800890c:	24001404 	.word	0x24001404

08008910 <__malloc_unlock>:
 8008910:	4801      	ldr	r0, [pc, #4]	@ (8008918 <__malloc_unlock+0x8>)
 8008912:	f7ff befc 	b.w	800870e <__retarget_lock_release_recursive>
 8008916:	bf00      	nop
 8008918:	24001404 	.word	0x24001404

0800891c <__ssputs_r>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	688e      	ldr	r6, [r1, #8]
 8008922:	461f      	mov	r7, r3
 8008924:	42be      	cmp	r6, r7
 8008926:	680b      	ldr	r3, [r1, #0]
 8008928:	4682      	mov	sl, r0
 800892a:	460c      	mov	r4, r1
 800892c:	4690      	mov	r8, r2
 800892e:	d82d      	bhi.n	800898c <__ssputs_r+0x70>
 8008930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008938:	d026      	beq.n	8008988 <__ssputs_r+0x6c>
 800893a:	6965      	ldr	r5, [r4, #20]
 800893c:	6909      	ldr	r1, [r1, #16]
 800893e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008942:	eba3 0901 	sub.w	r9, r3, r1
 8008946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800894a:	1c7b      	adds	r3, r7, #1
 800894c:	444b      	add	r3, r9
 800894e:	106d      	asrs	r5, r5, #1
 8008950:	429d      	cmp	r5, r3
 8008952:	bf38      	it	cc
 8008954:	461d      	movcc	r5, r3
 8008956:	0553      	lsls	r3, r2, #21
 8008958:	d527      	bpl.n	80089aa <__ssputs_r+0x8e>
 800895a:	4629      	mov	r1, r5
 800895c:	f7ff ff52 	bl	8008804 <_malloc_r>
 8008960:	4606      	mov	r6, r0
 8008962:	b360      	cbz	r0, 80089be <__ssputs_r+0xa2>
 8008964:	6921      	ldr	r1, [r4, #16]
 8008966:	464a      	mov	r2, r9
 8008968:	f7ff fed2 	bl	8008710 <memcpy>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	6126      	str	r6, [r4, #16]
 800897a:	6165      	str	r5, [r4, #20]
 800897c:	444e      	add	r6, r9
 800897e:	eba5 0509 	sub.w	r5, r5, r9
 8008982:	6026      	str	r6, [r4, #0]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	463e      	mov	r6, r7
 8008988:	42be      	cmp	r6, r7
 800898a:	d900      	bls.n	800898e <__ssputs_r+0x72>
 800898c:	463e      	mov	r6, r7
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	4632      	mov	r2, r6
 8008992:	4641      	mov	r1, r8
 8008994:	f000 faa6 	bl	8008ee4 <memmove>
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	1b9b      	subs	r3, r3, r6
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4433      	add	r3, r6
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	2000      	movs	r0, #0
 80089a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089aa:	462a      	mov	r2, r5
 80089ac:	f000 fac4 	bl	8008f38 <_realloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1e0      	bne.n	8008978 <__ssputs_r+0x5c>
 80089b6:	6921      	ldr	r1, [r4, #16]
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7ff feb7 	bl	800872c <_free_r>
 80089be:	230c      	movs	r3, #12
 80089c0:	f8ca 3000 	str.w	r3, [sl]
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e7e9      	b.n	80089a6 <__ssputs_r+0x8a>
	...

080089d4 <_svfiprintf_r>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	4698      	mov	r8, r3
 80089da:	898b      	ldrh	r3, [r1, #12]
 80089dc:	061b      	lsls	r3, r3, #24
 80089de:	b09d      	sub	sp, #116	@ 0x74
 80089e0:	4607      	mov	r7, r0
 80089e2:	460d      	mov	r5, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	d510      	bpl.n	8008a0a <_svfiprintf_r+0x36>
 80089e8:	690b      	ldr	r3, [r1, #16]
 80089ea:	b973      	cbnz	r3, 8008a0a <_svfiprintf_r+0x36>
 80089ec:	2140      	movs	r1, #64	@ 0x40
 80089ee:	f7ff ff09 	bl	8008804 <_malloc_r>
 80089f2:	6028      	str	r0, [r5, #0]
 80089f4:	6128      	str	r0, [r5, #16]
 80089f6:	b930      	cbnz	r0, 8008a06 <_svfiprintf_r+0x32>
 80089f8:	230c      	movs	r3, #12
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	b01d      	add	sp, #116	@ 0x74
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	2340      	movs	r3, #64	@ 0x40
 8008a08:	616b      	str	r3, [r5, #20]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0e:	2320      	movs	r3, #32
 8008a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a18:	2330      	movs	r3, #48	@ 0x30
 8008a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bb8 <_svfiprintf_r+0x1e4>
 8008a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a22:	f04f 0901 	mov.w	r9, #1
 8008a26:	4623      	mov	r3, r4
 8008a28:	469a      	mov	sl, r3
 8008a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2e:	b10a      	cbz	r2, 8008a34 <_svfiprintf_r+0x60>
 8008a30:	2a25      	cmp	r2, #37	@ 0x25
 8008a32:	d1f9      	bne.n	8008a28 <_svfiprintf_r+0x54>
 8008a34:	ebba 0b04 	subs.w	fp, sl, r4
 8008a38:	d00b      	beq.n	8008a52 <_svfiprintf_r+0x7e>
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ff6b 	bl	800891c <__ssputs_r>
 8008a46:	3001      	adds	r0, #1
 8008a48:	f000 80a7 	beq.w	8008b9a <_svfiprintf_r+0x1c6>
 8008a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4e:	445a      	add	r2, fp
 8008a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a52:	f89a 3000 	ldrb.w	r3, [sl]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 809f 	beq.w	8008b9a <_svfiprintf_r+0x1c6>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a66:	f10a 0a01 	add.w	sl, sl, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a74:	4654      	mov	r4, sl
 8008a76:	2205      	movs	r2, #5
 8008a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7c:	484e      	ldr	r0, [pc, #312]	@ (8008bb8 <_svfiprintf_r+0x1e4>)
 8008a7e:	f7f7 fc37 	bl	80002f0 <memchr>
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	b9d8      	cbnz	r0, 8008abe <_svfiprintf_r+0xea>
 8008a86:	06d0      	lsls	r0, r2, #27
 8008a88:	bf44      	itt	mi
 8008a8a:	2320      	movmi	r3, #32
 8008a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a90:	0711      	lsls	r1, r2, #28
 8008a92:	bf44      	itt	mi
 8008a94:	232b      	movmi	r3, #43	@ 0x2b
 8008a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa0:	d015      	beq.n	8008ace <_svfiprintf_r+0xfa>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	4654      	mov	r4, sl
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4621      	mov	r1, r4
 8008aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab2:	3b30      	subs	r3, #48	@ 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d94b      	bls.n	8008b50 <_svfiprintf_r+0x17c>
 8008ab8:	b1b0      	cbz	r0, 8008ae8 <_svfiprintf_r+0x114>
 8008aba:	9207      	str	r2, [sp, #28]
 8008abc:	e014      	b.n	8008ae8 <_svfiprintf_r+0x114>
 8008abe:	eba0 0308 	sub.w	r3, r0, r8
 8008ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	46a2      	mov	sl, r4
 8008acc:	e7d2      	b.n	8008a74 <_svfiprintf_r+0xa0>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	1d19      	adds	r1, r3, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9103      	str	r1, [sp, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfbb      	ittet	lt
 8008ada:	425b      	neglt	r3, r3
 8008adc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae0:	9307      	strge	r3, [sp, #28]
 8008ae2:	9307      	strlt	r3, [sp, #28]
 8008ae4:	bfb8      	it	lt
 8008ae6:	9204      	strlt	r2, [sp, #16]
 8008ae8:	7823      	ldrb	r3, [r4, #0]
 8008aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aec:	d10a      	bne.n	8008b04 <_svfiprintf_r+0x130>
 8008aee:	7863      	ldrb	r3, [r4, #1]
 8008af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af2:	d132      	bne.n	8008b5a <_svfiprintf_r+0x186>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	1d1a      	adds	r2, r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	9203      	str	r2, [sp, #12]
 8008afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b00:	3402      	adds	r4, #2
 8008b02:	9305      	str	r3, [sp, #20]
 8008b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bc8 <_svfiprintf_r+0x1f4>
 8008b08:	7821      	ldrb	r1, [r4, #0]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	f7f7 fbef 	bl	80002f0 <memchr>
 8008b12:	b138      	cbz	r0, 8008b24 <_svfiprintf_r+0x150>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	eba0 000a 	sub.w	r0, r0, sl
 8008b1a:	2240      	movs	r2, #64	@ 0x40
 8008b1c:	4082      	lsls	r2, r0
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	3401      	adds	r4, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b28:	4824      	ldr	r0, [pc, #144]	@ (8008bbc <_svfiprintf_r+0x1e8>)
 8008b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b2e:	2206      	movs	r2, #6
 8008b30:	f7f7 fbde 	bl	80002f0 <memchr>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d036      	beq.n	8008ba6 <_svfiprintf_r+0x1d2>
 8008b38:	4b21      	ldr	r3, [pc, #132]	@ (8008bc0 <_svfiprintf_r+0x1ec>)
 8008b3a:	bb1b      	cbnz	r3, 8008b84 <_svfiprintf_r+0x1b0>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	3307      	adds	r3, #7
 8008b40:	f023 0307 	bic.w	r3, r3, #7
 8008b44:	3308      	adds	r3, #8
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4a:	4433      	add	r3, r6
 8008b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4e:	e76a      	b.n	8008a26 <_svfiprintf_r+0x52>
 8008b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b54:	460c      	mov	r4, r1
 8008b56:	2001      	movs	r0, #1
 8008b58:	e7a8      	b.n	8008aac <_svfiprintf_r+0xd8>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	3401      	adds	r4, #1
 8008b5e:	9305      	str	r3, [sp, #20]
 8008b60:	4619      	mov	r1, r3
 8008b62:	f04f 0c0a 	mov.w	ip, #10
 8008b66:	4620      	mov	r0, r4
 8008b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6c:	3a30      	subs	r2, #48	@ 0x30
 8008b6e:	2a09      	cmp	r2, #9
 8008b70:	d903      	bls.n	8008b7a <_svfiprintf_r+0x1a6>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0c6      	beq.n	8008b04 <_svfiprintf_r+0x130>
 8008b76:	9105      	str	r1, [sp, #20]
 8008b78:	e7c4      	b.n	8008b04 <_svfiprintf_r+0x130>
 8008b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b7e:	4604      	mov	r4, r0
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7f0      	b.n	8008b66 <_svfiprintf_r+0x192>
 8008b84:	ab03      	add	r3, sp, #12
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <_svfiprintf_r+0x1f0>)
 8008b8c:	a904      	add	r1, sp, #16
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f3af 8000 	nop.w
 8008b94:	1c42      	adds	r2, r0, #1
 8008b96:	4606      	mov	r6, r0
 8008b98:	d1d6      	bne.n	8008b48 <_svfiprintf_r+0x174>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	065b      	lsls	r3, r3, #25
 8008b9e:	f53f af2d 	bmi.w	80089fc <_svfiprintf_r+0x28>
 8008ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ba4:	e72c      	b.n	8008a00 <_svfiprintf_r+0x2c>
 8008ba6:	ab03      	add	r3, sp, #12
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	462a      	mov	r2, r5
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <_svfiprintf_r+0x1f0>)
 8008bae:	a904      	add	r1, sp, #16
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f000 f879 	bl	8008ca8 <_printf_i>
 8008bb6:	e7ed      	b.n	8008b94 <_svfiprintf_r+0x1c0>
 8008bb8:	080090f4 	.word	0x080090f4
 8008bbc:	080090fe 	.word	0x080090fe
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	0800891d 	.word	0x0800891d
 8008bc8:	080090fa 	.word	0x080090fa

08008bcc <_printf_common>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	4698      	mov	r8, r3
 8008bd4:	688a      	ldr	r2, [r1, #8]
 8008bd6:	690b      	ldr	r3, [r1, #16]
 8008bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bfb8      	it	lt
 8008be0:	4613      	movlt	r3, r2
 8008be2:	6033      	str	r3, [r6, #0]
 8008be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008be8:	4607      	mov	r7, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	b10a      	cbz	r2, 8008bf2 <_printf_common+0x26>
 8008bee:	3301      	adds	r3, #1
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	0699      	lsls	r1, r3, #26
 8008bf6:	bf42      	ittt	mi
 8008bf8:	6833      	ldrmi	r3, [r6, #0]
 8008bfa:	3302      	addmi	r3, #2
 8008bfc:	6033      	strmi	r3, [r6, #0]
 8008bfe:	6825      	ldr	r5, [r4, #0]
 8008c00:	f015 0506 	ands.w	r5, r5, #6
 8008c04:	d106      	bne.n	8008c14 <_printf_common+0x48>
 8008c06:	f104 0a19 	add.w	sl, r4, #25
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	6832      	ldr	r2, [r6, #0]
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	dc26      	bgt.n	8008c62 <_printf_common+0x96>
 8008c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c18:	6822      	ldr	r2, [r4, #0]
 8008c1a:	3b00      	subs	r3, #0
 8008c1c:	bf18      	it	ne
 8008c1e:	2301      	movne	r3, #1
 8008c20:	0692      	lsls	r2, r2, #26
 8008c22:	d42b      	bmi.n	8008c7c <_printf_common+0xb0>
 8008c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c28:	4641      	mov	r1, r8
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c8      	blx	r9
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d01e      	beq.n	8008c70 <_printf_common+0xa4>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	f003 0306 	and.w	r3, r3, #6
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	bf02      	ittt	eq
 8008c3e:	68e5      	ldreq	r5, [r4, #12]
 8008c40:	6833      	ldreq	r3, [r6, #0]
 8008c42:	1aed      	subeq	r5, r5, r3
 8008c44:	68a3      	ldr	r3, [r4, #8]
 8008c46:	bf0c      	ite	eq
 8008c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c4c:	2500      	movne	r5, #0
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	bfc4      	itt	gt
 8008c52:	1a9b      	subgt	r3, r3, r2
 8008c54:	18ed      	addgt	r5, r5, r3
 8008c56:	2600      	movs	r6, #0
 8008c58:	341a      	adds	r4, #26
 8008c5a:	42b5      	cmp	r5, r6
 8008c5c:	d11a      	bne.n	8008c94 <_printf_common+0xc8>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e008      	b.n	8008c74 <_printf_common+0xa8>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4652      	mov	r2, sl
 8008c66:	4641      	mov	r1, r8
 8008c68:	4638      	mov	r0, r7
 8008c6a:	47c8      	blx	r9
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d103      	bne.n	8008c78 <_printf_common+0xac>
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c78:	3501      	adds	r5, #1
 8008c7a:	e7c6      	b.n	8008c0a <_printf_common+0x3e>
 8008c7c:	18e1      	adds	r1, r4, r3
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	2030      	movs	r0, #48	@ 0x30
 8008c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c86:	4422      	add	r2, r4
 8008c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c90:	3302      	adds	r3, #2
 8008c92:	e7c7      	b.n	8008c24 <_printf_common+0x58>
 8008c94:	2301      	movs	r3, #1
 8008c96:	4622      	mov	r2, r4
 8008c98:	4641      	mov	r1, r8
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47c8      	blx	r9
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d0e6      	beq.n	8008c70 <_printf_common+0xa4>
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	e7d9      	b.n	8008c5a <_printf_common+0x8e>
	...

08008ca8 <_printf_i>:
 8008ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	7e0f      	ldrb	r7, [r1, #24]
 8008cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cb0:	2f78      	cmp	r7, #120	@ 0x78
 8008cb2:	4691      	mov	r9, r2
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	469a      	mov	sl, r3
 8008cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cbe:	d807      	bhi.n	8008cd0 <_printf_i+0x28>
 8008cc0:	2f62      	cmp	r7, #98	@ 0x62
 8008cc2:	d80a      	bhi.n	8008cda <_printf_i+0x32>
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	f000 80d1 	beq.w	8008e6c <_printf_i+0x1c4>
 8008cca:	2f58      	cmp	r7, #88	@ 0x58
 8008ccc:	f000 80b8 	beq.w	8008e40 <_printf_i+0x198>
 8008cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cd8:	e03a      	b.n	8008d50 <_printf_i+0xa8>
 8008cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cde:	2b15      	cmp	r3, #21
 8008ce0:	d8f6      	bhi.n	8008cd0 <_printf_i+0x28>
 8008ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ce8 <_printf_i+0x40>)
 8008ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce8:	08008d41 	.word	0x08008d41
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008cd1 	.word	0x08008cd1
 8008cf4:	08008cd1 	.word	0x08008cd1
 8008cf8:	08008cd1 	.word	0x08008cd1
 8008cfc:	08008cd1 	.word	0x08008cd1
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008cd1 	.word	0x08008cd1
 8008d08:	08008cd1 	.word	0x08008cd1
 8008d0c:	08008cd1 	.word	0x08008cd1
 8008d10:	08008cd1 	.word	0x08008cd1
 8008d14:	08008e53 	.word	0x08008e53
 8008d18:	08008d7f 	.word	0x08008d7f
 8008d1c:	08008e0d 	.word	0x08008e0d
 8008d20:	08008cd1 	.word	0x08008cd1
 8008d24:	08008cd1 	.word	0x08008cd1
 8008d28:	08008e75 	.word	0x08008e75
 8008d2c:	08008cd1 	.word	0x08008cd1
 8008d30:	08008d7f 	.word	0x08008d7f
 8008d34:	08008cd1 	.word	0x08008cd1
 8008d38:	08008cd1 	.word	0x08008cd1
 8008d3c:	08008e15 	.word	0x08008e15
 8008d40:	6833      	ldr	r3, [r6, #0]
 8008d42:	1d1a      	adds	r2, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6032      	str	r2, [r6, #0]
 8008d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d50:	2301      	movs	r3, #1
 8008d52:	e09c      	b.n	8008e8e <_printf_i+0x1e6>
 8008d54:	6833      	ldr	r3, [r6, #0]
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	1d19      	adds	r1, r3, #4
 8008d5a:	6031      	str	r1, [r6, #0]
 8008d5c:	0606      	lsls	r6, r0, #24
 8008d5e:	d501      	bpl.n	8008d64 <_printf_i+0xbc>
 8008d60:	681d      	ldr	r5, [r3, #0]
 8008d62:	e003      	b.n	8008d6c <_printf_i+0xc4>
 8008d64:	0645      	lsls	r5, r0, #25
 8008d66:	d5fb      	bpl.n	8008d60 <_printf_i+0xb8>
 8008d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	da03      	bge.n	8008d78 <_printf_i+0xd0>
 8008d70:	232d      	movs	r3, #45	@ 0x2d
 8008d72:	426d      	negs	r5, r5
 8008d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d78:	4858      	ldr	r0, [pc, #352]	@ (8008edc <_printf_i+0x234>)
 8008d7a:	230a      	movs	r3, #10
 8008d7c:	e011      	b.n	8008da2 <_printf_i+0xfa>
 8008d7e:	6821      	ldr	r1, [r4, #0]
 8008d80:	6833      	ldr	r3, [r6, #0]
 8008d82:	0608      	lsls	r0, r1, #24
 8008d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d88:	d402      	bmi.n	8008d90 <_printf_i+0xe8>
 8008d8a:	0649      	lsls	r1, r1, #25
 8008d8c:	bf48      	it	mi
 8008d8e:	b2ad      	uxthmi	r5, r5
 8008d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d92:	4852      	ldr	r0, [pc, #328]	@ (8008edc <_printf_i+0x234>)
 8008d94:	6033      	str	r3, [r6, #0]
 8008d96:	bf14      	ite	ne
 8008d98:	230a      	movne	r3, #10
 8008d9a:	2308      	moveq	r3, #8
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008da2:	6866      	ldr	r6, [r4, #4]
 8008da4:	60a6      	str	r6, [r4, #8]
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	db05      	blt.n	8008db6 <_printf_i+0x10e>
 8008daa:	6821      	ldr	r1, [r4, #0]
 8008dac:	432e      	orrs	r6, r5
 8008dae:	f021 0104 	bic.w	r1, r1, #4
 8008db2:	6021      	str	r1, [r4, #0]
 8008db4:	d04b      	beq.n	8008e4e <_printf_i+0x1a6>
 8008db6:	4616      	mov	r6, r2
 8008db8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dbc:	fb03 5711 	mls	r7, r3, r1, r5
 8008dc0:	5dc7      	ldrb	r7, [r0, r7]
 8008dc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc6:	462f      	mov	r7, r5
 8008dc8:	42bb      	cmp	r3, r7
 8008dca:	460d      	mov	r5, r1
 8008dcc:	d9f4      	bls.n	8008db8 <_printf_i+0x110>
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d10b      	bne.n	8008dea <_printf_i+0x142>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	07df      	lsls	r7, r3, #31
 8008dd6:	d508      	bpl.n	8008dea <_printf_i+0x142>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	6861      	ldr	r1, [r4, #4]
 8008ddc:	4299      	cmp	r1, r3
 8008dde:	bfde      	ittt	le
 8008de0:	2330      	movle	r3, #48	@ 0x30
 8008de2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dea:	1b92      	subs	r2, r2, r6
 8008dec:	6122      	str	r2, [r4, #16]
 8008dee:	f8cd a000 	str.w	sl, [sp]
 8008df2:	464b      	mov	r3, r9
 8008df4:	aa03      	add	r2, sp, #12
 8008df6:	4621      	mov	r1, r4
 8008df8:	4640      	mov	r0, r8
 8008dfa:	f7ff fee7 	bl	8008bcc <_printf_common>
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d14a      	bne.n	8008e98 <_printf_i+0x1f0>
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295
 8008e06:	b004      	add	sp, #16
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	f043 0320 	orr.w	r3, r3, #32
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	4832      	ldr	r0, [pc, #200]	@ (8008ee0 <_printf_i+0x238>)
 8008e16:	2778      	movs	r7, #120	@ 0x78
 8008e18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	6831      	ldr	r1, [r6, #0]
 8008e20:	061f      	lsls	r7, r3, #24
 8008e22:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e26:	d402      	bmi.n	8008e2e <_printf_i+0x186>
 8008e28:	065f      	lsls	r7, r3, #25
 8008e2a:	bf48      	it	mi
 8008e2c:	b2ad      	uxthmi	r5, r5
 8008e2e:	6031      	str	r1, [r6, #0]
 8008e30:	07d9      	lsls	r1, r3, #31
 8008e32:	bf44      	itt	mi
 8008e34:	f043 0320 	orrmi.w	r3, r3, #32
 8008e38:	6023      	strmi	r3, [r4, #0]
 8008e3a:	b11d      	cbz	r5, 8008e44 <_printf_i+0x19c>
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	e7ad      	b.n	8008d9c <_printf_i+0xf4>
 8008e40:	4826      	ldr	r0, [pc, #152]	@ (8008edc <_printf_i+0x234>)
 8008e42:	e7e9      	b.n	8008e18 <_printf_i+0x170>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	f023 0320 	bic.w	r3, r3, #32
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	e7f6      	b.n	8008e3c <_printf_i+0x194>
 8008e4e:	4616      	mov	r6, r2
 8008e50:	e7bd      	b.n	8008dce <_printf_i+0x126>
 8008e52:	6833      	ldr	r3, [r6, #0]
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	6961      	ldr	r1, [r4, #20]
 8008e58:	1d18      	adds	r0, r3, #4
 8008e5a:	6030      	str	r0, [r6, #0]
 8008e5c:	062e      	lsls	r6, r5, #24
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	d501      	bpl.n	8008e66 <_printf_i+0x1be>
 8008e62:	6019      	str	r1, [r3, #0]
 8008e64:	e002      	b.n	8008e6c <_printf_i+0x1c4>
 8008e66:	0668      	lsls	r0, r5, #25
 8008e68:	d5fb      	bpl.n	8008e62 <_printf_i+0x1ba>
 8008e6a:	8019      	strh	r1, [r3, #0]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	4616      	mov	r6, r2
 8008e72:	e7bc      	b.n	8008dee <_printf_i+0x146>
 8008e74:	6833      	ldr	r3, [r6, #0]
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	6032      	str	r2, [r6, #0]
 8008e7a:	681e      	ldr	r6, [r3, #0]
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7f7 fa35 	bl	80002f0 <memchr>
 8008e86:	b108      	cbz	r0, 8008e8c <_printf_i+0x1e4>
 8008e88:	1b80      	subs	r0, r0, r6
 8008e8a:	6060      	str	r0, [r4, #4]
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	2300      	movs	r3, #0
 8008e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e96:	e7aa      	b.n	8008dee <_printf_i+0x146>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	47d0      	blx	sl
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d0ad      	beq.n	8008e02 <_printf_i+0x15a>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	079b      	lsls	r3, r3, #30
 8008eaa:	d413      	bmi.n	8008ed4 <_printf_i+0x22c>
 8008eac:	68e0      	ldr	r0, [r4, #12]
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	4298      	cmp	r0, r3
 8008eb2:	bfb8      	it	lt
 8008eb4:	4618      	movlt	r0, r3
 8008eb6:	e7a6      	b.n	8008e06 <_printf_i+0x15e>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4632      	mov	r2, r6
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	47d0      	blx	sl
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d09d      	beq.n	8008e02 <_printf_i+0x15a>
 8008ec6:	3501      	adds	r5, #1
 8008ec8:	68e3      	ldr	r3, [r4, #12]
 8008eca:	9903      	ldr	r1, [sp, #12]
 8008ecc:	1a5b      	subs	r3, r3, r1
 8008ece:	42ab      	cmp	r3, r5
 8008ed0:	dcf2      	bgt.n	8008eb8 <_printf_i+0x210>
 8008ed2:	e7eb      	b.n	8008eac <_printf_i+0x204>
 8008ed4:	2500      	movs	r5, #0
 8008ed6:	f104 0619 	add.w	r6, r4, #25
 8008eda:	e7f5      	b.n	8008ec8 <_printf_i+0x220>
 8008edc:	08009105 	.word	0x08009105
 8008ee0:	08009116 	.word	0x08009116

08008ee4 <memmove>:
 8008ee4:	4288      	cmp	r0, r1
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	eb01 0402 	add.w	r4, r1, r2
 8008eec:	d902      	bls.n	8008ef4 <memmove+0x10>
 8008eee:	4284      	cmp	r4, r0
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	d807      	bhi.n	8008f04 <memmove+0x20>
 8008ef4:	1e43      	subs	r3, r0, #1
 8008ef6:	42a1      	cmp	r1, r4
 8008ef8:	d008      	beq.n	8008f0c <memmove+0x28>
 8008efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f02:	e7f8      	b.n	8008ef6 <memmove+0x12>
 8008f04:	4402      	add	r2, r0
 8008f06:	4601      	mov	r1, r0
 8008f08:	428a      	cmp	r2, r1
 8008f0a:	d100      	bne.n	8008f0e <memmove+0x2a>
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f16:	e7f7      	b.n	8008f08 <memmove+0x24>

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	@ (8008f34 <_sbrk_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 fe36 	bl	8001b94 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	24001400 	.word	0x24001400

08008f38 <_realloc_r>:
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	4614      	mov	r4, r2
 8008f40:	460d      	mov	r5, r1
 8008f42:	b921      	cbnz	r1, 8008f4e <_realloc_r+0x16>
 8008f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4611      	mov	r1, r2
 8008f4a:	f7ff bc5b 	b.w	8008804 <_malloc_r>
 8008f4e:	b92a      	cbnz	r2, 8008f5c <_realloc_r+0x24>
 8008f50:	f7ff fbec 	bl	800872c <_free_r>
 8008f54:	4625      	mov	r5, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	f000 f81a 	bl	8008f94 <_malloc_usable_size_r>
 8008f60:	4284      	cmp	r4, r0
 8008f62:	4606      	mov	r6, r0
 8008f64:	d802      	bhi.n	8008f6c <_realloc_r+0x34>
 8008f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f6a:	d8f4      	bhi.n	8008f56 <_realloc_r+0x1e>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f7ff fc48 	bl	8008804 <_malloc_r>
 8008f74:	4680      	mov	r8, r0
 8008f76:	b908      	cbnz	r0, 8008f7c <_realloc_r+0x44>
 8008f78:	4645      	mov	r5, r8
 8008f7a:	e7ec      	b.n	8008f56 <_realloc_r+0x1e>
 8008f7c:	42b4      	cmp	r4, r6
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	bf28      	it	cs
 8008f84:	4632      	movcs	r2, r6
 8008f86:	f7ff fbc3 	bl	8008710 <memcpy>
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff fbcd 	bl	800872c <_free_r>
 8008f92:	e7f1      	b.n	8008f78 <_realloc_r+0x40>

08008f94 <_malloc_usable_size_r>:
 8008f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f98:	1f18      	subs	r0, r3, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfbc      	itt	lt
 8008f9e:	580b      	ldrlt	r3, [r1, r0]
 8008fa0:	18c0      	addlt	r0, r0, r3
 8008fa2:	4770      	bx	lr

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
