
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08009594  08009594  0000a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08009710  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001584  24000060  08009770  0000b060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240015e4  08009770  0000b5e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019219  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d7f  00000000  00000000  000242a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  00027028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cd3  00000000  00000000  000280d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b9c  00000000  00000000  00028da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000167ef  00000000  00000000  0006293f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169d8f  00000000  00000000  0007912e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e2ebd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b50  00000000  00000000  001e2f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001e7a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800957c 	.word	0x0800957c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800957c 	.word	0x0800957c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80006ca:	4613      	mov	r3, r2
 80006cc:	71fb      	strb	r3, [r7, #7]
	CAM.Tx_Buffer[0] = CMD;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	723b      	strb	r3, [r7, #8]
	CAM.Tx_Buffer[1] = CMD;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	727b      	strb	r3, [r7, #9]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f107 0108 	add.w	r1, r7, #8
 80006dc:	2364      	movs	r3, #100	@ 0x64
 80006de:	2202      	movs	r2, #2
 80006e0:	f007 f8af 	bl	8007842 <HAL_UART_Transmit>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <CAN_SendMessage+0x5c>)
 80006fa:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <CAN_SendMessage+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <CAN_SendMessage+0x5c>)
 800070a:	2208      	movs	r2, #8
 800070c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <CAN_SendMessage+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <CAN_SendMessage+0x60>)
 800072e:	4906      	ldr	r1, [pc, #24]	@ (8000748 <CAN_SendMessage+0x5c>)
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <CAN_SendMessage+0x64>)
 8000732:	f002 fa64 	bl	8002bfe <HAL_FDCAN_AddMessageToTxFifoQ>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <CAN_SendMessage+0x54>
        Error_Handler();
 800073c:	f001 fa00 	bl	8001b40 <Error_Handler>
    }
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	240010f4 	.word	0x240010f4
 800074c:	24000080 	.word	0x24000080
 8000750:	24001118 	.word	0x24001118

08000754 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800075e:	f000 fce7 	bl	8001130 <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000768:	4b67      	ldr	r3, [pc, #412]	@ (8000908 <Flash_Init+0x1b4>)
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 faf3 	bl	8000d58 <Read_Status_Register>
 8000772:	4603      	mov	r3, r0
 8000774:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000776:	7ebb      	ldrb	r3, [r7, #26]
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800077e:	4b62      	ldr	r3, [pc, #392]	@ (8000908 <Flash_Init+0x1b4>)
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	7eba      	ldrb	r2, [r7, #26]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fb16 	bl	8000db8 <Write_Status_Register>
 800078c:	e011      	b.n	80007b2 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800078e:	4b5e      	ldr	r3, [pc, #376]	@ (8000908 <Flash_Init+0x1b4>)
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fae0 	bl	8000d58 <Read_Status_Register>
 8000798:	4603      	mov	r3, r0
 800079a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800079c:	7efb      	ldrb	r3, [r7, #27]
 800079e:	f023 0308 	bic.w	r3, r3, #8
 80007a2:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 80007a4:	4b58      	ldr	r3, [pc, #352]	@ (8000908 <Flash_Init+0x1b4>)
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	7efa      	ldrb	r2, [r7, #27]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fb03 	bl	8000db8 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 80007b2:	4b55      	ldr	r3, [pc, #340]	@ (8000908 <Flash_Init+0x1b4>)
 80007b4:	78db      	ldrb	r3, [r3, #3]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 face 	bl	8000d58 <Read_Status_Register>
 80007bc:	4603      	mov	r3, r0
 80007be:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 80007c0:	7e7b      	ldrb	r3, [r7, #25]
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 80007c8:	7e7b      	ldrb	r3, [r7, #25]
 80007ca:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007ce:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000908 <Flash_Init+0x1b4>)
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	7e7a      	ldrb	r2, [r7, #25]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 faed 	bl	8000db8 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007ec:	2300      	movs	r3, #0
 80007ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007f4:	e031      	b.n	800085a <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007f6:	2300      	movs	r3, #0
 80007f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007fa:	f107 0108 	add.w	r1, r7, #8
 80007fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000800:	2210      	movs	r2, #16
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f950 	bl	8000aa8 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	e013      	b.n	8000836 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 800080e:	f107 0208 	add.w	r2, r7, #8
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2bff      	cmp	r3, #255	@ 0xff
 800081a:	d109      	bne.n	8000830 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 800081c:	2201      	movs	r2, #1
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	b21a      	sxth	r2, r3
 8000826:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	3301      	adds	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	dde8      	ble.n	800080e <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800083c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800083e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000842:	4293      	cmp	r3, r2
 8000844:	d003      	beq.n	800084e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000848:	3340      	adds	r3, #64	@ 0x40
 800084a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800084c:	e005      	b.n	800085a <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800084e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000850:	2b00      	cmp	r3, #0
 8000852:	d008      	beq.n	8000866 <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 8000854:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000856:	3b40      	subs	r3, #64	@ 0x40
 8000858:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800085a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000860:	4293      	cmp	r3, r2
 8000862:	d1c8      	bne.n	80007f6 <Flash_Init+0xa2>
 8000864:	e000      	b.n	8000868 <Flash_Init+0x114>
				break;
 8000866:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 8000868:	2300      	movs	r3, #0
 800086a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 800086c:	e02a      	b.n	80008c4 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000878:	2210      	movs	r2, #16
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f914 	bl	8000aa8 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	e013      	b.n	80008ae <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000886:	f107 0208 	add.w	r2, r7, #8
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2bff      	cmp	r3, #255	@ 0xff
 8000892:	d109      	bne.n	80008a8 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	b21a      	sxth	r2, r3
 800089e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	dde8      	ble.n	8000886 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 80008b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d002      	beq.n	80008c4 <Flash_Init+0x170>
			Temp_Page++;
 80008be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008c0:	3301      	adds	r3, #1
 80008c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80008c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d1cf      	bne.n	800086e <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <Flash_Init+0x1b8>)
 80008d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d4:	461a      	mov	r2, r3
 80008d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008d8:	8153      	strh	r3, [r2, #10]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <Flash_Init+0x1b8>)
 80008dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e0:	895b      	ldrh	r3, [r3, #10]
 80008e2:	099b      	lsrs	r3, r3, #6
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <Flash_Init+0x1b8>)
 80008e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ec:	811a      	strh	r2, [r3, #8]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <Flash_Init+0x1b8>)
 80008f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f4:	895b      	ldrh	r3, [r3, #10]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <Flash_Init+0x1bc>)
 80008fa:	f000 fbf3 	bl	80010e4 <USART3_Printf>
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2400009c 	.word	0x2400009c
 800090c:	240000a4 	.word	0x240000a4
 8000910:	08009594 	.word	0x08009594

08000914 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	463b      	mov	r3, r7
 800091c:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fa18 	bl	8000d58 <Read_Status_Register>
 8000928:	4603      	mov	r3, r0
 800092a:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f000 fbaf 	bl	8001090 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fa0f 	bl	8000d58 <Read_Status_Register>
 800093a:	4603      	mov	r3, r0
 800093c:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800093e:	2064      	movs	r0, #100	@ 0x64
 8000940:	f000 fba6 	bl	8001090 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fa06 	bl	8000d58 <Read_Status_Register>
 800094c:	4603      	mov	r3, r0
 800094e:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 8000950:	2064      	movs	r0, #100	@ 0x64
 8000952:	f000 fb9d 	bl	8001090 <delay_ns>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <Write_Data+0x94>)
 800096e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000972:	895b      	ldrh	r3, [r3, #10]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d108      	bne.n	800098a <Write_Data+0x2a>
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <Write_Data+0x94>)
 800097a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <Write_Data+0x2a>
		Block_Erase(0);
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fb4f 	bl	8001028 <Block_Erase>
	}
	uint16_t count=0;
 800098a:	2300      	movs	r3, #0
 800098c:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800098e:	e028      	b.n	80009e2 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <Write_Data+0x94>)
 8000992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <Write_Data+0x94>)
 80009a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <Write_Data+0x94>)
 80009aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80009ae:	6053      	str	r3, [r2, #4]
		data++;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <Write_Data+0x94>)
 80009b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <Write_Data+0x94>)
 80009c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c8:	801a      	strh	r2, [r3, #0]
		count++;
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	3301      	adds	r3, #1
 80009ce:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <Write_Data+0x94>)
 80009d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009dc:	d301      	bcc.n	80009e2 <Write_Data+0x82>
			Write_to_page();
 80009de:	f000 f80b 	bl	80009f8 <Write_to_page>
	while(count<lenght){
 80009e2:	89fa      	ldrh	r2, [r7, #14]
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3d2      	bcc.n	8000990 <Write_Data+0x30>
		}
	}
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240000a4 	.word	0x240000a4

080009f8 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	if(Flash.Buffer_flip==0){
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <Write_to_page+0xa8>)
 80009fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d116      	bne.n	8000a36 <Write_to_page+0x3e>
		Flash.Buffer_flip=1;
 8000a08:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0e:	2201      	movs	r2, #1
 8000a10:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_1;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <Write_to_page+0xac>)
 8000a1c:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a24:	2200      	movs	r2, #0
 8000a26:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 8000a28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a2c:	491c      	ldr	r1, [pc, #112]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fa24 	bl	8000e7c <Write_Data_Buffer>
 8000a34:	e015      	b.n	8000a62 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_flip=0;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a4a:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a52:	2200      	movs	r2, #0
 8000a54:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a5a:	4912      	ldr	r1, [pc, #72]	@ (8000aa4 <Write_to_page+0xac>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 fa0d 	bl	8000e7c <Write_Data_Buffer>
	}
	Write_Data_Flash(Flash.Page_Index);
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a68:	895b      	ldrh	r3, [r3, #10]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fa42 	bl	8000ef4 <Write_Data_Flash>
	Flash.Page_Index++;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a76:	895b      	ldrh	r3, [r3, #10]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a82:	815a      	strh	r2, [r3, #10]
	Flash.Buffer_Index=0;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a8e:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <Write_to_page+0xa8>)
 8000a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a94:	895b      	ldrh	r3, [r3, #10]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f81c 	bl	8000ad4 <Automatic_Block_Managment>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240000a4 	.word	0x240000a4
 8000aa4:	240008a4 	.word	0x240008a4

08000aa8 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa4e 	bl	8000f5c <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f000 fa7b 	bl	8000fc0 <Read_Data_Buffer>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	099b      	lsrs	r3, r3, #6
 8000ae2:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <Automatic_Block_Managment+0x48>)
 8000ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aea:	891b      	ldrh	r3, [r3, #8]
 8000aec:	89fa      	ldrh	r2, [r7, #14]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d00a      	beq.n	8000b08 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fa97 	bl	8001028 <Block_Erase>
		Flash.Block_Mem=Block;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <Automatic_Block_Managment+0x48>)
 8000afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b00:	461a      	mov	r2, r3
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	8113      	strh	r3, [r2, #8]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000b06:	e005      	b.n	8000b14 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <Automatic_Block_Managment+0x48>)
 8000b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0e:	461a      	mov	r2, r3
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	8113      	strh	r3, [r2, #8]
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	240000a4 	.word	0x240000a4

08000b20 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000b26:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <Chip_Erase+0xb8>)
 8000b28:	f000 fadc 	bl	80010e4 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	2201      	movs	r2, #1
 8000b32:	492a      	ldr	r1, [pc, #168]	@ (8000bdc <Chip_Erase+0xbc>)
 8000b34:	482a      	ldr	r0, [pc, #168]	@ (8000be0 <Chip_Erase+0xc0>)
 8000b36:	f006 ff12 	bl	800795e <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <Chip_Erase+0xbc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b59      	cmp	r3, #89	@ 0x59
 8000b40:	d143      	bne.n	8000bca <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000b42:	4828      	ldr	r0, [pc, #160]	@ (8000be4 <Chip_Erase+0xc4>)
 8000b44:	f000 face 	bl	80010e4 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	e009      	b.n	8000b62 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	019b      	lsls	r3, r3, #6
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fa66 	bl	8001028 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b68:	ddf1      	ble.n	8000b4e <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
		Flash.Page_Index=0;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	815a      	strh	r2, [r3, #10]
		Flash.Block_Mem=0;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b84:	2200      	movs	r2, #0
 8000b86:	811a      	strh	r2, [r3, #8]
		Flash.Buffer_flip=0;
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b8e:	2200      	movs	r2, #0
 8000b90:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <Chip_Erase+0xc8>)
 8000b9c:	6053      	str	r3, [r2, #4]

		Flash_Data* pointer = &Flash;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <Chip_Erase+0xc8>)
 8000ba0:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba8:	21ff      	movs	r1, #255	@ 0xff
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f868 	bl	8008c80 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bba:	21ff      	movs	r1, #255	@ 0xff
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 f85f 	bl	8008c80 <memset>
		USART3_Printf("Ferdig\r\n");
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <Chip_Erase+0xcc>)
 8000bc4:	f000 fa8e 	bl	80010e4 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000bc8:	e002      	b.n	8000bd0 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000bca:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <Chip_Erase+0xd0>)
 8000bcc:	f000 fa8a 	bl	80010e4 <USART3_Printf>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	080095ac 	.word	0x080095ac
 8000bdc:	2400007d 	.word	0x2400007d
 8000be0:	240013fc 	.word	0x240013fc
 8000be4:	080095e0 	.word	0x080095e0
 8000be8:	240000a4 	.word	0x240000a4
 8000bec:	080095f4 	.word	0x080095f4
 8000bf0:	08009600 	.word	0x08009600

08000bf4 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	b089      	sub	sp, #36	@ 0x24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
 8000c00:	466b      	mov	r3, sp
 8000c02:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 f9a9 	bl	8000f5c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000c0a:	88f9      	ldrh	r1, [r7, #6]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	b28b      	uxth	r3, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	4698      	mov	r8, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	f04f 0200 	mov.w	r2, #0
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c2e:	b28b      	uxth	r3, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	461c      	mov	r4, r3
 8000c34:	4615      	mov	r5, r2
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	f04f 0300 	mov.w	r3, #0
 8000c3e:	00eb      	lsls	r3, r5, #3
 8000c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c44:	00e2      	lsls	r2, r4, #3
 8000c46:	460b      	mov	r3, r1
 8000c48:	3307      	adds	r3, #7
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c52:	466b      	mov	r3, sp
 8000c54:	3300      	adds	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c58:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <Read_Data_Cont+0x114>)
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <Read_Data_Cont+0x114>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c64:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <Read_Data_Cont+0x114>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <Read_Data_Cont+0x114>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	4825      	ldr	r0, [pc, #148]	@ (8000d0c <Read_Data_Cont+0x118>)
 8000c76:	f003 f8c1 	bl	8003dfc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c7a:	2364      	movs	r3, #100	@ 0x64
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4922      	ldr	r1, [pc, #136]	@ (8000d08 <Read_Data_Cont+0x114>)
 8000c80:	4823      	ldr	r0, [pc, #140]	@ (8000d10 <Read_Data_Cont+0x11c>)
 8000c82:	f006 f845 	bl	8006d10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	68f9      	ldr	r1, [r7, #12]
 8000c8e:	4820      	ldr	r0, [pc, #128]	@ (8000d10 <Read_Data_Cont+0x11c>)
 8000c90:	f006 fa2c 	bl	80070ec <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	330b      	adds	r3, #11
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000cac:	e018      	b.n	8000ce0 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000cae:	8bf9      	ldrh	r1, [r7, #30]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4817      	ldr	r0, [pc, #92]	@ (8000d14 <Read_Data_Cont+0x120>)
 8000cb6:	f000 fa15 	bl	80010e4 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <Read_Data_Cont+0x11c>)
 8000cc4:	f006 fa12 	bl	80070ec <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	330b      	adds	r3, #11
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ce6:	d103      	bne.n	8000cf0 <Read_Data_Cont+0xfc>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	7bdb      	ldrb	r3, [r3, #15]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d0de      	beq.n	8000cae <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <Read_Data_Cont+0x118>)
 8000cf6:	f003 f881 	bl	8003dfc <HAL_GPIO_WritePin>
 8000cfa:	46b5      	mov	sp, r6
}
 8000cfc:	bf00      	nop
 8000cfe:	3724      	adds	r7, #36	@ 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d06:	bf00      	nop
 8000d08:	24000090 	.word	0x24000090
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	240011b8 	.word	0x240011b8
 8000d14:	08009618 	.word	0x08009618

08000d18 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <Write_Enable+0x34>)
 8000d1e:	2206      	movs	r2, #6
 8000d20:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000d22:	2200      	movs	r2, #0
 8000d24:	2110      	movs	r1, #16
 8000d26:	480a      	ldr	r0, [pc, #40]	@ (8000d50 <Write_Enable+0x38>)
 8000d28:	f003 f868 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4906      	ldr	r1, [pc, #24]	@ (8000d4c <Write_Enable+0x34>)
 8000d32:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <Write_Enable+0x3c>)
 8000d34:	f005 ffec 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <Write_Enable+0x38>)
 8000d3e:	f003 f85d 	bl	8003dfc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d42:	2064      	movs	r0, #100	@ 0x64
 8000d44:	f000 f9a4 	bl	8001090 <delay_ns>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24000090 	.word	0x24000090
 8000d50:	58020000 	.word	0x58020000
 8000d54:	240011b8 	.word	0x240011b8

08000d58 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <Read_Status_Register+0x50>)
 8000d64:	220f      	movs	r2, #15
 8000d66:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d68:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <Read_Status_Register+0x50>)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	480e      	ldr	r0, [pc, #56]	@ (8000dac <Read_Status_Register+0x54>)
 8000d74:	f003 f842 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	490a      	ldr	r1, [pc, #40]	@ (8000da8 <Read_Status_Register+0x50>)
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <Read_Status_Register+0x58>)
 8000d80:	f005 ffc6 	bl	8006d10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	490a      	ldr	r1, [pc, #40]	@ (8000db4 <Read_Status_Register+0x5c>)
 8000d8a:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <Read_Status_Register+0x58>)
 8000d8c:	f006 f9ae 	bl	80070ec <HAL_SPI_Receive>
	csHIGH();
 8000d90:	2201      	movs	r2, #1
 8000d92:	2110      	movs	r1, #16
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <Read_Status_Register+0x54>)
 8000d96:	f003 f831 	bl	8003dfc <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d9a:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <Read_Status_Register+0x50>)
 8000d9c:	795b      	ldrb	r3, [r3, #5]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	24000090 	.word	0x24000090
 8000dac:	58020000 	.word	0x58020000
 8000db0:	240011b8 	.word	0x240011b8
 8000db4:	24000095 	.word	0x24000095

08000db8 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <Write_Status_Register+0x50>)
 8000dca:	221f      	movs	r2, #31
 8000dcc:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	@ (8000e08 <Write_Status_Register+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <Write_Status_Register+0x50>)
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2110      	movs	r1, #16
 8000dde:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <Write_Status_Register+0x54>)
 8000de0:	f003 f80c 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000de4:	2364      	movs	r3, #100	@ 0x64
 8000de6:	2203      	movs	r2, #3
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <Write_Status_Register+0x50>)
 8000dea:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <Write_Status_Register+0x58>)
 8000dec:	f005 ff90 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <Write_Status_Register+0x54>)
 8000df6:	f003 f801 	bl	8003dfc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dfa:	2064      	movs	r0, #100	@ 0x64
 8000dfc:	f000 f948 	bl	8001090 <delay_ns>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24000090 	.word	0x24000090
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	240011b8 	.word	0x240011b8

08000e14 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <Read_ID+0x5c>)
 8000e1c:	229f      	movs	r2, #159	@ 0x9f
 8000e1e:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <Read_ID+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <Read_ID+0x60>)
 8000e2c:	f002 ffe6 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000e30:	2364      	movs	r3, #100	@ 0x64
 8000e32:	2202      	movs	r2, #2
 8000e34:	490e      	ldr	r1, [pc, #56]	@ (8000e70 <Read_ID+0x5c>)
 8000e36:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <Read_ID+0x64>)
 8000e38:	f005 ff6a 	bl	8006d10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	2364      	movs	r3, #100	@ 0x64
 8000e40:	2204      	movs	r2, #4
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <Read_ID+0x64>)
 8000e44:	f006 f952 	bl	80070ec <HAL_SPI_Receive>
	csHIGH();
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <Read_ID+0x60>)
 8000e4e:	f002 ffd5 	bl	8003dfc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e52:	2064      	movs	r0, #100	@ 0x64
 8000e54:	f000 f91c 	bl	8001090 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	041a      	lsls	r2, r3, #16
 8000e5c:	797b      	ldrb	r3, [r7, #5]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	79b9      	ldrb	r1, [r7, #6]
 8000e62:	430b      	orrs	r3, r1
 8000e64:	4313      	orrs	r3, r2
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000090 	.word	0x24000090
 8000e74:	58020000 	.word	0x58020000
 8000e78:	240011b8 	.word	0x240011b8

08000e7c <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	80fb      	strh	r3, [r7, #6]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e8c:	f7ff ff44 	bl	8000d18 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <Write_Data_Buffer+0x6c>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <Write_Data_Buffer+0x6c>)
 8000ea0:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <Write_Data_Buffer+0x6c>)
 8000ea8:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	480f      	ldr	r0, [pc, #60]	@ (8000eec <Write_Data_Buffer+0x70>)
 8000eb0:	f002 ffa4 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000eb4:	2364      	movs	r3, #100	@ 0x64
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	490b      	ldr	r1, [pc, #44]	@ (8000ee8 <Write_Data_Buffer+0x6c>)
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <Write_Data_Buffer+0x74>)
 8000ebc:	f005 ff28 	bl	8006d10 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000ec0:	88ba      	ldrh	r2, [r7, #4]
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <Write_Data_Buffer+0x74>)
 8000eca:	f005 ff21 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <Write_Data_Buffer+0x70>)
 8000ed4:	f002 ff92 	bl	8003dfc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ed8:	2064      	movs	r0, #100	@ 0x64
 8000eda:	f000 f8d9 	bl	8001090 <delay_ns>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	24000090 	.word	0x24000090
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	240011b8 	.word	0x240011b8

08000ef4 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000efe:	f7ff ff0b 	bl	8000d18 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <Write_Data_Flash+0x5c>)
 8000f04:	2210      	movs	r2, #16
 8000f06:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <Write_Data_Flash+0x5c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <Write_Data_Flash+0x5c>)
 8000f18:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <Write_Data_Flash+0x5c>)
 8000f20:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <Write_Data_Flash+0x60>)
 8000f28:	f002 ff68 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <Write_Data_Flash+0x5c>)
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <Write_Data_Flash+0x64>)
 8000f34:	f005 feec 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <Write_Data_Flash+0x60>)
 8000f3e:	f002 ff5d 	bl	8003dfc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f42:	f000 f8f5 	bl	8001130 <W25N_WaitForReady>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000090 	.word	0x24000090
 8000f54:	58020000 	.word	0x58020000
 8000f58:	240011b8 	.word	0x240011b8

08000f5c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Select_Page_Read+0x58>)
 8000f68:	2213      	movs	r2, #19
 8000f6a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <Select_Page_Read+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <Select_Page_Read+0x58>)
 8000f7c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Select_Page_Read+0x58>)
 8000f84:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f86:	2200      	movs	r2, #0
 8000f88:	2110      	movs	r1, #16
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <Select_Page_Read+0x5c>)
 8000f8c:	f002 ff36 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f90:	2364      	movs	r3, #100	@ 0x64
 8000f92:	2204      	movs	r2, #4
 8000f94:	4907      	ldr	r1, [pc, #28]	@ (8000fb4 <Select_Page_Read+0x58>)
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <Select_Page_Read+0x60>)
 8000f98:	f005 feba 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <Select_Page_Read+0x5c>)
 8000fa2:	f002 ff2b 	bl	8003dfc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000fa6:	f000 f8c3 	bl	8001130 <W25N_WaitForReady>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000090 	.word	0x24000090
 8000fb8:	58020000 	.word	0x58020000
 8000fbc:	240011b8 	.word	0x240011b8

08000fc0 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <Read_Data_Buffer+0x5c>)
 8000fce:	2203      	movs	r2, #3
 8000fd0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <Read_Data_Buffer+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	@ (800101c <Read_Data_Buffer+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <Read_Data_Buffer+0x5c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <Read_Data_Buffer+0x60>)
 8000fea:	f002 ff07 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fee:	2364      	movs	r3, #100	@ 0x64
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	490a      	ldr	r1, [pc, #40]	@ (800101c <Read_Data_Buffer+0x5c>)
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <Read_Data_Buffer+0x64>)
 8000ff6:	f005 fe8b 	bl	8006d10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4808      	ldr	r0, [pc, #32]	@ (8001024 <Read_Data_Buffer+0x64>)
 8001004:	f006 f872 	bl	80070ec <HAL_SPI_Receive>
	csHIGH();
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <Read_Data_Buffer+0x60>)
 800100e:	f002 fef5 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24000090 	.word	0x24000090
 8001020:	58020000 	.word	0x58020000
 8001024:	240011b8 	.word	0x240011b8

08001028 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8001032:	f7ff fe71 	bl	8000d18 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <Block_Erase+0x5c>)
 8001038:	22d8      	movs	r2, #216	@ 0xd8
 800103a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <Block_Erase+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <Block_Erase+0x5c>)
 800104c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <Block_Erase+0x5c>)
 8001054:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001056:	2200      	movs	r2, #0
 8001058:	2110      	movs	r1, #16
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <Block_Erase+0x60>)
 800105c:	f002 fece 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	2204      	movs	r2, #4
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <Block_Erase+0x5c>)
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <Block_Erase+0x64>)
 8001068:	f005 fe52 	bl	8006d10 <HAL_SPI_Transmit>
	csHIGH();
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <Block_Erase+0x60>)
 8001072:	f002 fec3 	bl	8003dfc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001076:	f000 f85b 	bl	8001130 <W25N_WaitForReady>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	24000090 	.word	0x24000090
 8001088:	58020000 	.word	0x58020000
 800108c:	240011b8 	.word	0x240011b8

08001090 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <delay_ns+0x48>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0a5b      	lsrs	r3, r3, #9
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <delay_ns+0x4c>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	09db      	lsrs	r3, r3, #7
 80010a6:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <delay_ns+0x50>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 80010b8:	bf00      	nop
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <delay_ns+0x50>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f8      	bhi.n	80010ba <delay_ns+0x2a>
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	24000000 	.word	0x24000000
 80010dc:	00044b83 	.word	0x00044b83
 80010e0:	e0001000 	.word	0xe0001000

080010e4 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010e4:	b40f      	push	{r0, r1, r2, r3}
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b0a2      	sub	sp, #136	@ 0x88
 80010ea:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010f0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010f2:	f107 0008 	add.w	r0, r7, #8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	f007 fdb1 	bl	8008c64 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f8ea 	bl	80002e0 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f107 0108 	add.w	r1, r7, #8
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <USART3_Printf+0x48>)
 800111a:	f006 fb92 	bl	8007842 <HAL_UART_Transmit>
}
 800111e:	bf00      	nop
 8001120:	3788      	adds	r7, #136	@ 0x88
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr
 800112c:	240013fc 	.word	0x240013fc

08001130 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f7ff ffab 	bl	8001090 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800113a:	e002      	b.n	8001142 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f7ff ffa7 	bl	8001090 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <W25N_WaitForReady+0x2c>)
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe06 	bl	8000d58 <Read_Status_Register>
 800114c:	4603      	mov	r3, r0
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f2      	bne.n	800113c <W25N_WaitForReady+0xc>
    }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2400009c 	.word	0x2400009c

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001164:	f000 fcc0 	bl	8001ae8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f001 f91a 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f8e4 	bl	8001338 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 8001170:	f000 fc46 	bl	8001a00 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 fb6c 	bl	8001850 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001178:	f000 f95a 	bl	8001430 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800117c:	f000 f9e2 	bl	8001544 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001180:	f000 fb1a 	bl	80017b8 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001184:	f000 fa34 	bl	80015f0 <MX_UART5_Init>
  MX_UART8_Init();
 8001188:	f000 fa7e 	bl	8001688 <MX_UART8_Init>
  MX_USART2_UART_Init();
 800118c:	f000 fac8 	bl	8001720 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fadf 	bl	8000754 <Flash_Init>
  Flash.ID=Read_ID();
 8001196:	f7ff fe3d 	bl	8000e14 <Read_ID>
 800119a:	4603      	mov	r3, r0
 800119c:	4a5e      	ldr	r2, [pc, #376]	@ (8001318 <main+0x1b8>)
 800119e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011a2:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  Read_Register(SR);
 80011a4:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <main+0x1bc>)
 80011a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011aa:	f7ff fbb3 	bl	8000914 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 80011ae:	2364      	movs	r3, #100	@ 0x64
 80011b0:	2201      	movs	r2, #1
 80011b2:	495b      	ldr	r1, [pc, #364]	@ (8001320 <main+0x1c0>)
 80011b4:	485b      	ldr	r0, [pc, #364]	@ (8001324 <main+0x1c4>)
 80011b6:	f006 fbd2 	bl	800795e <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 80011ba:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <main+0x1c0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b31      	cmp	r3, #49	@ 0x31
 80011c0:	d105      	bne.n	80011ce <main+0x6e>
		  Read_Data_Cont(16);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff fd16 	bl	8000bf4 <Read_Data_Cont>
		  command = 0;
 80011c8:	4b55      	ldr	r3, [pc, #340]	@ (8001320 <main+0x1c0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 80011ce:	4b54      	ldr	r3, [pc, #336]	@ (8001320 <main+0x1c0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b32      	cmp	r3, #50	@ 0x32
 80011d4:	d109      	bne.n	80011ea <main+0x8a>
		  Start_Flight_Recording=1;
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <main+0x1c8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 80011dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011e0:	f7ff fa84 	bl	80006ec <CAN_SendMessage>
		  command=0;
 80011e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001320 <main+0x1c0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 80011ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001320 <main+0x1c0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b33      	cmp	r3, #51	@ 0x33
 80011f0:	d109      	bne.n	8001206 <main+0xa6>
		  Start_Flight_Recording=0;
 80011f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001328 <main+0x1c8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 80011f8:	f240 1001 	movw	r0, #257	@ 0x101
 80011fc:	f7ff fa76 	bl	80006ec <CAN_SendMessage>
		  command=0;
 8001200:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <main+0x1c0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase
	  if(command==0x34){
 8001206:	4b46      	ldr	r3, [pc, #280]	@ (8001320 <main+0x1c0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b34      	cmp	r3, #52	@ 0x34
 800120c:	d104      	bne.n	8001218 <main+0xb8>
		  Chip_Erase();
 800120e:	f7ff fc87 	bl	8000b20 <Chip_Erase>
		  command=0;
 8001212:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <main+0x1c0>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to IDLE
	  if(command==0x35){
 8001218:	4b41      	ldr	r3, [pc, #260]	@ (8001320 <main+0x1c0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b35      	cmp	r3, #53	@ 0x35
 800121e:	d114      	bne.n	800124a <main+0xea>
		  command_cam(CAM1, IDLE);
 8001220:	4b42      	ldr	r3, [pc, #264]	@ (800132c <main+0x1cc>)
 8001222:	2241      	movs	r2, #65	@ 0x41
 8001224:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001228:	f7ff fa48 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 800122c:	4b40      	ldr	r3, [pc, #256]	@ (8001330 <main+0x1d0>)
 800122e:	2241      	movs	r2, #65	@ 0x41
 8001230:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001234:	f7ff fa42 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 8001238:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <main+0x1d4>)
 800123a:	2241      	movs	r2, #65	@ 0x41
 800123c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001240:	f7ff fa3c 	bl	80006bc <command_cam>
		  command=0;
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <main+0x1c0>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x36){
 800124a:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <main+0x1c0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b36      	cmp	r3, #54	@ 0x36
 8001250:	d114      	bne.n	800127c <main+0x11c>
		  command_cam(CAM1, REC);
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <main+0x1cc>)
 8001254:	2242      	movs	r2, #66	@ 0x42
 8001256:	e893 0003 	ldmia.w	r3, {r0, r1}
 800125a:	f7ff fa2f 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <main+0x1d0>)
 8001260:	2242      	movs	r2, #66	@ 0x42
 8001262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001266:	f7ff fa29 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 800126a:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <main+0x1d4>)
 800126c:	2242      	movs	r2, #66	@ 0x42
 800126e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001272:	f7ff fa23 	bl	80006bc <command_cam>
		  command=0;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <main+0x1c0>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x37){
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <main+0x1c0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b37      	cmp	r3, #55	@ 0x37
 8001282:	d114      	bne.n	80012ae <main+0x14e>
		  command_cam(CAM1, FORMAT);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <main+0x1cc>)
 8001286:	2243      	movs	r2, #67	@ 0x43
 8001288:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128c:	f7ff fa16 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <main+0x1d0>)
 8001292:	2243      	movs	r2, #67	@ 0x43
 8001294:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001298:	f7ff fa10 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 800129c:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <main+0x1d4>)
 800129e:	2243      	movs	r2, #67	@ 0x43
 80012a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012a4:	f7ff fa0a 	bl	80006bc <command_cam>
		  command=0;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <main+0x1c0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x38){
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <main+0x1c0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b38      	cmp	r3, #56	@ 0x38
 80012b4:	d114      	bne.n	80012e0 <main+0x180>
		  command_cam(CAM1, REBOOT);
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <main+0x1cc>)
 80012b8:	2244      	movs	r2, #68	@ 0x44
 80012ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012be:	f7ff f9fd 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <main+0x1d0>)
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ca:	f7ff f9f7 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <main+0x1d4>)
 80012d0:	2244      	movs	r2, #68	@ 0x44
 80012d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d6:	f7ff f9f1 	bl	80006bc <command_cam>
		  command=0;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <main+0x1c0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x39){
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <main+0x1c0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b39      	cmp	r3, #57	@ 0x39
 80012e6:	f47f af5d 	bne.w	80011a4 <main+0x44>
		  command_cam(CAM1, DEB);
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <main+0x1cc>)
 80012ec:	2245      	movs	r2, #69	@ 0x45
 80012ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012f2:	f7ff f9e3 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <main+0x1d0>)
 80012f8:	2245      	movs	r2, #69	@ 0x45
 80012fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012fe:	f7ff f9dd 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <main+0x1d4>)
 8001304:	2245      	movs	r2, #69	@ 0x45
 8001306:	e893 0003 	ldmia.w	r3, {r0, r1}
 800130a:	f7ff f9d7 	bl	80006bc <command_cam>
		  command=0;
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <main+0x1c0>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 8001314:	e746      	b.n	80011a4 <main+0x44>
 8001316:	bf00      	nop
 8001318:	240000a4 	.word	0x240000a4
 800131c:	2400009c 	.word	0x2400009c
 8001320:	2400007d 	.word	0x2400007d
 8001324:	240013fc 	.word	0x240013fc
 8001328:	2400007c 	.word	0x2400007c
 800132c:	240010b4 	.word	0x240010b4
 8001330:	240010bc 	.word	0x240010bc
 8001334:	240010c4 	.word	0x240010c4

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b09c      	sub	sp, #112	@ 0x70
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001342:	224c      	movs	r2, #76	@ 0x4c
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f007 fc9a 	bl	8008c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2220      	movs	r2, #32
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f007 fc94 	bl	8008c80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001358:	2002      	movs	r0, #2
 800135a:	f002 fd69 	bl	8003e30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <SystemClock_Config+0xf0>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <SystemClock_Config+0xf0>)
 8001368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <SystemClock_Config+0xf0>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <SystemClock_Config+0xf4>)
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <SystemClock_Config+0xf4>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <SystemClock_Config+0xf4>)
 8001386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001390:	bf00      	nop
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <SystemClock_Config+0xf0>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800139a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800139e:	d1f8      	bne.n	8001392 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013b8:	233c      	movs	r3, #60	@ 0x3c
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80013c0:	230a      	movs	r3, #10
 80013c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013c8:	230c      	movs	r3, #12
 80013ca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fd63 	bl	8003ea4 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013e4:	f000 fbac 	bl	8001b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	233f      	movs	r3, #63	@ 0x3f
 80013ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013f4:	2308      	movs	r3, #8
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013f8:	2340      	movs	r3, #64	@ 0x40
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001406:	2340      	movs	r3, #64	@ 0x40
 8001408:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2104      	movs	r1, #4
 800140e:	4618      	mov	r0, r3
 8001410:	f003 f9a2 	bl	8004758 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800141a:	f000 fb91 	bl	8001b40 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3770      	adds	r7, #112	@ 0x70
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	58024800 	.word	0x58024800
 800142c:	58000400 	.word	0x58000400

08001430 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 8001436:	4b40      	ldr	r3, [pc, #256]	@ (8001538 <MX_FDCAN1_Init+0x108>)
 8001438:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800143c:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <MX_FDCAN1_Init+0x108>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001446:	4b3c      	ldr	r3, [pc, #240]	@ (8001538 <MX_FDCAN1_Init+0x108>)
 8001448:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001454:	4b39      	ldr	r3, [pc, #228]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001456:	4a3a      	ldr	r2, [pc, #232]	@ (8001540 <MX_FDCAN1_Init+0x110>)
 8001458:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800145a:	4b38      	ldr	r3, [pc, #224]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001460:	4b36      	ldr	r3, [pc, #216]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001466:	4b35      	ldr	r3, [pc, #212]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001468:	2200      	movs	r2, #0
 800146a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800146e:	2200      	movs	r2, #0
 8001470:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001472:	4b32      	ldr	r3, [pc, #200]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001474:	2200      	movs	r2, #0
 8001476:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001478:	4b30      	ldr	r3, [pc, #192]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800147a:	2201      	movs	r2, #1
 800147c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800147e:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001480:	2202      	movs	r2, #2
 8001482:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001484:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001486:	2205      	movs	r2, #5
 8001488:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800148a:	4b2c      	ldr	r3, [pc, #176]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800148c:	2202      	movs	r2, #2
 800148e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001492:	2201      	movs	r2, #1
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001496:	4b29      	ldr	r3, [pc, #164]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001498:	2203      	movs	r2, #3
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800149e:	2204      	movs	r2, #4
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014bc:	2240      	movs	r2, #64	@ 0x40
 80014be:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80014d8:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014da:	2204      	movs	r2, #4
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014f8:	2204      	movs	r2, #4
 80014fa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014fc:	480f      	ldr	r0, [pc, #60]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 80014fe:	f001 f975 	bl	80027ec <HAL_FDCAN_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001508:	f000 fb1a 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 800150e:	f001 fb4b 	bl	8002ba8 <HAL_FDCAN_Start>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001518:	f000 fb12 	bl	8001b40 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800151c:	2200      	movs	r2, #0
 800151e:	2101      	movs	r1, #1
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <MX_FDCAN1_Init+0x10c>)
 8001522:	f001 fd33 	bl	8002f8c <HAL_FDCAN_ActivateNotification>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 800152c:	f000 fb08 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58024400 	.word	0x58024400
 800153c:	24001118 	.word	0x24001118
 8001540:	4000a000 	.word	0x4000a000

08001544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 800154a:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <MX_SPI1_Init+0xa8>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001550:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 800155e:	2207      	movs	r2, #7
 8001560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001570:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800157c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_SPI1_Init+0xa4>)
 80015d6:	f005 fa77 	bl	8006ac8 <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80015e0:	f000 faae 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	240011b8 	.word	0x240011b8
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_UART5_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <MX_UART5_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_UART5_Init+0x90>)
 80015fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001600:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_UART5_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_UART5_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_UART5_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_UART5_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_UART5_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_UART5_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_UART5_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_UART5_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_UART5_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <MX_UART5_Init+0x90>)
 800163a:	f006 f8b2 	bl	80077a2 <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 fa7c 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_UART5_Init+0x90>)
 800164c:	f007 fa11 	bl	8008a72 <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 fa73 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <MX_UART5_Init+0x90>)
 800165e:	f007 fa46 	bl	8008aee <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 fa6a 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <MX_UART5_Init+0x90>)
 800166e:	f007 f9c7 	bl	8008a00 <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 fa62 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	24001240 	.word	0x24001240
 8001684:	40005000 	.word	0x40005000

08001688 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <MX_UART8_Init+0x90>)
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <MX_UART8_Init+0x94>)
 8001690:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_UART8_Init+0x90>)
 8001694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001698:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_UART8_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_UART8_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_UART8_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_UART8_Init+0x90>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_UART8_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_UART8_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_UART8_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_UART8_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_UART8_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <MX_UART8_Init+0x90>)
 80016d2:	f006 f866 	bl	80077a2 <HAL_UART_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80016dc:	f000 fa30 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_UART8_Init+0x90>)
 80016e4:	f007 f9c5 	bl	8008a72 <HAL_UARTEx_SetTxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80016ee:	f000 fa27 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <MX_UART8_Init+0x90>)
 80016f6:	f007 f9fa 	bl	8008aee <HAL_UARTEx_SetRxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001700:	f000 fa1e 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_UART8_Init+0x90>)
 8001706:	f007 f97b 	bl	8008a00 <HAL_UARTEx_DisableFifoMode>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001710:	f000 fa16 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	240012d4 	.word	0x240012d4
 800171c:	40007c00 	.word	0x40007c00

08001720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001726:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <MX_USART2_UART_Init+0x94>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800172c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001768:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800176a:	f006 f81a 	bl	80077a2 <HAL_UART_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001774:	f000 f9e4 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800177c:	f007 f979 	bl	8008a72 <HAL_UARTEx_SetTxFifoThreshold>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001786:	f000 f9db 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800178e:	f007 f9ae 	bl	8008aee <HAL_UARTEx_SetRxFifoThreshold>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001798:	f000 f9d2 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800179e:	f007 f92f 	bl	8008a00 <HAL_UARTEx_DisableFifoMode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f000 f9ca 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	24001368 	.word	0x24001368
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017be:	4a23      	ldr	r2, [pc, #140]	@ (800184c <MX_USART3_UART_Init+0x94>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001802:	f005 ffce 	bl	80077a2 <HAL_UART_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 f998 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001814:	f007 f92d 	bl	8008a72 <HAL_UARTEx_SetTxFifoThreshold>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800181e:	f000 f98f 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001826:	f007 f962 	bl	8008aee <HAL_UARTEx_SetRxFifoThreshold>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001830:	f000 f986 	bl	8001b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001836:	f007 f8e3 	bl	8008a00 <HAL_UARTEx_DisableFifoMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001840:	f000 f97e 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	240013fc 	.word	0x240013fc
 800184c:	40004800 	.word	0x40004800

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001866:	4b5f      	ldr	r3, [pc, #380]	@ (80019e4 <MX_GPIO_Init+0x194>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	4a5d      	ldr	r2, [pc, #372]	@ (80019e4 <MX_GPIO_Init+0x194>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001876:	4b5b      	ldr	r3, [pc, #364]	@ (80019e4 <MX_GPIO_Init+0x194>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <MX_GPIO_Init+0x194>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4a56      	ldr	r2, [pc, #344]	@ (80019e4 <MX_GPIO_Init+0x194>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <MX_GPIO_Init+0x194>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	4a4e      	ldr	r2, [pc, #312]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b2:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b48      	ldr	r3, [pc, #288]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	4a47      	ldr	r2, [pc, #284]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d0:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e4:	4a3f      	ldr	r2, [pc, #252]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018fc:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <MX_GPIO_Init+0x194>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001902:	4a38      	ldr	r2, [pc, #224]	@ (80019e4 <MX_GPIO_Init+0x194>)
 8001904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190c:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <MX_GPIO_Init+0x194>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2110      	movs	r1, #16
 800191e:	4832      	ldr	r0, [pc, #200]	@ (80019e8 <MX_GPIO_Init+0x198>)
 8001920:	f002 fa6c 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192a:	4830      	ldr	r0, [pc, #192]	@ (80019ec <MX_GPIO_Init+0x19c>)
 800192c:	f002 fa66 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2118      	movs	r1, #24
 8001934:	482e      	ldr	r0, [pc, #184]	@ (80019f0 <MX_GPIO_Init+0x1a0>)
 8001936:	f002 fa61 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 800193a:	2308      	movs	r3, #8
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	4829      	ldr	r0, [pc, #164]	@ (80019f4 <MX_GPIO_Init+0x1a4>)
 800194e:	f002 f8a5 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4824      	ldr	r0, [pc, #144]	@ (80019f8 <MX_GPIO_Init+0x1a8>)
 8001966:	f002 f899 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 800196a:	2310      	movs	r3, #16
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4819      	ldr	r0, [pc, #100]	@ (80019e8 <MX_GPIO_Init+0x198>)
 8001982:	f002 f88b 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 8001986:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4818      	ldr	r0, [pc, #96]	@ (80019fc <MX_GPIO_Init+0x1ac>)
 800199c:	f002 f87e 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 80019a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_GPIO_Init+0x19c>)
 80019ba:	f002 f86f 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 80019be:	2318      	movs	r3, #24
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <MX_GPIO_Init+0x1a0>)
 80019d6:	f002 f861 	bl	8003a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	@ 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58020000 	.word	0x58020000
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021800 	.word	0x58021800
 80019f4:	58021000 	.word	0x58021000
 80019f8:	58020800 	.word	0x58020800
 80019fc:	58020400 	.word	0x58020400

08001a00 <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac0 <init+0xc0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <init+0xc0>)
 8001a0e:	22a0      	movs	r2, #160	@ 0xa0
 8001a10:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <init+0xc0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001a18:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <init+0xc0>)
 8001a1a:	22b0      	movs	r2, #176	@ 0xb0
 8001a1c:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <init+0xc0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001a24:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <init+0xc0>)
 8001a26:	22c0      	movs	r2, #192	@ 0xc0
 8001a28:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <init+0xc4>)
 8001a2c:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a34:	21ff      	movs	r1, #255	@ 0xff
 8001a36:	4618      	mov	r0, r3
 8001a38:	f007 f922 	bl	8008c80 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a46:	21ff      	movs	r1, #255	@ 0xff
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 f919 	bl	8008c80 <memset>
	Flash.Buffer_Index = 0;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <init+0xc4>)
 8001a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
	Flash.Buffer_flip = 0;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <init+0xc4>)
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5e:	2200      	movs	r2, #0
 8001a60:	709a      	strb	r2, [r3, #2]
	Flash.Block_Mem = 0;
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <init+0xc4>)
 8001a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a68:	2200      	movs	r2, #0
 8001a6a:	811a      	strh	r2, [r3, #8]
	Flash.Page_Index = 0;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <init+0xc4>)
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a72:	2200      	movs	r2, #0
 8001a74:	815a      	strh	r2, [r3, #10]
	Flash.ID = 0;
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <init+0xc4>)
 8001a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60d3      	str	r3, [r2, #12]
	Flash.Buffer_p = Flash.Buffer_0;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <init+0xc4>)
 8001a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <init+0xc4>)
 8001a8c:	6053      	str	r3, [r2, #4]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <init+0xc8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <init+0xc8>)
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <init+0xcc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <init+0xcc>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <init+0xd0>)
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <init+0xd4>)
 8001aaa:	605a      	str	r2, [r3, #4]
	CAM2.huart = &huart8;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <init+0xd8>)
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <init+0xdc>)
 8001ab0:	605a      	str	r2, [r3, #4]
	CAM3.huart = &huart5;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <init+0xe0>)
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <init+0xe4>)
 8001ab6:	605a      	str	r2, [r3, #4]
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2400009c 	.word	0x2400009c
 8001ac4:	240000a4 	.word	0x240000a4
 8001ac8:	e000edf0 	.word	0xe000edf0
 8001acc:	e0001000 	.word	0xe0001000
 8001ad0:	240010b4 	.word	0x240010b4
 8001ad4:	24001368 	.word	0x24001368
 8001ad8:	240010bc 	.word	0x240010bc
 8001adc:	240012d4 	.word	0x240012d4
 8001ae0:	240010c4 	.word	0x240010c4
 8001ae4:	24001240 	.word	0x24001240

08001ae8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001afa:	f000 fdff 	bl	80026fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b0e:	2387      	movs	r3, #135	@ 0x87
 8001b10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b16:	2300      	movs	r3, #0
 8001b18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fe1d 	bl	800276c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b32:	2004      	movs	r0, #4
 8001b34:	f000 fdfa 	bl	800272c <HAL_MPU_Enable>

}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <Error_Handler+0x10>)
 8001b46:	f001 f82f 	bl	8002ba8 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	24001118 	.word	0x24001118

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_MspInit+0x30>)
 8001b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b60:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_MspInit+0x30>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_MspInit+0x30>)
 8001b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	58024400 	.word	0x58024400

08001b88 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	22c0      	movs	r2, #192	@ 0xc0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f007 f869 	bl	8008c80 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a33      	ldr	r2, [pc, #204]	@ (8001c80 <HAL_FDCAN_MspInit+0xf8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d15f      	bne.n	8001c78 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001bc8:	230a      	movs	r3, #10
 8001bca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001bd0:	2314      	movs	r3, #20
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001be4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 f93d 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001bfc:	f7ff ffa0 	bl	8001b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c00:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c06:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_FDCAN_MspInit+0xfc>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c56:	2309      	movs	r3, #9
 8001c58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	@ (8001c88 <HAL_FDCAN_MspInit+0x100>)
 8001c64:	f001 ff1a 	bl	8003a9c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2013      	movs	r0, #19
 8001c6e:	f000 fd10 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c72:	2013      	movs	r0, #19
 8001c74:	f000 fd27 	bl	80026c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	37e8      	adds	r7, #232	@ 0xe8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	4000a000 	.word	0x4000a000
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58020400 	.word	0x58020400

08001c8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	22c0      	movs	r2, #192	@ 0xc0
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 ffe7 	bl	8008c80 <memset>
  if(hspi->Instance==SPI1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <HAL_SPI_MspInit+0xc4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d144      	bne.n	8001d46 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f8cd 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001cdc:	f7ff ff30 	bl	8001b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d04:	4a13      	ldr	r2, [pc, #76]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_SPI_MspInit+0xc8>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d1c:	23e0      	movs	r3, #224	@ 0xe0
 8001d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d34:	2305      	movs	r3, #5
 8001d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <HAL_SPI_MspInit+0xcc>)
 8001d42:	f001 feab 	bl	8003a9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d46:	bf00      	nop
 8001d48:	37e8      	adds	r7, #232	@ 0xe8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40013000 	.word	0x40013000
 8001d54:	58024400 	.word	0x58024400
 8001d58:	58020000 	.word	0x58020000

08001d5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0c0      	sub	sp, #256	@ 0x100
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d78:	22c0      	movs	r2, #192	@ 0xc0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f006 ff7f 	bl	8008c80 <memset>
  if(huart->Instance==UART5)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a9a      	ldr	r2, [pc, #616]	@ (8001ff0 <HAL_UART_MspInit+0x294>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d147      	bne.n	8001e1c <HAL_UART_MspInit+0xc0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d8c:	f04f 0202 	mov.w	r2, #2
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 f864 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001dae:	f7ff fec7 	bl	8001b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001db2:	4b90      	ldr	r3, [pc, #576]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db8:	4a8e      	ldr	r2, [pc, #568]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dc2:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd6:	4a87      	ldr	r2, [pc, #540]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de0:	4b84      	ldr	r3, [pc, #528]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001df2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001e08:	230e      	movs	r3, #14
 8001e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e12:	4619      	mov	r1, r3
 8001e14:	4878      	ldr	r0, [pc, #480]	@ (8001ff8 <HAL_UART_MspInit+0x29c>)
 8001e16:	f001 fe41 	bl	8003a9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e1a:	e0e3      	b.n	8001fe4 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==UART8)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a76      	ldr	r2, [pc, #472]	@ (8001ffc <HAL_UART_MspInit+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d146      	bne.n	8001eb4 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001e26:	f04f 0202 	mov.w	r2, #2
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 f817 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001e48:	f7ff fe7a 	bl	8001b40 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001e4c:	4b69      	ldr	r3, [pc, #420]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e52:	4a68      	ldr	r2, [pc, #416]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e5c:	4b65      	ldr	r3, [pc, #404]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6a:	4b62      	ldr	r3, [pc, #392]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a60      	ldr	r2, [pc, #384]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e72:	f043 0310 	orr.w	r3, r3, #16
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4854      	ldr	r0, [pc, #336]	@ (8002000 <HAL_UART_MspInit+0x2a4>)
 8001eae:	f001 fdf5 	bl	8003a9c <HAL_GPIO_Init>
}
 8001eb2:	e097      	b.n	8001fe4 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_UART_MspInit+0x2a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d146      	bne.n	8001f4c <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ebe:	f04f 0202 	mov.w	r2, #2
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 ffcb 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001ee0:	f7ff fe2e 	bl	8001b40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee4:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eea:	4a42      	ldr	r2, [pc, #264]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f08:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f12:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f20:	230c      	movs	r3, #12
 8001f22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f42:	4619      	mov	r1, r3
 8001f44:	4830      	ldr	r0, [pc, #192]	@ (8002008 <HAL_UART_MspInit+0x2ac>)
 8001f46:	f001 fda9 	bl	8003a9c <HAL_GPIO_Init>
}
 8001f4a:	e04b      	b.n	8001fe4 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <HAL_UART_MspInit+0x2b0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d146      	bne.n	8001fe4 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f56:	f04f 0202 	mov.w	r2, #2
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 ff7f 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0x220>
      Error_Handler();
 8001f78:	f7ff fde2 	bl	8001b40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f82:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_UART_MspInit+0x298>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480c      	ldr	r0, [pc, #48]	@ (8002010 <HAL_UART_MspInit+0x2b4>)
 8001fe0:	f001 fd5c 	bl	8003a9c <HAL_GPIO_Init>
}
 8001fe4:	bf00      	nop
 8001fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40005000 	.word	0x40005000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020400 	.word	0x58020400
 8001ffc:	40007c00 	.word	0x40007c00
 8002000:	58021000 	.word	0x58021000
 8002004:	40004400 	.word	0x40004400
 8002008:	58020000 	.word	0x58020000
 800200c:	40004800 	.word	0x40004800
 8002010:	58020c00 	.word	0x58020c00

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <NMI_Handler+0x4>

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <MemManage_Handler+0x4>

0800202c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <UsageFault_Handler+0x4>

0800203c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 fa0a 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <SysTick_Handler+0x28>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <SysTick_Handler+0x2c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <SysTick_Handler+0x2c>)
 8002080:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	e002      	b.n	800208a <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8002084:	4b03      	ldr	r3, [pc, #12]	@ (8002094 <SysTick_Handler+0x2c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2400007c 	.word	0x2400007c
 8002094:	24001490 	.word	0x24001490

08002098 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <FDCAN1_IT0_IRQHandler+0x10>)
 800209e:	f000 ffef 	bl	8003080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	24001118 	.word	0x24001118

080020ac <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 80020b6:	e03f      	b.n	8002138 <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 80020b8:	23f0      	movs	r3, #240	@ 0xf0
 80020ba:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	3301      	adds	r3, #1
 80020c6:	b292      	uxth	r2, r2
 80020c8:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020cc:	7a1b      	ldrb	r3, [r3, #8]
 80020ce:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020d2:	7a5b      	ldrb	r3, [r3, #9]
 80020d4:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020d8:	7a9b      	ldrb	r3, [r3, #10]
 80020da:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020de:	7adb      	ldrb	r3, [r3, #11]
 80020e0:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020e4:	7b1b      	ldrb	r3, [r3, #12]
 80020e6:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020ea:	7b5b      	ldrb	r3, [r3, #13]
 80020ec:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020f0:	7b9b      	ldrb	r3, [r3, #14]
 80020f2:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0xac>)
 80020f6:	7bdb      	ldrb	r3, [r3, #15]
 80020f8:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b2db      	uxtb	r3, r3
 800210a:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	b2db      	uxtb	r3, r3
 8002114:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e1b      	lsrs	r3, r3, #24
 800211c:	b2db      	uxtb	r3, r3
 800211e:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8002120:	230f      	movs	r3, #15
 8002122:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	2110      	movs	r1, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fc14 	bl	8000960 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800213a:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800213c:	2140      	movs	r1, #64	@ 0x40
 800213e:	480a      	ldr	r0, [pc, #40]	@ (8002168 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8002140:	f000 fdb8 	bl	8002cb4 <HAL_FDCAN_GetRxMessage>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0b6      	beq.n	80020b8 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 800214a:	bf00      	nop
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	240010cc 	.word	0x240010cc
 8002158:	24000080 	.word	0x24000080
 800215c:	24001490 	.word	0x24001490
 8002160:	2400007c 	.word	0x2400007c
 8002164:	24000088 	.word	0x24000088
 8002168:	24001118 	.word	0x24001118

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f006 fd78 	bl	8008c90 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	24080000 	.word	0x24080000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	24001494 	.word	0x24001494
 80021d4:	240015e8 	.word	0x240015e8

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021dc:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <SystemInit+0x114>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	4a42      	ldr	r2, [pc, #264]	@ (80022ec <SystemInit+0x114>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021ec:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <SystemInit+0x118>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d807      	bhi.n	8002208 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <SystemInit+0x118>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 030f 	bic.w	r3, r3, #15
 8002200:	4a3b      	ldr	r2, [pc, #236]	@ (80022f0 <SystemInit+0x118>)
 8002202:	f043 0307 	orr.w	r3, r3, #7
 8002206:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002208:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <SystemInit+0x11c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a39      	ldr	r2, [pc, #228]	@ (80022f4 <SystemInit+0x11c>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002214:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <SystemInit+0x11c>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800221a:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <SystemInit+0x11c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4935      	ldr	r1, [pc, #212]	@ (80022f4 <SystemInit+0x11c>)
 8002220:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <SystemInit+0x120>)
 8002222:	4013      	ands	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <SystemInit+0x118>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <SystemInit+0x118>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 030f 	bic.w	r3, r3, #15
 800223a:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <SystemInit+0x118>)
 800223c:	f043 0307 	orr.w	r3, r3, #7
 8002240:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <SystemInit+0x11c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <SystemInit+0x11c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800224e:	4b29      	ldr	r3, [pc, #164]	@ (80022f4 <SystemInit+0x11c>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <SystemInit+0x11c>)
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <SystemInit+0x124>)
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <SystemInit+0x11c>)
 800225c:	4a28      	ldr	r2, [pc, #160]	@ (8002300 <SystemInit+0x128>)
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <SystemInit+0x11c>)
 8002262:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <SystemInit+0x12c>)
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <SystemInit+0x11c>)
 8002268:	2200      	movs	r2, #0
 800226a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <SystemInit+0x11c>)
 800226e:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <SystemInit+0x12c>)
 8002270:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <SystemInit+0x11c>)
 8002274:	2200      	movs	r2, #0
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <SystemInit+0x11c>)
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <SystemInit+0x12c>)
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800227e:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <SystemInit+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <SystemInit+0x11c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <SystemInit+0x11c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <SystemInit+0x11c>)
 8002292:	2200      	movs	r2, #0
 8002294:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <SystemInit+0x130>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <SystemInit+0x134>)
 800229c:	4013      	ands	r3, r2
 800229e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022a2:	d202      	bcs.n	80022aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <SystemInit+0x138>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <SystemInit+0x11c>)
 80022ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <SystemInit+0x11c>)
 80022ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022be:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <SystemInit+0x11c>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <SystemInit+0x13c>)
 80022ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <SystemInit+0x11c>)
 80022d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022d6:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <SystemInit+0x11c>)
 80022d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	52002000 	.word	0x52002000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80022fc:	02020200 	.word	0x02020200
 8002300:	01ff0000 	.word	0x01ff0000
 8002304:	01010280 	.word	0x01010280
 8002308:	5c001000 	.word	0x5c001000
 800230c:	ffff0000 	.word	0xffff0000
 8002310:	51008108 	.word	0x51008108
 8002314:	52004000 	.word	0x52004000

08002318 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <ExitRun0Mode+0x2c>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <ExitRun0Mode+0x2c>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002328:	bf00      	nop
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <ExitRun0Mode+0x2c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f9      	beq.n	800232a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002384 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800234c:	f7ff ffe4 	bl	8002318 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002350:	f7ff ff42 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002356:	490d      	ldr	r1, [pc, #52]	@ (800238c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800236c:	4c0a      	ldr	r4, [pc, #40]	@ (8002398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800237a:	f006 fc8f 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7fe feef 	bl	8001160 <main>
  bx  lr
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002388:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800238c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002390:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002394:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002398:	240015e4 	.word	0x240015e4

0800239c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC3_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f000 f968 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023ac:	f002 fb8a 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_Init+0x68>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	4913      	ldr	r1, [pc, #76]	@ (800240c <HAL_Init+0x6c>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_Init+0x68>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <HAL_Init+0x6c>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <HAL_Init+0x70>)
 80023e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_Init+0x74>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f814 	bl	8002418 <HAL_InitTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e002      	b.n	8002400 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023fa:	f7ff fbab 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58024400 	.word	0x58024400
 800240c:	08009684 	.word	0x08009684
 8002410:	24000004 	.word	0x24000004
 8002414:	24000000 	.word	0x24000000

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_InitTick+0x60>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e021      	b.n	8002470 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <HAL_InitTick+0x64>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <HAL_InitTick+0x60>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	fbb3 f3f1 	udiv	r3, r3, r1
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f94d 	bl	80026e2 <HAL_SYSTICK_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00e      	b.n	8002470 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d80a      	bhi.n	800246e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f000 f917 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002464:	4a06      	ldr	r2, [pc, #24]	@ (8002480 <HAL_InitTick+0x68>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2400000c 	.word	0x2400000c
 800247c:	24000000 	.word	0x24000000
 8002480:	24000008 	.word	0x24000008

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2400000c 	.word	0x2400000c
 80024a8:	24001498 	.word	0x24001498

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	24001498 	.word	0x24001498

080024c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_GetREVID+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0c1b      	lsrs	r3, r3, #16
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	5c001000 	.word	0x5c001000

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <__NVIC_SetPriorityGrouping+0x40>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	4313      	orrs	r3, r2
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	@ (800251c <__NVIC_SetPriorityGrouping+0x40>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	05fa0000 	.word	0x05fa0000

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	@ (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff29 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff40 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff90 	bl	80025d0 <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5f 	bl	800257c <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff33 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa4 	bl	8002638 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002700:	f3bf 8f5f 	dmb	sy
}
 8002704:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_MPU_Disable+0x28>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <HAL_MPU_Disable+0x28>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002710:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002712:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_MPU_Disable+0x2c>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	e000ed90 	.word	0xe000ed90

0800272c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002734:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_MPU_Enable+0x38>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_MPU_Enable+0x3c>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <HAL_MPU_Enable+0x3c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800274a:	f3bf 8f4f 	dsb	sy
}
 800274e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002750:	f3bf 8f6f 	isb	sy
}
 8002754:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed90 	.word	0xe000ed90
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	785a      	ldrb	r2, [r3, #1]
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_MPU_ConfigRegion+0x7c>)
 800277a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800277c:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_MPU_ConfigRegion+0x7c>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	4a19      	ldr	r2, [pc, #100]	@ (80027e8 <HAL_MPU_ConfigRegion+0x7c>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_MPU_ConfigRegion+0x7c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
 8002794:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7adb      	ldrb	r3, [r3, #11]
 800279a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800279c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7a9b      	ldrb	r3, [r3, #10]
 80027a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7b5b      	ldrb	r3, [r3, #13]
 80027aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7b9b      	ldrb	r3, [r3, #14]
 80027b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7bdb      	ldrb	r3, [r3, #15]
 80027ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7a5b      	ldrb	r3, [r3, #9]
 80027c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7a1b      	ldrb	r3, [r3, #8]
 80027ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d8:	6113      	str	r3, [r2, #16]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed90 	.word	0xe000ed90

080027ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b098      	sub	sp, #96	@ 0x60
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80027f4:	4a84      	ldr	r2, [pc, #528]	@ (8002a08 <HAL_FDCAN_Init+0x21c>)
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	4611      	mov	r1, r2
 80027fc:	224c      	movs	r2, #76	@ 0x4c
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 fa72 	bl	8008ce8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1c6      	b.n	8002b9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7e      	ldr	r2, [pc, #504]	@ (8002a0c <HAL_FDCAN_Init+0x220>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d106      	bne.n	8002826 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f9a4 	bl	8001b88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0210 	bic.w	r2, r2, #16
 800284e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7ff fe2c 	bl	80024ac <HAL_GetTick>
 8002854:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002856:	e014      	b.n	8002882 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002858:	f7ff fe28 	bl	80024ac <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b0a      	cmp	r3, #10
 8002864:	d90d      	bls.n	8002882 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e18c      	b.n	8002b9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d0e3      	beq.n	8002858 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a0:	f7ff fe04 	bl	80024ac <HAL_GetTick>
 80028a4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028a6:	e014      	b.n	80028d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80028a8:	f7ff fe00 	bl	80024ac <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d90d      	bls.n	80028d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e164      	b.n	8002b9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0e3      	beq.n	80028a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0202 	orr.w	r2, r2, #2
 80028ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7c1b      	ldrb	r3, [r3, #16]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002906:	619a      	str	r2, [r3, #24]
 8002908:	e007      	b.n	800291a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002918:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7c5b      	ldrb	r3, [r3, #17]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	e007      	b.n	8002944 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002942:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7c9b      	ldrb	r3, [r3, #18]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800295a:	619a      	str	r2, [r3, #24]
 800295c:	e007      	b.n	800296e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800296c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002992:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0210 	bic.w	r2, r2, #16
 80029a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d108      	bne.n	80029be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0204 	orr.w	r2, r2, #4
 80029ba:	619a      	str	r2, [r3, #24]
 80029bc:	e030      	b.n	8002a20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02c      	beq.n	8002a20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d020      	beq.n	8002a10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0210 	orr.w	r2, r2, #16
 80029ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d114      	bne.n	8002a20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	619a      	str	r2, [r3, #24]
 8002a06:	e00b      	b.n	8002a20 <HAL_FDCAN_Init+0x234>
 8002a08:	08009638 	.word	0x08009638
 8002a0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a54:	d115      	bne.n	8002a82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	3b01      	subs	r3, #1
 8002a62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	4413      	add	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d011      	beq.n	8002ad2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002ab6:	f023 0107 	bic.w	r1, r3, #7
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3360      	adds	r3, #96	@ 0x60
 8002ac2:	443b      	add	r3, r7
 8002ac4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ae2:	f023 0107 	bic.w	r1, r3, #7
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3360      	adds	r3, #96	@ 0x60
 8002aee:	443b      	add	r3, r7
 8002af0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002b0e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3360      	adds	r3, #96	@ 0x60
 8002b1a:	443b      	add	r3, r7
 8002b1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002b20:	011a      	lsls	r2, r3, #4
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002b3c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3360      	adds	r3, #96	@ 0x60
 8002b48:	443b      	add	r3, r7
 8002b4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ba4 <HAL_FDCAN_Init+0x3b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d107      	bne.n	8002b74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f022 0203 	bic.w	r2, r2, #3
 8002b72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fd81 	bl	8003694 <FDCAN_CalcultateRamBlockAddresses>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002b98:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3760      	adds	r7, #96	@ 0x60
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	4000a000 	.word	0x4000a000

08002ba8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d111      	bne.n	8002be0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e008      	b.n	8002bf2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d141      	bne.n	8002c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c1e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e038      	b.n	8002cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e026      	b.n	8002cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fe93 	bl	80039a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e008      	b.n	8002cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ca0:	f043 0208 	orr.w	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b08b      	sub	sp, #44	@ 0x2c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002ccc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002cce:	7efb      	ldrb	r3, [r7, #27]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 8149 	bne.w	8002f68 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b40      	cmp	r3, #64	@ 0x40
 8002cda:	d14c      	bne.n	8002d76 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002ce4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e13c      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e12a      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d34:	d10a      	bne.n	8002d4c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d46:	d101      	bne.n	8002d4c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d74:	e068      	b.n	8002e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b41      	cmp	r3, #65	@ 0x41
 8002d7a:	d14c      	bne.n	8002e16 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0ec      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0da      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d10a      	bne.n	8002dec <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de6:	d101      	bne.n	8002dec <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	69f9      	ldr	r1, [r7, #28]
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e14:	e018      	b.n	8002e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d309      	bcc.n	8002e34 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e26:	f043 0220 	orr.w	r2, r3, #32
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0a2      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0c9b      	lsrs	r3, r3, #18
 8002e62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e005      	b.n	8002e78 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	3304      	adds	r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e1b      	lsrs	r3, r3, #24
 8002ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0fda      	lsrs	r2, r3, #31
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	e00a      	b.n	8002f04 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	440b      	add	r3, r1
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	3301      	adds	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a1f      	ldr	r2, [pc, #124]	@ (8002f88 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d3ec      	bcc.n	8002eee <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d105      	bne.n	8002f26 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8002f24:	e01e      	b.n	8002f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b41      	cmp	r3, #65	@ 0x41
 8002f2a:	d105      	bne.n	8002f38 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002f36:	e015      	b.n	8002f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	d808      	bhi.n	8002f50 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002f4e:	e009      	b.n	8002f64 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 021f 	and.w	r2, r3, #31
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e008      	b.n	8002f7a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	372c      	adds	r7, #44	@ 0x2c
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	08009694 	.word	0x08009694

08002f8c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002f9e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d002      	beq.n	8002fac <HAL_FDCAN_ActivateNotification+0x20>
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d155      	bne.n	8003058 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fca:	e014      	b.n	8002ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d108      	bne.n	8002fee <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0202 	orr.w	r2, r2, #2
 8002fea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fec:	e003      	b.n	8002ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	430a      	orrs	r2, r1
 8003010:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	430a      	orrs	r2, r1
 800302e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <HAL_FDCAN_ActivateNotification+0xec>)
 800303c:	4013      	ands	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	430b      	orrs	r3, r1
 8003044:	6553      	str	r3, [r2, #84]	@ 0x54
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0f9b      	lsrs	r3, r3, #30
 800304e:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e008      	b.n	800306a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	3fcfffff 	.word	0x3fcfffff
 800307c:	4000a800 	.word	0x4000a800

08003080 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b096      	sub	sp, #88	@ 0x58
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003088:	4b9a      	ldr	r3, [pc, #616]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	079b      	lsls	r3, r3, #30
 800308e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003090:	4b98      	ldr	r3, [pc, #608]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	079b      	lsls	r3, r3, #30
 8003096:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003098:	4013      	ands	r3, r2
 800309a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80030a6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030b0:	4013      	ands	r3, r2
 80030b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c8:	4013      	ands	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030e0:	4013      	ands	r3, r2
 80030e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ea:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80030ee:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030f8:	4013      	ands	r3, r2
 80030fa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003102:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003106:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003110:	4013      	ands	r3, r2
 8003112:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003144:	651a      	str	r2, [r3, #80]	@ 0x50
 8003146:	4b6b      	ldr	r3, [pc, #428]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fa54 	bl	80035fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003154:	0a9b      	lsrs	r3, r3, #10
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01d      	beq.n	800319a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	0a9b      	lsrs	r3, r3, #10
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800317c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800317e:	4013      	ands	r3, r2
 8003180:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318a:	651a      	str	r2, [r3, #80]	@ 0x50
 800318c:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa07 	bl	80035a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031a6:	4b54      	ldr	r3, [pc, #336]	@ (80032f8 <HAL_FDCAN_IRQHandler+0x278>)
 80031a8:	400b      	ands	r3, r1
 80031aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ac:	4a51      	ldr	r2, [pc, #324]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 80031ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b0:	0f9b      	lsrs	r3, r3, #30
 80031b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80031b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9c0 	bl	800353c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80031bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80031c8:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_FDCAN_IRQHandler+0x278>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ce:	4a49      	ldr	r2, [pc, #292]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 80031d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d2:	0f9b      	lsrs	r3, r3, #30
 80031d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80031d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f9ba 	bl	8003552 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80031de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00d      	beq.n	8003200 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80031ea:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <HAL_FDCAN_IRQHandler+0x278>)
 80031ec:	400b      	ands	r3, r1
 80031ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f0:	4a40      	ldr	r2, [pc, #256]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 80031f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f4:	0f9b      	lsrs	r3, r3, #30
 80031f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80031f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe ff56 	bl	80020ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800320c:	4b3a      	ldr	r3, [pc, #232]	@ (80032f8 <HAL_FDCAN_IRQHandler+0x278>)
 800320e:	400b      	ands	r3, r1
 8003210:	6513      	str	r3, [r2, #80]	@ 0x50
 8003212:	4a38      	ldr	r2, [pc, #224]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 8003214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003216:	0f9b      	lsrs	r3, r3, #30
 8003218:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800321a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9a3 	bl	8003568 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003224:	0adb      	lsrs	r3, r3, #11
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	0adb      	lsrs	r3, r3, #11
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003242:	651a      	str	r2, [r3, #80]	@ 0x50
 8003244:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f997 	bl	800357e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01d      	beq.n	8003298 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800325c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325e:	0a5b      	lsrs	r3, r3, #9
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d017      	beq.n	8003298 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003270:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800327a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327c:	4013      	ands	r3, r2
 800327e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003288:	651a      	str	r2, [r3, #80]	@ 0x50
 800328a:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f97d 	bl	8003592 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329a:	0cdb      	lsrs	r3, r3, #19
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	0cdb      	lsrs	r3, r3, #19
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80032ba:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f97c 	bl	80035be <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80032c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80032e8:	4b02      	ldr	r3, [pc, #8]	@ (80032f4 <HAL_FDCAN_IRQHandler+0x274>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	e004      	b.n	80032fc <HAL_FDCAN_IRQHandler+0x27c>
 80032f2:	bf00      	nop
 80032f4:	4000a800 	.word	0x4000a800
 80032f8:	3fcfffff 	.word	0x3fcfffff
 80032fc:	f000 f969 	bl	80035d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	0c9b      	lsrs	r3, r3, #18
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003320:	651a      	str	r2, [r3, #80]	@ 0x50
 8003322:	4b83      	ldr	r3, [pc, #524]	@ (8003530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f95c 	bl	80035e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800332e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003330:	0c5b      	lsrs	r3, r3, #17
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d015      	beq.n	8003366 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	0c5b      	lsrs	r3, r3, #17
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800334e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003350:	4b77      	ldr	r3, [pc, #476]	@ (8003530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800335c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003372:	4b70      	ldr	r3, [pc, #448]	@ (8003534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003374:	400b      	ands	r3, r1
 8003376:	6513      	str	r3, [r2, #80]	@ 0x50
 8003378:	4a6d      	ldr	r2, [pc, #436]	@ (8003530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800337a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337c:	0f9b      	lsrs	r3, r3, #30
 800337e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f94d 	bl	8003622 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003394:	4b67      	ldr	r3, [pc, #412]	@ (8003534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003396:	400b      	ands	r3, r1
 8003398:	6513      	str	r3, [r2, #80]	@ 0x50
 800339a:	4a65      	ldr	r2, [pc, #404]	@ (8003530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800339c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800339e:	0f9b      	lsrs	r3, r3, #30
 80033a0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80033a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a60      	ldr	r2, [pc, #384]	@ (8003538 <HAL_FDCAN_IRQHandler+0x4b8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f040 80ac 	bne.w	8003516 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a4 	beq.w	8003516 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e2:	4013      	ands	r3, r2
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033fa:	4013      	ands	r3, r2
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003412:	4013      	ands	r3, r2
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003420:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	4013      	ands	r3, r2
 800342c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003438:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4013      	ands	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8e6 	bl	8003638 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003478:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800347a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8e6 	bl	800364e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01a      	beq.n	80034c4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	6939      	ldr	r1, [r7, #16]
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8d0 	bl	8003664 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80034d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8d1 	bl	800367c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f874 	bl	800360e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003526:	bf00      	nop
 8003528:	3758      	adds	r7, #88	@ 0x58
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	4000a800 	.word	0x4000a800
 8003534:	3fcfffff 	.word	0x3fcfffff
 8003538:	4000a000 	.word	0x4000a000

0800353c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80036aa:	4ba7      	ldr	r3, [pc, #668]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	0091      	lsls	r1, r2, #2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	041a      	lsls	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80036ea:	4b97      	ldr	r3, [pc, #604]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	0091      	lsls	r1, r2, #2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800372c:	4b86      	ldr	r3, [pc, #536]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	0091      	lsls	r1, r2, #2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	430b      	orrs	r3, r1
 800373a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003746:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	041a      	lsls	r2, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003774:	4b74      	ldr	r3, [pc, #464]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	0091      	lsls	r1, r2, #2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800378e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4413      	add	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80037bc:	4b62      	ldr	r3, [pc, #392]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	0091      	lsls	r1, r2, #2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80037e8:	4b57      	ldr	r3, [pc, #348]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0091      	lsls	r1, r2, #2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003802:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	4413      	add	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800382a:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	0091      	lsls	r1, r2, #2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	430b      	orrs	r3, r1
 8003838:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003844:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003860:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	061a      	lsls	r2, r3, #24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003878:	4b34      	ldr	r3, [pc, #208]	@ (800394c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800387a:	4413      	add	r3, r2
 800387c:	009a      	lsls	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	441a      	add	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d915      	bls.n	8003970 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003944:	e006      	b.n	8003954 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003946:	bf00      	nop
 8003948:	ffff0003 	.word	0xffff0003
 800394c:	10002b00 	.word	0x10002b00
 8003950:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e010      	b.n	8003992 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e005      	b.n	8003984 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3304      	adds	r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3f3      	bcc.n	8003978 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80039be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e00a      	b.n	80039e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80039d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80039da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80039ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80039f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80039f8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	3304      	adds	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e020      	b.n	8003a7a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3302      	adds	r3, #2
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	440b      	add	r3, r1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a50:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	440b      	add	r3, r1
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003a5e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	440a      	add	r2, r1
 8003a66:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003a68:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3304      	adds	r3, #4
 8003a72:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3304      	adds	r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4a06      	ldr	r2, [pc, #24]	@ (8003a98 <FDCAN_CopyMessageToRAM+0xf8>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	461a      	mov	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d3d6      	bcc.n	8003a38 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	3724      	adds	r7, #36	@ 0x24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	08009694 	.word	0x08009694

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	@ 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003aaa:	4b89      	ldr	r3, [pc, #548]	@ (8003cd0 <HAL_GPIO_Init+0x234>)
 8003aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aae:	e194      	b.n	8003dda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8186 	beq.w	8003dd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d005      	beq.n	8003ae0 <HAL_GPIO_Init+0x44>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d130      	bne.n	8003b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b16:	2201      	movs	r2, #1
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	f003 0201 	and.w	r2, r3, #1
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d017      	beq.n	8003b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d123      	bne.n	8003bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0203 	and.w	r2, r3, #3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80e0 	beq.w	8003dd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c14:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd4 <HAL_GPIO_Init+0x238>)
 8003c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <HAL_GPIO_Init+0x238>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003c24:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_GPIO_Init+0x238>)
 8003c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c32:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <HAL_GPIO_Init+0x23c>)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a20      	ldr	r2, [pc, #128]	@ (8003cdc <HAL_GPIO_Init+0x240>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d052      	beq.n	8003d04 <HAL_GPIO_Init+0x268>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce0 <HAL_GPIO_Init+0x244>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d031      	beq.n	8003cca <HAL_GPIO_Init+0x22e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <HAL_GPIO_Init+0x248>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d02b      	beq.n	8003cc6 <HAL_GPIO_Init+0x22a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_GPIO_Init+0x24c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d025      	beq.n	8003cc2 <HAL_GPIO_Init+0x226>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	@ (8003cec <HAL_GPIO_Init+0x250>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <HAL_GPIO_Init+0x222>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf0 <HAL_GPIO_Init+0x254>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d019      	beq.n	8003cba <HAL_GPIO_Init+0x21e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf4 <HAL_GPIO_Init+0x258>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_GPIO_Init+0x21a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a19      	ldr	r2, [pc, #100]	@ (8003cf8 <HAL_GPIO_Init+0x25c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00d      	beq.n	8003cb2 <HAL_GPIO_Init+0x216>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_GPIO_Init+0x260>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <HAL_GPIO_Init+0x212>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_GPIO_Init+0x264>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_GPIO_Init+0x20e>
 8003ca6:	2309      	movs	r3, #9
 8003ca8:	e02d      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003caa:	230a      	movs	r3, #10
 8003cac:	e02b      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	e029      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	e027      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cb6:	2306      	movs	r3, #6
 8003cb8:	e025      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cba:	2305      	movs	r3, #5
 8003cbc:	e023      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	e021      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e01f      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e01d      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e01b      	b.n	8003d06 <HAL_GPIO_Init+0x26a>
 8003cce:	bf00      	nop
 8003cd0:	58000080 	.word	0x58000080
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58000400 	.word	0x58000400
 8003cdc:	58020000 	.word	0x58020000
 8003ce0:	58020400 	.word	0x58020400
 8003ce4:	58020800 	.word	0x58020800
 8003ce8:	58020c00 	.word	0x58020c00
 8003cec:	58021000 	.word	0x58021000
 8003cf0:	58021400 	.word	0x58021400
 8003cf4:	58021800 	.word	0x58021800
 8003cf8:	58021c00 	.word	0x58021c00
 8003cfc:	58022000 	.word	0x58022000
 8003d00:	58022400 	.word	0x58022400
 8003d04:	2300      	movs	r3, #0
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	f002 0203 	and.w	r2, r2, #3
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	4093      	lsls	r3, r2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d16:	4938      	ldr	r1, [pc, #224]	@ (8003df8 <HAL_GPIO_Init+0x35c>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f ae63 	bne.w	8003ab0 <HAL_GPIO_Init+0x14>
  }
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3724      	adds	r7, #36	@ 0x24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	58000400 	.word	0x58000400

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d00a      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e44:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e01f      	b.n	8003e96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e01d      	b.n	8003e96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	490f      	ldr	r1, [pc, #60]	@ (8003ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e6a:	f7fe fb1f 	bl	80024ac <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e70:	e009      	b.n	8003e86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e72:	f7fe fb1b 	bl	80024ac <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e80:	d901      	bls.n	8003e86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e007      	b.n	8003e96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e92:	d1ee      	bne.n	8003e72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	58024800 	.word	0x58024800

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	@ 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f000 bc48 	b.w	8004748 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8088 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec6:	4b99      	ldr	r3, [pc, #612]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed0:	4b96      	ldr	r3, [pc, #600]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d007      	beq.n	8003eec <HAL_RCC_OscConfig+0x48>
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	2b18      	cmp	r3, #24
 8003ee0:	d111      	bne.n	8003f06 <HAL_RCC_OscConfig+0x62>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	4b8f      	ldr	r3, [pc, #572]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d06d      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x130>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d169      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f000 bc21 	b.w	8004748 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x7a>
 8003f10:	4b86      	ldr	r3, [pc, #536]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a85      	ldr	r2, [pc, #532]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0xd8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x9c>
 8003f26:	4b81      	ldr	r3, [pc, #516]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a80      	ldr	r2, [pc, #512]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b7e      	ldr	r3, [pc, #504]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7d      	ldr	r2, [pc, #500]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e01d      	b.n	8003f7c <HAL_RCC_OscConfig+0xd8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0xc0>
 8003f4a:	4b78      	ldr	r3, [pc, #480]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a77      	ldr	r2, [pc, #476]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b75      	ldr	r3, [pc, #468]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a74      	ldr	r2, [pc, #464]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0xd8>
 8003f64:	4b71      	ldr	r3, [pc, #452]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a70      	ldr	r2, [pc, #448]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b6e      	ldr	r3, [pc, #440]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6d      	ldr	r2, [pc, #436]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fa92 	bl	80024ac <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fe fa8e 	bl	80024ac <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e3d4      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f9e:	4b63      	ldr	r3, [pc, #396]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe8>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fe fa7e 	bl	80024ac <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fa7a 	bl	80024ac <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e3c0      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fc6:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x110>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80ca 	beq.w	8004178 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe4:	4b51      	ldr	r3, [pc, #324]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fee:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_RCC_OscConfig+0x166>
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d156      	bne.n	80040ae <HAL_RCC_OscConfig+0x20a>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d151      	bne.n	80040ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400a:	4b48      	ldr	r3, [pc, #288]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e392      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004022:	4b42      	ldr	r3, [pc, #264]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0219 	bic.w	r2, r3, #25
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	493f      	ldr	r1, [pc, #252]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe fa3a 	bl	80024ac <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403c:	f7fe fa36 	bl	80024ac <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e37c      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404e:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	f7fe fa33 	bl	80024c4 <HAL_GetREVID>
 800405e:	4603      	mov	r3, r0
 8004060:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004064:	4293      	cmp	r3, r2
 8004066:	d817      	bhi.n	8004098 <HAL_RCC_OscConfig+0x1f4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b40      	cmp	r3, #64	@ 0x40
 800406e:	d108      	bne.n	8004082 <HAL_RCC_OscConfig+0x1de>
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004078:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004080:	e07a      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b2a      	ldr	r3, [pc, #168]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	031b      	lsls	r3, r3, #12
 8004090:	4926      	ldr	r1, [pc, #152]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004096:	e06f      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b24      	ldr	r3, [pc, #144]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	4921      	ldr	r1, [pc, #132]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ac:	e064      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d047      	beq.n	8004146 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0219 	bic.w	r2, r3, #25
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	491a      	ldr	r1, [pc, #104]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe f9f0 	bl	80024ac <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fe f9ec 	bl	80024ac <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e332      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	f7fe f9e9 	bl	80024c4 <HAL_GetREVID>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d819      	bhi.n	8004130 <HAL_RCC_OscConfig+0x28c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	d108      	bne.n	8004116 <HAL_RCC_OscConfig+0x272>
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800410c:	4a07      	ldr	r2, [pc, #28]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 800410e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004112:	6053      	str	r3, [r2, #4]
 8004114:	e030      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
 8004116:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	031b      	lsls	r3, r3, #12
 8004124:	4901      	ldr	r1, [pc, #4]	@ (800412c <HAL_RCC_OscConfig+0x288>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	e025      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
 800412c:	58024400 	.word	0x58024400
 8004130:	4b9a      	ldr	r3, [pc, #616]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4997      	ldr	r1, [pc, #604]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	e018      	b.n	8004178 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b95      	ldr	r3, [pc, #596]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a94      	ldr	r2, [pc, #592]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe f9ab 	bl	80024ac <HAL_GetTick>
 8004156:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe f9a7 	bl	80024ac <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e2ed      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800416c:	4b8b      	ldr	r3, [pc, #556]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a9 	beq.w	80042d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004186:	4b85      	ldr	r3, [pc, #532]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800418e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004190:	4b82      	ldr	r3, [pc, #520]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d007      	beq.n	80041ac <HAL_RCC_OscConfig+0x308>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b18      	cmp	r3, #24
 80041a0:	d13a      	bne.n	8004218 <HAL_RCC_OscConfig+0x374>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d135      	bne.n	8004218 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ac:	4b7b      	ldr	r3, [pc, #492]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x320>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b80      	cmp	r3, #128	@ 0x80
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e2c1      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041c4:	f7fe f97e 	bl	80024c4 <HAL_GetREVID>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d817      	bhi.n	8004202 <HAL_RCC_OscConfig+0x35e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d108      	bne.n	80041ec <HAL_RCC_OscConfig+0x348>
 80041da:	4b70      	ldr	r3, [pc, #448]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041e2:	4a6e      	ldr	r2, [pc, #440]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ea:	e075      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ec:	4b6b      	ldr	r3, [pc, #428]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	4968      	ldr	r1, [pc, #416]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004200:	e06a      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004202:	4b66      	ldr	r3, [pc, #408]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	4962      	ldr	r1, [pc, #392]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004212:	4313      	orrs	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004216:	e05f      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d042      	beq.n	80042a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004220:	4b5e      	ldr	r3, [pc, #376]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5d      	ldr	r2, [pc, #372]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f93e 	bl	80024ac <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004234:	f7fe f93a 	bl	80024ac <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e280      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004246:	4b55      	ldr	r3, [pc, #340]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004252:	f7fe f937 	bl	80024c4 <HAL_GetREVID>
 8004256:	4603      	mov	r3, r0
 8004258:	f241 0203 	movw	r2, #4099	@ 0x1003
 800425c:	4293      	cmp	r3, r2
 800425e:	d817      	bhi.n	8004290 <HAL_RCC_OscConfig+0x3ec>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	2b20      	cmp	r3, #32
 8004266:	d108      	bne.n	800427a <HAL_RCC_OscConfig+0x3d6>
 8004268:	4b4c      	ldr	r3, [pc, #304]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004270:	4a4a      	ldr	r2, [pc, #296]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004276:	6053      	str	r3, [r2, #4]
 8004278:	e02e      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
 800427a:	4b48      	ldr	r3, [pc, #288]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	4944      	ldr	r1, [pc, #272]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e023      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
 8004290:	4b42      	ldr	r3, [pc, #264]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	493f      	ldr	r1, [pc, #252]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60cb      	str	r3, [r1, #12]
 80042a4:	e018      	b.n	80042d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042a6:	4b3d      	ldr	r3, [pc, #244]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3c      	ldr	r2, [pc, #240]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe f8fb 	bl	80024ac <HAL_GetTick>
 80042b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042ba:	f7fe f8f7 	bl	80024ac <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e23d      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042cc:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d036      	beq.n	8004352 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d019      	beq.n	8004320 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ec:	4b2b      	ldr	r3, [pc, #172]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f0:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fe f8d8 	bl	80024ac <HAL_GetTick>
 80042fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fe f8d4 	bl	80024ac <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e21a      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x45c>
 800431e:	e018      	b.n	8004352 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004320:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fe f8be 	bl	80024ac <HAL_GetTick>
 8004330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004334:	f7fe f8ba 	bl	80024ac <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e200      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d039      	beq.n	80043d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800436c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004372:	f7fe f89b 	bl	80024ac <HAL_GetTick>
 8004376:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800437a:	f7fe f897 	bl	80024ac <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1dd      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCC_OscConfig+0x4f8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x4d6>
 8004398:	e01b      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a9a      	ldr	r2, [pc, #616]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80043a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043ac:	f7fe f87e 	bl	80024ac <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b4:	f7fe f87a 	bl	80024ac <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1c0      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043c6:	4b92      	ldr	r3, [pc, #584]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8081 	beq.w	80044e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004614 <HAL_RCC_OscConfig+0x770>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a8b      	ldr	r2, [pc, #556]	@ (8004614 <HAL_RCC_OscConfig+0x770>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ec:	f7fe f85e 	bl	80024ac <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fe f85a 	bl	80024ac <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	@ 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1a0      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004406:	4b83      	ldr	r3, [pc, #524]	@ (8004614 <HAL_RCC_OscConfig+0x770>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d106      	bne.n	8004428 <HAL_RCC_OscConfig+0x584>
 800441a:	4b7d      	ldr	r3, [pc, #500]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	e02d      	b.n	8004484 <HAL_RCC_OscConfig+0x5e0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10c      	bne.n	800444a <HAL_RCC_OscConfig+0x5a6>
 8004430:	4b77      	ldr	r3, [pc, #476]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4a76      	ldr	r2, [pc, #472]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	6713      	str	r3, [r2, #112]	@ 0x70
 800443c:	4b74      	ldr	r3, [pc, #464]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	4a73      	ldr	r2, [pc, #460]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004442:	f023 0304 	bic.w	r3, r3, #4
 8004446:	6713      	str	r3, [r2, #112]	@ 0x70
 8004448:	e01c      	b.n	8004484 <HAL_RCC_OscConfig+0x5e0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b05      	cmp	r3, #5
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x5c8>
 8004452:	4b6f      	ldr	r3, [pc, #444]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a6e      	ldr	r2, [pc, #440]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
 800445e:	4b6c      	ldr	r3, [pc, #432]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a6b      	ldr	r2, [pc, #428]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6713      	str	r3, [r2, #112]	@ 0x70
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0x5e0>
 800446c:	4b68      	ldr	r3, [pc, #416]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	4a67      	ldr	r2, [pc, #412]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	@ 0x70
 8004478:	4b65      	ldr	r3, [pc, #404]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	4a64      	ldr	r2, [pc, #400]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fe f80e 	bl	80024ac <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fe f80a 	bl	80024ac <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e14e      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044aa:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ee      	beq.n	8004494 <HAL_RCC_OscConfig+0x5f0>
 80044b6:	e014      	b.n	80044e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd fff8 	bl	80024ac <HAL_GetTick>
 80044bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fd fff4 	bl	80024ac <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e138      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1ee      	bne.n	80044c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 812d 	beq.w	8004746 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044ec:	4b48      	ldr	r3, [pc, #288]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	f000 80bd 	beq.w	8004674 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 809e 	bne.w	8004640 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b42      	ldr	r3, [pc, #264]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a41      	ldr	r2, [pc, #260]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd ffcc 	bl	80024ac <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fd ffc8 	bl	80024ac <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e10e      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800452a:	4b39      	ldr	r3, [pc, #228]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004538:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800453a:	4b37      	ldr	r3, [pc, #220]	@ (8004618 <HAL_RCC_OscConfig+0x774>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	430a      	orrs	r2, r1
 800454a:	4931      	ldr	r1, [pc, #196]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	3b01      	subs	r3, #1
 8004556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	3b01      	subs	r3, #1
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	b29b      	uxth	r3, r3
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	3b01      	subs	r3, #1
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004580:	4923      	ldr	r1, [pc, #140]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004586:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004592:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004596:	4b21      	ldr	r3, [pc, #132]	@ (800461c <HAL_RCC_OscConfig+0x778>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	491b      	ldr	r1, [pc, #108]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	f023 020c 	bic.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	4917      	ldr	r1, [pc, #92]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045b8:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f023 0202 	bic.w	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c4:	4912      	ldr	r1, [pc, #72]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	4a10      	ldr	r2, [pc, #64]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	4a0d      	ldr	r2, [pc, #52]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	4a07      	ldr	r2, [pc, #28]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fa:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a04      	ldr	r2, [pc, #16]	@ (8004610 <HAL_RCC_OscConfig+0x76c>)
 8004600:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fd ff51 	bl	80024ac <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800460c:	e011      	b.n	8004632 <HAL_RCC_OscConfig+0x78e>
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400
 8004614:	58024800 	.word	0x58024800
 8004618:	fffffc0c 	.word	0xfffffc0c
 800461c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd ff44 	bl	80024ac <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e08a      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x77c>
 800463e:	e082      	b.n	8004746 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b43      	ldr	r3, [pc, #268]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a42      	ldr	r2, [pc, #264]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd ff2e 	bl	80024ac <HAL_GetTick>
 8004650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd ff2a 	bl	80024ac <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e070      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x7b0>
 8004672:	e068      	b.n	8004746 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004674:	4b36      	ldr	r3, [pc, #216]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800467a:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	2b01      	cmp	r3, #1
 8004686:	d031      	beq.n	80046ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d12a      	bne.n	80046ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d122      	bne.n	80046ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d11a      	bne.n	80046ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d111      	bne.n	80046ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d108      	bne.n	80046ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e02b      	b.n	8004748 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046f0:	4b17      	ldr	r3, [pc, #92]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d01f      	beq.n	8004746 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004706:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	4a11      	ldr	r2, [pc, #68]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004712:	f7fd fecb 	bl	80024ac <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004718:	bf00      	nop
 800471a:	f7fd fec7 	bl	80024ac <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	4293      	cmp	r3, r2
 8004724:	d0f9      	beq.n	800471a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004726:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <HAL_RCC_OscConfig+0x8b0>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004732:	00d2      	lsls	r2, r2, #3
 8004734:	4906      	ldr	r1, [pc, #24]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004736:	4313      	orrs	r3, r2
 8004738:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <HAL_RCC_OscConfig+0x8ac>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3730      	adds	r7, #48	@ 0x30
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	58024400 	.word	0x58024400
 8004754:	ffff0007 	.word	0xffff0007

08004758 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e19c      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b8a      	ldr	r3, [pc, #552]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d910      	bls.n	800479c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b87      	ldr	r3, [pc, #540]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 020f 	bic.w	r2, r3, #15
 8004782:	4985      	ldr	r1, [pc, #532]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b83      	ldr	r3, [pc, #524]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e184      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	4b7b      	ldr	r3, [pc, #492]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d908      	bls.n	80047ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047b8:	4b78      	ldr	r3, [pc, #480]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	4975      	ldr	r1, [pc, #468]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	4b70      	ldr	r3, [pc, #448]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d908      	bls.n	80047f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047e6:	4b6d      	ldr	r3, [pc, #436]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	496a      	ldr	r1, [pc, #424]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d010      	beq.n	8004826 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	4b64      	ldr	r3, [pc, #400]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004810:	429a      	cmp	r2, r3
 8004812:	d908      	bls.n	8004826 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004814:	4b61      	ldr	r3, [pc, #388]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	495e      	ldr	r1, [pc, #376]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004822:	4313      	orrs	r3, r2
 8004824:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	4b59      	ldr	r3, [pc, #356]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800483e:	429a      	cmp	r2, r3
 8004840:	d908      	bls.n	8004854 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004842:	4b56      	ldr	r3, [pc, #344]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4953      	ldr	r1, [pc, #332]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004850:	4313      	orrs	r3, r2
 8004852:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d010      	beq.n	8004882 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	4b4d      	ldr	r3, [pc, #308]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	429a      	cmp	r2, r3
 800486e:	d908      	bls.n	8004882 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b4a      	ldr	r3, [pc, #296]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f023 020f 	bic.w	r2, r3, #15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4947      	ldr	r1, [pc, #284]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 800487e:	4313      	orrs	r3, r2
 8004880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d055      	beq.n	800493a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800488e:	4b43      	ldr	r3, [pc, #268]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4940      	ldr	r1, [pc, #256]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 800489c:	4313      	orrs	r3, r2
 800489e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048a8:	4b3c      	ldr	r3, [pc, #240]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d121      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0f6      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048c0:	4b36      	ldr	r3, [pc, #216]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d115      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0ea      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d8:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0de      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048e8:	4b2c      	ldr	r3, [pc, #176]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0d6      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f8:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f023 0207 	bic.w	r2, r3, #7
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4925      	ldr	r1, [pc, #148]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004906:	4313      	orrs	r3, r2
 8004908:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490a:	f7fd fdcf 	bl	80024ac <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004910:	e00a      	b.n	8004928 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004912:	f7fd fdcb 	bl	80024ac <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0be      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004928:	4b1c      	ldr	r3, [pc, #112]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	429a      	cmp	r2, r3
 8004938:	d1eb      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	429a      	cmp	r2, r3
 8004954:	d208      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004956:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	490e      	ldr	r1, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x244>)
 8004964:	4313      	orrs	r3, r2
 8004966:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d214      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 020f 	bic.w	r2, r3, #15
 800497e:	4906      	ldr	r1, [pc, #24]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b04      	ldr	r3, [pc, #16]	@ (8004998 <HAL_RCC_ClockConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e086      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x34e>
 8004998:	52002000 	.word	0x52002000
 800499c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d208      	bcs.n	80049ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049bc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	4939      	ldr	r1, [pc, #228]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	4b34      	ldr	r3, [pc, #208]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d208      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ea:	4b31      	ldr	r3, [pc, #196]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	492e      	ldr	r1, [pc, #184]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d208      	bcs.n	8004a2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	4922      	ldr	r1, [pc, #136]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d010      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d208      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4917      	ldr	r1, [pc, #92]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a58:	f000 f834 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	4912      	ldr	r1, [pc, #72]	@ (8004ab4 <HAL_RCC_ClockConfig+0x35c>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
 8004a74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a76:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <HAL_RCC_ClockConfig+0x358>)
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab4 <HAL_RCC_ClockConfig+0x35c>)
 8004a80:	5cd3      	ldrb	r3, [r2, r3]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <HAL_RCC_ClockConfig+0x360>)
 8004a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a90:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <HAL_RCC_ClockConfig+0x364>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <HAL_RCC_ClockConfig+0x368>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd fcbc 	bl	8002418 <HAL_InitTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	08009684 	.word	0x08009684
 8004ab8:	24000004 	.word	0x24000004
 8004abc:	24000000 	.word	0x24000000
 8004ac0:	24000008 	.word	0x24000008

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	@ 0x24
 8004ac8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aca:	4bb3      	ldr	r3, [pc, #716]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad2:	2b18      	cmp	r3, #24
 8004ad4:	f200 8155 	bhi.w	8004d82 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b45 	.word	0x08004b45
 8004ae4:	08004d83 	.word	0x08004d83
 8004ae8:	08004d83 	.word	0x08004d83
 8004aec:	08004d83 	.word	0x08004d83
 8004af0:	08004d83 	.word	0x08004d83
 8004af4:	08004d83 	.word	0x08004d83
 8004af8:	08004d83 	.word	0x08004d83
 8004afc:	08004d83 	.word	0x08004d83
 8004b00:	08004b6b 	.word	0x08004b6b
 8004b04:	08004d83 	.word	0x08004d83
 8004b08:	08004d83 	.word	0x08004d83
 8004b0c:	08004d83 	.word	0x08004d83
 8004b10:	08004d83 	.word	0x08004d83
 8004b14:	08004d83 	.word	0x08004d83
 8004b18:	08004d83 	.word	0x08004d83
 8004b1c:	08004d83 	.word	0x08004d83
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004d83 	.word	0x08004d83
 8004b28:	08004d83 	.word	0x08004d83
 8004b2c:	08004d83 	.word	0x08004d83
 8004b30:	08004d83 	.word	0x08004d83
 8004b34:	08004d83 	.word	0x08004d83
 8004b38:	08004d83 	.word	0x08004d83
 8004b3c:	08004d83 	.word	0x08004d83
 8004b40:	08004b77 	.word	0x08004b77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b44:	4b94      	ldr	r3, [pc, #592]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b50:	4b91      	ldr	r3, [pc, #580]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	4a90      	ldr	r2, [pc, #576]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b62:	e111      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b64:	4b8d      	ldr	r3, [pc, #564]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b66:	61bb      	str	r3, [r7, #24]
      break;
 8004b68:	e10e      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b6c:	61bb      	str	r3, [r7, #24]
      break;
 8004b6e:	e10b      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b70:	4b8c      	ldr	r3, [pc, #560]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b72:	61bb      	str	r3, [r7, #24]
      break;
 8004b74:	e108      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b76:	4b88      	ldr	r3, [pc, #544]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b80:	4b85      	ldr	r3, [pc, #532]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b8c:	4b82      	ldr	r3, [pc, #520]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b96:	4b80      	ldr	r3, [pc, #512]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80e1 	beq.w	8004d7c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f000 8083 	beq.w	8004cc8 <HAL_RCC_GetSysClockFreq+0x204>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f200 80a1 	bhi.w	8004d0c <HAL_RCC_GetSysClockFreq+0x248>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x114>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d056      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bd6:	e099      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004be4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	4a6b      	ldr	r2, [pc, #428]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c3e:	e087      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004dac <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c82:	e065      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004db0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b40      	ldr	r3, [pc, #256]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004caa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cc6:	e043      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004db4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d0a:	e021      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004db0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d32:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004da8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d4e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d50:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d74:	ee17 3a90 	vmov	r3, s15
 8004d78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d7a:	e005      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
      break;
 8004d80:	e002      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d82:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d84:	61bb      	str	r3, [r7, #24]
      break;
 8004d86:	bf00      	nop
  }

  return sysclockfreq;
 8004d88:	69bb      	ldr	r3, [r7, #24]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3724      	adds	r7, #36	@ 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	03d09000 	.word	0x03d09000
 8004da0:	003d0900 	.word	0x003d0900
 8004da4:	017d7840 	.word	0x017d7840
 8004da8:	46000000 	.word	0x46000000
 8004dac:	4c742400 	.word	0x4c742400
 8004db0:	4a742400 	.word	0x4a742400
 8004db4:	4bbebc20 	.word	0x4bbebc20

08004db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dbe:	f7ff fe81 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490f      	ldr	r1, [pc, #60]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	4a07      	ldr	r2, [pc, #28]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004df6:	4a07      	ldr	r2, [pc, #28]	@ (8004e14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	08009684 	.word	0x08009684
 8004e10:	24000004 	.word	0x24000004
 8004e14:	24000000 	.word	0x24000000

08004e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e1c:	f7ff ffcc 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4904      	ldr	r1, [pc, #16]	@ (8004e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	08009684 	.word	0x08009684

08004e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e48:	f7ff ffb6 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4904      	ldr	r1, [pc, #16]	@ (8004e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	08009684 	.word	0x08009684

08004e70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b0ca      	sub	sp, #296	@ 0x128
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e82:	2300      	movs	r3, #0
 8004e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e94:	2500      	movs	r5, #0
 8004e96:	ea54 0305 	orrs.w	r3, r4, r5
 8004e9a:	d049      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ea6:	d02f      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ea8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eac:	d828      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eb2:	d01a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eb8:	d822      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec2:	d007      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec4:	e01c      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec6:	4bb8      	ldr	r3, [pc, #736]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4ab7      	ldr	r2, [pc, #732]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ed2:	e01a      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	3308      	adds	r3, #8
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fc8f 	bl	8006800 <RCCEx_PLL2_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ee8:	e00f      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	3328      	adds	r3, #40	@ 0x28
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fd36 	bl	8006964 <RCCEx_PLL3_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004efe:	e004      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f12:	4ba5      	ldr	r3, [pc, #660]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f20:	4aa1      	ldr	r2, [pc, #644]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	430b      	orrs	r3, r1
 8004f24:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f26:	e003      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f3c:	f04f 0900 	mov.w	r9, #0
 8004f40:	ea58 0309 	orrs.w	r3, r8, r9
 8004f44:	d047      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d82a      	bhi.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f6d 	.word	0x08004f6d
 8004f5c:	08004f7b 	.word	0x08004f7b
 8004f60:	08004f91 	.word	0x08004f91
 8004f64:	08004faf 	.word	0x08004faf
 8004f68:	08004faf 	.word	0x08004faf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a8d      	ldr	r2, [pc, #564]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f78:	e01a      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	3308      	adds	r3, #8
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 fc3c 	bl	8006800 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f8e:	e00f      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f94:	3328      	adds	r3, #40	@ 0x28
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 fce3 	bl	8006964 <RCCEx_PLL3_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fac:	e000      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb8:	4b7b      	ldr	r3, [pc, #492]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	f023 0107 	bic.w	r1, r3, #7
 8004fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	4a78      	ldr	r2, [pc, #480]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004fe2:	f04f 0b00 	mov.w	fp, #0
 8004fe6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004fea:	d04c      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff6:	d030      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffc:	d829      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005000:	d02d      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005002:	2bc0      	cmp	r3, #192	@ 0xc0
 8005004:	d825      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005006:	2b80      	cmp	r3, #128	@ 0x80
 8005008:	d018      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d821      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d007      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005016:	e01c      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	4a62      	ldr	r2, [pc, #392]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005024:	e01c      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	3308      	adds	r3, #8
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fbe6 	bl	8006800 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800503a:	e011      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	3328      	adds	r3, #40	@ 0x28
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fc8d 	bl	8006964 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005058:	e002      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800505e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005068:	4b4f      	ldr	r3, [pc, #316]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800506a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005076:	4a4c      	ldr	r2, [pc, #304]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6513      	str	r3, [r2, #80]	@ 0x50
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005092:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800509c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d053      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b2:	d035      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b8:	d82e      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050be:	d031      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80050c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050c4:	d828      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ca:	d01a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80050cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050d0:	d822      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80050d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050da:	d007      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80050dc:	e01c      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050de:	4b32      	ldr	r3, [pc, #200]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	4a31      	ldr	r2, [pc, #196]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ea:	e01c      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	3308      	adds	r3, #8
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fb83 	bl	8006800 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005100:	e011      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	3328      	adds	r3, #40	@ 0x28
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fc2a 	bl	8006964 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005116:	e006      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511e:	e002      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800512e:	4b1e      	ldr	r3, [pc, #120]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005132:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800513e:	4a1a      	ldr	r2, [pc, #104]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005140:	430b      	orrs	r3, r1
 8005142:	6593      	str	r3, [r2, #88]	@ 0x58
 8005144:	e003      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800515a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005164:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	d056      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800517a:	d038      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800517c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005180:	d831      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005186:	d034      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005188:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800518c:	d82b      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800518e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005192:	d01d      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005198:	d825      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800519e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051a4:	e01f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ac:	4ba2      	ldr	r3, [pc, #648]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	4aa1      	ldr	r2, [pc, #644]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051b8:	e01c      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051be:	3308      	adds	r3, #8
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fb1c 	bl	8006800 <RCCEx_PLL2_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051ce:	e011      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	3328      	adds	r3, #40	@ 0x28
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fbc3 	bl	8006964 <RCCEx_PLL3_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005200:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005208:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800520c:	4a8a      	ldr	r2, [pc, #552]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800520e:	430b      	orrs	r3, r1
 8005210:	6593      	str	r3, [r2, #88]	@ 0x58
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005232:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d03a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005242:	2b30      	cmp	r3, #48	@ 0x30
 8005244:	d01f      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005246:	2b30      	cmp	r3, #48	@ 0x30
 8005248:	d819      	bhi.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800524a:	2b20      	cmp	r3, #32
 800524c:	d00c      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800524e:	2b20      	cmp	r3, #32
 8005250:	d815      	bhi.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d019      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005256:	2b10      	cmp	r3, #16
 8005258:	d111      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	4b77      	ldr	r3, [pc, #476]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	4a76      	ldr	r2, [pc, #472]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005266:	e011      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	3308      	adds	r3, #8
 800526e:	2102      	movs	r1, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fac5 	bl	8006800 <RCCEx_PLL2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800527c:	e006      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005284:	e002      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800528a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005294:	4b68      	ldr	r3, [pc, #416]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005298:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	4a65      	ldr	r2, [pc, #404]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80052be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80052c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4313      	orrs	r3, r2
 80052d0:	d051      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052dc:	d035      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80052de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052e2:	d82e      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052e8:	d031      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80052ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052ee:	d828      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f4:	d01a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fa:	d822      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005304:	d007      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005306:	e01c      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b4b      	ldr	r3, [pc, #300]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	4a4a      	ldr	r2, [pc, #296]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005314:	e01c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	3308      	adds	r3, #8
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fa6e 	bl	8006800 <RCCEx_PLL2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	3328      	adds	r3, #40	@ 0x28
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fb15 	bl	8006964 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800534e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005358:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005366:	4a34      	ldr	r2, [pc, #208]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6513      	str	r3, [r2, #80]	@ 0x50
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800538c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d056      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053a0:	d033      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80053a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053a6:	d82c      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053ac:	d02f      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80053ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053b2:	d826      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053b8:	d02b      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80053ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053be:	d820      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053c4:	d012      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80053c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ca:	d81a      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d022      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d4:	d115      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053da:	3308      	adds	r3, #8
 80053dc:	2101      	movs	r1, #1
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fa0e 	bl	8006800 <RCCEx_PLL2_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80053ea:	e015      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f0:	3328      	adds	r3, #40	@ 0x28
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fab5 	bl	8006964 <RCCEx_PLL3_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005400:	e00a      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005408:	e006      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800540a:	bf00      	nop
 800540c:	e004      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10d      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005424:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542e:	4a02      	ldr	r2, [pc, #8]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6513      	str	r3, [r2, #80]	@ 0x50
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800545a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d055      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800546c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005470:	d033      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005476:	d82c      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547c:	d02f      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d826      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005488:	d02b      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800548a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800548e:	d820      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005494:	d012      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800549a:	d81a      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80054a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054a4:	d115      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054aa:	3308      	adds	r3, #8
 80054ac:	2101      	movs	r1, #1
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f9a6 	bl	8006800 <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054ba:	e015      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	3328      	adds	r3, #40	@ 0x28
 80054c2:	2101      	movs	r1, #1
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fa4d 	bl	8006964 <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054d0:	e00a      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80054da:	bf00      	nop
 80054dc:	e004      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80054e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054f0:	4ba3      	ldr	r3, [pc, #652]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005500:	4a9f      	ldr	r2, [pc, #636]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005502:	430b      	orrs	r3, r1
 8005504:	6593      	str	r3, [r2, #88]	@ 0x58
 8005506:	e003      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800551c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d037      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800553a:	d00e      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005540:	d816      	bhi.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800554a:	d111      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554c:	4b8c      	ldr	r3, [pc, #560]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	4a8b      	ldr	r2, [pc, #556]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005558:	e00f      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555e:	3308      	adds	r3, #8
 8005560:	2101      	movs	r1, #1
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f94c 	bl	8006800 <RCCEx_PLL2_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800556e:	e004      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005582:	4b7f      	ldr	r3, [pc, #508]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005586:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	4a7b      	ldr	r2, [pc, #492]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005592:	430b      	orrs	r3, r1
 8005594:	6513      	str	r3, [r2, #80]	@ 0x50
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80055ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80055b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d039      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d81c      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	0800560d 	.word	0x0800560d
 80055d4:	080055e1 	.word	0x080055e1
 80055d8:	080055ef 	.word	0x080055ef
 80055dc:	0800560d 	.word	0x0800560d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4b67      	ldr	r3, [pc, #412]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	4a66      	ldr	r2, [pc, #408]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055ec:	e00f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	3308      	adds	r3, #8
 80055f4:	2102      	movs	r1, #2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f902 	bl	8006800 <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005616:	4b5a      	ldr	r3, [pc, #360]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561a:	f023 0103 	bic.w	r1, r3, #3
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005624:	4a56      	ldr	r2, [pc, #344]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005626:	430b      	orrs	r3, r1
 8005628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800564a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	f000 809f 	beq.w	8005794 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005656:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4a      	ldr	r2, [pc, #296]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005662:	f7fc ff23 	bl	80024ac <HAL_GetTick>
 8005666:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800566a:	e00b      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc ff1e 	bl	80024ac <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b64      	cmp	r3, #100	@ 0x64
 800567a:	d903      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005682:	e005      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005684:	4b3f      	ldr	r3, [pc, #252]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ed      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d179      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005698:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800569a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056a4:	4053      	eors	r3, r2
 80056a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d015      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ae:	4b34      	ldr	r3, [pc, #208]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056ba:	4b31      	ldr	r3, [pc, #196]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056be:	4a30      	ldr	r2, [pc, #192]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e6:	d118      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc fee0 	bl	80024ac <HAL_GetTick>
 80056ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f0:	e00d      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fc fedb 	bl	80024ac <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056fc:	1ad2      	subs	r2, r2, r3
 80056fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005702:	429a      	cmp	r2, r3
 8005704:	d903      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800570c:	e005      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800570e:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0eb      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800571a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571e:	2b00      	cmp	r3, #0
 8005720:	d129      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800572a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800572e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005732:	d10e      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005744:	091a      	lsrs	r2, r3, #4
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005748:	4013      	ands	r3, r2
 800574a:	4a0d      	ldr	r2, [pc, #52]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800574c:	430b      	orrs	r3, r1
 800574e:	6113      	str	r3, [r2, #16]
 8005750:	e005      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005752:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005758:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800575c:	6113      	str	r3, [r2, #16]
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005760:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6713      	str	r3, [r2, #112]	@ 0x70
 8005774:	e00e      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800577e:	e009      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005780:	58024400 	.word	0x58024400
 8005784:	58024800 	.word	0x58024800
 8005788:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f002 0301 	and.w	r3, r2, #1
 80057a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f000 8089 	beq.w	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057bc:	2b28      	cmp	r3, #40	@ 0x28
 80057be:	d86b      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80057c0:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	080058a1 	.word	0x080058a1
 80057cc:	08005899 	.word	0x08005899
 80057d0:	08005899 	.word	0x08005899
 80057d4:	08005899 	.word	0x08005899
 80057d8:	08005899 	.word	0x08005899
 80057dc:	08005899 	.word	0x08005899
 80057e0:	08005899 	.word	0x08005899
 80057e4:	08005899 	.word	0x08005899
 80057e8:	0800586d 	.word	0x0800586d
 80057ec:	08005899 	.word	0x08005899
 80057f0:	08005899 	.word	0x08005899
 80057f4:	08005899 	.word	0x08005899
 80057f8:	08005899 	.word	0x08005899
 80057fc:	08005899 	.word	0x08005899
 8005800:	08005899 	.word	0x08005899
 8005804:	08005899 	.word	0x08005899
 8005808:	08005883 	.word	0x08005883
 800580c:	08005899 	.word	0x08005899
 8005810:	08005899 	.word	0x08005899
 8005814:	08005899 	.word	0x08005899
 8005818:	08005899 	.word	0x08005899
 800581c:	08005899 	.word	0x08005899
 8005820:	08005899 	.word	0x08005899
 8005824:	08005899 	.word	0x08005899
 8005828:	080058a1 	.word	0x080058a1
 800582c:	08005899 	.word	0x08005899
 8005830:	08005899 	.word	0x08005899
 8005834:	08005899 	.word	0x08005899
 8005838:	08005899 	.word	0x08005899
 800583c:	08005899 	.word	0x08005899
 8005840:	08005899 	.word	0x08005899
 8005844:	08005899 	.word	0x08005899
 8005848:	080058a1 	.word	0x080058a1
 800584c:	08005899 	.word	0x08005899
 8005850:	08005899 	.word	0x08005899
 8005854:	08005899 	.word	0x08005899
 8005858:	08005899 	.word	0x08005899
 800585c:	08005899 	.word	0x08005899
 8005860:	08005899 	.word	0x08005899
 8005864:	08005899 	.word	0x08005899
 8005868:	080058a1 	.word	0x080058a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	3308      	adds	r3, #8
 8005872:	2101      	movs	r1, #1
 8005874:	4618      	mov	r0, r3
 8005876:	f000 ffc3 	bl	8006800 <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005880:	e00f      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	3328      	adds	r3, #40	@ 0x28
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f86a 	bl	8006964 <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005896:	e004      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80058a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80058aa:	4bbf      	ldr	r3, [pc, #764]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b8:	4abb      	ldr	r2, [pc, #748]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f002 0302 	and.w	r3, r2, #2
 80058d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80058de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d041      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d824      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005945 	.word	0x08005945
 80058fc:	08005911 	.word	0x08005911
 8005900:	08005927 	.word	0x08005927
 8005904:	08005945 	.word	0x08005945
 8005908:	08005945 	.word	0x08005945
 800590c:	08005945 	.word	0x08005945
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	3308      	adds	r3, #8
 8005916:	2101      	movs	r1, #1
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff71 	bl	8006800 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005924:	e00f      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	3328      	adds	r3, #40	@ 0x28
 800592c:	2101      	movs	r1, #1
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f818 	bl	8006964 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800593a:	e004      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800594e:	4b96      	ldr	r3, [pc, #600]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005952:	f023 0107 	bic.w	r1, r3, #7
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800595c:	4a92      	ldr	r2, [pc, #584]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800595e:	430b      	orrs	r3, r1
 8005960:	6553      	str	r3, [r2, #84]	@ 0x54
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f002 0304 	and.w	r3, r2, #4
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005982:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d044      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005994:	2b05      	cmp	r3, #5
 8005996:	d825      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005998:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059ed 	.word	0x080059ed
 80059a4:	080059b9 	.word	0x080059b9
 80059a8:	080059cf 	.word	0x080059cf
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	080059ed 	.word	0x080059ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	3308      	adds	r3, #8
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 ff1d 	bl	8006800 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80059cc:	e00f      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	3328      	adds	r3, #40	@ 0x28
 80059d4:	2101      	movs	r1, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 ffc4 	bl	8006964 <RCCEx_PLL3_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059f6:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fa:	f023 0107 	bic.w	r1, r3, #7
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a06:	4a68      	ldr	r2, [pc, #416]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f002 0320 	and.w	r3, r2, #32
 8005a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d055      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a42:	d033      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a48:	d82c      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4e:	d02f      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d826      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a5a:	d02b      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005a5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a60:	d820      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a66:	d012      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6c:	d81a      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d022      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a76:	d115      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 febd 	bl	8006800 <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e015      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	3328      	adds	r3, #40	@ 0x28
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ff64 	bl	8006964 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e00a      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aaa:	e006      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005aac:	bf00      	nop
 8005aae:	e004      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	4a35      	ldr	r2, [pc, #212]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ad8:	e003      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005af2:	2300      	movs	r3, #0
 8005af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005af8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	d058      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b0e:	d033      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005b10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b14:	d82c      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b1a:	d02f      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b20:	d826      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b26:	d02b      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b2c:	d820      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b32:	d012      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b38:	d81a      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d022      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	d115      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	3308      	adds	r3, #8
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fe57 	bl	8006800 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b58:	e015      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	3328      	adds	r3, #40	@ 0x28
 8005b60:	2102      	movs	r1, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fefe 	bl	8006964 <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b76:	e006      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b78:	bf00      	nop
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b7c:	bf00      	nop
 8005b7e:	e002      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10e      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b9e:	4a02      	ldr	r2, [pc, #8]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba4:	e006      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d055      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bdc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005be0:	d033      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005be2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005be6:	d82c      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bec:	d02f      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf2:	d826      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bf4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bf8:	d02b      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005bfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bfe:	d820      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c04:	d012      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c0a:	d81a      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d022      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c14:	d115      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fdee 	bl	8006800 <RCCEx_PLL2_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e015      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	3328      	adds	r3, #40	@ 0x28
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fe95 	bl	8006964 <RCCEx_PLL3_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c40:	e00a      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c4a:	bf00      	nop
 8005c4c:	e004      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e002      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c60:	4ba1      	ldr	r3, [pc, #644]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c70:	4a9d      	ldr	r2, [pc, #628]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c76:	e003      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f002 0308 	and.w	r3, r2, #8
 8005c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d01e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	3328      	adds	r3, #40	@ 0x28
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fe54 	bl	8006964 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cc8:	4b87      	ldr	r3, [pc, #540]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd8:	4a83      	ldr	r2, [pc, #524]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f002 0310 	and.w	r3, r2, #16
 8005cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cf4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	d01e      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0a:	d10c      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	3328      	adds	r3, #40	@ 0x28
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fe25 	bl	8006964 <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d26:	4b70      	ldr	r3, [pc, #448]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d36:	4a6c      	ldr	r2, [pc, #432]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d03e      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d68:	d022      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d6e:	d81b      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d00b      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005d7a:	e015      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	3308      	adds	r3, #8
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fd3b 	bl	8006800 <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d90:	e00f      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	3328      	adds	r3, #40	@ 0x28
 8005d98:	2102      	movs	r1, #2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fde2 	bl	8006964 <RCCEx_PLL3_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005da6:	e004      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dca:	4a47      	ldr	r2, [pc, #284]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd0:	e003      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005de6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005de8:	2300      	movs	r3, #0
 8005dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d03b      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e02:	d01f      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005e04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e08:	d818      	bhi.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e14:	d007      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005e16:	e011      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e18:	4b33      	ldr	r3, [pc, #204]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	4a32      	ldr	r2, [pc, #200]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e24:	e00f      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2a:	3328      	adds	r3, #40	@ 0x28
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fd98 	bl	8006964 <RCCEx_PLL3_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e3a:	e004      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e4e:	4b26      	ldr	r3, [pc, #152]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e84:	460b      	mov	r3, r1
 8005e86:	4313      	orrs	r3, r2
 8005e88:	d034      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005e9a:	e011      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b12      	ldr	r3, [pc, #72]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	4a11      	ldr	r2, [pc, #68]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ea8:	e00e      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	3308      	adds	r3, #8
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fca4 	bl	8006800 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ebe:	e003      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ed0:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ede:	4a02      	ldr	r2, [pc, #8]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ee4:	e006      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f02:	2300      	movs	r3, #0
 8005f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d00c      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	3328      	adds	r3, #40	@ 0x28
 8005f16:	2102      	movs	r1, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fd23 	bl	8006964 <RCCEx_PLL3_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f38:	2300      	movs	r3, #0
 8005f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d038      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f52:	d018      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f58:	d811      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f5e:	d014      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f64:	d80b      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f70:	4bc3      	ldr	r3, [pc, #780]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	4ac2      	ldr	r2, [pc, #776]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f98:	4bb9      	ldr	r3, [pc, #740]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa8:	4ab5      	ldr	r2, [pc, #724]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fae:	e003      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fd4:	4baa      	ldr	r3, [pc, #680]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe2:	4aa7      	ldr	r2, [pc, #668]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ffa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ffe:	460b      	mov	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006004:	4b9e      	ldr	r3, [pc, #632]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006014:	4a9a      	ldr	r2, [pc, #616]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006016:	430b      	orrs	r3, r1
 8006018:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006028:	2300      	movs	r3, #0
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006036:	4b92      	ldr	r3, [pc, #584]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	4a8e      	ldr	r2, [pc, #568]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006046:	430b      	orrs	r3, r1
 8006048:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006056:	643b      	str	r3, [r7, #64]	@ 0x40
 8006058:	2300      	movs	r3, #0
 800605a:	647b      	str	r3, [r7, #68]	@ 0x44
 800605c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006066:	4b86      	ldr	r3, [pc, #536]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	4a85      	ldr	r2, [pc, #532]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800606c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006070:	6113      	str	r3, [r2, #16]
 8006072:	4b83      	ldr	r3, [pc, #524]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006074:	6919      	ldr	r1, [r3, #16]
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800607e:	4a80      	ldr	r2, [pc, #512]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006080:	430b      	orrs	r3, r1
 8006082:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006090:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006092:	2300      	movs	r3, #0
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006096:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060a0:	4b77      	ldr	r3, [pc, #476]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	4a74      	ldr	r2, [pc, #464]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d00a      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060d0:	4b6b      	ldr	r3, [pc, #428]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e0:	4a67      	ldr	r2, [pc, #412]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	2100      	movs	r1, #0
 80060f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060fc:	460b      	mov	r3, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	d011      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	3308      	adds	r3, #8
 8006108:	2100      	movs	r1, #0
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fb78 	bl	8006800 <RCCEx_PLL2_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	2100      	movs	r1, #0
 8006130:	6239      	str	r1, [r7, #32]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
 8006138:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800613c:	460b      	mov	r3, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	d011      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	3308      	adds	r3, #8
 8006148:	2101      	movs	r1, #1
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fb58 	bl	8006800 <RCCEx_PLL2_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	2100      	movs	r1, #0
 8006170:	61b9      	str	r1, [r7, #24]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800617c:	460b      	mov	r3, r1
 800617e:	4313      	orrs	r3, r2
 8006180:	d011      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3308      	adds	r3, #8
 8006188:	2102      	movs	r1, #2
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb38 	bl	8006800 <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	2100      	movs	r1, #0
 80061b0:	6139      	str	r1, [r7, #16]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d011      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	3328      	adds	r3, #40	@ 0x28
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fbca 	bl	8006964 <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	2100      	movs	r1, #0
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d011      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	3328      	adds	r3, #40	@ 0x28
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fbaa 	bl	8006964 <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	2100      	movs	r1, #0
 8006230:	6039      	str	r1, [r7, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	e9d7 1200 	ldrd	r1, r2, [r7]
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d011      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	3328      	adds	r3, #40	@ 0x28
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fb8a 	bl	8006964 <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006266:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006280:	58024400 	.word	0x58024400

08006284 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006288:	f7fe fd96 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4904      	ldr	r1, [pc, #16]	@ (80062ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	58024400 	.word	0x58024400
 80062ac:	08009684 	.word	0x08009684

080062b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	@ 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80062c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	0b1b      	lsrs	r3, r3, #12
 80062c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062da:	4b99      	ldr	r3, [pc, #612]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	08db      	lsrs	r3, r3, #3
 80062e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8111 	beq.w	8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b02      	cmp	r3, #2
 8006302:	f000 8083 	beq.w	800640c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b02      	cmp	r3, #2
 800630a:	f200 80a1 	bhi.w	8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d056      	beq.n	80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800631a:	e099      	b.n	8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800631c:	4b88      	ldr	r3, [pc, #544]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02d      	beq.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006328:	4b85      	ldr	r3, [pc, #532]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	08db      	lsrs	r3, r3, #3
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	4a84      	ldr	r2, [pc, #528]	@ (8006544 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
 8006338:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b7b      	ldr	r3, [pc, #492]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a03 	vldr	s12, [r7, #12]
 8006366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006382:	e087      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800654c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b6a      	ldr	r3, [pc, #424]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c6:	e065      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063da:	4b59      	ldr	r3, [pc, #356]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800640a:	e043      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800641a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641e:	4b48      	ldr	r3, [pc, #288]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800643a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644e:	e021      	b.n	8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800645e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006462:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	ed97 6a03 	vldr	s12, [r7, #12]
 8006476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800647a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006492:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006494:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	0a5b      	lsrs	r3, r3, #9
 800649a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ba:	ee17 2a90 	vmov	r2, s15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80064c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 2a90 	vmov	r2, s15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	0e1b      	lsrs	r3, r3, #24
 80064f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650a:	edd7 6a07 	vldr	s13, [r7, #28]
 800650e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	ee17 2a90 	vmov	r2, s15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800651e:	e008      	b.n	8006532 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
}
 8006532:	bf00      	nop
 8006534:	3724      	adds	r7, #36	@ 0x24
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
 8006544:	03d09000 	.word	0x03d09000
 8006548:	46000000 	.word	0x46000000
 800654c:	4c742400 	.word	0x4c742400
 8006550:	4a742400 	.word	0x4a742400
 8006554:	4bbebc20 	.word	0x4bbebc20

08006558 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006558:	b480      	push	{r7}
 800655a:	b089      	sub	sp, #36	@ 0x24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006560:	4ba1      	ldr	r3, [pc, #644]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800656a:	4b9f      	ldr	r3, [pc, #636]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	0d1b      	lsrs	r3, r3, #20
 8006570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006574:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006576:	4b9c      	ldr	r3, [pc, #624]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006582:	4b99      	ldr	r3, [pc, #612]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8111 	beq.w	80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	f000 8083 	beq.w	80066b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	f200 80a1 	bhi.w	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d056      	beq.n	8006670 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065c2:	e099      	b.n	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c4:	4b88      	ldr	r3, [pc, #544]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d02d      	beq.n	800662c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d0:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	08db      	lsrs	r3, r3, #3
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	4a84      	ldr	r2, [pc, #528]	@ (80067ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
 80065e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b7b      	ldr	r3, [pc, #492]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a03 	vldr	s12, [r7, #12]
 800660e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800662a:	e087      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663e:	4b6a      	ldr	r3, [pc, #424]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006652:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800666e:	e065      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006682:	4b59      	ldr	r3, [pc, #356]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	ed97 6a03 	vldr	s12, [r7, #12]
 8006696:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066b2:	e043      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b48      	ldr	r3, [pc, #288]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f6:	e021      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b37      	ldr	r3, [pc, #220]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a03 	vldr	s12, [r7, #12]
 800671e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800673c:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	0a5b      	lsrs	r3, r3, #9
 8006742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006756:	edd7 6a07 	vldr	s13, [r7, #28]
 800675a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800675e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006762:	ee17 2a90 	vmov	r2, s15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800676a:	4b1f      	ldr	r3, [pc, #124]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006784:	edd7 6a07 	vldr	s13, [r7, #28]
 8006788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006790:	ee17 2a90 	vmov	r2, s15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006798:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067be:	ee17 2a90 	vmov	r2, s15
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067c6:	e008      	b.n	80067da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	3724      	adds	r7, #36	@ 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	46000000 	.word	0x46000000
 80067f4:	4c742400 	.word	0x4c742400
 80067f8:	4a742400 	.word	0x4a742400
 80067fc:	4bbebc20 	.word	0x4bbebc20

08006800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800680e:	4b53      	ldr	r3, [pc, #332]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d101      	bne.n	800681e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e099      	b.n	8006952 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800681e:	4b4f      	ldr	r3, [pc, #316]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a4e      	ldr	r2, [pc, #312]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006824:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682a:	f7fb fe3f 	bl	80024ac <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006830:	e008      	b.n	8006844 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006832:	f7fb fe3b 	bl	80024ac <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e086      	b.n	8006952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006844:	4b45      	ldr	r3, [pc, #276]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006850:	4b42      	ldr	r3, [pc, #264]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	031b      	lsls	r3, r3, #12
 800685e:	493f      	ldr	r1, [pc, #252]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	628b      	str	r3, [r1, #40]	@ 0x28
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	3b01      	subs	r3, #1
 800686a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	025b      	lsls	r3, r3, #9
 8006876:	b29b      	uxth	r3, r3
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	3b01      	subs	r3, #1
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	3b01      	subs	r3, #1
 800688e:	061b      	lsls	r3, r3, #24
 8006890:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006894:	4931      	ldr	r1, [pc, #196]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800689a:	4b30      	ldr	r3, [pc, #192]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	492d      	ldr	r1, [pc, #180]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068ac:	4b2b      	ldr	r3, [pc, #172]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f023 0220 	bic.w	r2, r3, #32
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	4928      	ldr	r1, [pc, #160]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068be:	4b27      	ldr	r3, [pc, #156]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	4a26      	ldr	r2, [pc, #152]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068c4:	f023 0310 	bic.w	r3, r3, #16
 80068c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068ca:	4b24      	ldr	r3, [pc, #144]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ce:	4b24      	ldr	r3, [pc, #144]	@ (8006960 <RCCEx_PLL2_Config+0x160>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	69d2      	ldr	r2, [r2, #28]
 80068d6:	00d2      	lsls	r2, r2, #3
 80068d8:	4920      	ldr	r1, [pc, #128]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068de:	4b1f      	ldr	r3, [pc, #124]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068e4:	f043 0310 	orr.w	r3, r3, #16
 80068e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068f0:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	4a19      	ldr	r2, [pc, #100]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068fc:	e00f      	b.n	800691e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d106      	bne.n	8006912 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006904:	4b15      	ldr	r3, [pc, #84]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a14      	ldr	r2, [pc, #80]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 800690a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800690e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006910:	e005      	b.n	800691e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	4a11      	ldr	r2, [pc, #68]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800691c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800691e:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a0e      	ldr	r2, [pc, #56]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692a:	f7fb fdbf 	bl	80024ac <HAL_GetTick>
 800692e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006930:	e008      	b.n	8006944 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006932:	f7fb fdbb 	bl	80024ac <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e006      	b.n	8006952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	ffff0007 	.word	0xffff0007

08006964 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006972:	4b53      	ldr	r3, [pc, #332]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b03      	cmp	r3, #3
 800697c:	d101      	bne.n	8006982 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e099      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006982:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a4e      	ldr	r2, [pc, #312]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698e:	f7fb fd8d 	bl	80024ac <HAL_GetTick>
 8006992:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006994:	e008      	b.n	80069a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006996:	f7fb fd89 	bl	80024ac <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e086      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069a8:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069b4:	4b42      	ldr	r3, [pc, #264]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	051b      	lsls	r3, r3, #20
 80069c2:	493f      	ldr	r1, [pc, #252]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	b29b      	uxth	r3, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069f8:	4931      	ldr	r1, [pc, #196]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069fe:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	492d      	ldr	r1, [pc, #180]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a10:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	4928      	ldr	r1, [pc, #160]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a22:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a32:	4b24      	ldr	r3, [pc, #144]	@ (8006ac4 <RCCEx_PLL3_Config+0x160>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	69d2      	ldr	r2, [r2, #28]
 8006a3a:	00d2      	lsls	r2, r2, #3
 8006a3c:	4920      	ldr	r1, [pc, #128]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a42:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	4a19      	ldr	r2, [pc, #100]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a60:	e00f      	b.n	8006a82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d106      	bne.n	8006a76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a68:	4b15      	ldr	r3, [pc, #84]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a14      	ldr	r2, [pc, #80]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a74:	e005      	b.n	8006a82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a76:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	4a11      	ldr	r2, [pc, #68]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a0e      	ldr	r2, [pc, #56]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8e:	f7fb fd0d 	bl	80024ac <HAL_GetTick>
 8006a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a94:	e008      	b.n	8006aa8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a96:	f7fb fd09 	bl	80024ac <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e006      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	ffff0007 	.word	0xffff0007

08006ac8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e10f      	b.n	8006cfa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a87      	ldr	r2, [pc, #540]	@ (8006d04 <HAL_SPI_Init+0x23c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <HAL_SPI_Init+0x42>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a86      	ldr	r2, [pc, #536]	@ (8006d08 <HAL_SPI_Init+0x240>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00a      	beq.n	8006b0a <HAL_SPI_Init+0x42>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a84      	ldr	r2, [pc, #528]	@ (8006d0c <HAL_SPI_Init+0x244>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d005      	beq.n	8006b0a <HAL_SPI_Init+0x42>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d901      	bls.n	8006b0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0f7      	b.n	8006cfa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fe2e 	bl	800776c <SPI_GetPacketSize>
 8006b10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7b      	ldr	r2, [pc, #492]	@ (8006d04 <HAL_SPI_Init+0x23c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00c      	beq.n	8006b36 <HAL_SPI_Init+0x6e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a79      	ldr	r2, [pc, #484]	@ (8006d08 <HAL_SPI_Init+0x240>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d007      	beq.n	8006b36 <HAL_SPI_Init+0x6e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a78      	ldr	r2, [pc, #480]	@ (8006d0c <HAL_SPI_Init+0x244>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d002      	beq.n	8006b36 <HAL_SPI_Init+0x6e>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d811      	bhi.n	8006b5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b3a:	4a72      	ldr	r2, [pc, #456]	@ (8006d04 <HAL_SPI_Init+0x23c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d009      	beq.n	8006b54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a70      	ldr	r2, [pc, #448]	@ (8006d08 <HAL_SPI_Init+0x240>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_SPI_Init+0x8c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8006d0c <HAL_SPI_Init+0x244>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d104      	bne.n	8006b5e <HAL_SPI_Init+0x96>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	d901      	bls.n	8006b5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e0cd      	b.n	8006cfa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fb f88a 	bl	8001c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ba4:	d119      	bne.n	8006bda <HAL_SPI_Init+0x112>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bae:	d103      	bne.n	8006bb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bc8:	d107      	bne.n	8006bda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <HAL_SPI_Init+0x13e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d90b      	bls.n	8006c06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e007      	b.n	8006c16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c28:	ea42 0103 	orr.w	r1, r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c76:	ea42 0103 	orr.w	r1, r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d113      	bne.n	8006cb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ca0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40013000 	.word	0x40013000
 8006d08:	40003800 	.word	0x40003800
 8006d0c:	40003c00 	.word	0x40003c00

08006d10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3320      	adds	r3, #32
 8006d26:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d28:	f7fb fbc0 	bl	80024ac <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d001      	beq.n	8006d3e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e1d1      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_SPI_Transmit+0x3a>
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e1c9      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_SPI_Transmit+0x4c>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e1c2      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2203      	movs	r2, #3
 8006d68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	88fa      	ldrh	r2, [r7, #6]
 8006d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	88fa      	ldrh	r2, [r7, #6]
 8006d86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006db4:	d108      	bne.n	8006dc8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e009      	b.n	8006ddc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006dda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b96      	ldr	r3, [pc, #600]	@ (800703c <HAL_SPI_Transmit+0x32c>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	88f9      	ldrh	r1, [r7, #6]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e08:	d107      	bne.n	8006e1a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d947      	bls.n	8006eb2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006e22:	e03f      	b.n	8006ea4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d114      	bne.n	8006e5c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e5a:	e023      	b.n	8006ea4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5c:	f7fb fb26 	bl	80024ac <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d803      	bhi.n	8006e74 <HAL_SPI_Transmit+0x164>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d102      	bne.n	8006e7a <HAL_SPI_Transmit+0x16a>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d114      	bne.n	8006ea4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fba8 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e11e      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1b9      	bne.n	8006e24 <HAL_SPI_Transmit+0x114>
 8006eb0:	e0f1      	b.n	8007096 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	f240 80e6 	bls.w	8007088 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006ebc:	e05d      	b.n	8006f7a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d132      	bne.n	8006f32 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d918      	bls.n	8006f0a <HAL_SPI_Transmit+0x1fa>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d014      	beq.n	8006f0a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b02      	subs	r3, #2
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006f08:	e037      	b.n	8006f7a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	1c9a      	adds	r2, r3, #2
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006f30:	e023      	b.n	8006f7a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f32:	f7fb fabb 	bl	80024ac <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d803      	bhi.n	8006f4a <HAL_SPI_Transmit+0x23a>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d102      	bne.n	8006f50 <HAL_SPI_Transmit+0x240>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d114      	bne.n	8006f7a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fb3d 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e0b3      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d19b      	bne.n	8006ebe <HAL_SPI_Transmit+0x1ae>
 8006f86:	e086      	b.n	8007096 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d154      	bne.n	8007040 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d918      	bls.n	8006fd4 <HAL_SPI_Transmit+0x2c4>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa6:	2b40      	cmp	r3, #64	@ 0x40
 8006fa8:	d914      	bls.n	8006fd4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006fd2:	e059      	b.n	8007088 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d917      	bls.n	8007010 <HAL_SPI_Transmit+0x300>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d013      	beq.n	8007010 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b02      	subs	r3, #2
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800700e:	e03b      	b.n	8007088 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3320      	adds	r3, #32
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800703a:	e025      	b.n	8007088 <HAL_SPI_Transmit+0x378>
 800703c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007040:	f7fb fa34 	bl	80024ac <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d803      	bhi.n	8007058 <HAL_SPI_Transmit+0x348>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d102      	bne.n	800705e <HAL_SPI_Transmit+0x34e>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d114      	bne.n	8007088 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fab6 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e02c      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	f47f af79 	bne.w	8006f88 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	2108      	movs	r1, #8
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fb35 	bl	8007710 <SPI_WaitOnFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fa87 	bl	80075d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80070e0:	2300      	movs	r3, #0
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop

080070ec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	b29b      	uxth	r3, r3
 8007104:	3301      	adds	r3, #1
 8007106:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3330      	adds	r3, #48	@ 0x30
 800710e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007110:	f7fb f9cc 	bl	80024ac <HAL_GetTick>
 8007114:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b01      	cmp	r3, #1
 8007120:	d001      	beq.n	8007126 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
 8007124:	e250      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Receive+0x46>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e248      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_SPI_Receive+0x58>
 8007140:	2302      	movs	r3, #2
 8007142:	e241      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2204      	movs	r2, #4
 8007150:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	88fa      	ldrh	r2, [r7, #6]
 8007166:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800719c:	d108      	bne.n	80071b0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e009      	b.n	80071c4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80071c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	4b95      	ldr	r3, [pc, #596]	@ (8007420 <HAL_SPI_Receive+0x334>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	88f9      	ldrh	r1, [r7, #6]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071f0:	d107      	bne.n	8007202 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d96c      	bls.n	80072e4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800720a:	e064      	b.n	80072d6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d114      	bne.n	800724c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800722a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800722c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007232:	1d1a      	adds	r2, r3, #4
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800724a:	e044      	b.n	80072d6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007252:	b29b      	uxth	r3, r3
 8007254:	8bfa      	ldrh	r2, [r7, #30]
 8007256:	429a      	cmp	r2, r3
 8007258:	d919      	bls.n	800728e <HAL_SPI_Receive+0x1a2>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d014      	beq.n	800728e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800726c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800726e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007274:	1d1a      	adds	r2, r3, #4
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800728c:	e023      	b.n	80072d6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728e:	f7fb f90d 	bl	80024ac <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d803      	bhi.n	80072a6 <HAL_SPI_Receive+0x1ba>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d102      	bne.n	80072ac <HAL_SPI_Receive+0x1c0>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d114      	bne.n	80072d6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f98f 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e178      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d194      	bne.n	800720c <HAL_SPI_Receive+0x120>
 80072e2:	e15e      	b.n	80075a2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	f240 8153 	bls.w	8007594 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80072ee:	e08f      	b.n	8007410 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d114      	bne.n	8007330 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	8812      	ldrh	r2, [r2, #0]
 800730e:	b292      	uxth	r2, r2
 8007310:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800732e:	e06f      	b.n	8007410 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007336:	b29b      	uxth	r3, r3
 8007338:	8bfa      	ldrh	r2, [r7, #30]
 800733a:	429a      	cmp	r2, r3
 800733c:	d924      	bls.n	8007388 <HAL_SPI_Receive+0x29c>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01f      	beq.n	8007388 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	8812      	ldrh	r2, [r2, #0]
 8007350:	b292      	uxth	r2, r2
 8007352:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	8812      	ldrh	r2, [r2, #0]
 8007366:	b292      	uxth	r2, r2
 8007368:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b02      	subs	r3, #2
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007386:	e043      	b.n	8007410 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	d119      	bne.n	80073c8 <HAL_SPI_Receive+0x2dc>
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d014      	beq.n	80073c8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	8812      	ldrh	r2, [r2, #0]
 80073a6:	b292      	uxth	r2, r2
 80073a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80073c6:	e023      	b.n	8007410 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c8:	f7fb f870 	bl	80024ac <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d803      	bhi.n	80073e0 <HAL_SPI_Receive+0x2f4>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d102      	bne.n	80073e6 <HAL_SPI_Receive+0x2fa>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d114      	bne.n	8007410 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f8f2 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0db      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f af69 	bne.w	80072f0 <HAL_SPI_Receive+0x204>
 800741e:	e0c0      	b.n	80075a2 <HAL_SPI_Receive+0x4b6>
 8007420:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b01      	cmp	r3, #1
 8007438:	d117      	bne.n	800746a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007468:	e094      	b.n	8007594 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007470:	b29b      	uxth	r3, r3
 8007472:	8bfa      	ldrh	r2, [r7, #30]
 8007474:	429a      	cmp	r2, r3
 8007476:	d946      	bls.n	8007506 <HAL_SPI_Receive+0x41a>
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d041      	beq.n	8007506 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b04      	subs	r3, #4
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007504:	e046      	b.n	8007594 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d81c      	bhi.n	800754c <HAL_SPI_Receive+0x460>
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800754a:	e023      	b.n	8007594 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800754c:	f7fa ffae 	bl	80024ac <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d803      	bhi.n	8007564 <HAL_SPI_Receive+0x478>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d102      	bne.n	800756a <HAL_SPI_Receive+0x47e>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d114      	bne.n	8007594 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f830 	bl	80075d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007576:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e019      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f af41 	bne.w	8007424 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f814 	bl	80075d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
  }
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0208 	orr.w	r2, r2, #8
 80075ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0210 	orr.w	r2, r2, #16
 80075fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0201 	bic.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6919      	ldr	r1, [r3, #16]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	4b3c      	ldr	r3, [pc, #240]	@ (800770c <SPI_CloseTransfer+0x13c>)
 800761c:	400b      	ands	r3, r1
 800761e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800762e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b04      	cmp	r3, #4
 800763a:	d014      	beq.n	8007666 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00f      	beq.n	8007666 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800764c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0220 	orr.w	r2, r2, #32
 8007664:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d014      	beq.n	800769c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00f      	beq.n	800769c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007682:	f043 0204 	orr.w	r2, r3, #4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800769a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ac:	f043 0201 	orr.w	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00f      	beq.n	80076f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076d6:	f043 0208 	orr.w	r2, r3, #8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	fffffc90 	.word	0xfffffc90

08007710 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007720:	e010      	b.n	8007744 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007722:	f7fa fec3 	bl	80024ac <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d803      	bhi.n	800773a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d102      	bne.n	8007740 <SPI_WaitOnFlagUntilTimeout+0x30>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e00f      	b.n	8007764 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695a      	ldr	r2, [r3, #20]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	429a      	cmp	r2, r3
 8007760:	d0df      	beq.n	8007722 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	3301      	adds	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	3307      	adds	r3, #7
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	fb02 f303 	mul.w	r3, r2, r3
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e042      	b.n	800783a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fac8 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	@ 0x24
 80077d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fee7 	bl	80085c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f97c 	bl	8007af0 <UART_SetConfig>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e01b      	b.n	800783a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ff66 	bl	8008704 <UART_CheckIdleState>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b08a      	sub	sp, #40	@ 0x28
 8007846:	af02      	add	r7, sp, #8
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007858:	2b20      	cmp	r3, #32
 800785a:	d17b      	bne.n	8007954 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_UART_Transmit+0x26>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e074      	b.n	8007956 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2221      	movs	r2, #33	@ 0x21
 8007878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800787c:	f7fa fe16 	bl	80024ac <HAL_GetTick>
 8007880:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	d108      	bne.n	80078ae <HAL_UART_Transmit+0x6c>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e003      	b.n	80078b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078b6:	e030      	b.n	800791a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2200      	movs	r2, #0
 80078c0:	2180      	movs	r1, #128	@ 0x80
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 ffc8 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e03d      	b.n	8007956 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	3302      	adds	r3, #2
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e007      	b.n	8007908 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1c8      	bne.n	80078b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	2140      	movs	r1, #64	@ 0x40
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 ff91 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	e000      	b.n	8007956 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007954:	2302      	movs	r3, #2
  }
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08a      	sub	sp, #40	@ 0x28
 8007962:	af02      	add	r7, sp, #8
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	603b      	str	r3, [r7, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007974:	2b20      	cmp	r3, #32
 8007976:	f040 80b5 	bne.w	8007ae4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_UART_Receive+0x28>
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0ad      	b.n	8007ae6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2222      	movs	r2, #34	@ 0x22
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079a0:	f7fa fd84 	bl	80024ac <HAL_GetTick>
 80079a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079be:	d10e      	bne.n	80079de <HAL_UART_Receive+0x80>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_UART_Receive+0x76>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80079ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079d2:	e02d      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	22ff      	movs	r2, #255	@ 0xff
 80079d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079dc:	e028      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10d      	bne.n	8007a02 <HAL_UART_Receive+0xa4>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <HAL_UART_Receive+0x9a>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	22ff      	movs	r2, #255	@ 0xff
 80079f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079f6:	e01b      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	227f      	movs	r2, #127	@ 0x7f
 80079fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a00:	e016      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a0a:	d10d      	bne.n	8007a28 <HAL_UART_Receive+0xca>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_UART_Receive+0xc0>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	227f      	movs	r2, #127	@ 0x7f
 8007a18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a1c:	e008      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	223f      	movs	r2, #63	@ 0x3f
 8007a22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a26:	e003      	b.n	8007a30 <HAL_UART_Receive+0xd2>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a40:	d108      	bne.n	8007a54 <HAL_UART_Receive+0xf6>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e003      	b.n	8007a5c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a5c:	e036      	b.n	8007acc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	2120      	movs	r1, #32
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fef5 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e032      	b.n	8007ae6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10c      	bne.n	8007aa0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	8a7b      	ldrh	r3, [r7, #18]
 8007a90:	4013      	ands	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	e00c      	b.n	8007aba <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	8a7b      	ldrh	r3, [r7, #18]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	4013      	ands	r3, r2
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1c2      	bne.n	8007a5e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e000      	b.n	8007ae6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007ae4:	2302      	movs	r3, #2
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3720      	adds	r7, #32
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007af4:	b092      	sub	sp, #72	@ 0x48
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4bbe      	ldr	r3, [pc, #760]	@ (8007e18 <UART_SetConfig+0x328>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4ab3      	ldr	r2, [pc, #716]	@ (8007e1c <UART_SetConfig+0x32c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	4baf      	ldr	r3, [pc, #700]	@ (8007e20 <UART_SetConfig+0x330>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	f023 010f 	bic.w	r1, r3, #15
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4aa6      	ldr	r2, [pc, #664]	@ (8007e24 <UART_SetConfig+0x334>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d177      	bne.n	8007c80 <UART_SetConfig+0x190>
 8007b90:	4ba5      	ldr	r3, [pc, #660]	@ (8007e28 <UART_SetConfig+0x338>)
 8007b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b98:	2b28      	cmp	r3, #40	@ 0x28
 8007b9a:	d86d      	bhi.n	8007c78 <UART_SetConfig+0x188>
 8007b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <UART_SetConfig+0xb4>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007c49 	.word	0x08007c49
 8007ba8:	08007c79 	.word	0x08007c79
 8007bac:	08007c79 	.word	0x08007c79
 8007bb0:	08007c79 	.word	0x08007c79
 8007bb4:	08007c79 	.word	0x08007c79
 8007bb8:	08007c79 	.word	0x08007c79
 8007bbc:	08007c79 	.word	0x08007c79
 8007bc0:	08007c79 	.word	0x08007c79
 8007bc4:	08007c51 	.word	0x08007c51
 8007bc8:	08007c79 	.word	0x08007c79
 8007bcc:	08007c79 	.word	0x08007c79
 8007bd0:	08007c79 	.word	0x08007c79
 8007bd4:	08007c79 	.word	0x08007c79
 8007bd8:	08007c79 	.word	0x08007c79
 8007bdc:	08007c79 	.word	0x08007c79
 8007be0:	08007c79 	.word	0x08007c79
 8007be4:	08007c59 	.word	0x08007c59
 8007be8:	08007c79 	.word	0x08007c79
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007c79 	.word	0x08007c79
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c79 	.word	0x08007c79
 8007bfc:	08007c79 	.word	0x08007c79
 8007c00:	08007c79 	.word	0x08007c79
 8007c04:	08007c61 	.word	0x08007c61
 8007c08:	08007c79 	.word	0x08007c79
 8007c0c:	08007c79 	.word	0x08007c79
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c79 	.word	0x08007c79
 8007c1c:	08007c79 	.word	0x08007c79
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c79 	.word	0x08007c79
 8007c2c:	08007c79 	.word	0x08007c79
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	08007c79 	.word	0x08007c79
 8007c3c:	08007c79 	.word	0x08007c79
 8007c40:	08007c79 	.word	0x08007c79
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e222      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e21e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e21a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e216      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e212      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c70:	2340      	movs	r3, #64	@ 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e20e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c78:	2380      	movs	r3, #128	@ 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e20a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a69      	ldr	r2, [pc, #420]	@ (8007e2c <UART_SetConfig+0x33c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d130      	bne.n	8007cec <UART_SetConfig+0x1fc>
 8007c8a:	4b67      	ldr	r3, [pc, #412]	@ (8007e28 <UART_SetConfig+0x338>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d826      	bhi.n	8007ce4 <UART_SetConfig+0x1f4>
 8007c96:	a201      	add	r2, pc, #4	@ (adr r2, 8007c9c <UART_SetConfig+0x1ac>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e1ec      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e1e8      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e1e4      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e1e0      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e1dc      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007cdc:	2340      	movs	r3, #64	@ 0x40
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e1d8      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e1d4      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8007e30 <UART_SetConfig+0x340>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d130      	bne.n	8007d58 <UART_SetConfig+0x268>
 8007cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8007e28 <UART_SetConfig+0x338>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d826      	bhi.n	8007d50 <UART_SetConfig+0x260>
 8007d02:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <UART_SetConfig+0x218>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e1b6      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e1b2      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e1ae      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e1aa      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e1a6      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d48:	2340      	movs	r3, #64	@ 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e1a2      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e19e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a35      	ldr	r2, [pc, #212]	@ (8007e34 <UART_SetConfig+0x344>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d130      	bne.n	8007dc4 <UART_SetConfig+0x2d4>
 8007d62:	4b31      	ldr	r3, [pc, #196]	@ (8007e28 <UART_SetConfig+0x338>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d826      	bhi.n	8007dbc <UART_SetConfig+0x2cc>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x284>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e180      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e17c      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e178      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e174      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007dac:	2320      	movs	r3, #32
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e170      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007db4:	2340      	movs	r3, #64	@ 0x40
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e16c      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e168      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e38 <UART_SetConfig+0x348>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d142      	bne.n	8007e54 <UART_SetConfig+0x364>
 8007dce:	4b16      	ldr	r3, [pc, #88]	@ (8007e28 <UART_SetConfig+0x338>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d838      	bhi.n	8007e4c <UART_SetConfig+0x35c>
 8007dda:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0x2f0>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e09 	.word	0x08007e09
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e3d 	.word	0x08007e3d
 8007df4:	08007e45 	.word	0x08007e45
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e14a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e146      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e142      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e13e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e18:	cfff69f3 	.word	0xcfff69f3
 8007e1c:	58000c00 	.word	0x58000c00
 8007e20:	11fff4ff 	.word	0x11fff4ff
 8007e24:	40011000 	.word	0x40011000
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	40004400 	.word	0x40004400
 8007e30:	40004800 	.word	0x40004800
 8007e34:	40004c00 	.word	0x40004c00
 8007e38:	40005000 	.word	0x40005000
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e128      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e44:	2340      	movs	r3, #64	@ 0x40
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e124      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e4c:	2380      	movs	r3, #128	@ 0x80
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e120      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4acb      	ldr	r2, [pc, #812]	@ (8008188 <UART_SetConfig+0x698>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d176      	bne.n	8007f4c <UART_SetConfig+0x45c>
 8007e5e:	4bcb      	ldr	r3, [pc, #812]	@ (800818c <UART_SetConfig+0x69c>)
 8007e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e66:	2b28      	cmp	r3, #40	@ 0x28
 8007e68:	d86c      	bhi.n	8007f44 <UART_SetConfig+0x454>
 8007e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <UART_SetConfig+0x380>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f45 	.word	0x08007f45
 8007e78:	08007f45 	.word	0x08007f45
 8007e7c:	08007f45 	.word	0x08007f45
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f45 	.word	0x08007f45
 8007e88:	08007f45 	.word	0x08007f45
 8007e8c:	08007f45 	.word	0x08007f45
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f45 	.word	0x08007f45
 8007e98:	08007f45 	.word	0x08007f45
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f45 	.word	0x08007f45
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f45 	.word	0x08007f45
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f45 	.word	0x08007f45
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f45 	.word	0x08007f45
 8007ed8:	08007f45 	.word	0x08007f45
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f35 	.word	0x08007f35
 8007ef4:	08007f45 	.word	0x08007f45
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1a:	e0bc      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f22:	e0b8      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e0b4      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e0b0      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e0ac      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f3c:	2340      	movs	r3, #64	@ 0x40
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e0a8      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f44:	2380      	movs	r3, #128	@ 0x80
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e0a4      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a8f      	ldr	r2, [pc, #572]	@ (8008190 <UART_SetConfig+0x6a0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d130      	bne.n	8007fb8 <UART_SetConfig+0x4c8>
 8007f56:	4b8d      	ldr	r3, [pc, #564]	@ (800818c <UART_SetConfig+0x69c>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d826      	bhi.n	8007fb0 <UART_SetConfig+0x4c0>
 8007f62:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <UART_SetConfig+0x478>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f91 	.word	0x08007f91
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e086      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e082      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e07e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e07a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e076      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007fa8:	2340      	movs	r3, #64	@ 0x40
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e072      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007fb0:	2380      	movs	r3, #128	@ 0x80
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb6:	e06e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a75      	ldr	r2, [pc, #468]	@ (8008194 <UART_SetConfig+0x6a4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d130      	bne.n	8008024 <UART_SetConfig+0x534>
 8007fc2:	4b72      	ldr	r3, [pc, #456]	@ (800818c <UART_SetConfig+0x69c>)
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d826      	bhi.n	800801c <UART_SetConfig+0x52c>
 8007fce:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd4 <UART_SetConfig+0x4e4>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fed 	.word	0x08007fed
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e050      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e04c      	b.n	8008096 <UART_SetConfig+0x5a6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e048      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e044      	b.n	8008096 <UART_SetConfig+0x5a6>
 800800c:	2320      	movs	r3, #32
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e040      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008014:	2340      	movs	r3, #64	@ 0x40
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801a:	e03c      	b.n	8008096 <UART_SetConfig+0x5a6>
 800801c:	2380      	movs	r3, #128	@ 0x80
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008022:	e038      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a5b      	ldr	r2, [pc, #364]	@ (8008198 <UART_SetConfig+0x6a8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d130      	bne.n	8008090 <UART_SetConfig+0x5a0>
 800802e:	4b57      	ldr	r3, [pc, #348]	@ (800818c <UART_SetConfig+0x69c>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b05      	cmp	r3, #5
 8008038:	d826      	bhi.n	8008088 <UART_SetConfig+0x598>
 800803a:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <UART_SetConfig+0x550>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008059 	.word	0x08008059
 8008044:	08008061 	.word	0x08008061
 8008048:	08008069 	.word	0x08008069
 800804c:	08008071 	.word	0x08008071
 8008050:	08008079 	.word	0x08008079
 8008054:	08008081 	.word	0x08008081
 8008058:	2302      	movs	r3, #2
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e01a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e016      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e012      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e00e      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008078:	2320      	movs	r3, #32
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e00a      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008080:	2340      	movs	r3, #64	@ 0x40
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008086:	e006      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008088:	2380      	movs	r3, #128	@ 0x80
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808e:	e002      	b.n	8008096 <UART_SetConfig+0x5a6>
 8008090:	2380      	movs	r3, #128	@ 0x80
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a3f      	ldr	r2, [pc, #252]	@ (8008198 <UART_SetConfig+0x6a8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	f040 80f8 	bne.w	8008292 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	dc46      	bgt.n	8008138 <UART_SetConfig+0x648>
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f2c0 8082 	blt.w	80081b4 <UART_SetConfig+0x6c4>
 80080b0:	3b02      	subs	r3, #2
 80080b2:	2b1e      	cmp	r3, #30
 80080b4:	d87e      	bhi.n	80081b4 <UART_SetConfig+0x6c4>
 80080b6:	a201      	add	r2, pc, #4	@ (adr r2, 80080bc <UART_SetConfig+0x5cc>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	0800813f 	.word	0x0800813f
 80080c0:	080081b5 	.word	0x080081b5
 80080c4:	08008147 	.word	0x08008147
 80080c8:	080081b5 	.word	0x080081b5
 80080cc:	080081b5 	.word	0x080081b5
 80080d0:	080081b5 	.word	0x080081b5
 80080d4:	08008157 	.word	0x08008157
 80080d8:	080081b5 	.word	0x080081b5
 80080dc:	080081b5 	.word	0x080081b5
 80080e0:	080081b5 	.word	0x080081b5
 80080e4:	080081b5 	.word	0x080081b5
 80080e8:	080081b5 	.word	0x080081b5
 80080ec:	080081b5 	.word	0x080081b5
 80080f0:	080081b5 	.word	0x080081b5
 80080f4:	08008167 	.word	0x08008167
 80080f8:	080081b5 	.word	0x080081b5
 80080fc:	080081b5 	.word	0x080081b5
 8008100:	080081b5 	.word	0x080081b5
 8008104:	080081b5 	.word	0x080081b5
 8008108:	080081b5 	.word	0x080081b5
 800810c:	080081b5 	.word	0x080081b5
 8008110:	080081b5 	.word	0x080081b5
 8008114:	080081b5 	.word	0x080081b5
 8008118:	080081b5 	.word	0x080081b5
 800811c:	080081b5 	.word	0x080081b5
 8008120:	080081b5 	.word	0x080081b5
 8008124:	080081b5 	.word	0x080081b5
 8008128:	080081b5 	.word	0x080081b5
 800812c:	080081b5 	.word	0x080081b5
 8008130:	080081b5 	.word	0x080081b5
 8008134:	080081a7 	.word	0x080081a7
 8008138:	2b40      	cmp	r3, #64	@ 0x40
 800813a:	d037      	beq.n	80081ac <UART_SetConfig+0x6bc>
 800813c:	e03a      	b.n	80081b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800813e:	f7fe f8a1 	bl	8006284 <HAL_RCCEx_GetD3PCLK1Freq>
 8008142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008144:	e03c      	b.n	80081c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe f8b0 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e034      	b.n	80081c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 0318 	add.w	r3, r7, #24
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe f9fc 	bl	8006558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008164:	e02c      	b.n	80081c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008166:	4b09      	ldr	r3, [pc, #36]	@ (800818c <UART_SetConfig+0x69c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d016      	beq.n	80081a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008172:	4b06      	ldr	r3, [pc, #24]	@ (800818c <UART_SetConfig+0x69c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a07      	ldr	r2, [pc, #28]	@ (800819c <UART_SetConfig+0x6ac>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008184:	e01c      	b.n	80081c0 <UART_SetConfig+0x6d0>
 8008186:	bf00      	nop
 8008188:	40011400 	.word	0x40011400
 800818c:	58024400 	.word	0x58024400
 8008190:	40007800 	.word	0x40007800
 8008194:	40007c00 	.word	0x40007c00
 8008198:	58000c00 	.word	0x58000c00
 800819c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80081a0:	4b9d      	ldr	r3, [pc, #628]	@ (8008418 <UART_SetConfig+0x928>)
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e00c      	b.n	80081c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081a6:	4b9d      	ldr	r3, [pc, #628]	@ (800841c <UART_SetConfig+0x92c>)
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081aa:	e009      	b.n	80081c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b2:	e005      	b.n	80081c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 81de 	beq.w	8008584 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	4a94      	ldr	r2, [pc, #592]	@ (8008420 <UART_SetConfig+0x930>)
 80081ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	4413      	add	r3, r2
 80081e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d305      	bcc.n	80081f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081fe:	e1c1      	b.n	8008584 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008202:	2200      	movs	r2, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	60fa      	str	r2, [r7, #12]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	4a84      	ldr	r2, [pc, #528]	@ (8008420 <UART_SetConfig+0x930>)
 800820e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008212:	b29b      	uxth	r3, r3
 8008214:	2200      	movs	r2, #0
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008222:	f7f8 f8b5 	bl	8000390 <__aeabi_uldivmod>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	f04f 0200 	mov.w	r2, #0
 8008232:	f04f 0300 	mov.w	r3, #0
 8008236:	020b      	lsls	r3, r1, #8
 8008238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800823c:	0202      	lsls	r2, r0, #8
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	6849      	ldr	r1, [r1, #4]
 8008242:	0849      	lsrs	r1, r1, #1
 8008244:	2000      	movs	r0, #0
 8008246:	460c      	mov	r4, r1
 8008248:	4605      	mov	r5, r0
 800824a:	eb12 0804 	adds.w	r8, r2, r4
 800824e:	eb43 0905 	adc.w	r9, r3, r5
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	469a      	mov	sl, r3
 800825a:	4693      	mov	fp, r2
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 f894 	bl	8000390 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4613      	mov	r3, r2
 800826e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008276:	d308      	bcc.n	800828a <UART_SetConfig+0x79a>
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800827e:	d204      	bcs.n	800828a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e17c      	b.n	8008584 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008290:	e178      	b.n	8008584 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800829a:	f040 80c5 	bne.w	8008428 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800829e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	dc48      	bgt.n	8008338 <UART_SetConfig+0x848>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db7b      	blt.n	80083a2 <UART_SetConfig+0x8b2>
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d879      	bhi.n	80083a2 <UART_SetConfig+0x8b2>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <UART_SetConfig+0x7c4>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	0800833f 	.word	0x0800833f
 80082b8:	08008347 	.word	0x08008347
 80082bc:	080083a3 	.word	0x080083a3
 80082c0:	080083a3 	.word	0x080083a3
 80082c4:	0800834f 	.word	0x0800834f
 80082c8:	080083a3 	.word	0x080083a3
 80082cc:	080083a3 	.word	0x080083a3
 80082d0:	080083a3 	.word	0x080083a3
 80082d4:	0800835f 	.word	0x0800835f
 80082d8:	080083a3 	.word	0x080083a3
 80082dc:	080083a3 	.word	0x080083a3
 80082e0:	080083a3 	.word	0x080083a3
 80082e4:	080083a3 	.word	0x080083a3
 80082e8:	080083a3 	.word	0x080083a3
 80082ec:	080083a3 	.word	0x080083a3
 80082f0:	080083a3 	.word	0x080083a3
 80082f4:	0800836f 	.word	0x0800836f
 80082f8:	080083a3 	.word	0x080083a3
 80082fc:	080083a3 	.word	0x080083a3
 8008300:	080083a3 	.word	0x080083a3
 8008304:	080083a3 	.word	0x080083a3
 8008308:	080083a3 	.word	0x080083a3
 800830c:	080083a3 	.word	0x080083a3
 8008310:	080083a3 	.word	0x080083a3
 8008314:	080083a3 	.word	0x080083a3
 8008318:	080083a3 	.word	0x080083a3
 800831c:	080083a3 	.word	0x080083a3
 8008320:	080083a3 	.word	0x080083a3
 8008324:	080083a3 	.word	0x080083a3
 8008328:	080083a3 	.word	0x080083a3
 800832c:	080083a3 	.word	0x080083a3
 8008330:	080083a3 	.word	0x080083a3
 8008334:	08008395 	.word	0x08008395
 8008338:	2b40      	cmp	r3, #64	@ 0x40
 800833a:	d02e      	beq.n	800839a <UART_SetConfig+0x8aa>
 800833c:	e031      	b.n	80083a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833e:	f7fc fd6b 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8008342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008344:	e033      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008346:	f7fc fd7d 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 800834a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800834c:	e02f      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800834e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008352:	4618      	mov	r0, r3
 8008354:	f7fd ffac 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800835c:	e027      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800835e:	f107 0318 	add.w	r3, r7, #24
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe f8f8 	bl	8006558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800836c:	e01f      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800836e:	4b2d      	ldr	r3, [pc, #180]	@ (8008424 <UART_SetConfig+0x934>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800837a:	4b2a      	ldr	r3, [pc, #168]	@ (8008424 <UART_SetConfig+0x934>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	08db      	lsrs	r3, r3, #3
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	4a24      	ldr	r2, [pc, #144]	@ (8008418 <UART_SetConfig+0x928>)
 8008386:	fa22 f303 	lsr.w	r3, r2, r3
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800838c:	e00f      	b.n	80083ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800838e:	4b22      	ldr	r3, [pc, #136]	@ (8008418 <UART_SetConfig+0x928>)
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008392:	e00c      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008394:	4b21      	ldr	r3, [pc, #132]	@ (800841c <UART_SetConfig+0x92c>)
 8008396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008398:	e009      	b.n	80083ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800839a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a0:	e005      	b.n	80083ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80e7 	beq.w	8008584 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <UART_SetConfig+0x930>)
 80083bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c8:	005a      	lsls	r2, r3, #1
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	085b      	lsrs	r3, r3, #1
 80083d0:	441a      	add	r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083de:	2b0f      	cmp	r3, #15
 80083e0:	d916      	bls.n	8008410 <UART_SetConfig+0x920>
 80083e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e8:	d212      	bcs.n	8008410 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	f023 030f 	bic.w	r3, r3, #15
 80083f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	b29a      	uxth	r2, r3
 8008400:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008402:	4313      	orrs	r3, r2
 8008404:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	e0b9      	b.n	8008584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008416:	e0b5      	b.n	8008584 <UART_SetConfig+0xa94>
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	080096a4 	.word	0x080096a4
 8008424:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008428:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800842c:	2b20      	cmp	r3, #32
 800842e:	dc49      	bgt.n	80084c4 <UART_SetConfig+0x9d4>
 8008430:	2b00      	cmp	r3, #0
 8008432:	db7c      	blt.n	800852e <UART_SetConfig+0xa3e>
 8008434:	2b20      	cmp	r3, #32
 8008436:	d87a      	bhi.n	800852e <UART_SetConfig+0xa3e>
 8008438:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <UART_SetConfig+0x950>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	080084cb 	.word	0x080084cb
 8008444:	080084d3 	.word	0x080084d3
 8008448:	0800852f 	.word	0x0800852f
 800844c:	0800852f 	.word	0x0800852f
 8008450:	080084db 	.word	0x080084db
 8008454:	0800852f 	.word	0x0800852f
 8008458:	0800852f 	.word	0x0800852f
 800845c:	0800852f 	.word	0x0800852f
 8008460:	080084eb 	.word	0x080084eb
 8008464:	0800852f 	.word	0x0800852f
 8008468:	0800852f 	.word	0x0800852f
 800846c:	0800852f 	.word	0x0800852f
 8008470:	0800852f 	.word	0x0800852f
 8008474:	0800852f 	.word	0x0800852f
 8008478:	0800852f 	.word	0x0800852f
 800847c:	0800852f 	.word	0x0800852f
 8008480:	080084fb 	.word	0x080084fb
 8008484:	0800852f 	.word	0x0800852f
 8008488:	0800852f 	.word	0x0800852f
 800848c:	0800852f 	.word	0x0800852f
 8008490:	0800852f 	.word	0x0800852f
 8008494:	0800852f 	.word	0x0800852f
 8008498:	0800852f 	.word	0x0800852f
 800849c:	0800852f 	.word	0x0800852f
 80084a0:	0800852f 	.word	0x0800852f
 80084a4:	0800852f 	.word	0x0800852f
 80084a8:	0800852f 	.word	0x0800852f
 80084ac:	0800852f 	.word	0x0800852f
 80084b0:	0800852f 	.word	0x0800852f
 80084b4:	0800852f 	.word	0x0800852f
 80084b8:	0800852f 	.word	0x0800852f
 80084bc:	0800852f 	.word	0x0800852f
 80084c0:	08008521 	.word	0x08008521
 80084c4:	2b40      	cmp	r3, #64	@ 0x40
 80084c6:	d02e      	beq.n	8008526 <UART_SetConfig+0xa36>
 80084c8:	e031      	b.n	800852e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ca:	f7fc fca5 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 80084ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084d0:	e033      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084d2:	f7fc fcb7 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 80084d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084d8:	e02f      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fd fee6 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e8:	e027      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ea:	f107 0318 	add.w	r3, r7, #24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe f832 	bl	8006558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f8:	e01f      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084fa:	4b2d      	ldr	r3, [pc, #180]	@ (80085b0 <UART_SetConfig+0xac0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008506:	4b2a      	ldr	r3, [pc, #168]	@ (80085b0 <UART_SetConfig+0xac0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	08db      	lsrs	r3, r3, #3
 800850c:	f003 0303 	and.w	r3, r3, #3
 8008510:	4a28      	ldr	r2, [pc, #160]	@ (80085b4 <UART_SetConfig+0xac4>)
 8008512:	fa22 f303 	lsr.w	r3, r2, r3
 8008516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008518:	e00f      	b.n	800853a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800851a:	4b26      	ldr	r3, [pc, #152]	@ (80085b4 <UART_SetConfig+0xac4>)
 800851c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851e:	e00c      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008520:	4b25      	ldr	r3, [pc, #148]	@ (80085b8 <UART_SetConfig+0xac8>)
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e009      	b.n	800853a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852c:	e005      	b.n	800853a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008538:	bf00      	nop
    }

    if (pclk != 0U)
 800853a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d021      	beq.n	8008584 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008544:	4a1d      	ldr	r2, [pc, #116]	@ (80085bc <UART_SetConfig+0xacc>)
 8008546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800854a:	461a      	mov	r2, r3
 800854c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800854e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	441a      	add	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008562:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	2b0f      	cmp	r3, #15
 8008568:	d909      	bls.n	800857e <UART_SetConfig+0xa8e>
 800856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008570:	d205      	bcs.n	800857e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008574:	b29a      	uxth	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60da      	str	r2, [r3, #12]
 800857c:	e002      	b.n	8008584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2201      	movs	r2, #1
 8008590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2200      	movs	r2, #0
 8008598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2200      	movs	r2, #0
 800859e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3748      	adds	r7, #72	@ 0x48
 80085a8:	46bd      	mov	sp, r7
 80085aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ae:	bf00      	nop
 80085b0:	58024400 	.word	0x58024400
 80085b4:	03d09000 	.word	0x03d09000
 80085b8:	003d0900 	.word	0x003d0900
 80085bc:	080096a4 	.word	0x080096a4

080085c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01a      	beq.n	80086d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086be:	d10a      	bne.n	80086d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	605a      	str	r2, [r3, #4]
  }
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b098      	sub	sp, #96	@ 0x60
 8008708:	af02      	add	r7, sp, #8
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008714:	f7f9 feca 	bl	80024ac <HAL_GetTick>
 8008718:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b08      	cmp	r3, #8
 8008726:	d12f      	bne.n	8008788 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008730:	2200      	movs	r2, #0
 8008732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f88e 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d022      	beq.n	8008788 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008756:	653b      	str	r3, [r7, #80]	@ 0x50
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008760:	647b      	str	r3, [r7, #68]	@ 0x44
 8008762:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800876e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e063      	b.n	8008850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d149      	bne.n	800882a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008796:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800879e:	2200      	movs	r2, #0
 80087a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f857 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d03c      	beq.n	800882a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	623b      	str	r3, [r7, #32]
   return(result);
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80087d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 0301 	bic.w	r3, r3, #1
 80087f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008802:	61fa      	str	r2, [r7, #28]
 8008804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	69b9      	ldr	r1, [r7, #24]
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	617b      	str	r3, [r7, #20]
   return(result);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e5      	bne.n	80087e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e012      	b.n	8008850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3758      	adds	r7, #88	@ 0x58
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008868:	e04f      	b.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d04b      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7f9 fe1b 	bl	80024ac <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <UART_WaitOnFlagUntilTimeout+0x30>
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e04e      	b.n	800892a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	d037      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b80      	cmp	r3, #128	@ 0x80
 800889e:	d034      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b40      	cmp	r3, #64	@ 0x40
 80088a4:	d031      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d110      	bne.n	80088d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2208      	movs	r2, #8
 80088ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f839 	bl	8008934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2208      	movs	r2, #8
 80088c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e029      	b.n	800892a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088e4:	d111      	bne.n	800890a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f81f 	bl	8008934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e00f      	b.n	800892a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4013      	ands	r3, r2
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	429a      	cmp	r2, r3
 8008926:	d0a0      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b095      	sub	sp, #84	@ 0x54
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895a:	643b      	str	r3, [r7, #64]	@ 0x40
 800895c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e6      	bne.n	800893c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	61fb      	str	r3, [r7, #28]
   return(result);
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	4b1e      	ldr	r3, [pc, #120]	@ (80089fc <UART_EndRxTransfer+0xc8>)
 8008982:	4013      	ands	r3, r2
 8008984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800898e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e5      	bne.n	800896e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d118      	bne.n	80089dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f023 0310 	bic.w	r3, r3, #16
 80089be:	647b      	str	r3, [r7, #68]	@ 0x44
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6979      	ldr	r1, [r7, #20]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	613b      	str	r3, [r7, #16]
   return(result);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e6      	bne.n	80089aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089f0:	bf00      	nop
 80089f2:	3754      	adds	r7, #84	@ 0x54
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	effffffe 	.word	0xeffffffe

08008a00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d101      	bne.n	8008a16 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a12:	2302      	movs	r3, #2
 8008a14:	e027      	b.n	8008a66 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2224      	movs	r2, #36	@ 0x24
 8008a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0201 	bic.w	r2, r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e02d      	b.n	8008ae6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2224      	movs	r2, #36	@ 0x24
 8008a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0201 	bic.w	r2, r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f850 	bl	8008b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e02d      	b.n	8008b62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2224      	movs	r2, #36	@ 0x24
 8008b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0201 	bic.w	r2, r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f812 	bl	8008b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d108      	bne.n	8008b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b8c:	e031      	b.n	8008bf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b8e:	2310      	movs	r3, #16
 8008b90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b92:	2310      	movs	r3, #16
 8008b94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	0e5b      	lsrs	r3, r3, #25
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	0f5b      	lsrs	r3, r3, #29
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	7b3a      	ldrb	r2, [r7, #12]
 8008bba:	4911      	ldr	r1, [pc, #68]	@ (8008c00 <UARTEx_SetNbDataToProcess+0x94>)
 8008bbc:	5c8a      	ldrb	r2, [r1, r2]
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bc2:	7b3a      	ldrb	r2, [r7, #12]
 8008bc4:	490f      	ldr	r1, [pc, #60]	@ (8008c04 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	7b7a      	ldrb	r2, [r7, #13]
 8008bd8:	4909      	ldr	r1, [pc, #36]	@ (8008c00 <UARTEx_SetNbDataToProcess+0x94>)
 8008bda:	5c8a      	ldrb	r2, [r1, r2]
 8008bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008be0:	7b7a      	ldrb	r2, [r7, #13]
 8008be2:	4908      	ldr	r1, [pc, #32]	@ (8008c04 <UARTEx_SetNbDataToProcess+0x98>)
 8008be4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008bf2:	bf00      	nop
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	080096bc 	.word	0x080096bc
 8008c04:	080096c4 	.word	0x080096c4

08008c08 <_vsniprintf_r>:
 8008c08:	b530      	push	{r4, r5, lr}
 8008c0a:	4614      	mov	r4, r2
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	b09b      	sub	sp, #108	@ 0x6c
 8008c10:	4605      	mov	r5, r0
 8008c12:	461a      	mov	r2, r3
 8008c14:	da05      	bge.n	8008c22 <_vsniprintf_r+0x1a>
 8008c16:	238b      	movs	r3, #139	@ 0x8b
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1e:	b01b      	add	sp, #108	@ 0x6c
 8008c20:	bd30      	pop	{r4, r5, pc}
 8008c22:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c26:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c30:	bf14      	ite	ne
 8008c32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c36:	4623      	moveq	r3, r4
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c40:	9100      	str	r1, [sp, #0]
 8008c42:	9104      	str	r1, [sp, #16]
 8008c44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008c48:	4669      	mov	r1, sp
 8008c4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008c4c:	f000 f9ae 	bl	8008fac <_svfiprintf_r>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	bfbc      	itt	lt
 8008c54:	238b      	movlt	r3, #139	@ 0x8b
 8008c56:	602b      	strlt	r3, [r5, #0]
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	d0e0      	beq.n	8008c1e <_vsniprintf_r+0x16>
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	e7dc      	b.n	8008c1e <_vsniprintf_r+0x16>

08008c64 <vsniprintf>:
 8008c64:	b507      	push	{r0, r1, r2, lr}
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4803      	ldr	r0, [pc, #12]	@ (8008c7c <vsniprintf+0x18>)
 8008c70:	6800      	ldr	r0, [r0, #0]
 8008c72:	f7ff ffc9 	bl	8008c08 <_vsniprintf_r>
 8008c76:	b003      	add	sp, #12
 8008c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c7c:	24000010 	.word	0x24000010

08008c80 <memset>:
 8008c80:	4402      	add	r2, r0
 8008c82:	4603      	mov	r3, r0
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d100      	bne.n	8008c8a <memset+0xa>
 8008c88:	4770      	bx	lr
 8008c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8e:	e7f9      	b.n	8008c84 <memset+0x4>

08008c90 <__errno>:
 8008c90:	4b01      	ldr	r3, [pc, #4]	@ (8008c98 <__errno+0x8>)
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	24000010 	.word	0x24000010

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	@ (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f000 fc64 	bl	800957c <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	08009708 	.word	0x08009708
 8008cd8:	08009708 	.word	0x08009708
 8008cdc:	08009708 	.word	0x08009708
 8008ce0:	0800970c 	.word	0x0800970c

08008ce4 <__retarget_lock_acquire_recursive>:
 8008ce4:	4770      	bx	lr

08008ce6 <__retarget_lock_release_recursive>:
 8008ce6:	4770      	bx	lr

08008ce8 <memcpy>:
 8008ce8:	440a      	add	r2, r1
 8008cea:	4291      	cmp	r1, r2
 8008cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf0:	d100      	bne.n	8008cf4 <memcpy+0xc>
 8008cf2:	4770      	bx	lr
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfe:	4291      	cmp	r1, r2
 8008d00:	d1f9      	bne.n	8008cf6 <memcpy+0xe>
 8008d02:	bd10      	pop	{r4, pc}

08008d04 <_free_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d041      	beq.n	8008d90 <_free_r+0x8c>
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f0c      	subs	r4, r1, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfb8      	it	lt
 8008d16:	18e4      	addlt	r4, r4, r3
 8008d18:	f000 f8e0 	bl	8008edc <__malloc_lock>
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <_free_r+0x90>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	b933      	cbnz	r3, 8008d30 <_free_r+0x2c>
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	6014      	str	r4, [r2, #0]
 8008d26:	4628      	mov	r0, r5
 8008d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2c:	f000 b8dc 	b.w	8008ee8 <__malloc_unlock>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d908      	bls.n	8008d46 <_free_r+0x42>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	1821      	adds	r1, r4, r0
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf01      	itttt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	1809      	addeq	r1, r1, r0
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	e7ed      	b.n	8008d22 <_free_r+0x1e>
 8008d46:	461a      	mov	r2, r3
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	b10b      	cbz	r3, 8008d50 <_free_r+0x4c>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d9fa      	bls.n	8008d46 <_free_r+0x42>
 8008d50:	6811      	ldr	r1, [r2, #0]
 8008d52:	1850      	adds	r0, r2, r1
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d10b      	bne.n	8008d70 <_free_r+0x6c>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	1850      	adds	r0, r2, r1
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	d1e0      	bne.n	8008d26 <_free_r+0x22>
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	6053      	str	r3, [r2, #4]
 8008d6a:	4408      	add	r0, r1
 8008d6c:	6010      	str	r0, [r2, #0]
 8008d6e:	e7da      	b.n	8008d26 <_free_r+0x22>
 8008d70:	d902      	bls.n	8008d78 <_free_r+0x74>
 8008d72:	230c      	movs	r3, #12
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	e7d6      	b.n	8008d26 <_free_r+0x22>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf04      	itt	eq
 8008d80:	6819      	ldreq	r1, [r3, #0]
 8008d82:	685b      	ldreq	r3, [r3, #4]
 8008d84:	6063      	str	r3, [r4, #4]
 8008d86:	bf04      	itt	eq
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	6054      	str	r4, [r2, #4]
 8008d8e:	e7ca      	b.n	8008d26 <_free_r+0x22>
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	240015e0 	.word	0x240015e0

08008d98 <sbrk_aligned>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008dd8 <sbrk_aligned+0x40>)
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	6831      	ldr	r1, [r6, #0]
 8008da0:	4605      	mov	r5, r0
 8008da2:	b911      	cbnz	r1, 8008daa <sbrk_aligned+0x12>
 8008da4:	f000 fba4 	bl	80094f0 <_sbrk_r>
 8008da8:	6030      	str	r0, [r6, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 fb9f 	bl	80094f0 <_sbrk_r>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d103      	bne.n	8008dbe <sbrk_aligned+0x26>
 8008db6:	f04f 34ff 	mov.w	r4, #4294967295
 8008dba:	4620      	mov	r0, r4
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	1cc4      	adds	r4, r0, #3
 8008dc0:	f024 0403 	bic.w	r4, r4, #3
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d0f8      	beq.n	8008dba <sbrk_aligned+0x22>
 8008dc8:	1a21      	subs	r1, r4, r0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 fb90 	bl	80094f0 <_sbrk_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d1f2      	bne.n	8008dba <sbrk_aligned+0x22>
 8008dd4:	e7ef      	b.n	8008db6 <sbrk_aligned+0x1e>
 8008dd6:	bf00      	nop
 8008dd8:	240015dc 	.word	0x240015dc

08008ddc <_malloc_r>:
 8008ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de0:	1ccd      	adds	r5, r1, #3
 8008de2:	f025 0503 	bic.w	r5, r5, #3
 8008de6:	3508      	adds	r5, #8
 8008de8:	2d0c      	cmp	r5, #12
 8008dea:	bf38      	it	cc
 8008dec:	250c      	movcc	r5, #12
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	4606      	mov	r6, r0
 8008df2:	db01      	blt.n	8008df8 <_malloc_r+0x1c>
 8008df4:	42a9      	cmp	r1, r5
 8008df6:	d904      	bls.n	8008e02 <_malloc_r+0x26>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ed8 <_malloc_r+0xfc>
 8008e06:	f000 f869 	bl	8008edc <__malloc_lock>
 8008e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e0e:	461c      	mov	r4, r3
 8008e10:	bb44      	cbnz	r4, 8008e64 <_malloc_r+0x88>
 8008e12:	4629      	mov	r1, r5
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbf 	bl	8008d98 <sbrk_aligned>
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	d158      	bne.n	8008ed2 <_malloc_r+0xf6>
 8008e20:	f8d8 4000 	ldr.w	r4, [r8]
 8008e24:	4627      	mov	r7, r4
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	d143      	bne.n	8008eb2 <_malloc_r+0xd6>
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	d04b      	beq.n	8008ec6 <_malloc_r+0xea>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	4639      	mov	r1, r7
 8008e32:	4630      	mov	r0, r6
 8008e34:	eb04 0903 	add.w	r9, r4, r3
 8008e38:	f000 fb5a 	bl	80094f0 <_sbrk_r>
 8008e3c:	4581      	cmp	r9, r0
 8008e3e:	d142      	bne.n	8008ec6 <_malloc_r+0xea>
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	1a6d      	subs	r5, r5, r1
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffa6 	bl	8008d98 <sbrk_aligned>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d03a      	beq.n	8008ec6 <_malloc_r+0xea>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	442b      	add	r3, r5
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	bb62      	cbnz	r2, 8008eb8 <_malloc_r+0xdc>
 8008e5e:	f8c8 7000 	str.w	r7, [r8]
 8008e62:	e00f      	b.n	8008e84 <_malloc_r+0xa8>
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	1b52      	subs	r2, r2, r5
 8008e68:	d420      	bmi.n	8008eac <_malloc_r+0xd0>
 8008e6a:	2a0b      	cmp	r2, #11
 8008e6c:	d917      	bls.n	8008e9e <_malloc_r+0xc2>
 8008e6e:	1961      	adds	r1, r4, r5
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	6025      	str	r5, [r4, #0]
 8008e74:	bf18      	it	ne
 8008e76:	6059      	strne	r1, [r3, #4]
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	bf08      	it	eq
 8008e7c:	f8c8 1000 	streq.w	r1, [r8]
 8008e80:	5162      	str	r2, [r4, r5]
 8008e82:	604b      	str	r3, [r1, #4]
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 f82f 	bl	8008ee8 <__malloc_unlock>
 8008e8a:	f104 000b 	add.w	r0, r4, #11
 8008e8e:	1d23      	adds	r3, r4, #4
 8008e90:	f020 0007 	bic.w	r0, r0, #7
 8008e94:	1ac2      	subs	r2, r0, r3
 8008e96:	bf1c      	itt	ne
 8008e98:	1a1b      	subne	r3, r3, r0
 8008e9a:	50a3      	strne	r3, [r4, r2]
 8008e9c:	e7af      	b.n	8008dfe <_malloc_r+0x22>
 8008e9e:	6862      	ldr	r2, [r4, #4]
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	bf0c      	ite	eq
 8008ea4:	f8c8 2000 	streq.w	r2, [r8]
 8008ea8:	605a      	strne	r2, [r3, #4]
 8008eaa:	e7eb      	b.n	8008e84 <_malloc_r+0xa8>
 8008eac:	4623      	mov	r3, r4
 8008eae:	6864      	ldr	r4, [r4, #4]
 8008eb0:	e7ae      	b.n	8008e10 <_malloc_r+0x34>
 8008eb2:	463c      	mov	r4, r7
 8008eb4:	687f      	ldr	r7, [r7, #4]
 8008eb6:	e7b6      	b.n	8008e26 <_malloc_r+0x4a>
 8008eb8:	461a      	mov	r2, r3
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	d1fb      	bne.n	8008eb8 <_malloc_r+0xdc>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6053      	str	r3, [r2, #4]
 8008ec4:	e7de      	b.n	8008e84 <_malloc_r+0xa8>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	6033      	str	r3, [r6, #0]
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f000 f80c 	bl	8008ee8 <__malloc_unlock>
 8008ed0:	e794      	b.n	8008dfc <_malloc_r+0x20>
 8008ed2:	6005      	str	r5, [r0, #0]
 8008ed4:	e7d6      	b.n	8008e84 <_malloc_r+0xa8>
 8008ed6:	bf00      	nop
 8008ed8:	240015e0 	.word	0x240015e0

08008edc <__malloc_lock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	@ (8008ee4 <__malloc_lock+0x8>)
 8008ede:	f7ff bf01 	b.w	8008ce4 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	240015d8 	.word	0x240015d8

08008ee8 <__malloc_unlock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__malloc_unlock+0x8>)
 8008eea:	f7ff befc 	b.w	8008ce6 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	240015d8 	.word	0x240015d8

08008ef4 <__ssputs_r>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	688e      	ldr	r6, [r1, #8]
 8008efa:	461f      	mov	r7, r3
 8008efc:	42be      	cmp	r6, r7
 8008efe:	680b      	ldr	r3, [r1, #0]
 8008f00:	4682      	mov	sl, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	4690      	mov	r8, r2
 8008f06:	d82d      	bhi.n	8008f64 <__ssputs_r+0x70>
 8008f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f10:	d026      	beq.n	8008f60 <__ssputs_r+0x6c>
 8008f12:	6965      	ldr	r5, [r4, #20]
 8008f14:	6909      	ldr	r1, [r1, #16]
 8008f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1a:	eba3 0901 	sub.w	r9, r3, r1
 8008f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f22:	1c7b      	adds	r3, r7, #1
 8008f24:	444b      	add	r3, r9
 8008f26:	106d      	asrs	r5, r5, #1
 8008f28:	429d      	cmp	r5, r3
 8008f2a:	bf38      	it	cc
 8008f2c:	461d      	movcc	r5, r3
 8008f2e:	0553      	lsls	r3, r2, #21
 8008f30:	d527      	bpl.n	8008f82 <__ssputs_r+0x8e>
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7ff ff52 	bl	8008ddc <_malloc_r>
 8008f38:	4606      	mov	r6, r0
 8008f3a:	b360      	cbz	r0, 8008f96 <__ssputs_r+0xa2>
 8008f3c:	6921      	ldr	r1, [r4, #16]
 8008f3e:	464a      	mov	r2, r9
 8008f40:	f7ff fed2 	bl	8008ce8 <memcpy>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	6126      	str	r6, [r4, #16]
 8008f52:	6165      	str	r5, [r4, #20]
 8008f54:	444e      	add	r6, r9
 8008f56:	eba5 0509 	sub.w	r5, r5, r9
 8008f5a:	6026      	str	r6, [r4, #0]
 8008f5c:	60a5      	str	r5, [r4, #8]
 8008f5e:	463e      	mov	r6, r7
 8008f60:	42be      	cmp	r6, r7
 8008f62:	d900      	bls.n	8008f66 <__ssputs_r+0x72>
 8008f64:	463e      	mov	r6, r7
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	f000 faa6 	bl	80094bc <memmove>
 8008f70:	68a3      	ldr	r3, [r4, #8]
 8008f72:	1b9b      	subs	r3, r3, r6
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4433      	add	r3, r6
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	462a      	mov	r2, r5
 8008f84:	f000 fac4 	bl	8009510 <_realloc_r>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1e0      	bne.n	8008f50 <__ssputs_r+0x5c>
 8008f8e:	6921      	ldr	r1, [r4, #16]
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7ff feb7 	bl	8008d04 <_free_r>
 8008f96:	230c      	movs	r3, #12
 8008f98:	f8ca 3000 	str.w	r3, [sl]
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e7e9      	b.n	8008f7e <__ssputs_r+0x8a>
	...

08008fac <_svfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	898b      	ldrh	r3, [r1, #12]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	b09d      	sub	sp, #116	@ 0x74
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	d510      	bpl.n	8008fe2 <_svfiprintf_r+0x36>
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	b973      	cbnz	r3, 8008fe2 <_svfiprintf_r+0x36>
 8008fc4:	2140      	movs	r1, #64	@ 0x40
 8008fc6:	f7ff ff09 	bl	8008ddc <_malloc_r>
 8008fca:	6028      	str	r0, [r5, #0]
 8008fcc:	6128      	str	r0, [r5, #16]
 8008fce:	b930      	cbnz	r0, 8008fde <_svfiprintf_r+0x32>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b01d      	add	sp, #116	@ 0x74
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	2340      	movs	r3, #64	@ 0x40
 8008fe0:	616b      	str	r3, [r5, #20]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff0:	2330      	movs	r3, #48	@ 0x30
 8008ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009190 <_svfiprintf_r+0x1e4>
 8008ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ffa:	f04f 0901 	mov.w	r9, #1
 8008ffe:	4623      	mov	r3, r4
 8009000:	469a      	mov	sl, r3
 8009002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009006:	b10a      	cbz	r2, 800900c <_svfiprintf_r+0x60>
 8009008:	2a25      	cmp	r2, #37	@ 0x25
 800900a:	d1f9      	bne.n	8009000 <_svfiprintf_r+0x54>
 800900c:	ebba 0b04 	subs.w	fp, sl, r4
 8009010:	d00b      	beq.n	800902a <_svfiprintf_r+0x7e>
 8009012:	465b      	mov	r3, fp
 8009014:	4622      	mov	r2, r4
 8009016:	4629      	mov	r1, r5
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ff6b 	bl	8008ef4 <__ssputs_r>
 800901e:	3001      	adds	r0, #1
 8009020:	f000 80a7 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009026:	445a      	add	r2, fp
 8009028:	9209      	str	r2, [sp, #36]	@ 0x24
 800902a:	f89a 3000 	ldrb.w	r3, [sl]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 809f 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009034:	2300      	movs	r3, #0
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903e:	f10a 0a01 	add.w	sl, sl, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800904a:	931a      	str	r3, [sp, #104]	@ 0x68
 800904c:	4654      	mov	r4, sl
 800904e:	2205      	movs	r2, #5
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	484e      	ldr	r0, [pc, #312]	@ (8009190 <_svfiprintf_r+0x1e4>)
 8009056:	f7f7 f94b 	bl	80002f0 <memchr>
 800905a:	9a04      	ldr	r2, [sp, #16]
 800905c:	b9d8      	cbnz	r0, 8009096 <_svfiprintf_r+0xea>
 800905e:	06d0      	lsls	r0, r2, #27
 8009060:	bf44      	itt	mi
 8009062:	2320      	movmi	r3, #32
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	0711      	lsls	r1, r2, #28
 800906a:	bf44      	itt	mi
 800906c:	232b      	movmi	r3, #43	@ 0x2b
 800906e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009072:	f89a 3000 	ldrb.w	r3, [sl]
 8009076:	2b2a      	cmp	r3, #42	@ 0x2a
 8009078:	d015      	beq.n	80090a6 <_svfiprintf_r+0xfa>
 800907a:	9a07      	ldr	r2, [sp, #28]
 800907c:	4654      	mov	r4, sl
 800907e:	2000      	movs	r0, #0
 8009080:	f04f 0c0a 	mov.w	ip, #10
 8009084:	4621      	mov	r1, r4
 8009086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908a:	3b30      	subs	r3, #48	@ 0x30
 800908c:	2b09      	cmp	r3, #9
 800908e:	d94b      	bls.n	8009128 <_svfiprintf_r+0x17c>
 8009090:	b1b0      	cbz	r0, 80090c0 <_svfiprintf_r+0x114>
 8009092:	9207      	str	r2, [sp, #28]
 8009094:	e014      	b.n	80090c0 <_svfiprintf_r+0x114>
 8009096:	eba0 0308 	sub.w	r3, r0, r8
 800909a:	fa09 f303 	lsl.w	r3, r9, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	46a2      	mov	sl, r4
 80090a4:	e7d2      	b.n	800904c <_svfiprintf_r+0xa0>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	1d19      	adds	r1, r3, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	9103      	str	r1, [sp, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbb      	ittet	lt
 80090b2:	425b      	neglt	r3, r3
 80090b4:	f042 0202 	orrlt.w	r2, r2, #2
 80090b8:	9307      	strge	r3, [sp, #28]
 80090ba:	9307      	strlt	r3, [sp, #28]
 80090bc:	bfb8      	it	lt
 80090be:	9204      	strlt	r2, [sp, #16]
 80090c0:	7823      	ldrb	r3, [r4, #0]
 80090c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c4:	d10a      	bne.n	80090dc <_svfiprintf_r+0x130>
 80090c6:	7863      	ldrb	r3, [r4, #1]
 80090c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ca:	d132      	bne.n	8009132 <_svfiprintf_r+0x186>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	9203      	str	r2, [sp, #12]
 80090d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d8:	3402      	adds	r4, #2
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091a0 <_svfiprintf_r+0x1f4>
 80090e0:	7821      	ldrb	r1, [r4, #0]
 80090e2:	2203      	movs	r2, #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	f7f7 f903 	bl	80002f0 <memchr>
 80090ea:	b138      	cbz	r0, 80090fc <_svfiprintf_r+0x150>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	eba0 000a 	sub.w	r0, r0, sl
 80090f2:	2240      	movs	r2, #64	@ 0x40
 80090f4:	4082      	lsls	r2, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	3401      	adds	r4, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	4824      	ldr	r0, [pc, #144]	@ (8009194 <_svfiprintf_r+0x1e8>)
 8009102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009106:	2206      	movs	r2, #6
 8009108:	f7f7 f8f2 	bl	80002f0 <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d036      	beq.n	800917e <_svfiprintf_r+0x1d2>
 8009110:	4b21      	ldr	r3, [pc, #132]	@ (8009198 <_svfiprintf_r+0x1ec>)
 8009112:	bb1b      	cbnz	r3, 800915c <_svfiprintf_r+0x1b0>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	3307      	adds	r3, #7
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	3308      	adds	r3, #8
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	4433      	add	r3, r6
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	e76a      	b.n	8008ffe <_svfiprintf_r+0x52>
 8009128:	fb0c 3202 	mla	r2, ip, r2, r3
 800912c:	460c      	mov	r4, r1
 800912e:	2001      	movs	r0, #1
 8009130:	e7a8      	b.n	8009084 <_svfiprintf_r+0xd8>
 8009132:	2300      	movs	r3, #0
 8009134:	3401      	adds	r4, #1
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4620      	mov	r0, r4
 8009140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009144:	3a30      	subs	r2, #48	@ 0x30
 8009146:	2a09      	cmp	r2, #9
 8009148:	d903      	bls.n	8009152 <_svfiprintf_r+0x1a6>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c6      	beq.n	80090dc <_svfiprintf_r+0x130>
 800914e:	9105      	str	r1, [sp, #20]
 8009150:	e7c4      	b.n	80090dc <_svfiprintf_r+0x130>
 8009152:	fb0c 2101 	mla	r1, ip, r1, r2
 8009156:	4604      	mov	r4, r0
 8009158:	2301      	movs	r3, #1
 800915a:	e7f0      	b.n	800913e <_svfiprintf_r+0x192>
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4b0e      	ldr	r3, [pc, #56]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009164:	a904      	add	r1, sp, #16
 8009166:	4638      	mov	r0, r7
 8009168:	f3af 8000 	nop.w
 800916c:	1c42      	adds	r2, r0, #1
 800916e:	4606      	mov	r6, r0
 8009170:	d1d6      	bne.n	8009120 <_svfiprintf_r+0x174>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	065b      	lsls	r3, r3, #25
 8009176:	f53f af2d 	bmi.w	8008fd4 <_svfiprintf_r+0x28>
 800917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800917c:	e72c      	b.n	8008fd8 <_svfiprintf_r+0x2c>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4638      	mov	r0, r7
 800918a:	f000 f879 	bl	8009280 <_printf_i>
 800918e:	e7ed      	b.n	800916c <_svfiprintf_r+0x1c0>
 8009190:	080096cc 	.word	0x080096cc
 8009194:	080096d6 	.word	0x080096d6
 8009198:	00000000 	.word	0x00000000
 800919c:	08008ef5 	.word	0x08008ef5
 80091a0:	080096d2 	.word	0x080096d2

080091a4 <_printf_common>:
 80091a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	4616      	mov	r6, r2
 80091aa:	4698      	mov	r8, r3
 80091ac:	688a      	ldr	r2, [r1, #8]
 80091ae:	690b      	ldr	r3, [r1, #16]
 80091b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	bfb8      	it	lt
 80091b8:	4613      	movlt	r3, r2
 80091ba:	6033      	str	r3, [r6, #0]
 80091bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c0:	4607      	mov	r7, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	b10a      	cbz	r2, 80091ca <_printf_common+0x26>
 80091c6:	3301      	adds	r3, #1
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	0699      	lsls	r1, r3, #26
 80091ce:	bf42      	ittt	mi
 80091d0:	6833      	ldrmi	r3, [r6, #0]
 80091d2:	3302      	addmi	r3, #2
 80091d4:	6033      	strmi	r3, [r6, #0]
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	f015 0506 	ands.w	r5, r5, #6
 80091dc:	d106      	bne.n	80091ec <_printf_common+0x48>
 80091de:	f104 0a19 	add.w	sl, r4, #25
 80091e2:	68e3      	ldr	r3, [r4, #12]
 80091e4:	6832      	ldr	r2, [r6, #0]
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	dc26      	bgt.n	800923a <_printf_common+0x96>
 80091ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	3b00      	subs	r3, #0
 80091f4:	bf18      	it	ne
 80091f6:	2301      	movne	r3, #1
 80091f8:	0692      	lsls	r2, r2, #26
 80091fa:	d42b      	bmi.n	8009254 <_printf_common+0xb0>
 80091fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009200:	4641      	mov	r1, r8
 8009202:	4638      	mov	r0, r7
 8009204:	47c8      	blx	r9
 8009206:	3001      	adds	r0, #1
 8009208:	d01e      	beq.n	8009248 <_printf_common+0xa4>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	f003 0306 	and.w	r3, r3, #6
 8009212:	2b04      	cmp	r3, #4
 8009214:	bf02      	ittt	eq
 8009216:	68e5      	ldreq	r5, [r4, #12]
 8009218:	6833      	ldreq	r3, [r6, #0]
 800921a:	1aed      	subeq	r5, r5, r3
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	bf0c      	ite	eq
 8009220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009224:	2500      	movne	r5, #0
 8009226:	4293      	cmp	r3, r2
 8009228:	bfc4      	itt	gt
 800922a:	1a9b      	subgt	r3, r3, r2
 800922c:	18ed      	addgt	r5, r5, r3
 800922e:	2600      	movs	r6, #0
 8009230:	341a      	adds	r4, #26
 8009232:	42b5      	cmp	r5, r6
 8009234:	d11a      	bne.n	800926c <_printf_common+0xc8>
 8009236:	2000      	movs	r0, #0
 8009238:	e008      	b.n	800924c <_printf_common+0xa8>
 800923a:	2301      	movs	r3, #1
 800923c:	4652      	mov	r2, sl
 800923e:	4641      	mov	r1, r8
 8009240:	4638      	mov	r0, r7
 8009242:	47c8      	blx	r9
 8009244:	3001      	adds	r0, #1
 8009246:	d103      	bne.n	8009250 <_printf_common+0xac>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	3501      	adds	r5, #1
 8009252:	e7c6      	b.n	80091e2 <_printf_common+0x3e>
 8009254:	18e1      	adds	r1, r4, r3
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	2030      	movs	r0, #48	@ 0x30
 800925a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800925e:	4422      	add	r2, r4
 8009260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009268:	3302      	adds	r3, #2
 800926a:	e7c7      	b.n	80091fc <_printf_common+0x58>
 800926c:	2301      	movs	r3, #1
 800926e:	4622      	mov	r2, r4
 8009270:	4641      	mov	r1, r8
 8009272:	4638      	mov	r0, r7
 8009274:	47c8      	blx	r9
 8009276:	3001      	adds	r0, #1
 8009278:	d0e6      	beq.n	8009248 <_printf_common+0xa4>
 800927a:	3601      	adds	r6, #1
 800927c:	e7d9      	b.n	8009232 <_printf_common+0x8e>
	...

08009280 <_printf_i>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	7e0f      	ldrb	r7, [r1, #24]
 8009286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009288:	2f78      	cmp	r7, #120	@ 0x78
 800928a:	4691      	mov	r9, r2
 800928c:	4680      	mov	r8, r0
 800928e:	460c      	mov	r4, r1
 8009290:	469a      	mov	sl, r3
 8009292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009296:	d807      	bhi.n	80092a8 <_printf_i+0x28>
 8009298:	2f62      	cmp	r7, #98	@ 0x62
 800929a:	d80a      	bhi.n	80092b2 <_printf_i+0x32>
 800929c:	2f00      	cmp	r7, #0
 800929e:	f000 80d1 	beq.w	8009444 <_printf_i+0x1c4>
 80092a2:	2f58      	cmp	r7, #88	@ 0x58
 80092a4:	f000 80b8 	beq.w	8009418 <_printf_i+0x198>
 80092a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b0:	e03a      	b.n	8009328 <_printf_i+0xa8>
 80092b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092b6:	2b15      	cmp	r3, #21
 80092b8:	d8f6      	bhi.n	80092a8 <_printf_i+0x28>
 80092ba:	a101      	add	r1, pc, #4	@ (adr r1, 80092c0 <_printf_i+0x40>)
 80092bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c0:	08009319 	.word	0x08009319
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	080092a9 	.word	0x080092a9
 80092cc:	080092a9 	.word	0x080092a9
 80092d0:	080092a9 	.word	0x080092a9
 80092d4:	080092a9 	.word	0x080092a9
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	080092a9 	.word	0x080092a9
 80092e0:	080092a9 	.word	0x080092a9
 80092e4:	080092a9 	.word	0x080092a9
 80092e8:	080092a9 	.word	0x080092a9
 80092ec:	0800942b 	.word	0x0800942b
 80092f0:	08009357 	.word	0x08009357
 80092f4:	080093e5 	.word	0x080093e5
 80092f8:	080092a9 	.word	0x080092a9
 80092fc:	080092a9 	.word	0x080092a9
 8009300:	0800944d 	.word	0x0800944d
 8009304:	080092a9 	.word	0x080092a9
 8009308:	08009357 	.word	0x08009357
 800930c:	080092a9 	.word	0x080092a9
 8009310:	080092a9 	.word	0x080092a9
 8009314:	080093ed 	.word	0x080093ed
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	1d1a      	adds	r2, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009328:	2301      	movs	r3, #1
 800932a:	e09c      	b.n	8009466 <_printf_i+0x1e6>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	6031      	str	r1, [r6, #0]
 8009334:	0606      	lsls	r6, r0, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xbc>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e003      	b.n	8009344 <_printf_i+0xc4>
 800933c:	0645      	lsls	r5, r0, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xb8>
 8009340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009344:	2d00      	cmp	r5, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xd0>
 8009348:	232d      	movs	r3, #45	@ 0x2d
 800934a:	426d      	negs	r5, r5
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009350:	4858      	ldr	r0, [pc, #352]	@ (80094b4 <_printf_i+0x234>)
 8009352:	230a      	movs	r3, #10
 8009354:	e011      	b.n	800937a <_printf_i+0xfa>
 8009356:	6821      	ldr	r1, [r4, #0]
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	0608      	lsls	r0, r1, #24
 800935c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0xe8>
 8009362:	0649      	lsls	r1, r1, #25
 8009364:	bf48      	it	mi
 8009366:	b2ad      	uxthmi	r5, r5
 8009368:	2f6f      	cmp	r7, #111	@ 0x6f
 800936a:	4852      	ldr	r0, [pc, #328]	@ (80094b4 <_printf_i+0x234>)
 800936c:	6033      	str	r3, [r6, #0]
 800936e:	bf14      	ite	ne
 8009370:	230a      	movne	r3, #10
 8009372:	2308      	moveq	r3, #8
 8009374:	2100      	movs	r1, #0
 8009376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800937a:	6866      	ldr	r6, [r4, #4]
 800937c:	60a6      	str	r6, [r4, #8]
 800937e:	2e00      	cmp	r6, #0
 8009380:	db05      	blt.n	800938e <_printf_i+0x10e>
 8009382:	6821      	ldr	r1, [r4, #0]
 8009384:	432e      	orrs	r6, r5
 8009386:	f021 0104 	bic.w	r1, r1, #4
 800938a:	6021      	str	r1, [r4, #0]
 800938c:	d04b      	beq.n	8009426 <_printf_i+0x1a6>
 800938e:	4616      	mov	r6, r2
 8009390:	fbb5 f1f3 	udiv	r1, r5, r3
 8009394:	fb03 5711 	mls	r7, r3, r1, r5
 8009398:	5dc7      	ldrb	r7, [r0, r7]
 800939a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800939e:	462f      	mov	r7, r5
 80093a0:	42bb      	cmp	r3, r7
 80093a2:	460d      	mov	r5, r1
 80093a4:	d9f4      	bls.n	8009390 <_printf_i+0x110>
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d10b      	bne.n	80093c2 <_printf_i+0x142>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	07df      	lsls	r7, r3, #31
 80093ae:	d508      	bpl.n	80093c2 <_printf_i+0x142>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	6861      	ldr	r1, [r4, #4]
 80093b4:	4299      	cmp	r1, r3
 80093b6:	bfde      	ittt	le
 80093b8:	2330      	movle	r3, #48	@ 0x30
 80093ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093c2:	1b92      	subs	r2, r2, r6
 80093c4:	6122      	str	r2, [r4, #16]
 80093c6:	f8cd a000 	str.w	sl, [sp]
 80093ca:	464b      	mov	r3, r9
 80093cc:	aa03      	add	r2, sp, #12
 80093ce:	4621      	mov	r1, r4
 80093d0:	4640      	mov	r0, r8
 80093d2:	f7ff fee7 	bl	80091a4 <_printf_common>
 80093d6:	3001      	adds	r0, #1
 80093d8:	d14a      	bne.n	8009470 <_printf_i+0x1f0>
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	b004      	add	sp, #16
 80093e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	f043 0320 	orr.w	r3, r3, #32
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	4832      	ldr	r0, [pc, #200]	@ (80094b8 <_printf_i+0x238>)
 80093ee:	2778      	movs	r7, #120	@ 0x78
 80093f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	6831      	ldr	r1, [r6, #0]
 80093f8:	061f      	lsls	r7, r3, #24
 80093fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80093fe:	d402      	bmi.n	8009406 <_printf_i+0x186>
 8009400:	065f      	lsls	r7, r3, #25
 8009402:	bf48      	it	mi
 8009404:	b2ad      	uxthmi	r5, r5
 8009406:	6031      	str	r1, [r6, #0]
 8009408:	07d9      	lsls	r1, r3, #31
 800940a:	bf44      	itt	mi
 800940c:	f043 0320 	orrmi.w	r3, r3, #32
 8009410:	6023      	strmi	r3, [r4, #0]
 8009412:	b11d      	cbz	r5, 800941c <_printf_i+0x19c>
 8009414:	2310      	movs	r3, #16
 8009416:	e7ad      	b.n	8009374 <_printf_i+0xf4>
 8009418:	4826      	ldr	r0, [pc, #152]	@ (80094b4 <_printf_i+0x234>)
 800941a:	e7e9      	b.n	80093f0 <_printf_i+0x170>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	f023 0320 	bic.w	r3, r3, #32
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	e7f6      	b.n	8009414 <_printf_i+0x194>
 8009426:	4616      	mov	r6, r2
 8009428:	e7bd      	b.n	80093a6 <_printf_i+0x126>
 800942a:	6833      	ldr	r3, [r6, #0]
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	6961      	ldr	r1, [r4, #20]
 8009430:	1d18      	adds	r0, r3, #4
 8009432:	6030      	str	r0, [r6, #0]
 8009434:	062e      	lsls	r6, r5, #24
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	d501      	bpl.n	800943e <_printf_i+0x1be>
 800943a:	6019      	str	r1, [r3, #0]
 800943c:	e002      	b.n	8009444 <_printf_i+0x1c4>
 800943e:	0668      	lsls	r0, r5, #25
 8009440:	d5fb      	bpl.n	800943a <_printf_i+0x1ba>
 8009442:	8019      	strh	r1, [r3, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	4616      	mov	r6, r2
 800944a:	e7bc      	b.n	80093c6 <_printf_i+0x146>
 800944c:	6833      	ldr	r3, [r6, #0]
 800944e:	1d1a      	adds	r2, r3, #4
 8009450:	6032      	str	r2, [r6, #0]
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	6862      	ldr	r2, [r4, #4]
 8009456:	2100      	movs	r1, #0
 8009458:	4630      	mov	r0, r6
 800945a:	f7f6 ff49 	bl	80002f0 <memchr>
 800945e:	b108      	cbz	r0, 8009464 <_printf_i+0x1e4>
 8009460:	1b80      	subs	r0, r0, r6
 8009462:	6060      	str	r0, [r4, #4]
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	2300      	movs	r3, #0
 800946a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800946e:	e7aa      	b.n	80093c6 <_printf_i+0x146>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	4632      	mov	r2, r6
 8009474:	4649      	mov	r1, r9
 8009476:	4640      	mov	r0, r8
 8009478:	47d0      	blx	sl
 800947a:	3001      	adds	r0, #1
 800947c:	d0ad      	beq.n	80093da <_printf_i+0x15a>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	079b      	lsls	r3, r3, #30
 8009482:	d413      	bmi.n	80094ac <_printf_i+0x22c>
 8009484:	68e0      	ldr	r0, [r4, #12]
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	4298      	cmp	r0, r3
 800948a:	bfb8      	it	lt
 800948c:	4618      	movlt	r0, r3
 800948e:	e7a6      	b.n	80093de <_printf_i+0x15e>
 8009490:	2301      	movs	r3, #1
 8009492:	4632      	mov	r2, r6
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	47d0      	blx	sl
 800949a:	3001      	adds	r0, #1
 800949c:	d09d      	beq.n	80093da <_printf_i+0x15a>
 800949e:	3501      	adds	r5, #1
 80094a0:	68e3      	ldr	r3, [r4, #12]
 80094a2:	9903      	ldr	r1, [sp, #12]
 80094a4:	1a5b      	subs	r3, r3, r1
 80094a6:	42ab      	cmp	r3, r5
 80094a8:	dcf2      	bgt.n	8009490 <_printf_i+0x210>
 80094aa:	e7eb      	b.n	8009484 <_printf_i+0x204>
 80094ac:	2500      	movs	r5, #0
 80094ae:	f104 0619 	add.w	r6, r4, #25
 80094b2:	e7f5      	b.n	80094a0 <_printf_i+0x220>
 80094b4:	080096dd 	.word	0x080096dd
 80094b8:	080096ee 	.word	0x080096ee

080094bc <memmove>:
 80094bc:	4288      	cmp	r0, r1
 80094be:	b510      	push	{r4, lr}
 80094c0:	eb01 0402 	add.w	r4, r1, r2
 80094c4:	d902      	bls.n	80094cc <memmove+0x10>
 80094c6:	4284      	cmp	r4, r0
 80094c8:	4623      	mov	r3, r4
 80094ca:	d807      	bhi.n	80094dc <memmove+0x20>
 80094cc:	1e43      	subs	r3, r0, #1
 80094ce:	42a1      	cmp	r1, r4
 80094d0:	d008      	beq.n	80094e4 <memmove+0x28>
 80094d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094da:	e7f8      	b.n	80094ce <memmove+0x12>
 80094dc:	4402      	add	r2, r0
 80094de:	4601      	mov	r1, r0
 80094e0:	428a      	cmp	r2, r1
 80094e2:	d100      	bne.n	80094e6 <memmove+0x2a>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ee:	e7f7      	b.n	80094e0 <memmove+0x24>

080094f0 <_sbrk_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	@ (800950c <_sbrk_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f8 fe36 	bl	800216c <_sbrk>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_sbrk_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_sbrk_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	240015d4 	.word	0x240015d4

08009510 <_realloc_r>:
 8009510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009514:	4607      	mov	r7, r0
 8009516:	4614      	mov	r4, r2
 8009518:	460d      	mov	r5, r1
 800951a:	b921      	cbnz	r1, 8009526 <_realloc_r+0x16>
 800951c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	4611      	mov	r1, r2
 8009522:	f7ff bc5b 	b.w	8008ddc <_malloc_r>
 8009526:	b92a      	cbnz	r2, 8009534 <_realloc_r+0x24>
 8009528:	f7ff fbec 	bl	8008d04 <_free_r>
 800952c:	4625      	mov	r5, r4
 800952e:	4628      	mov	r0, r5
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	f000 f81a 	bl	800956c <_malloc_usable_size_r>
 8009538:	4284      	cmp	r4, r0
 800953a:	4606      	mov	r6, r0
 800953c:	d802      	bhi.n	8009544 <_realloc_r+0x34>
 800953e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009542:	d8f4      	bhi.n	800952e <_realloc_r+0x1e>
 8009544:	4621      	mov	r1, r4
 8009546:	4638      	mov	r0, r7
 8009548:	f7ff fc48 	bl	8008ddc <_malloc_r>
 800954c:	4680      	mov	r8, r0
 800954e:	b908      	cbnz	r0, 8009554 <_realloc_r+0x44>
 8009550:	4645      	mov	r5, r8
 8009552:	e7ec      	b.n	800952e <_realloc_r+0x1e>
 8009554:	42b4      	cmp	r4, r6
 8009556:	4622      	mov	r2, r4
 8009558:	4629      	mov	r1, r5
 800955a:	bf28      	it	cs
 800955c:	4632      	movcs	r2, r6
 800955e:	f7ff fbc3 	bl	8008ce8 <memcpy>
 8009562:	4629      	mov	r1, r5
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff fbcd 	bl	8008d04 <_free_r>
 800956a:	e7f1      	b.n	8009550 <_realloc_r+0x40>

0800956c <_malloc_usable_size_r>:
 800956c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009570:	1f18      	subs	r0, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfbc      	itt	lt
 8009576:	580b      	ldrlt	r3, [r1, r0]
 8009578:	18c0      	addlt	r0, r0, r3
 800957a:	4770      	bx	lr

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
