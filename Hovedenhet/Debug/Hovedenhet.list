
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b384  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b624  0800b624  0000c624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b798  0800b798  0000c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b79c  0800b79c  0000c79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800b7a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001570  24000060  0800b800  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240015d0  0800b800  0000d5d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019cdd  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e69  00000000  00000000  00026d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  00029bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d54  00000000  00000000  0002ad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ade  00000000  00000000  0002ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018724  00000000  00000000  0006554a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a5b9  00000000  00000000  0007dc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8227  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e28  00000000  00000000  001e826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001ed094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b60c 	.word	0x0800b60c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b60c 	.word	0x0800b60c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c8:	70fb      	strb	r3, [r7, #3]
	CAM.Tx_Buffer[0] = CMD;
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	713b      	strb	r3, [r7, #4]
	CAM.Tx_Buffer[1] = CMD;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	f007 fe1a 	bl	8008312 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 80006f2:	f000 fce7 	bl	80010c4 <W25N_WaitForReady>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d012      	beq.n	8000722 <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 80006fc:	4b67      	ldr	r3, [pc, #412]	@ (800089c <Flash_Init+0x1b4>)
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 faf3 	bl	8000cec <Read_Status_Register>
 8000706:	4603      	mov	r3, r0
 8000708:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 800070a:	7ebb      	ldrb	r3, [r7, #26]
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000712:	4b62      	ldr	r3, [pc, #392]	@ (800089c <Flash_Init+0x1b4>)
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	7eba      	ldrb	r2, [r7, #26]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb16 	bl	8000d4c <Write_Status_Register>
 8000720:	e011      	b.n	8000746 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000722:	4b5e      	ldr	r3, [pc, #376]	@ (800089c <Flash_Init+0x1b4>)
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fae0 	bl	8000cec <Read_Status_Register>
 800072c:	4603      	mov	r3, r0
 800072e:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000730:	7efb      	ldrb	r3, [r7, #27]
 8000732:	f023 0308 	bic.w	r3, r3, #8
 8000736:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000738:	4b58      	ldr	r3, [pc, #352]	@ (800089c <Flash_Init+0x1b4>)
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	7efa      	ldrb	r2, [r7, #27]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fb03 	bl	8000d4c <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 8000746:	4b55      	ldr	r3, [pc, #340]	@ (800089c <Flash_Init+0x1b4>)
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 face 	bl	8000cec <Read_Status_Register>
 8000750:	4603      	mov	r3, r0
 8000752:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000754:	7e7b      	ldrb	r3, [r7, #25]
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 800075c:	7e7b      	ldrb	r3, [r7, #25]
 800075e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000762:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 8000764:	4b4d      	ldr	r3, [pc, #308]	@ (800089c <Flash_Init+0x1b4>)
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	7e7a      	ldrb	r2, [r7, #25]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 faed 	bl	8000d4c <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 8000780:	2300      	movs	r3, #0
 8000782:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 8000784:	2300      	movs	r3, #0
 8000786:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 8000788:	e031      	b.n	80007ee <Flash_Init+0x106>
		Page_Bit = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000794:	2210      	movs	r2, #16
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f950 	bl	8000a3c <Read_Data>

		for(int i = 0; i < 16; i++){
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	e013      	b.n	80007ca <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007a2:	f107 0208 	add.w	r2, r7, #8
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2bff      	cmp	r3, #255	@ 0xff
 80007ae:	d109      	bne.n	80007c4 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007b0:	2201      	movs	r2, #1
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	3301      	adds	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	dde8      	ble.n	80007a2 <Flash_Init+0xba>
			}
		}

		if(Page_Bit!=0xFFFF){
 80007d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d003      	beq.n	80007e2 <Flash_Init+0xfa>
			Temp_Page += 64;
 80007da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007dc:	3340      	adds	r3, #64	@ 0x40
 80007de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80007e0:	e005      	b.n	80007ee <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 80007e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d008      	beq.n	80007fa <Flash_Init+0x112>
				break;
			}
			else Temp_Page -= 64;
 80007e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007ea:	3b40      	subs	r3, #64	@ 0x40
 80007ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80007ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d1c8      	bne.n	800078a <Flash_Init+0xa2>
 80007f8:	e000      	b.n	80007fc <Flash_Init+0x114>
				break;
 80007fa:	bf00      	nop
		}
	}
	Page_Bit=0x0000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000800:	e02a      	b.n	8000858 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 8000802:	2300      	movs	r3, #0
 8000804:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000806:	f107 0108 	add.w	r1, r7, #8
 800080a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800080c:	2210      	movs	r2, #16
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f914 	bl	8000a3c <Read_Data>

		for(int i = 0; i < 16; i++){
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	e013      	b.n	8000842 <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 800081a:	f107 0208 	add.w	r2, r7, #8
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2bff      	cmp	r3, #255	@ 0xff
 8000826:	d109      	bne.n	800083c <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	b21a      	sxth	r2, r3
 8000832:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3301      	adds	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	dde8      	ble.n	800081a <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800084a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084e:	4293      	cmp	r3, r2
 8000850:	d002      	beq.n	8000858 <Flash_Init+0x170>
			Temp_Page++;
 8000852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000854:	3301      	adds	r3, #1
 8000856:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085e:	4293      	cmp	r3, r2
 8000860:	d1cf      	bne.n	8000802 <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <Flash_Init+0x1b8>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000868:	461a      	mov	r2, r3
 800086a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800086c:	8093      	strh	r3, [r2, #4]
	Flash.Block_Mem=(Flash.Page_Index/64);
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <Flash_Init+0x1b8>)
 8000870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000874:	889b      	ldrh	r3, [r3, #4]
 8000876:	099b      	lsrs	r3, r3, #6
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <Flash_Init+0x1b8>)
 800087c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000880:	805a      	strh	r2, [r3, #2]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <Flash_Init+0x1b8>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <Flash_Init+0x1bc>)
 800088e:	f000 fbf3 	bl	8001078 <USART3_Printf>
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2400009c 	.word	0x2400009c
 80008a0:	240000a4 	.word	0x240000a4
 80008a4:	0800b624 	.word	0x0800b624

080008a8 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	463b      	mov	r3, r7
 80008b0:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fa18 	bl	8000cec <Read_Status_Register>
 80008bc:	4603      	mov	r3, r0
 80008be:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 80008c0:	2064      	movs	r0, #100	@ 0x64
 80008c2:	f000 fbaf 	bl	8001024 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fa0f 	bl	8000cec <Read_Status_Register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 80008d2:	2064      	movs	r0, #100	@ 0x64
 80008d4:	f000 fba6 	bl	8001024 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 80008d8:	797b      	ldrb	r3, [r7, #5]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fa06 	bl	8000cec <Read_Status_Register>
 80008e0:	4603      	mov	r3, r0
 80008e2:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 fb9d 	bl	8001024 <delay_ns>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 8000900:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <Write_Data+0x94>)
 8000902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d108      	bne.n	800091e <Write_Data+0x2a>
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <Write_Data+0x94>)
 800090e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000912:	88db      	ldrh	r3, [r3, #6]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <Write_Data+0x2a>
		Block_Erase(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fb4f 	bl	8000fbc <Block_Erase>
	}
	uint16_t count=0;
 800091e:	2300      	movs	r3, #0
 8000920:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000922:	e028      	b.n	8000976 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <Write_Data+0x94>)
 8000926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <Write_Data+0x94>)
 8000934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <Write_Data+0x94>)
 800093e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000942:	60d3      	str	r3, [r2, #12]
		data++;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3301      	adds	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <Write_Data+0x94>)
 800094c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	3301      	adds	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <Write_Data+0x94>)
 8000958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800095c:	80da      	strh	r2, [r3, #6]
		count++;
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	3301      	adds	r3, #1
 8000962:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <Write_Data+0x94>)
 8000966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000970:	d301      	bcc.n	8000976 <Write_Data+0x82>
			Write_to_page();
 8000972:	f000 f80b 	bl	800098c <Write_to_page>
	while(count<lenght){
 8000976:	89fa      	ldrh	r2, [r7, #14]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3d2      	bcc.n	8000924 <Write_Data+0x30>
		}
	}
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	240000a4 	.word	0x240000a4

0800098c <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	if(Flash.Buffer_Select==0){
 8000990:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <Write_to_page+0xa8>)
 8000992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d116      	bne.n	80009ca <Write_to_page+0x3e>
		Flash.Buffer_Select=1;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <Write_to_page+0xa8>)
 800099e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_1;
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <Write_to_page+0xa8>)
 80009a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <Write_to_page+0xac>)
 80009b0:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <Write_to_page+0xa8>)
 80009b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b8:	2200      	movs	r2, #0
 80009ba:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	491c      	ldr	r1, [pc, #112]	@ (8000a34 <Write_to_page+0xa8>)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fa24 	bl	8000e10 <Write_Data_Buffer>
 80009c8:	e015      	b.n	80009f6 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_Select=0;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <Write_to_page+0xa8>)
 80009cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <Write_to_page+0xa8>)
 80009d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <Write_to_page+0xa8>)
 80009de:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <Write_to_page+0xa8>)
 80009e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e6:	2200      	movs	r2, #0
 80009e8:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 80009ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ee:	4912      	ldr	r1, [pc, #72]	@ (8000a38 <Write_to_page+0xac>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fa0d 	bl	8000e10 <Write_Data_Buffer>
	}
	Program_Page_Flash(Flash.Page_Index);
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <Write_to_page+0xa8>)
 80009f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009fc:	889b      	ldrh	r3, [r3, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fa42 	bl	8000e88 <Program_Page_Flash>
	Flash.Page_Index++;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <Write_to_page+0xa8>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <Write_to_page+0xa8>)
 8000a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a16:	809a      	strh	r2, [r3, #4]
	Flash.Buffer_Index=0;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <Write_to_page+0xa8>)
 8000a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a1e:	2200      	movs	r2, #0
 8000a20:	80da      	strh	r2, [r3, #6]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <Write_to_page+0xa8>)
 8000a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f81c 	bl	8000a68 <Automatic_Block_Managment>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240000a4 	.word	0x240000a4
 8000a38:	240008a4 	.word	0x240008a4

08000a3c <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fa4e 	bl	8000ef0 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f000 fa7b 	bl	8000f54 <Read_Data_Buffer>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000a78:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7e:	885b      	ldrh	r3, [r3, #2]
 8000a80:	89fa      	ldrh	r2, [r7, #14]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d00a      	beq.n	8000a9c <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa97 	bl	8000fbc <Block_Erase>
		Flash.Block_Mem=Block;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a94:	461a      	mov	r2, r3
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	8053      	strh	r3, [r2, #2]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000a9a:	e005      	b.n	8000aa8 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <Automatic_Block_Managment+0x48>)
 8000a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	8053      	strh	r3, [r2, #2]
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240000a4 	.word	0x240000a4

08000ab4 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000aba:	482c      	ldr	r0, [pc, #176]	@ (8000b6c <Chip_Erase+0xb8>)
 8000abc:	f000 fadc 	bl	8001078 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	492a      	ldr	r1, [pc, #168]	@ (8000b70 <Chip_Erase+0xbc>)
 8000ac8:	482a      	ldr	r0, [pc, #168]	@ (8000b74 <Chip_Erase+0xc0>)
 8000aca:	f007 fcb0 	bl	800842e <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <Chip_Erase+0xbc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b59      	cmp	r3, #89	@ 0x59
 8000ad4:	d143      	bne.n	8000b5e <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000ad6:	4828      	ldr	r0, [pc, #160]	@ (8000b78 <Chip_Erase+0xc4>)
 8000ad8:	f000 face 	bl	8001078 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	e009      	b.n	8000af6 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	019b      	lsls	r3, r3, #6
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa66 	bl	8000fbc <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000afc:	ddf1      	ble.n	8000ae2 <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b04:	2200      	movs	r2, #0
 8000b06:	80da      	strh	r2, [r3, #6]
		Flash.Page_Index=0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0e:	2200      	movs	r2, #0
 8000b10:	809a      	strh	r2, [r3, #4]
		Flash.Block_Mem=0;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b18:	2200      	movs	r2, #0
 8000b1a:	805a      	strh	r2, [r3, #2]
		Flash.Buffer_Select=0;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b30:	60d3      	str	r3, [r2, #12]

		Flash_Data* pointer = &Flash;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b34:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3c:	21ff      	movs	r1, #255	@ 0xff
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00a f8e6 	bl	800ad10 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4e:	21ff      	movs	r1, #255	@ 0xff
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00a f8dd 	bl	800ad10 <memset>
		USART3_Printf("Ferdig\r\n");
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <Chip_Erase+0xcc>)
 8000b58:	f000 fa8e 	bl	8001078 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b5c:	e002      	b.n	8000b64 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b5e:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <Chip_Erase+0xd0>)
 8000b60:	f000 fa8a 	bl	8001078 <USART3_Printf>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0800b63c 	.word	0x0800b63c
 8000b70:	2400007d 	.word	0x2400007d
 8000b74:	240013e4 	.word	0x240013e4
 8000b78:	0800b670 	.word	0x0800b670
 8000b7c:	240000a4 	.word	0x240000a4
 8000b80:	0800b684 	.word	0x0800b684
 8000b84:	0800b690 	.word	0x0800b690

08000b88 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	b089      	sub	sp, #36	@ 0x24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	80fb      	strh	r3, [r7, #6]
 8000b94:	466b      	mov	r3, sp
 8000b96:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f9a9 	bl	8000ef0 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000b9e:	88f9      	ldrh	r1, [r7, #6]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	b28b      	uxth	r3, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4698      	mov	r8, r3
 8000bac:	4691      	mov	r9, r2
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bc2:	b28b      	uxth	r3, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	4615      	mov	r5, r2
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	00eb      	lsls	r3, r5, #3
 8000bd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd8:	00e2      	lsls	r2, r4, #3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	3307      	adds	r3, #7
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	ebad 0d03 	sub.w	sp, sp, r3
 8000be6:	466b      	mov	r3, sp
 8000be8:	3300      	adds	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000bfe:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4825      	ldr	r0, [pc, #148]	@ (8000ca0 <Read_Data_Cont+0x118>)
 8000c0a:	f003 fe5f 	bl	80048cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	2204      	movs	r2, #4
 8000c12:	4922      	ldr	r1, [pc, #136]	@ (8000c9c <Read_Data_Cont+0x114>)
 8000c14:	4823      	ldr	r0, [pc, #140]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c16:	f006 fde3 	bl	80077e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	4820      	ldr	r0, [pc, #128]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c24:	f006 ffca 	bl	8007bbc <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3303      	adds	r3, #3
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	330b      	adds	r3, #11
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c40:	e018      	b.n	8000c74 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c42:	8bf9      	ldrh	r1, [r7, #30]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <Read_Data_Cont+0x120>)
 8000c4a:	f000 fa15 	bl	8001078 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	68f9      	ldr	r1, [r7, #12]
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <Read_Data_Cont+0x11c>)
 8000c58:	f006 ffb0 	bl	8007bbc <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3303      	adds	r3, #3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	330b      	adds	r3, #11
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c7a:	d103      	bne.n	8000c84 <Read_Data_Cont+0xfc>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	7bdb      	ldrb	r3, [r3, #15]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d0de      	beq.n	8000c42 <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <Read_Data_Cont+0x118>)
 8000c8a:	f003 fe1f 	bl	80048cc <HAL_GPIO_WritePin>
 8000c8e:	46b5      	mov	sp, r6
}
 8000c90:	bf00      	nop
 8000c92:	3724      	adds	r7, #36	@ 0x24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24000090 	.word	0x24000090
 8000ca0:	58020000 	.word	0x58020000
 8000ca4:	240011a0 	.word	0x240011a0
 8000ca8:	0800b6a8 	.word	0x0800b6a8

08000cac <Write_Enable>:
////////Low-level code for interfacing with Flash IC////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <Write_Enable+0x34>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	480a      	ldr	r0, [pc, #40]	@ (8000ce4 <Write_Enable+0x38>)
 8000cbc:	f003 fe06 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cc0:	2364      	movs	r3, #100	@ 0x64
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <Write_Enable+0x34>)
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <Write_Enable+0x3c>)
 8000cc8:	f006 fd8a 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <Write_Enable+0x38>)
 8000cd2:	f003 fdfb 	bl	80048cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f000 f9a4 	bl	8001024 <delay_ns>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000090 	.word	0x24000090
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	240011a0 	.word	0x240011a0

08000cec <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <Read_Status_Register+0x50>)
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <Read_Status_Register+0x50>)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d02:	2200      	movs	r2, #0
 8000d04:	2110      	movs	r1, #16
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <Read_Status_Register+0x54>)
 8000d08:	f003 fde0 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d0c:	2364      	movs	r3, #100	@ 0x64
 8000d0e:	2202      	movs	r2, #2
 8000d10:	490a      	ldr	r1, [pc, #40]	@ (8000d3c <Read_Status_Register+0x50>)
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <Read_Status_Register+0x58>)
 8000d14:	f006 fd64 	bl	80077e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d18:	2364      	movs	r3, #100	@ 0x64
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	490a      	ldr	r1, [pc, #40]	@ (8000d48 <Read_Status_Register+0x5c>)
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <Read_Status_Register+0x58>)
 8000d20:	f006 ff4c 	bl	8007bbc <HAL_SPI_Receive>
	csHIGH();
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <Read_Status_Register+0x54>)
 8000d2a:	f003 fdcf 	bl	80048cc <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d2e:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <Read_Status_Register+0x50>)
 8000d30:	795b      	ldrb	r3, [r3, #5]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000090 	.word	0x24000090
 8000d40:	58020000 	.word	0x58020000
 8000d44:	240011a0 	.word	0x240011a0
 8000d48:	24000095 	.word	0x24000095

08000d4c <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d5e:	221f      	movs	r2, #31
 8000d60:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <Write_Status_Register+0x54>)
 8000d74:	f003 fdaa 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <Write_Status_Register+0x50>)
 8000d7e:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <Write_Status_Register+0x58>)
 8000d80:	f006 fd2e 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <Write_Status_Register+0x54>)
 8000d8a:	f003 fd9f 	bl	80048cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d8e:	2064      	movs	r0, #100	@ 0x64
 8000d90:	f000 f948 	bl	8001024 <delay_ns>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000090 	.word	0x24000090
 8000da0:	58020000 	.word	0x58020000
 8000da4:	240011a0 	.word	0x240011a0

08000da8 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <Read_ID+0x5c>)
 8000db0:	229f      	movs	r2, #159	@ 0x9f
 8000db2:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <Read_ID+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <Read_ID+0x60>)
 8000dc0:	f003 fd84 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	490e      	ldr	r1, [pc, #56]	@ (8000e04 <Read_ID+0x5c>)
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <Read_ID+0x64>)
 8000dcc:	f006 fd08 	bl	80077e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000dd0:	1d39      	adds	r1, r7, #4
 8000dd2:	2364      	movs	r3, #100	@ 0x64
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <Read_ID+0x64>)
 8000dd8:	f006 fef0 	bl	8007bbc <HAL_SPI_Receive>
	csHIGH();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2110      	movs	r1, #16
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <Read_ID+0x60>)
 8000de2:	f003 fd73 	bl	80048cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000de6:	2064      	movs	r0, #100	@ 0x64
 8000de8:	f000 f91c 	bl	8001024 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	041a      	lsls	r2, r3, #16
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	79b9      	ldrb	r1, [r7, #6]
 8000df6:	430b      	orrs	r3, r1
 8000df8:	4313      	orrs	r3, r2
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000090 	.word	0x24000090
 8000e08:	58020000 	.word	0x58020000
 8000e0c:	240011a0 	.word	0x240011a0

08000e10 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e20:	f7ff ff44 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e34:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e3c:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <Write_Data_Buffer+0x70>)
 8000e44:	f003 fd42 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e48:	2364      	movs	r3, #100	@ 0x64
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	490b      	ldr	r1, [pc, #44]	@ (8000e7c <Write_Data_Buffer+0x6c>)
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <Write_Data_Buffer+0x74>)
 8000e50:	f006 fcc6 	bl	80077e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <Write_Data_Buffer+0x74>)
 8000e5e:	f006 fcbf 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <Write_Data_Buffer+0x70>)
 8000e68:	f003 fd30 	bl	80048cc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f000 f8d9 	bl	8001024 <delay_ns>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000090 	.word	0x24000090
 8000e80:	58020000 	.word	0x58020000
 8000e84:	240011a0 	.word	0x240011a0

08000e88 <Program_Page_Flash>:

//Program page with data in buffer
void Program_Page_Flash(uint16_t Page_Addr){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000e92:	f7ff ff0b 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <Program_Page_Flash+0x5c>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <Program_Page_Flash+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <Program_Page_Flash+0x5c>)
 8000eac:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Program_Page_Flash+0x5c>)
 8000eb4:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <Program_Page_Flash+0x60>)
 8000ebc:	f003 fd06 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <Program_Page_Flash+0x5c>)
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <Program_Page_Flash+0x64>)
 8000ec8:	f006 fc8a 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <Program_Page_Flash+0x60>)
 8000ed2:	f003 fcfb 	bl	80048cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ed6:	f000 f8f5 	bl	80010c4 <W25N_WaitForReady>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000090 	.word	0x24000090
 8000ee8:	58020000 	.word	0x58020000
 8000eec:	240011a0 	.word	0x240011a0

08000ef0 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <Select_Page_Read+0x58>)
 8000efc:	2213      	movs	r2, #19
 8000efe:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f10:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f18:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <Select_Page_Read+0x5c>)
 8000f20:	f003 fcd4 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	2204      	movs	r2, #4
 8000f28:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <Select_Page_Read+0x58>)
 8000f2a:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <Select_Page_Read+0x60>)
 8000f2c:	f006 fc58 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <Select_Page_Read+0x5c>)
 8000f36:	f003 fcc9 	bl	80048cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f3a:	f000 f8c3 	bl	80010c4 <W25N_WaitForReady>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	24000090 	.word	0x24000090
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	240011a0 	.word	0x240011a0

08000f54 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <Read_Data_Buffer+0x60>)
 8000f7e:	f003 fca5 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	2204      	movs	r2, #4
 8000f86:	490a      	ldr	r1, [pc, #40]	@ (8000fb0 <Read_Data_Buffer+0x5c>)
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <Read_Data_Buffer+0x64>)
 8000f8a:	f006 fc29 	bl	80077e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <Read_Data_Buffer+0x64>)
 8000f98:	f006 fe10 	bl	8007bbc <HAL_SPI_Receive>
	csHIGH();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <Read_Data_Buffer+0x60>)
 8000fa2:	f003 fc93 	bl	80048cc <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000090 	.word	0x24000090
 8000fb4:	58020000 	.word	0x58020000
 8000fb8:	240011a0 	.word	0x240011a0

08000fbc <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000fc6:	f7ff fe71 	bl	8000cac <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <Block_Erase+0x5c>)
 8000fcc:	22d8      	movs	r2, #216	@ 0xd8
 8000fce:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <Block_Erase+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <Block_Erase+0x5c>)
 8000fe0:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <Block_Erase+0x5c>)
 8000fe8:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	480b      	ldr	r0, [pc, #44]	@ (800101c <Block_Erase+0x60>)
 8000ff0:	f003 fc6c 	bl	80048cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000ff4:	2364      	movs	r3, #100	@ 0x64
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <Block_Erase+0x5c>)
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <Block_Erase+0x64>)
 8000ffc:	f006 fbf0 	bl	80077e0 <HAL_SPI_Transmit>
	csHIGH();
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <Block_Erase+0x60>)
 8001006:	f003 fc61 	bl	80048cc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 800100a:	f000 f85b 	bl	80010c4 <W25N_WaitForReady>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000090 	.word	0x24000090
 800101c:	58020000 	.word	0x58020000
 8001020:	240011a0 	.word	0x240011a0

08001024 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <delay_ns+0x48>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0a5b      	lsrs	r3, r3, #9
 8001032:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <delay_ns+0x4c>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	09db      	lsrs	r3, r3, #7
 800103a:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <delay_ns+0x50>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 800104c:	bf00      	nop
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <delay_ns+0x50>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f8      	bhi.n	800104e <delay_ns+0x2a>
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	24000000 	.word	0x24000000
 8001070:	00044b83 	.word	0x00044b83
 8001074:	e0001000 	.word	0xe0001000

08001078 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 8001078:	b40f      	push	{r0, r1, r2, r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b0a2      	sub	sp, #136	@ 0x88
 800107e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001080:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001084:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001086:	f107 0008 	add.w	r0, r7, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	f009 fe2f 	bl	800acf4 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f920 	bl	80002e0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f107 0108 	add.w	r1, r7, #8
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <USART3_Printf+0x48>)
 80010ae:	f007 f930 	bl	8008312 <HAL_UART_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3788      	adds	r7, #136	@ 0x88
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010bc:	b004      	add	sp, #16
 80010be:	4770      	bx	lr
 80010c0:	240013e4 	.word	0x240013e4

080010c4 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80010c8:	2064      	movs	r0, #100	@ 0x64
 80010ca:	f7ff ffab 	bl	8001024 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 80010ce:	e002      	b.n	80010d6 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f7ff ffa7 	bl	8001024 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <W25N_WaitForReady+0x2c>)
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe06 	bl	8000cec <Read_Status_Register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f2      	bne.n	80010d0 <W25N_WaitForReady+0xc>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2400009c 	.word	0x2400009c

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010f8:	f000 fd0e 	bl	8001b18 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f001 fa2c 	bl	8002558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f932 	bl	8001368 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 8001104:	f000 fc94 	bl	8001a30 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f000 fbba 	bl	8001880 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800110c:	f000 f9a8 	bl	8001460 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001110:	f000 fa30 	bl	8001574 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001114:	f000 fb68 	bl	80017e8 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001118:	f000 fa82 	bl	8001620 <MX_UART5_Init>
  MX_UART8_Init();
 800111c:	f000 facc 	bl	80016b8 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8001120:	f000 fb16 	bl	8001750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 8001124:	4b83      	ldr	r3, [pc, #524]	@ (8001334 <main+0x240>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2202      	movs	r2, #2
 800112a:	4983      	ldr	r1, [pc, #524]	@ (8001338 <main+0x244>)
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fa47 	bl	80085c0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8001132:	4b82      	ldr	r3, [pc, #520]	@ (800133c <main+0x248>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2202      	movs	r2, #2
 8001138:	4981      	ldr	r1, [pc, #516]	@ (8001340 <main+0x24c>)
 800113a:	4618      	mov	r0, r3
 800113c:	f007 fa40 	bl	80085c0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 8001140:	4b80      	ldr	r3, [pc, #512]	@ (8001344 <main+0x250>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2202      	movs	r2, #2
 8001146:	4980      	ldr	r1, [pc, #512]	@ (8001348 <main+0x254>)
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fa39 	bl	80085c0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff faca 	bl	80006e8 <Flash_Init>
  Flash.ID=Read_ID();
 8001154:	f7ff fe28 	bl	8000da8 <Read_ID>
 8001158:	4603      	mov	r3, r0
 800115a:	4a7c      	ldr	r2, [pc, #496]	@ (800134c <main+0x258>)
 800115c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001160:	6093      	str	r3, [r2, #8]
  while (1)
  {
	  Read_Register(SR);
 8001162:	4b7b      	ldr	r3, [pc, #492]	@ (8001350 <main+0x25c>)
 8001164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001168:	f7ff fb9e 	bl	80008a8 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2201      	movs	r2, #1
 8001170:	4978      	ldr	r1, [pc, #480]	@ (8001354 <main+0x260>)
 8001172:	4879      	ldr	r0, [pc, #484]	@ (8001358 <main+0x264>)
 8001174:	f007 f95b 	bl	800842e <HAL_UART_Receive>

	  //CAM to IDLE
	  if(command==0x41){
 8001178:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <main+0x260>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b41      	cmp	r3, #65	@ 0x41
 800117e:	d111      	bne.n	80011a4 <main+0xb0>
		  command_cam(CAM1, IDLE);
 8001180:	4a6c      	ldr	r2, [pc, #432]	@ (8001334 <main+0x240>)
 8001182:	2341      	movs	r3, #65	@ 0x41
 8001184:	ca07      	ldmia	r2, {r0, r1, r2}
 8001186:	f7ff fa99 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 800118a:	4a6c      	ldr	r2, [pc, #432]	@ (800133c <main+0x248>)
 800118c:	2341      	movs	r3, #65	@ 0x41
 800118e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001190:	f7ff fa94 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 8001194:	4a6b      	ldr	r2, [pc, #428]	@ (8001344 <main+0x250>)
 8001196:	2341      	movs	r3, #65	@ 0x41
 8001198:	ca07      	ldmia	r2, {r0, r1, r2}
 800119a:	f7ff fa8f 	bl	80006bc <command_cam>
		  command=0;
 800119e:	4b6d      	ldr	r3, [pc, #436]	@ (8001354 <main+0x260>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x42){
 80011a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001354 <main+0x260>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b42      	cmp	r3, #66	@ 0x42
 80011aa:	d111      	bne.n	80011d0 <main+0xdc>
		  command_cam(CAM1, REC);
 80011ac:	4a61      	ldr	r2, [pc, #388]	@ (8001334 <main+0x240>)
 80011ae:	2342      	movs	r3, #66	@ 0x42
 80011b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b2:	f7ff fa83 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 80011b6:	4a61      	ldr	r2, [pc, #388]	@ (800133c <main+0x248>)
 80011b8:	2342      	movs	r3, #66	@ 0x42
 80011ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80011bc:	f7ff fa7e 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 80011c0:	4a60      	ldr	r2, [pc, #384]	@ (8001344 <main+0x250>)
 80011c2:	2342      	movs	r3, #66	@ 0x42
 80011c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c6:	f7ff fa79 	bl	80006bc <command_cam>
		  command=0;
 80011ca:	4b62      	ldr	r3, [pc, #392]	@ (8001354 <main+0x260>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x43){
 80011d0:	4b60      	ldr	r3, [pc, #384]	@ (8001354 <main+0x260>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b43      	cmp	r3, #67	@ 0x43
 80011d6:	d111      	bne.n	80011fc <main+0x108>
		  command_cam(CAM1, FORMAT);
 80011d8:	4a56      	ldr	r2, [pc, #344]	@ (8001334 <main+0x240>)
 80011da:	2343      	movs	r3, #67	@ 0x43
 80011dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011de:	f7ff fa6d 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 80011e2:	4a56      	ldr	r2, [pc, #344]	@ (800133c <main+0x248>)
 80011e4:	2343      	movs	r3, #67	@ 0x43
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	f7ff fa68 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 80011ec:	4a55      	ldr	r2, [pc, #340]	@ (8001344 <main+0x250>)
 80011ee:	2343      	movs	r3, #67	@ 0x43
 80011f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f2:	f7ff fa63 	bl	80006bc <command_cam>
		  command=0;
 80011f6:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <main+0x260>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x44){
 80011fc:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <main+0x260>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b44      	cmp	r3, #68	@ 0x44
 8001202:	d111      	bne.n	8001228 <main+0x134>
		  command_cam(CAM1, REBOOT);
 8001204:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <main+0x240>)
 8001206:	2344      	movs	r3, #68	@ 0x44
 8001208:	ca07      	ldmia	r2, {r0, r1, r2}
 800120a:	f7ff fa57 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 800120e:	4a4b      	ldr	r2, [pc, #300]	@ (800133c <main+0x248>)
 8001210:	2344      	movs	r3, #68	@ 0x44
 8001212:	ca07      	ldmia	r2, {r0, r1, r2}
 8001214:	f7ff fa52 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 8001218:	4a4a      	ldr	r2, [pc, #296]	@ (8001344 <main+0x250>)
 800121a:	2344      	movs	r3, #68	@ 0x44
 800121c:	ca07      	ldmia	r2, {r0, r1, r2}
 800121e:	f7ff fa4d 	bl	80006bc <command_cam>
		  command=0;
 8001222:	4b4c      	ldr	r3, [pc, #304]	@ (8001354 <main+0x260>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x45){
 8001228:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <main+0x260>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b45      	cmp	r3, #69	@ 0x45
 800122e:	d111      	bne.n	8001254 <main+0x160>
		  command_cam(CAM1, DEB);
 8001230:	4a40      	ldr	r2, [pc, #256]	@ (8001334 <main+0x240>)
 8001232:	2345      	movs	r3, #69	@ 0x45
 8001234:	ca07      	ldmia	r2, {r0, r1, r2}
 8001236:	f7ff fa41 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 800123a:	4a40      	ldr	r2, [pc, #256]	@ (800133c <main+0x248>)
 800123c:	2345      	movs	r3, #69	@ 0x45
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	f7ff fa3c 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 8001244:	4a3f      	ldr	r2, [pc, #252]	@ (8001344 <main+0x250>)
 8001246:	2345      	movs	r3, #69	@ 0x45
 8001248:	ca07      	ldmia	r2, {r0, r1, r2}
 800124a:	f7ff fa37 	bl	80006bc <command_cam>
		  command=0;
 800124e:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <main+0x260>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	  }

	  //Reboot MCU
	  if(command==0x47){
 8001254:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <main+0x260>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b47      	cmp	r3, #71	@ 0x47
 800125a:	d102      	bne.n	8001262 <main+0x16e>
		  command=0;
 800125c:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <main+0x260>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	  }

	  //Start GoPro filming
	  if(command==0x48){
 8001262:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <main+0x260>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b48      	cmp	r3, #72	@ 0x48
 8001268:	d10b      	bne.n	8001282 <main+0x18e>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001270:	483a      	ldr	r0, [pc, #232]	@ (800135c <main+0x268>)
 8001272:	f003 fb2b 	bl	80048cc <HAL_GPIO_WritePin>
		  GoPro=1;
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <main+0x26c>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
		  command=0;
 800127c:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <main+0x260>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop GoPro filming
	  if(command==0x49){
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <main+0x260>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b49      	cmp	r3, #73	@ 0x49
 8001288:	d10b      	bne.n	80012a2 <main+0x1ae>
	  		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001290:	4832      	ldr	r0, [pc, #200]	@ (800135c <main+0x268>)
 8001292:	f003 fb1b 	bl	80048cc <HAL_GPIO_WritePin>
	  		  GoPro=1;
 8001296:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <main+0x26c>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
	  		  command=0;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <main+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  	  }

	  //Turn on GoPro
	  if(command==0x4A){
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <main+0x260>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b4a      	cmp	r3, #74	@ 0x4a
 80012a8:	d10b      	bne.n	80012c2 <main+0x1ce>
	  		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012b0:	482a      	ldr	r0, [pc, #168]	@ (800135c <main+0x268>)
 80012b2:	f003 fb0b 	bl	80048cc <HAL_GPIO_WritePin>
	  		  GoPro=1;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <main+0x26c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	  		  command=0;
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <main+0x260>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	  	  }

	  //Turn off GoPro
	  if(command==0x4B){
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <main+0x260>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b4b      	cmp	r3, #75	@ 0x4b
 80012c8:	d10b      	bne.n	80012e2 <main+0x1ee>
	  		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d0:	4822      	ldr	r0, [pc, #136]	@ (800135c <main+0x268>)
 80012d2:	f003 fafb 	bl	80048cc <HAL_GPIO_WritePin>
	  		  GoPro=1;
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <main+0x26c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	  		  command=0;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <main+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	  	  }

	  //Erase flight REC
	  if(command==0x4C){
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <main+0x260>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b4c      	cmp	r3, #76	@ 0x4c
 80012e8:	d104      	bne.n	80012f4 <main+0x200>
		  Chip_Erase();
 80012ea:	f7ff fbe3 	bl	8000ab4 <Chip_Erase>
		  command=0;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <main+0x260>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	  }

	  //Start fligt REC
	  if(command==0x4D){
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <main+0x260>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b4d      	cmp	r3, #77	@ 0x4d
 80012fa:	d105      	bne.n	8001308 <main+0x214>
		  Start_Flight_Recording=1;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <main+0x270>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <main+0x260>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop flight REC
	  if(command==0x4E){
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <main+0x260>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b4e      	cmp	r3, #78	@ 0x4e
 800130e:	d105      	bne.n	800131c <main+0x228>
		  Start_Flight_Recording=0;
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <main+0x270>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <main+0x260>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	  }

	  //Read flight REC
	  if(command==0x52){
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <main+0x260>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b52      	cmp	r3, #82	@ 0x52
 8001322:	f47f af1e 	bne.w	8001162 <main+0x6e>
		  Read_Data_Cont(16);
 8001326:	2010      	movs	r0, #16
 8001328:	f7ff fc2e 	bl	8000b88 <Read_Data_Cont>
		  command = 0;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <main+0x260>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 8001332:	e716      	b.n	8001162 <main+0x6e>
 8001334:	240010b4 	.word	0x240010b4
 8001338:	240010b8 	.word	0x240010b8
 800133c:	240010c0 	.word	0x240010c0
 8001340:	240010c4 	.word	0x240010c4
 8001344:	240010cc 	.word	0x240010cc
 8001348:	240010d0 	.word	0x240010d0
 800134c:	240000a4 	.word	0x240000a4
 8001350:	2400009c 	.word	0x2400009c
 8001354:	2400007d 	.word	0x2400007d
 8001358:	240013e4 	.word	0x240013e4
 800135c:	58020c00 	.word	0x58020c00
 8001360:	2400007e 	.word	0x2400007e
 8001364:	2400007c 	.word	0x2400007c

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	@ 0x70
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001372:	224c      	movs	r2, #76	@ 0x4c
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f009 fcca 	bl	800ad10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 fcc4 	bl	800ad10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001388:	2002      	movs	r0, #2
 800138a:	f003 fab9 	bl	8004900 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <SystemClock_Config+0xf0>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a30      	ldr	r2, [pc, #192]	@ (8001458 <SystemClock_Config+0xf0>)
 8001398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <SystemClock_Config+0xf0>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <SystemClock_Config+0xf4>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	4a2b      	ldr	r2, [pc, #172]	@ (800145c <SystemClock_Config+0xf4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <SystemClock_Config+0xf4>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013c0:	bf00      	nop
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <SystemClock_Config+0xf0>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ce:	d1f8      	bne.n	80013c2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2340      	movs	r3, #64	@ 0x40
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013e8:	233c      	movs	r3, #60	@ 0x3c
 80013ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80013f0:	230a      	movs	r3, #10
 80013f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f8:	230c      	movs	r3, #12
 80013fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fab3 	bl	8004974 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001414:	f000 fbac 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	233f      	movs	r3, #63	@ 0x3f
 800141a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2303      	movs	r3, #3
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001424:	2308      	movs	r3, #8
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001428:	2340      	movs	r3, #64	@ 0x40
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800142c:	2340      	movs	r3, #64	@ 0x40
 800142e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001436:	2340      	movs	r3, #64	@ 0x40
 8001438:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2104      	movs	r1, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fef2 	bl	8005228 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800144a:	f000 fb91 	bl	8001b70 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3770      	adds	r7, #112	@ 0x70
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58024800 	.word	0x58024800
 800145c:	58000400 	.word	0x58000400

08001460 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 8001466:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <MX_FDCAN1_Init+0x108>)
 8001468:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800146c:	4a3e      	ldr	r2, [pc, #248]	@ (8001568 <MX_FDCAN1_Init+0x108>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001472:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001476:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <MX_FDCAN1_Init+0x108>)
 8001478:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001484:	4b39      	ldr	r3, [pc, #228]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001486:	4a3a      	ldr	r2, [pc, #232]	@ (8001570 <MX_FDCAN1_Init+0x110>)
 8001488:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800148a:	4b38      	ldr	r3, [pc, #224]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001490:	4b36      	ldr	r3, [pc, #216]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001496:	4b35      	ldr	r3, [pc, #212]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001498:	2200      	movs	r2, #0
 800149a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800149c:	4b33      	ldr	r3, [pc, #204]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014a2:	4b32      	ldr	r3, [pc, #200]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014b6:	2205      	movs	r2, #5
 80014b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014bc:	2202      	movs	r2, #2
 80014be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014c8:	2203      	movs	r2, #3
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 80014cc:	4b27      	ldr	r3, [pc, #156]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014ec:	2240      	movs	r2, #64	@ 0x40
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 80014fe:	2204      	movs	r2, #4
 8001500:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001504:	2200      	movs	r2, #0
 8001506:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800150a:	2204      	movs	r2, #4
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001516:	2200      	movs	r2, #0
 8001518:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800151c:	2202      	movs	r2, #2
 800151e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001522:	2200      	movs	r2, #0
 8001524:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001528:	2204      	movs	r2, #4
 800152a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800152c:	480f      	ldr	r0, [pc, #60]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800152e:	f001 ff9d 	bl	800346c <HAL_FDCAN_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001538:	f000 fb1a 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 800153e:	f002 f973 	bl	8003828 <HAL_FDCAN_Start>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001548:	f000 fb12 	bl	8001b70 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	4806      	ldr	r0, [pc, #24]	@ (800156c <MX_FDCAN1_Init+0x10c>)
 8001552:	f002 fb01 	bl	8003b58 <HAL_FDCAN_ActivateNotification>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 800155c:	f000 fb08 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024400 	.word	0x58024400
 800156c:	24001100 	.word	0x24001100
 8001570:	4000a000 	.word	0x4000a000

08001574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <MX_SPI1_Init+0xa4>)
 800157a:	4a28      	ldr	r2, [pc, #160]	@ (800161c <MX_SPI1_Init+0xa8>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <MX_SPI1_Init+0xa4>)
 8001580:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <MX_SPI1_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <MX_SPI1_Init+0xa4>)
 800158e:	2207      	movs	r2, #7
 8001590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <MX_SPI1_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_SPI1_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <MX_SPI1_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_SPI1_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_SPI1_Init+0xa4>)
 8001606:	f005 ffc7 	bl	8007598 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001610:	f000 faae 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	240011a0 	.word	0x240011a0
 800161c:	40013000 	.word	0x40013000

08001620 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001626:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <MX_UART5_Init+0x94>)
 8001628:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_UART5_Init+0x90>)
 800162c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_UART5_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_UART5_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_UART5_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_UART5_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001668:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <MX_UART5_Init+0x90>)
 800166a:	f006 fe02 	bl	8008272 <HAL_UART_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 fa7c 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_UART5_Init+0x90>)
 800167c:	f009 fa41 	bl	800ab02 <HAL_UARTEx_SetTxFifoThreshold>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 fa73 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <MX_UART5_Init+0x90>)
 800168e:	f009 fa76 	bl	800ab7e <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 fa6a 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_UART5_Init+0x90>)
 800169e:	f009 f9f7 	bl	800aa90 <HAL_UARTEx_DisableFifoMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 fa62 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	24001228 	.word	0x24001228
 80016b4:	40005000 	.word	0x40005000

080016b8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <MX_UART8_Init+0x90>)
 80016be:	4a23      	ldr	r2, [pc, #140]	@ (800174c <MX_UART8_Init+0x94>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <MX_UART8_Init+0x90>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_UART8_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_UART8_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_UART8_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_UART8_Init+0x90>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_UART8_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <MX_UART8_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_UART8_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_UART8_Init+0x90>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_UART8_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001700:	4811      	ldr	r0, [pc, #68]	@ (8001748 <MX_UART8_Init+0x90>)
 8001702:	f006 fdb6 	bl	8008272 <HAL_UART_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800170c:	f000 fa30 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001710:	2100      	movs	r1, #0
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <MX_UART8_Init+0x90>)
 8001714:	f009 f9f5 	bl	800ab02 <HAL_UARTEx_SetTxFifoThreshold>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800171e:	f000 fa27 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	4808      	ldr	r0, [pc, #32]	@ (8001748 <MX_UART8_Init+0x90>)
 8001726:	f009 fa2a 	bl	800ab7e <HAL_UARTEx_SetRxFifoThreshold>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001730:	f000 fa1e 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_UART8_Init+0x90>)
 8001736:	f009 f9ab 	bl	800aa90 <HAL_UARTEx_DisableFifoMode>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001740:	f000 fa16 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	240012bc 	.word	0x240012bc
 800174c:	40007c00 	.word	0x40007c00

08001750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001756:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 800175c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001798:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 800179a:	f006 fd6a 	bl	8008272 <HAL_UART_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017a4:	f000 f9e4 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 80017ac:	f009 f9a9 	bl	800ab02 <HAL_UARTEx_SetTxFifoThreshold>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017b6:	f000 f9db 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ba:	2100      	movs	r1, #0
 80017bc:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 80017be:	f009 f9de 	bl	800ab7e <HAL_UARTEx_SetRxFifoThreshold>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017c8:	f000 f9d2 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <MX_USART2_UART_Init+0x90>)
 80017ce:	f009 f95f 	bl	800aa90 <HAL_UARTEx_DisableFifoMode>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f000 f9ca 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	24001350 	.word	0x24001350
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <MX_USART3_UART_Init+0x94>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 80017f4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80017f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001832:	f006 fd1e 	bl	8008272 <HAL_UART_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 f998 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	480d      	ldr	r0, [pc, #52]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001844:	f009 f95d 	bl	800ab02 <HAL_UARTEx_SetTxFifoThreshold>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800184e:	f000 f98f 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001856:	f009 f992 	bl	800ab7e <HAL_UARTEx_SetRxFifoThreshold>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001860:	f000 f986 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	@ (8001878 <MX_USART3_UART_Init+0x90>)
 8001866:	f009 f913 	bl	800aa90 <HAL_UARTEx_DisableFifoMode>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 f97e 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	240013e4 	.word	0x240013e4
 800187c:	40004800 	.word	0x40004800

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	@ 0x30
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	4b5f      	ldr	r3, [pc, #380]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a14 <MX_GPIO_Init+0x194>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b4:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	4a56      	ldr	r2, [pc, #344]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c4:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b50      	ldr	r3, [pc, #320]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b48      	ldr	r3, [pc, #288]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	4a47      	ldr	r2, [pc, #284]	@ (8001a14 <MX_GPIO_Init+0x194>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001900:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001914:	4a3f      	ldr	r2, [pc, #252]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192c:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <MX_GPIO_Init+0x194>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001932:	4a38      	ldr	r2, [pc, #224]	@ (8001a14 <MX_GPIO_Init+0x194>)
 8001934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <MX_GPIO_Init+0x194>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2110      	movs	r1, #16
 800194e:	4832      	ldr	r0, [pc, #200]	@ (8001a18 <MX_GPIO_Init+0x198>)
 8001950:	f002 ffbc 	bl	80048cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800195a:	4830      	ldr	r0, [pc, #192]	@ (8001a1c <MX_GPIO_Init+0x19c>)
 800195c:	f002 ffb6 	bl	80048cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2118      	movs	r1, #24
 8001964:	482e      	ldr	r0, [pc, #184]	@ (8001a20 <MX_GPIO_Init+0x1a0>)
 8001966:	f002 ffb1 	bl	80048cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 800196a:	2308      	movs	r3, #8
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4829      	ldr	r0, [pc, #164]	@ (8001a24 <MX_GPIO_Init+0x1a4>)
 800197e:	f002 fdf5 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4824      	ldr	r0, [pc, #144]	@ (8001a28 <MX_GPIO_Init+0x1a8>)
 8001996:	f002 fde9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 800199a:	2310      	movs	r3, #16
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <MX_GPIO_Init+0x198>)
 80019b2:	f002 fddb 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 80019b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4818      	ldr	r0, [pc, #96]	@ (8001a2c <MX_GPIO_Init+0x1ac>)
 80019cc:	f002 fdce 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 80019d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <MX_GPIO_Init+0x19c>)
 80019ea:	f002 fdbf 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 80019ee:	2318      	movs	r3, #24
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4806      	ldr	r0, [pc, #24]	@ (8001a20 <MX_GPIO_Init+0x1a0>)
 8001a06:	f002 fdb1 	bl	800456c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	@ 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	58020c00 	.word	0x58020c00
 8001a20:	58021800 	.word	0x58021800
 8001a24:	58021000 	.word	0x58021000
 8001a28:	58020800 	.word	0x58020800
 8001a2c:	58020400 	.word	0x58020400

08001a30 <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 8001a36:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <init+0xc0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <init+0xc0>)
 8001a3e:	22a0      	movs	r2, #160	@ 0xa0
 8001a40:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <init+0xc0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <init+0xc0>)
 8001a4a:	22b0      	movs	r2, #176	@ 0xb0
 8001a4c:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <init+0xc0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001a54:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <init+0xc0>)
 8001a56:	22c0      	movs	r2, #192	@ 0xc0
 8001a58:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <init+0xc4>)
 8001a5c:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a64:	21ff      	movs	r1, #255	@ 0xff
 8001a66:	4618      	mov	r0, r3
 8001a68:	f009 f952 	bl	800ad10 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a76:	21ff      	movs	r1, #255	@ 0xff
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f009 f949 	bl	800ad10 <memset>
	Flash.Buffer_Index = 0;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <init+0xc4>)
 8001a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a84:	2200      	movs	r2, #0
 8001a86:	80da      	strh	r2, [r3, #6]
	Flash.Buffer_Select = 0;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <init+0xc4>)
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	Flash.Block_Mem = 0;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <init+0xc4>)
 8001a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a98:	2200      	movs	r2, #0
 8001a9a:	805a      	strh	r2, [r3, #2]
	Flash.Page_Index = 0;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <init+0xc4>)
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	809a      	strh	r2, [r3, #4]
	Flash.ID = 0;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <init+0xc4>)
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aac:	461a      	mov	r2, r3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6093      	str	r3, [r2, #8]
	Flash.Buffer_p = Flash.Buffer_0;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <init+0xc4>)
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <init+0xc4>)
 8001abc:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <init+0xc8>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <init+0xc8>)
 8001ac4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac8:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <init+0xcc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <init+0xcc>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <init+0xd0>)
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <init+0xd4>)
 8001ada:	609a      	str	r2, [r3, #8]
	CAM2.huart = &huart8;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <init+0xd8>)
 8001ade:	4a0b      	ldr	r2, [pc, #44]	@ (8001b0c <init+0xdc>)
 8001ae0:	609a      	str	r2, [r3, #8]
	CAM3.huart = &huart5;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <init+0xe0>)
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b14 <init+0xe4>)
 8001ae6:	609a      	str	r2, [r3, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2400009c 	.word	0x2400009c
 8001af4:	240000a4 	.word	0x240000a4
 8001af8:	e000edf0 	.word	0xe000edf0
 8001afc:	e0001000 	.word	0xe0001000
 8001b00:	240010b4 	.word	0x240010b4
 8001b04:	24001350 	.word	0x24001350
 8001b08:	240010c0 	.word	0x240010c0
 8001b0c:	240012bc 	.word	0x240012bc
 8001b10:	240010cc 	.word	0x240010cc
 8001b14:	24001228 	.word	0x24001228

08001b18 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b2a:	f000 fec3 	bl	80028b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b3e:	2387      	movs	r3, #135	@ 0x87
 8001b40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b46:	2300      	movs	r3, #0
 8001b48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fee1 	bl	8002924 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b62:	2004      	movs	r0, #4
 8001b64:	f000 febe 	bl	80028e4 <HAL_MPU_Enable>

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <Error_Handler+0x10>)
 8001b76:	f001 fe57 	bl	8003828 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	24001100 	.word	0x24001100

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_MspInit+0x30>)
 8001b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b90:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x30>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x30>)
 8001b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	58024400 	.word	0x58024400

08001bb8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0ba      	sub	sp, #232	@ 0xe8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	22c0      	movs	r2, #192	@ 0xc0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 f899 	bl	800ad10 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a33      	ldr	r2, [pc, #204]	@ (8001cb0 <HAL_FDCAN_MspInit+0xf8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d15f      	bne.n	8001ca8 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001c00:	2314      	movs	r3, #20
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c08:	23c0      	movs	r3, #192	@ 0xc0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001c14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fe8d 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001c2c:	f7ff ffa0 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c30:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c36:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c54:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_FDCAN_MspInit+0xfc>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c86:	2309      	movs	r3, #9
 8001c88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4809      	ldr	r0, [pc, #36]	@ (8001cb8 <HAL_FDCAN_MspInit+0x100>)
 8001c94:	f002 fc6a 	bl	800456c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2013      	movs	r0, #19
 8001c9e:	f000 fdd4 	bl	800284a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001ca2:	2013      	movs	r0, #19
 8001ca4:	f000 fdeb 	bl	800287e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001ca8:	bf00      	nop
 8001caa:	37e8      	adds	r7, #232	@ 0xe8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	4000a000 	.word	0x4000a000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	58020400 	.word	0x58020400

08001cbc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	22c0      	movs	r2, #192	@ 0xc0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f009 f817 	bl	800ad10 <memset>
  if(hspi->Instance==SPI1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a26      	ldr	r2, [pc, #152]	@ (8001d80 <HAL_SPI_MspInit+0xc4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d144      	bne.n	8001d76 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001cec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fe1d 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001d0c:	f7ff ff30 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_SPI_MspInit+0xc8>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d4c:	23e0      	movs	r3, #224	@ 0xe0
 8001d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d64:	2305      	movs	r3, #5
 8001d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_SPI_MspInit+0xcc>)
 8001d72:	f002 fbfb 	bl	800456c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	37e8      	adds	r7, #232	@ 0xe8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40013000 	.word	0x40013000
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020000 	.word	0x58020000

08001d8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0c0      	sub	sp, #256	@ 0x100
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da8:	22c0      	movs	r2, #192	@ 0xc0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f008 ffaf 	bl	800ad10 <memset>
  if(huart->Instance==UART5)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4aa6      	ldr	r2, [pc, #664]	@ (8002050 <HAL_UART_MspInit+0x2c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d14f      	bne.n	8001e5c <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001dbc:	f04f 0202 	mov.w	r2, #2
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fdb4 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001dde:	f7ff fec7 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001de2:	4b9c      	ldr	r3, [pc, #624]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de8:	4a9a      	ldr	r2, [pc, #616]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001df2:	4b98      	ldr	r3, [pc, #608]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	4a93      	ldr	r2, [pc, #588]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e10:	4b90      	ldr	r3, [pc, #576]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e1e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001e38:	230e      	movs	r3, #14
 8001e3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e42:	4619      	mov	r1, r3
 8001e44:	4884      	ldr	r0, [pc, #528]	@ (8002058 <HAL_UART_MspInit+0x2cc>)
 8001e46:	f002 fb91 	bl	800456c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2035      	movs	r0, #53	@ 0x35
 8001e50:	f000 fcfb 	bl	800284a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e54:	2035      	movs	r0, #53	@ 0x35
 8001e56:	f000 fd12 	bl	800287e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e5a:	e0f3      	b.n	8002044 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==UART8)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7e      	ldr	r2, [pc, #504]	@ (800205c <HAL_UART_MspInit+0x2d0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d14e      	bne.n	8001f04 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001e66:	f04f 0202 	mov.w	r2, #2
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fd5f 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001e88:	f7ff fe72 	bl	8001b70 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001e8c:	4b71      	ldr	r3, [pc, #452]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e92:	4a70      	ldr	r2, [pc, #448]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	4a68      	ldr	r2, [pc, #416]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eba:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001eea:	4619      	mov	r1, r3
 8001eec:	485c      	ldr	r0, [pc, #368]	@ (8002060 <HAL_UART_MspInit+0x2d4>)
 8001eee:	f002 fb3d 	bl	800456c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2053      	movs	r0, #83	@ 0x53
 8001ef8:	f000 fca7 	bl	800284a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001efc:	2053      	movs	r0, #83	@ 0x53
 8001efe:	f000 fcbe 	bl	800287e <HAL_NVIC_EnableIRQ>
}
 8001f02:	e09f      	b.n	8002044 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a56      	ldr	r2, [pc, #344]	@ (8002064 <HAL_UART_MspInit+0x2d8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d14e      	bne.n	8001fac <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f0e:	f04f 0202 	mov.w	r2, #2
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fd0b 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001f30:	f7ff fe1e 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f34:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f3a:	4a46      	ldr	r2, [pc, #280]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f44:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f58:	4a3e      	ldr	r2, [pc, #248]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f62:	4b3c      	ldr	r3, [pc, #240]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f70:	230c      	movs	r3, #12
 8001f72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f92:	4619      	mov	r1, r3
 8001f94:	4834      	ldr	r0, [pc, #208]	@ (8002068 <HAL_UART_MspInit+0x2dc>)
 8001f96:	f002 fae9 	bl	800456c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2026      	movs	r0, #38	@ 0x26
 8001fa0:	f000 fc53 	bl	800284a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fa4:	2026      	movs	r0, #38	@ 0x26
 8001fa6:	f000 fc6a 	bl	800287e <HAL_NVIC_EnableIRQ>
}
 8001faa:	e04b      	b.n	8002044 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800206c <HAL_UART_MspInit+0x2e0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d146      	bne.n	8002044 <HAL_UART_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fb6:	f04f 0202 	mov.w	r2, #2
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fcb7 	bl	8005940 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001fd8:	f7ff fdca 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_UART_MspInit+0x2c8>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800201c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002032:	2307      	movs	r3, #7
 8002034:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002038:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800203c:	4619      	mov	r1, r3
 800203e:	480c      	ldr	r0, [pc, #48]	@ (8002070 <HAL_UART_MspInit+0x2e4>)
 8002040:	f002 fa94 	bl	800456c <HAL_GPIO_Init>
}
 8002044:	bf00      	nop
 8002046:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40005000 	.word	0x40005000
 8002054:	58024400 	.word	0x58024400
 8002058:	58020400 	.word	0x58020400
 800205c:	40007c00 	.word	0x40007c00
 8002060:	58021000 	.word	0x58021000
 8002064:	40004400 	.word	0x40004400
 8002068:	58020000 	.word	0x58020000
 800206c:	40004800 	.word	0x40004800
 8002070:	58020c00 	.word	0x58020c00

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <NMI_Handler+0x4>

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <UsageFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 fab6 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <SysTick_Handler+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <SysTick_Handler+0x1c>
	  CLK_SIM++;
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <SysTick_Handler+0x5c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a11      	ldr	r2, [pc, #68]	@ (8002124 <SysTick_Handler+0x5c>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e002      	b.n	80020ea <SysTick_Handler+0x22>
  }
  else{
	  CLK_SIM=0;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <SysTick_Handler+0x5c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  }

  if(GoPro){
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <SysTick_Handler+0x60>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d014      	beq.n	800211c <SysTick_Handler+0x54>
	  GoPro_timer++;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <SysTick_Handler+0x64>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <SysTick_Handler+0x64>)
 80020fa:	6013      	str	r3, [r2, #0]
	  if(GoPro>=GOPRO_MAX){
 80020fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <SysTick_Handler+0x60>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b63      	cmp	r3, #99	@ 0x63
 8002102:	d90b      	bls.n	800211c <SysTick_Handler+0x54>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <SysTick_Handler+0x68>)
 800210c:	f002 fbde 	bl	80048cc <HAL_GPIO_WritePin>
		  GoPro_timer=0;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <SysTick_Handler+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		  GoPro=0;
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <SysTick_Handler+0x60>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2400007c 	.word	0x2400007c
 8002124:	24001478 	.word	0x24001478
 8002128:	2400007e 	.word	0x2400007e
 800212c:	2400147c 	.word	0x2400147c
 8002130:	58020c00 	.word	0x58020c00

08002134 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <FDCAN1_IT0_IRQHandler+0x10>)
 800213a:	f001 fd87 	bl	8003c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	24001100 	.word	0x24001100

08002148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <USART2_IRQHandler+0x10>)
 800214e:	f006 fa83 	bl	8008658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24001350 	.word	0x24001350

0800215c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <UART5_IRQHandler+0x10>)
 8002162:	f006 fa79 	bl	8008658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	24001228 	.word	0x24001228

08002170 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <UART8_IRQHandler+0x10>)
 8002176:	f006 fa6f 	bl	8008658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	240012bc 	.word	0x240012bc

08002184 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 800218e:	e071      	b.n	8002274 <HAL_FDCAN_RxFifo0Callback+0xf0>
		//CAN ID = 401 is CAN message for commands to black box
		if(RxHeader.Identifier == 401){
 8002190:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f240 1291 	movw	r2, #401	@ 0x191
 8002198:	4293      	cmp	r3, r2
 800219a:	d109      	bne.n	80021b0 <HAL_FDCAN_RxFifo0Callback+0x2c>
			if(CAN.Rx_Buffer[6] == CAN.Rx_Buffer[7]){
 800219c:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800219e:	7b9a      	ldrb	r2, [r3, #14]
 80021a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80021a2:	7bdb      	ldrb	r3, [r3, #15]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d103      	bne.n	80021b0 <HAL_FDCAN_RxFifo0Callback+0x2c>
				command = CAN.Rx_Buffer[6];
 80021a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80021aa:	7b9a      	ldrb	r2, [r3, #14]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <HAL_FDCAN_RxFifo0Callback+0x114>)
 80021ae:	701a      	strb	r2, [r3, #0]
			}

		}
		//CAN ID = 402 is CAN message for manual update of current page
		if(RxHeader.Identifier == 402){
 80021b0:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 80021b8:	d11c      	bne.n	80021f4 <HAL_FDCAN_RxFifo0Callback+0x70>
			uint16_t Page = *(uint16_t*)&CAN.Rx_Buffer[6];
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_FDCAN_RxFifo0Callback+0x118>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	83fb      	strh	r3, [r7, #30]

			Automatic_Block_Managment(Page);
 80021c0:	8bfb      	ldrh	r3, [r7, #30]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fc50 	bl	8000a68 <Automatic_Block_Managment>

			Flash.Buffer_Index=0;
 80021c8:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80021ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ce:	2200      	movs	r2, #0
 80021d0:	80da      	strh	r2, [r3, #6]
			Flash.Page_Index=Page;
 80021d2:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80021d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d8:	461a      	mov	r2, r3
 80021da:	8bfb      	ldrh	r3, [r7, #30]
 80021dc:	8093      	strh	r3, [r2, #4]
			Flash.Buffer_Select=0;
 80021de:	4b30      	ldr	r3, [pc, #192]	@ (80022a0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80021e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			Flash.Buffer_p=Flash.Buffer_0;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80021ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80021f2:	60d3      	str	r3, [r2, #12]
		}

		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 80021f4:	23f0      	movs	r3, #240	@ 0xf0
 80021f6:	733b      	strb	r3, [r7, #12]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 80021f8:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	3301      	adds	r3, #1
 8002202:	b292      	uxth	r2, r2
 8002204:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 8002206:	4b23      	ldr	r3, [pc, #140]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002208:	7a1b      	ldrb	r3, [r3, #8]
 800220a:	73fb      	strb	r3, [r7, #15]
		Temp[4]=CAN.Rx_Buffer[1];
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800220e:	7a5b      	ldrb	r3, [r3, #9]
 8002210:	743b      	strb	r3, [r7, #16]
		Temp[5]=CAN.Rx_Buffer[2];
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002214:	7a9b      	ldrb	r3, [r3, #10]
 8002216:	747b      	strb	r3, [r7, #17]
		Temp[6]=CAN.Rx_Buffer[3];
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800221a:	7adb      	ldrb	r3, [r3, #11]
 800221c:	74bb      	strb	r3, [r7, #18]
		Temp[7]=CAN.Rx_Buffer[4];
 800221e:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	74fb      	strb	r3, [r7, #19]
		Temp[8]=CAN.Rx_Buffer[5];
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002226:	7b5b      	ldrb	r3, [r3, #13]
 8002228:	753b      	strb	r3, [r7, #20]
		Temp[9]=CAN.Rx_Buffer[6];
 800222a:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800222c:	7b9b      	ldrb	r3, [r3, #14]
 800222e:	757b      	strb	r3, [r7, #21]
		Temp[10]=CAN.Rx_Buffer[7];
 8002230:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002232:	7bdb      	ldrb	r3, [r3, #15]
 8002234:	75bb      	strb	r3, [r7, #22]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8002236:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	75fb      	strb	r3, [r7, #23]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b2db      	uxtb	r3, r3
 8002246:	763b      	strb	r3, [r7, #24]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8002248:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	767b      	strb	r3, [r7, #25]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e1b      	lsrs	r3, r3, #24
 8002258:	b2db      	uxtb	r3, r3
 800225a:	76bb      	strb	r3, [r7, #26]

		//Stop byte
		Temp[15]=0x0F;
 800225c:	230f      	movs	r3, #15
 800225e:	76fb      	strb	r3, [r7, #27]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_FDCAN_RxFifo0Callback+0xf0>
			Write_Data(Temp, sizeof(Temp));
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2110      	movs	r1, #16
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fb40 	bl	80008f4 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002274:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_FDCAN_RxFifo0Callback+0x128>)
 8002276:	4a06      	ldr	r2, [pc, #24]	@ (8002290 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8002278:	2140      	movs	r1, #64	@ 0x40
 800227a:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800227c:	f001 fb00 	bl	8003880 <HAL_FDCAN_GetRxMessage>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d084      	beq.n	8002190 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	240010d8 	.word	0x240010d8
 8002294:	24000080 	.word	0x24000080
 8002298:	2400007d 	.word	0x2400007d
 800229c:	2400008e 	.word	0x2400008e
 80022a0:	240000a4 	.word	0x240000a4
 80022a4:	24001478 	.word	0x24001478
 80022a8:	2400007c 	.word	0x2400007c
 80022ac:	24000088 	.word	0x24000088
 80022b0:	24001100 	.word	0x24001100

080022b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	if(huart == CAM1.huart)HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <HAL_UART_RxCpltCallback+0x58>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_UART_RxCpltCallback+0x20>
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_UART_RxCpltCallback+0x58>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2202      	movs	r2, #2
 80022cc:	4910      	ldr	r1, [pc, #64]	@ (8002310 <HAL_UART_RxCpltCallback+0x5c>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 f976 	bl	80085c0 <HAL_UART_Receive_IT>
	if(huart == CAM2.huart)HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_UART_RxCpltCallback+0x60>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d106      	bne.n	80022ec <HAL_UART_RxCpltCallback+0x38>
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_UART_RxCpltCallback+0x60>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2202      	movs	r2, #2
 80022e4:	490c      	ldr	r1, [pc, #48]	@ (8002318 <HAL_UART_RxCpltCallback+0x64>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f006 f96a 	bl	80085c0 <HAL_UART_Receive_IT>
	if(huart == CAM3.huart)HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_UART_RxCpltCallback+0x68>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x50>
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_UART_RxCpltCallback+0x68>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4908      	ldr	r1, [pc, #32]	@ (8002320 <HAL_UART_RxCpltCallback+0x6c>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 f95e 	bl	80085c0 <HAL_UART_Receive_IT>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	240010b4 	.word	0x240010b4
 8002310:	240010b8 	.word	0x240010b8
 8002314:	240010c0 	.word	0x240010c0
 8002318:	240010c4 	.word	0x240010c4
 800231c:	240010cc 	.word	0x240010cc
 8002320:	240010d0 	.word	0x240010d0

08002324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <_sbrk+0x5c>)
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <_sbrk+0x60>)
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <_sbrk+0x64>)
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <_sbrk+0x68>)
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d207      	bcs.n	8002364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002354:	f008 fce4 	bl	800ad20 <__errno>
 8002358:	4603      	mov	r3, r0
 800235a:	220c      	movs	r2, #12
 800235c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e009      	b.n	8002378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <_sbrk+0x64>)
 8002374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	24080000 	.word	0x24080000
 8002384:	00000400 	.word	0x00000400
 8002388:	24001480 	.word	0x24001480
 800238c:	240015d0 	.word	0x240015d0

08002390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002394:	4b43      	ldr	r3, [pc, #268]	@ (80024a4 <SystemInit+0x114>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	4a42      	ldr	r2, [pc, #264]	@ (80024a4 <SystemInit+0x114>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023a4:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <SystemInit+0x118>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d807      	bhi.n	80023c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023b0:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <SystemInit+0x118>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	4a3b      	ldr	r2, [pc, #236]	@ (80024a8 <SystemInit+0x118>)
 80023ba:	f043 0307 	orr.w	r3, r3, #7
 80023be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023c0:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <SystemInit+0x11c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a39      	ldr	r2, [pc, #228]	@ (80024ac <SystemInit+0x11c>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023cc:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <SystemInit+0x11c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <SystemInit+0x11c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4935      	ldr	r1, [pc, #212]	@ (80024ac <SystemInit+0x11c>)
 80023d8:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <SystemInit+0x120>)
 80023da:	4013      	ands	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023de:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <SystemInit+0x118>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <SystemInit+0x118>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 030f 	bic.w	r3, r3, #15
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <SystemInit+0x118>)
 80023f4:	f043 0307 	orr.w	r3, r3, #7
 80023f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023fa:	4b2c      	ldr	r3, [pc, #176]	@ (80024ac <SystemInit+0x11c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002400:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <SystemInit+0x11c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002406:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <SystemInit+0x11c>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <SystemInit+0x11c>)
 800240e:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <SystemInit+0x124>)
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002412:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <SystemInit+0x11c>)
 8002414:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <SystemInit+0x128>)
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <SystemInit+0x11c>)
 800241a:	4a28      	ldr	r2, [pc, #160]	@ (80024bc <SystemInit+0x12c>)
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <SystemInit+0x11c>)
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002424:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <SystemInit+0x11c>)
 8002426:	4a25      	ldr	r2, [pc, #148]	@ (80024bc <SystemInit+0x12c>)
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <SystemInit+0x11c>)
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002430:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <SystemInit+0x11c>)
 8002432:	4a22      	ldr	r2, [pc, #136]	@ (80024bc <SystemInit+0x12c>)
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <SystemInit+0x11c>)
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <SystemInit+0x11c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1a      	ldr	r2, [pc, #104]	@ (80024ac <SystemInit+0x11c>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002448:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <SystemInit+0x11c>)
 800244a:	2200      	movs	r2, #0
 800244c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <SystemInit+0x130>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <SystemInit+0x134>)
 8002454:	4013      	ands	r3, r2
 8002456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800245a:	d202      	bcs.n	8002462 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <SystemInit+0x138>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002462:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <SystemInit+0x11c>)
 8002464:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d113      	bne.n	8002498 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <SystemInit+0x11c>)
 8002472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002476:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <SystemInit+0x11c>)
 8002478:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800247c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <SystemInit+0x13c>)
 8002482:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002486:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <SystemInit+0x11c>)
 800248a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800248e:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <SystemInit+0x11c>)
 8002490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002494:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00
 80024a8:	52002000 	.word	0x52002000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024b4:	02020200 	.word	0x02020200
 80024b8:	01ff0000 	.word	0x01ff0000
 80024bc:	01010280 	.word	0x01010280
 80024c0:	5c001000 	.word	0x5c001000
 80024c4:	ffff0000 	.word	0xffff0000
 80024c8:	51008108 	.word	0x51008108
 80024cc:	52004000 	.word	0x52004000

080024d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <ExitRun0Mode+0x2c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <ExitRun0Mode+0x2c>)
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80024e0:	bf00      	nop
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <ExitRun0Mode+0x2c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f9      	beq.n	80024e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	58024800 	.word	0x58024800

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800253c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002504:	f7ff ffe4 	bl	80024d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002508:	f7ff ff42 	bl	8002390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800250c:	480c      	ldr	r0, [pc, #48]	@ (8002540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250e:	490d      	ldr	r1, [pc, #52]	@ (8002544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002524:	4c0a      	ldr	r4, [pc, #40]	@ (8002550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002532:	f008 fbfb 	bl	800ad2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002536:	f7fe fddd 	bl	80010f4 <main>
  bx  lr
 800253a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800253c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002544:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002548:	0800b7a0 	.word	0x0800b7a0
  ldr r2, =_sbss
 800254c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002550:	240015d0 	.word	0x240015d0

08002554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC3_IRQHandler>
	...

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255e:	2003      	movs	r0, #3
 8002560:	f000 f968 	bl	8002834 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002564:	f003 f816 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_Init+0x68>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4913      	ldr	r1, [pc, #76]	@ (80025c4 <HAL_Init+0x6c>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_Init+0x68>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_Init+0x6c>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_Init+0x70>)
 800259a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800259c:	4a0b      	ldr	r2, [pc, #44]	@ (80025cc <HAL_Init+0x74>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a2:	200f      	movs	r0, #15
 80025a4:	f000 f814 	bl	80025d0 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e002      	b.n	80025b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025b2:	f7ff fae7 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	0800b714 	.word	0x0800b714
 80025c8:	24000004 	.word	0x24000004
 80025cc:	24000000 	.word	0x24000000

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_InitTick+0x60>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e021      	b.n	8002628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <HAL_InitTick+0x64>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_InitTick+0x60>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f94d 	bl	800289a <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f917 	bl	800284a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <HAL_InitTick+0x68>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2400000c 	.word	0x2400000c
 8002634:	24000000 	.word	0x24000000
 8002638:	24000008 	.word	0x24000008

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2400000c 	.word	0x2400000c
 8002660:	24001484 	.word	0x24001484

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24001484 	.word	0x24001484

0800267c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <HAL_GetREVID+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0c1b      	lsrs	r3, r3, #16
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	5c001000 	.word	0x5c001000

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x40>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x40>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00
 80026d8:	05fa0000 	.word	0x05fa0000

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <__NVIC_EnableIRQ+0x38>)
 8002712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	@ (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	@ (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002800:	d301      	bcc.n	8002806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002802:	2301      	movs	r3, #1
 8002804:	e00f      	b.n	8002826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <SysTick_Config+0x40>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280e:	210f      	movs	r1, #15
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f7ff ff8e 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <SysTick_Config+0x40>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281e:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <SysTick_Config+0x40>)
 8002820:	2207      	movs	r2, #7
 8002822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	e000e010 	.word	0xe000e010

08002834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff29 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff40 	bl	80026dc <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff90 	bl	8002788 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5f 	bl	8002734 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff33 	bl	80026f8 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa4 	bl	80027f0 <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028b8:	f3bf 8f5f 	dmb	sy
}
 80028bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <HAL_MPU_Disable+0x28>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <HAL_MPU_Disable+0x28>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_MPU_Disable+0x2c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	e000ed90 	.word	0xe000ed90

080028e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_MPU_Enable+0x38>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_MPU_Enable+0x3c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <HAL_MPU_Enable+0x3c>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002900:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002902:	f3bf 8f4f 	dsb	sy
}
 8002906:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002908:	f3bf 8f6f 	isb	sy
}
 800290c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed90 	.word	0xe000ed90
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	785a      	ldrb	r2, [r3, #1]
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002932:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002934:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002940:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7b1b      	ldrb	r3, [r3, #12]
 800294c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7adb      	ldrb	r3, [r3, #11]
 8002952:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002954:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800295c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7b5b      	ldrb	r3, [r3, #13]
 8002962:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002964:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7b9b      	ldrb	r3, [r3, #14]
 800296a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800296c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7bdb      	ldrb	r3, [r3, #15]
 8002972:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a5b      	ldrb	r3, [r3, #9]
 800297a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800297c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002984:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800298c:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800298e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002990:	6113      	str	r3, [r2, #16]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed90 	.word	0xe000ed90

080029a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fe5a 	bl	8002664 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e2dc      	b.n	8002f76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e2cd      	b.n	8002f76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a76      	ldr	r2, [pc, #472]	@ (8002bb8 <HAL_DMA_Abort+0x214>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04a      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a74      	ldr	r2, [pc, #464]	@ (8002bbc <HAL_DMA_Abort+0x218>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d045      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a73      	ldr	r2, [pc, #460]	@ (8002bc0 <HAL_DMA_Abort+0x21c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d040      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a71      	ldr	r2, [pc, #452]	@ (8002bc4 <HAL_DMA_Abort+0x220>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d03b      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a70      	ldr	r2, [pc, #448]	@ (8002bc8 <HAL_DMA_Abort+0x224>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d036      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	@ (8002bcc <HAL_DMA_Abort+0x228>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d031      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd0 <HAL_DMA_Abort+0x22c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02c      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6b      	ldr	r2, [pc, #428]	@ (8002bd4 <HAL_DMA_Abort+0x230>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd8 <HAL_DMA_Abort+0x234>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a68      	ldr	r2, [pc, #416]	@ (8002bdc <HAL_DMA_Abort+0x238>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a67      	ldr	r2, [pc, #412]	@ (8002be0 <HAL_DMA_Abort+0x23c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_DMA_Abort+0x240>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a64      	ldr	r2, [pc, #400]	@ (8002be8 <HAL_DMA_Abort+0x244>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a62      	ldr	r2, [pc, #392]	@ (8002bec <HAL_DMA_Abort+0x248>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a61      	ldr	r2, [pc, #388]	@ (8002bf0 <HAL_DMA_Abort+0x24c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_Abort+0xd6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf4 <HAL_DMA_Abort+0x250>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_DMA_Abort+0xda>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_Abort+0xdc>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 021e 	bic.w	r2, r2, #30
 8002a92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e00a      	b.n	8002ac2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020e 	bic.w	r2, r2, #14
 8002aba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb8 <HAL_DMA_Abort+0x214>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d072      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8002bbc <HAL_DMA_Abort+0x218>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d06d      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a39      	ldr	r2, [pc, #228]	@ (8002bc0 <HAL_DMA_Abort+0x21c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d068      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a37      	ldr	r2, [pc, #220]	@ (8002bc4 <HAL_DMA_Abort+0x220>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d063      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a36      	ldr	r2, [pc, #216]	@ (8002bc8 <HAL_DMA_Abort+0x224>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d05e      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <HAL_DMA_Abort+0x228>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d059      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a33      	ldr	r2, [pc, #204]	@ (8002bd0 <HAL_DMA_Abort+0x22c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d054      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a31      	ldr	r2, [pc, #196]	@ (8002bd4 <HAL_DMA_Abort+0x230>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d04f      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a30      	ldr	r2, [pc, #192]	@ (8002bd8 <HAL_DMA_Abort+0x234>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d04a      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	@ (8002bdc <HAL_DMA_Abort+0x238>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d045      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002be0 <HAL_DMA_Abort+0x23c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d040      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <HAL_DMA_Abort+0x240>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d03b      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002be8 <HAL_DMA_Abort+0x244>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d036      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a28      	ldr	r2, [pc, #160]	@ (8002bec <HAL_DMA_Abort+0x248>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_DMA_Abort+0x24c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d02c      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <HAL_DMA_Abort+0x250>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d027      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a24      	ldr	r2, [pc, #144]	@ (8002bf8 <HAL_DMA_Abort+0x254>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <HAL_DMA_Abort+0x258>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	@ (8002c00 <HAL_DMA_Abort+0x25c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <HAL_DMA_Abort+0x260>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c08 <HAL_DMA_Abort+0x264>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_DMA_Abort+0x268>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_DMA_Abort+0x26c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_DMA_Abort+0x270>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d132      	bne.n	8002c18 <HAL_DMA_Abort+0x274>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e031      	b.n	8002c1a <HAL_DMA_Abort+0x276>
 8002bb6:	bf00      	nop
 8002bb8:	40020010 	.word	0x40020010
 8002bbc:	40020028 	.word	0x40020028
 8002bc0:	40020040 	.word	0x40020040
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	40020070 	.word	0x40020070
 8002bcc:	40020088 	.word	0x40020088
 8002bd0:	400200a0 	.word	0x400200a0
 8002bd4:	400200b8 	.word	0x400200b8
 8002bd8:	40020410 	.word	0x40020410
 8002bdc:	40020428 	.word	0x40020428
 8002be0:	40020440 	.word	0x40020440
 8002be4:	40020458 	.word	0x40020458
 8002be8:	40020470 	.word	0x40020470
 8002bec:	40020488 	.word	0x40020488
 8002bf0:	400204a0 	.word	0x400204a0
 8002bf4:	400204b8 	.word	0x400204b8
 8002bf8:	58025408 	.word	0x58025408
 8002bfc:	5802541c 	.word	0x5802541c
 8002c00:	58025430 	.word	0x58025430
 8002c04:	58025444 	.word	0x58025444
 8002c08:	58025458 	.word	0x58025458
 8002c0c:	5802546c 	.word	0x5802546c
 8002c10:	58025480 	.word	0x58025480
 8002c14:	58025494 	.word	0x58025494
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6d      	ldr	r2, [pc, #436]	@ (8002de8 <HAL_DMA_Abort+0x444>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002dec <HAL_DMA_Abort+0x448>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6a      	ldr	r2, [pc, #424]	@ (8002df0 <HAL_DMA_Abort+0x44c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	@ (8002df4 <HAL_DMA_Abort+0x450>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a67      	ldr	r2, [pc, #412]	@ (8002df8 <HAL_DMA_Abort+0x454>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_DMA_Abort+0x458>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a64      	ldr	r2, [pc, #400]	@ (8002e00 <HAL_DMA_Abort+0x45c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a62      	ldr	r2, [pc, #392]	@ (8002e04 <HAL_DMA_Abort+0x460>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a61      	ldr	r2, [pc, #388]	@ (8002e08 <HAL_DMA_Abort+0x464>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8002e0c <HAL_DMA_Abort+0x468>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5e      	ldr	r2, [pc, #376]	@ (8002e10 <HAL_DMA_Abort+0x46c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8002e14 <HAL_DMA_Abort+0x470>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e18 <HAL_DMA_Abort+0x474>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a59      	ldr	r2, [pc, #356]	@ (8002e1c <HAL_DMA_Abort+0x478>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a58      	ldr	r2, [pc, #352]	@ (8002e20 <HAL_DMA_Abort+0x47c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Abort+0x32a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a56      	ldr	r2, [pc, #344]	@ (8002e24 <HAL_DMA_Abort+0x480>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <HAL_DMA_Abort+0x33c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e007      	b.n	8002cf0 <HAL_DMA_Abort+0x34c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002cf0:	e013      	b.n	8002d1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf2:	f7ff fcb7 	bl	8002664 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d90c      	bls.n	8002d1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e12d      	b.n	8002f76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e5      	bne.n	8002cf2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <HAL_DMA_Abort+0x444>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <HAL_DMA_Abort+0x448>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <HAL_DMA_Abort+0x44c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <HAL_DMA_Abort+0x450>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a29      	ldr	r2, [pc, #164]	@ (8002df8 <HAL_DMA_Abort+0x454>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	@ (8002dfc <HAL_DMA_Abort+0x458>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <HAL_DMA_Abort+0x45c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a24      	ldr	r2, [pc, #144]	@ (8002e04 <HAL_DMA_Abort+0x460>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <HAL_DMA_Abort+0x464>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a21      	ldr	r2, [pc, #132]	@ (8002e0c <HAL_DMA_Abort+0x468>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <HAL_DMA_Abort+0x46c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1e      	ldr	r2, [pc, #120]	@ (8002e14 <HAL_DMA_Abort+0x470>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <HAL_DMA_Abort+0x474>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_DMA_Abort+0x478>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <HAL_DMA_Abort+0x47c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort+0x422>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_DMA_Abort+0x480>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Abort+0x426>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_Abort+0x428>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02b      	beq.n	8002e28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	223f      	movs	r2, #63	@ 0x3f
 8002de0:	409a      	lsls	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	e02a      	b.n	8002e3e <HAL_DMA_Abort+0x49a>
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a4f      	ldr	r2, [pc, #316]	@ (8002f80 <HAL_DMA_Abort+0x5dc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d072      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f84 <HAL_DMA_Abort+0x5e0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d06d      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4c      	ldr	r2, [pc, #304]	@ (8002f88 <HAL_DMA_Abort+0x5e4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d068      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	@ (8002f8c <HAL_DMA_Abort+0x5e8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d063      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a49      	ldr	r2, [pc, #292]	@ (8002f90 <HAL_DMA_Abort+0x5ec>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d05e      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a47      	ldr	r2, [pc, #284]	@ (8002f94 <HAL_DMA_Abort+0x5f0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d059      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a46      	ldr	r2, [pc, #280]	@ (8002f98 <HAL_DMA_Abort+0x5f4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d054      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a44      	ldr	r2, [pc, #272]	@ (8002f9c <HAL_DMA_Abort+0x5f8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d04f      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a43      	ldr	r2, [pc, #268]	@ (8002fa0 <HAL_DMA_Abort+0x5fc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04a      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a41      	ldr	r2, [pc, #260]	@ (8002fa4 <HAL_DMA_Abort+0x600>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d045      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a40      	ldr	r2, [pc, #256]	@ (8002fa8 <HAL_DMA_Abort+0x604>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d040      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8002fac <HAL_DMA_Abort+0x608>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03b      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb0 <HAL_DMA_Abort+0x60c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d036      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb4 <HAL_DMA_Abort+0x610>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb8 <HAL_DMA_Abort+0x614>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02c      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	@ (8002fbc <HAL_DMA_Abort+0x618>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a37      	ldr	r2, [pc, #220]	@ (8002fc0 <HAL_DMA_Abort+0x61c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a35      	ldr	r2, [pc, #212]	@ (8002fc4 <HAL_DMA_Abort+0x620>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	@ (8002fc8 <HAL_DMA_Abort+0x624>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	@ (8002fcc <HAL_DMA_Abort+0x628>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	@ (8002fd0 <HAL_DMA_Abort+0x62c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <HAL_DMA_Abort+0x630>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd8 <HAL_DMA_Abort+0x634>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <HAL_DMA_Abort+0x638>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_DMA_Abort+0x58e>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_DMA_Abort+0x590>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
 8002fc0:	58025408 	.word	0x58025408
 8002fc4:	5802541c 	.word	0x5802541c
 8002fc8:	58025430 	.word	0x58025430
 8002fcc:	58025444 	.word	0x58025444
 8002fd0:	58025458 	.word	0x58025458
 8002fd4:	5802546c 	.word	0x5802546c
 8002fd8:	58025480 	.word	0x58025480
 8002fdc:	58025494 	.word	0x58025494

08002fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e237      	b.n	8003462 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e22c      	b.n	8003462 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5c      	ldr	r2, [pc, #368]	@ (8003180 <HAL_DMA_Abort_IT+0x1a0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5b      	ldr	r2, [pc, #364]	@ (8003184 <HAL_DMA_Abort_IT+0x1a4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a59      	ldr	r2, [pc, #356]	@ (8003188 <HAL_DMA_Abort_IT+0x1a8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a58      	ldr	r2, [pc, #352]	@ (800318c <HAL_DMA_Abort_IT+0x1ac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_DMA_Abort_IT+0x1b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a55      	ldr	r2, [pc, #340]	@ (8003194 <HAL_DMA_Abort_IT+0x1b4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a53      	ldr	r2, [pc, #332]	@ (8003198 <HAL_DMA_Abort_IT+0x1b8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a52      	ldr	r2, [pc, #328]	@ (800319c <HAL_DMA_Abort_IT+0x1bc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a50      	ldr	r2, [pc, #320]	@ (80031a0 <HAL_DMA_Abort_IT+0x1c0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4f      	ldr	r2, [pc, #316]	@ (80031a4 <HAL_DMA_Abort_IT+0x1c4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_DMA_Abort_IT+0x1c8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4c      	ldr	r2, [pc, #304]	@ (80031ac <HAL_DMA_Abort_IT+0x1cc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a4a      	ldr	r2, [pc, #296]	@ (80031b0 <HAL_DMA_Abort_IT+0x1d0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a49      	ldr	r2, [pc, #292]	@ (80031b4 <HAL_DMA_Abort_IT+0x1d4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a47      	ldr	r2, [pc, #284]	@ (80031b8 <HAL_DMA_Abort_IT+0x1d8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a46      	ldr	r2, [pc, #280]	@ (80031bc <HAL_DMA_Abort_IT+0x1dc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Abort_IT+0xcc>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_DMA_Abort_IT+0xce>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8086 	beq.w	80031c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2204      	movs	r2, #4
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003180 <HAL_DMA_Abort_IT+0x1a0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d04a      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003184 <HAL_DMA_Abort_IT+0x1a4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d045      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <HAL_DMA_Abort_IT+0x1a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d040      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2b      	ldr	r2, [pc, #172]	@ (800318c <HAL_DMA_Abort_IT+0x1ac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d03b      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a29      	ldr	r2, [pc, #164]	@ (8003190 <HAL_DMA_Abort_IT+0x1b0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d036      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a28      	ldr	r2, [pc, #160]	@ (8003194 <HAL_DMA_Abort_IT+0x1b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d031      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a26      	ldr	r2, [pc, #152]	@ (8003198 <HAL_DMA_Abort_IT+0x1b8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02c      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a25      	ldr	r2, [pc, #148]	@ (800319c <HAL_DMA_Abort_IT+0x1bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d027      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <HAL_DMA_Abort_IT+0x1c0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d022      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_DMA_Abort_IT+0x1c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d01d      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a20      	ldr	r2, [pc, #128]	@ (80031a8 <HAL_DMA_Abort_IT+0x1c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1f      	ldr	r2, [pc, #124]	@ (80031ac <HAL_DMA_Abort_IT+0x1cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1d      	ldr	r2, [pc, #116]	@ (80031b0 <HAL_DMA_Abort_IT+0x1d0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <HAL_DMA_Abort_IT+0x1d4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1a      	ldr	r2, [pc, #104]	@ (80031b8 <HAL_DMA_Abort_IT+0x1d8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_DMA_Abort_IT+0x17c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <HAL_DMA_Abort_IT+0x1dc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <HAL_DMA_Abort_IT+0x18e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e178      	b.n	8003460 <HAL_DMA_Abort_IT+0x480>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e16f      	b.n	8003460 <HAL_DMA_Abort_IT+0x480>
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020e 	bic.w	r2, r2, #14
 80031ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6c      	ldr	r2, [pc, #432]	@ (8003388 <HAL_DMA_Abort_IT+0x3a8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04a      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6b      	ldr	r2, [pc, #428]	@ (800338c <HAL_DMA_Abort_IT+0x3ac>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d045      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a69      	ldr	r2, [pc, #420]	@ (8003390 <HAL_DMA_Abort_IT+0x3b0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d040      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a68      	ldr	r2, [pc, #416]	@ (8003394 <HAL_DMA_Abort_IT+0x3b4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d03b      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a66      	ldr	r2, [pc, #408]	@ (8003398 <HAL_DMA_Abort_IT+0x3b8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d036      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_DMA_Abort_IT+0x3bc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d031      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a63      	ldr	r2, [pc, #396]	@ (80033a0 <HAL_DMA_Abort_IT+0x3c0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02c      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a62      	ldr	r2, [pc, #392]	@ (80033a4 <HAL_DMA_Abort_IT+0x3c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d027      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a60      	ldr	r2, [pc, #384]	@ (80033a8 <HAL_DMA_Abort_IT+0x3c8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d022      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5f      	ldr	r2, [pc, #380]	@ (80033ac <HAL_DMA_Abort_IT+0x3cc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d01d      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5d      	ldr	r2, [pc, #372]	@ (80033b0 <HAL_DMA_Abort_IT+0x3d0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d018      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5c      	ldr	r2, [pc, #368]	@ (80033b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5a      	ldr	r2, [pc, #360]	@ (80033b8 <HAL_DMA_Abort_IT+0x3d8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00e      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a59      	ldr	r2, [pc, #356]	@ (80033bc <HAL_DMA_Abort_IT+0x3dc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a57      	ldr	r2, [pc, #348]	@ (80033c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_DMA_Abort_IT+0x290>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a56      	ldr	r2, [pc, #344]	@ (80033c4 <HAL_DMA_Abort_IT+0x3e4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <HAL_DMA_Abort_IT+0x2a2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e007      	b.n	8003292 <HAL_DMA_Abort_IT+0x2b2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3c      	ldr	r2, [pc, #240]	@ (8003388 <HAL_DMA_Abort_IT+0x3a8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d072      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3a      	ldr	r2, [pc, #232]	@ (800338c <HAL_DMA_Abort_IT+0x3ac>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d06d      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a39      	ldr	r2, [pc, #228]	@ (8003390 <HAL_DMA_Abort_IT+0x3b0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d068      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a37      	ldr	r2, [pc, #220]	@ (8003394 <HAL_DMA_Abort_IT+0x3b4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d063      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a36      	ldr	r2, [pc, #216]	@ (8003398 <HAL_DMA_Abort_IT+0x3b8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d05e      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a34      	ldr	r2, [pc, #208]	@ (800339c <HAL_DMA_Abort_IT+0x3bc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d059      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a33      	ldr	r2, [pc, #204]	@ (80033a0 <HAL_DMA_Abort_IT+0x3c0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d054      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a31      	ldr	r2, [pc, #196]	@ (80033a4 <HAL_DMA_Abort_IT+0x3c4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04f      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a30      	ldr	r2, [pc, #192]	@ (80033a8 <HAL_DMA_Abort_IT+0x3c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2e      	ldr	r2, [pc, #184]	@ (80033ac <HAL_DMA_Abort_IT+0x3cc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2d      	ldr	r2, [pc, #180]	@ (80033b0 <HAL_DMA_Abort_IT+0x3d0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2b      	ldr	r2, [pc, #172]	@ (80033b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <HAL_DMA_Abort_IT+0x3d8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a28      	ldr	r2, [pc, #160]	@ (80033bc <HAL_DMA_Abort_IT+0x3dc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a27      	ldr	r2, [pc, #156]	@ (80033c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a25      	ldr	r2, [pc, #148]	@ (80033c4 <HAL_DMA_Abort_IT+0x3e4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <HAL_DMA_Abort_IT+0x3e8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a22      	ldr	r2, [pc, #136]	@ (80033cc <HAL_DMA_Abort_IT+0x3ec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a21      	ldr	r2, [pc, #132]	@ (80033d0 <HAL_DMA_Abort_IT+0x3f0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1f      	ldr	r2, [pc, #124]	@ (80033d4 <HAL_DMA_Abort_IT+0x3f4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1e      	ldr	r2, [pc, #120]	@ (80033d8 <HAL_DMA_Abort_IT+0x3f8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_DMA_Abort_IT+0x3fc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1b      	ldr	r2, [pc, #108]	@ (80033e0 <HAL_DMA_Abort_IT+0x400>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_Abort_IT+0x3a2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	@ (80033e4 <HAL_DMA_Abort_IT+0x404>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d132      	bne.n	80033e8 <HAL_DMA_Abort_IT+0x408>
 8003382:	2301      	movs	r3, #1
 8003384:	e031      	b.n	80033ea <HAL_DMA_Abort_IT+0x40a>
 8003386:	bf00      	nop
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
 80033c8:	58025408 	.word	0x58025408
 80033cc:	5802541c 	.word	0x5802541c
 80033d0:	58025430 	.word	0x58025430
 80033d4:	58025444 	.word	0x58025444
 80033d8:	58025458 	.word	0x58025458
 80033dc:	5802546c 	.word	0x5802546c
 80033e0:	58025480 	.word	0x58025480
 80033e4:	58025494 	.word	0x58025494
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d028      	beq.n	8003440 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800341c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003434:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800343e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop

0800346c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b098      	sub	sp, #96	@ 0x60
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003474:	4a84      	ldr	r2, [pc, #528]	@ (8003688 <HAL_FDCAN_Init+0x21c>)
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	4611      	mov	r1, r2
 800347c:	224c      	movs	r2, #76	@ 0x4c
 800347e:	4618      	mov	r0, r3
 8003480:	f007 fc7a 	bl	800ad78 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1c6      	b.n	800381c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7e      	ldr	r2, [pc, #504]	@ (800368c <HAL_FDCAN_Init+0x220>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d106      	bne.n	80034a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034a0:	461a      	mov	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fb7c 	bl	8001bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0210 	bic.w	r2, r2, #16
 80034ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d0:	f7ff f8c8 	bl	8002664 <HAL_GetTick>
 80034d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034d6:	e014      	b.n	8003502 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034d8:	f7ff f8c4 	bl	8002664 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b0a      	cmp	r3, #10
 80034e4:	d90d      	bls.n	8003502 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2203      	movs	r2, #3
 80034fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e18c      	b.n	800381c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d0e3      	beq.n	80034d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003520:	f7ff f8a0 	bl	8002664 <HAL_GetTick>
 8003524:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003526:	e014      	b.n	8003552 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003528:	f7ff f89c 	bl	8002664 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d90d      	bls.n	8003552 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e164      	b.n	800381c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0e3      	beq.n	8003528 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0202 	orr.w	r2, r2, #2
 800356e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7c1b      	ldrb	r3, [r3, #16]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003586:	619a      	str	r2, [r3, #24]
 8003588:	e007      	b.n	800359a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003598:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7c5b      	ldrb	r3, [r3, #17]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	e007      	b.n	80035c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7c9b      	ldrb	r3, [r3, #18]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035da:	619a      	str	r2, [r3, #24]
 80035dc:	e007      	b.n	80035ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003612:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0210 	bic.w	r2, r2, #16
 8003622:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d108      	bne.n	800363e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0204 	orr.w	r2, r2, #4
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	e030      	b.n	80036a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02c      	beq.n	80036a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d020      	beq.n	8003690 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800365c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0210 	orr.w	r2, r2, #16
 800366c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d114      	bne.n	80036a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0220 	orr.w	r2, r2, #32
 8003684:	619a      	str	r2, [r3, #24]
 8003686:	e00b      	b.n	80036a0 <HAL_FDCAN_Init+0x234>
 8003688:	0800b6c8 	.word	0x0800b6c8
 800368c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d4:	d115      	bne.n	8003702 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	3b01      	subs	r3, #1
 80036e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	3b01      	subs	r3, #1
 80036ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003700:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003728:	4413      	add	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003736:	f023 0107 	bic.w	r1, r3, #7
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3360      	adds	r3, #96	@ 0x60
 8003742:	443b      	add	r3, r7
 8003744:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d011      	beq.n	800377e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003762:	f023 0107 	bic.w	r1, r3, #7
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	3360      	adds	r3, #96	@ 0x60
 800376e:	443b      	add	r3, r7
 8003770:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800378e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3360      	adds	r3, #96	@ 0x60
 800379a:	443b      	add	r3, r7
 800379c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037a0:	011a      	lsls	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	3360      	adds	r3, #96	@ 0x60
 80037c8:	443b      	add	r3, r7
 80037ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <HAL_FDCAN_Init+0x3b8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d107      	bne.n	80037f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f022 0203 	bic.w	r2, r2, #3
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fd27 	bl	8004260 <FDCAN_CalcultateRamBlockAddresses>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003818:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800381c:	4618      	mov	r0, r3
 800381e:	3760      	adds	r7, #96	@ 0x60
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	4000a000 	.word	0x4000a000

08003828 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d111      	bne.n	8003860 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e008      	b.n	8003872 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003880:	b480      	push	{r7}
 8003882:	b08b      	sub	sp, #44	@ 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003898:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800389a:	7efb      	ldrb	r3, [r7, #27]
 800389c:	2b02      	cmp	r3, #2
 800389e:	f040 8149 	bne.w	8003b34 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d14c      	bne.n	8003942 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e13c      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e12a      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003900:	d10a      	bne.n	8003918 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003912:	d101      	bne.n	8003918 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	69f9      	ldr	r1, [r7, #28]
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	e068      	b.n	8003a14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b41      	cmp	r3, #65	@ 0x41
 8003946:	d14c      	bne.n	80039e2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003950:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0ec      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003982:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0da      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a0:	d10a      	bne.n	80039b8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039b2:	d101      	bne.n	80039b8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e0:	e018      	b.n	8003a14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d309      	bcc.n	8003a00 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0a2      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0c9b      	lsrs	r3, r3, #18
 8003a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e005      	b.n	8003a44 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	3304      	adds	r3, #4
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e1b      	lsrs	r3, r3, #24
 8003a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	0fda      	lsrs	r2, r3, #31
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	3304      	adds	r3, #4
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	e00a      	b.n	8003ad0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	441a      	add	r2, r3
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	440b      	add	r3, r1
 8003ac6:	7812      	ldrb	r2, [r2, #0]
 8003ac8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	3301      	adds	r3, #1
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d3ec      	bcc.n	8003aba <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b40      	cmp	r3, #64	@ 0x40
 8003ae4:	d105      	bne.n	8003af2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003af0:	e01e      	b.n	8003b30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b41      	cmp	r3, #65	@ 0x41
 8003af6:	d105      	bne.n	8003b04 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003b02:	e015      	b.n	8003b30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b1f      	cmp	r3, #31
 8003b08:	d808      	bhi.n	8003b1c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	fa01 f202 	lsl.w	r2, r1, r2
 8003b16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003b1a:	e009      	b.n	8003b30 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e008      	b.n	8003b46 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	372c      	adds	r7, #44	@ 0x2c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	0800b724 	.word	0x0800b724

08003b58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d002      	beq.n	8003b78 <HAL_FDCAN_ActivateNotification+0x20>
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d155      	bne.n	8003c24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b96:	e014      	b.n	8003bc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d108      	bne.n	8003bba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0202 	orr.w	r2, r2, #2
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bb8:	e003      	b.n	8003bc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <HAL_FDCAN_ActivateNotification+0xec>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0f9b      	lsrs	r3, r3, #30
 8003c1a:	490b      	ldr	r1, [pc, #44]	@ (8003c48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e008      	b.n	8003c36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	3fcfffff 	.word	0x3fcfffff
 8003c48:	4000a800 	.word	0x4000a800

08003c4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b096      	sub	sp, #88	@ 0x58
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003c54:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	079b      	lsls	r3, r3, #30
 8003c5a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003c5c:	4b98      	ldr	r3, [pc, #608]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	079b      	lsls	r3, r3, #30
 8003c62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c64:	4013      	ands	r3, r2
 8003c66:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003c72:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c94:	4013      	ands	r3, r2
 8003c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cac:	4013      	ands	r3, r2
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003cba:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cdc:	4013      	ands	r3, r2
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d10:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d12:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa54 	bl	80041c6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	0a9b      	lsrs	r3, r3, #10
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01d      	beq.n	8003d66 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	0a9b      	lsrs	r3, r3, #10
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d3e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d56:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003d5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa07 	bl	8004174 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d72:	4b54      	ldr	r3, [pc, #336]	@ (8003ec4 <HAL_FDCAN_IRQHandler+0x278>)
 8003d74:	400b      	ands	r3, r1
 8003d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d78:	4a51      	ldr	r2, [pc, #324]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	0f9b      	lsrs	r3, r3, #30
 8003d7e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9c0 	bl	8004108 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d94:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <HAL_FDCAN_IRQHandler+0x278>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d9a:	4a49      	ldr	r2, [pc, #292]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d9e:	0f9b      	lsrs	r3, r3, #30
 8003da0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003da2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9ba 	bl	800411e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003db6:	4b43      	ldr	r3, [pc, #268]	@ (8003ec4 <HAL_FDCAN_IRQHandler+0x278>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dbc:	4a40      	ldr	r2, [pc, #256]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc0:	0f9b      	lsrs	r3, r3, #30
 8003dc2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003dc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe f9dc 	bl	8002184 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec4 <HAL_FDCAN_IRQHandler+0x278>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dde:	4a38      	ldr	r2, [pc, #224]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de2:	0f9b      	lsrs	r3, r3, #30
 8003de4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003de6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9a3 	bl	8004134 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df0:	0adb      	lsrs	r3, r3, #11
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfc:	0adb      	lsrs	r3, r3, #11
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f997 	bl	800414a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1e:	0a5b      	lsrs	r3, r3, #9
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01d      	beq.n	8003e64 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	0a5b      	lsrs	r3, r3, #9
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e48:	4013      	ands	r3, r2
 8003e4a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e54:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f97d 	bl	800415e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e66:	0cdb      	lsrs	r3, r3, #19
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e72:	0cdb      	lsrs	r3, r3, #19
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003e84:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f97c 	bl	800418a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003eb4:	4b02      	ldr	r3, [pc, #8]	@ (8003ec0 <HAL_FDCAN_IRQHandler+0x274>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	e004      	b.n	8003ec8 <HAL_FDCAN_IRQHandler+0x27c>
 8003ebe:	bf00      	nop
 8003ec0:	4000a800 	.word	0x4000a800
 8003ec4:	3fcfffff 	.word	0x3fcfffff
 8003ec8:	f000 f969 	bl	800419e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	0c9b      	lsrs	r3, r3, #18
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003eec:	651a      	str	r2, [r3, #80]	@ 0x50
 8003eee:	4b83      	ldr	r3, [pc, #524]	@ (80040fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f95c 	bl	80041b2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efc:	0c5b      	lsrs	r3, r3, #17
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	0c5b      	lsrs	r3, r3, #17
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00f      	beq.n	8003f32 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f1c:	4b77      	ldr	r3, [pc, #476]	@ (80040fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3e:	4b70      	ldr	r3, [pc, #448]	@ (8004100 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003f40:	400b      	ands	r3, r1
 8003f42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f44:	4a6d      	ldr	r2, [pc, #436]	@ (80040fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f48:	0f9b      	lsrs	r3, r3, #30
 8003f4a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003f4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f94d 	bl	80041ee <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d011      	beq.n	8003f7e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f60:	4b67      	ldr	r3, [pc, #412]	@ (8004100 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f66:	4a65      	ldr	r2, [pc, #404]	@ (80040fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f6a:	0f9b      	lsrs	r3, r3, #30
 8003f6c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a60      	ldr	r2, [pc, #384]	@ (8004104 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	f040 80ac 	bne.w	80040e2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a4 	beq.w	80040e2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fae:	4013      	ands	r3, r2
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fde:	4013      	ands	r3, r2
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003fec:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004004:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	4013      	ands	r3, r2
 8004010:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8e6 	bl	8004204 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004044:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8e6 	bl	800421a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01a      	beq.n	8004090 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	b29b      	uxth	r3, r3
 8004070:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800407c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2240      	movs	r2, #64	@ 0x40
 8004084:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8d0 	bl	8004230 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800409e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8d1 	bl	8004248 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f874 	bl	80041da <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80040f2:	bf00      	nop
 80040f4:	3758      	adds	r7, #88	@ 0x58
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	4000a800 	.word	0x4000a800
 8004100:	3fcfffff 	.word	0x3fcfffff
 8004104:	4000a000 	.word	0x4000a000

08004108 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004276:	4ba7      	ldr	r3, [pc, #668]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	0091      	lsls	r1, r2, #2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	430b      	orrs	r3, r1
 8004284:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004290:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	041a      	lsls	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4413      	add	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042b6:	4b97      	ldr	r3, [pc, #604]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	0091      	lsls	r1, r2, #2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4413      	add	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80042f8:	4b86      	ldr	r3, [pc, #536]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	0091      	lsls	r1, r2, #2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004312:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	041a      	lsls	r2, r3, #16
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004340:	4b74      	ldr	r3, [pc, #464]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	0091      	lsls	r1, r2, #2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800435a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004362:	041a      	lsls	r2, r3, #16
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	4413      	add	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004388:	4b62      	ldr	r3, [pc, #392]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	0091      	lsls	r1, r2, #2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80043b4:	4b57      	ldr	r3, [pc, #348]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	0091      	lsls	r1, r2, #2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ce:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80043f6:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0091      	lsls	r1, r2, #2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	430b      	orrs	r3, r1
 8004404:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004410:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800442c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004434:	061a      	lsls	r2, r3, #24
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004444:	4b34      	ldr	r3, [pc, #208]	@ (8004518 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004446:	4413      	add	r3, r2
 8004448:	009a      	lsls	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80044b0:	441a      	add	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	4a04      	ldr	r2, [pc, #16]	@ (800451c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d915      	bls.n	800453c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004510:	e006      	b.n	8004520 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004512:	bf00      	nop
 8004514:	ffff0003 	.word	0xffff0003
 8004518:	10002b00 	.word	0x10002b00
 800451c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2203      	movs	r2, #3
 8004534:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e010      	b.n	800455e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e005      	b.n	8004550 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3304      	adds	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	429a      	cmp	r2, r3
 800455a:	d3f3      	bcc.n	8004544 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800457a:	4b89      	ldr	r3, [pc, #548]	@ (80047a0 <HAL_GPIO_Init+0x234>)
 800457c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800457e:	e194      	b.n	80048aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8186 	beq.w	80048a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d005      	beq.n	80045b0 <HAL_GPIO_Init+0x44>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d130      	bne.n	8004612 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045e6:	2201      	movs	r2, #1
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0201 	and.w	r2, r3, #1
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b03      	cmp	r3, #3
 800461c:	d017      	beq.n	800464e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	2203      	movs	r2, #3
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d123      	bne.n	80046a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	08da      	lsrs	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3208      	adds	r2, #8
 8004662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	08da      	lsrs	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3208      	adds	r2, #8
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	2203      	movs	r2, #3
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0203 	and.w	r2, r3, #3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80e0 	beq.w	80048a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e4:	4b2f      	ldr	r3, [pc, #188]	@ (80047a4 <HAL_GPIO_Init+0x238>)
 80046e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046ea:	4a2e      	ldr	r2, [pc, #184]	@ (80047a4 <HAL_GPIO_Init+0x238>)
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_GPIO_Init+0x238>)
 80046f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004702:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <HAL_GPIO_Init+0x23c>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <HAL_GPIO_Init+0x240>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d052      	beq.n	80047d4 <HAL_GPIO_Init+0x268>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <HAL_GPIO_Init+0x244>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_GPIO_Init+0x22e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1e      	ldr	r2, [pc, #120]	@ (80047b4 <HAL_GPIO_Init+0x248>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <HAL_GPIO_Init+0x22a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <HAL_GPIO_Init+0x24c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d025      	beq.n	8004792 <HAL_GPIO_Init+0x226>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <HAL_GPIO_Init+0x250>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <HAL_GPIO_Init+0x222>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <HAL_GPIO_Init+0x254>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d019      	beq.n	800478a <HAL_GPIO_Init+0x21e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <HAL_GPIO_Init+0x258>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_GPIO_Init+0x21a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_GPIO_Init+0x25c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00d      	beq.n	8004782 <HAL_GPIO_Init+0x216>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_GPIO_Init+0x260>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <HAL_GPIO_Init+0x212>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <HAL_GPIO_Init+0x264>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_GPIO_Init+0x20e>
 8004776:	2309      	movs	r3, #9
 8004778:	e02d      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800477a:	230a      	movs	r3, #10
 800477c:	e02b      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800477e:	2308      	movs	r3, #8
 8004780:	e029      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 8004782:	2307      	movs	r3, #7
 8004784:	e027      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 8004786:	2306      	movs	r3, #6
 8004788:	e025      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800478a:	2305      	movs	r3, #5
 800478c:	e023      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800478e:	2304      	movs	r3, #4
 8004790:	e021      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 8004792:	2303      	movs	r3, #3
 8004794:	e01f      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 8004796:	2302      	movs	r3, #2
 8004798:	e01d      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800479a:	2301      	movs	r3, #1
 800479c:	e01b      	b.n	80047d6 <HAL_GPIO_Init+0x26a>
 800479e:	bf00      	nop
 80047a0:	58000080 	.word	0x58000080
 80047a4:	58024400 	.word	0x58024400
 80047a8:	58000400 	.word	0x58000400
 80047ac:	58020000 	.word	0x58020000
 80047b0:	58020400 	.word	0x58020400
 80047b4:	58020800 	.word	0x58020800
 80047b8:	58020c00 	.word	0x58020c00
 80047bc:	58021000 	.word	0x58021000
 80047c0:	58021400 	.word	0x58021400
 80047c4:	58021800 	.word	0x58021800
 80047c8:	58021c00 	.word	0x58021c00
 80047cc:	58022000 	.word	0x58022000
 80047d0:	58022400 	.word	0x58022400
 80047d4:	2300      	movs	r3, #0
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	f002 0203 	and.w	r2, r2, #3
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	4093      	lsls	r3, r2
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e6:	4938      	ldr	r1, [pc, #224]	@ (80048c8 <HAL_GPIO_Init+0x35c>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800481a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004848:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f ae63 	bne.w	8004580 <HAL_GPIO_Init+0x14>
  }
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	3724      	adds	r7, #36	@ 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	58000400 	.word	0x58000400

080048cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
 80048d8:	4613      	mov	r3, r2
 80048da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048dc:	787b      	ldrb	r3, [r7, #1]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048e8:	e003      	b.n	80048f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048ea:	887b      	ldrh	r3, [r7, #2]
 80048ec:	041a      	lsls	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	619a      	str	r2, [r3, #24]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004908:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HAL_PWREx_ConfigSupply+0x70>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b04      	cmp	r3, #4
 8004912:	d00a      	beq.n	800492a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004914:	4b16      	ldr	r3, [pc, #88]	@ (8004970 <HAL_PWREx_ConfigSupply+0x70>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e01f      	b.n	8004966 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e01d      	b.n	8004966 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800492a:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_PWREx_ConfigSupply+0x70>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 0207 	bic.w	r2, r3, #7
 8004932:	490f      	ldr	r1, [pc, #60]	@ (8004970 <HAL_PWREx_ConfigSupply+0x70>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800493a:	f7fd fe93 	bl	8002664 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004940:	e009      	b.n	8004956 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004942:	f7fd fe8f 	bl	8002664 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004950:	d901      	bls.n	8004956 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e007      	b.n	8004966 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004956:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_PWREx_ConfigSupply+0x70>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004962:	d1ee      	bne.n	8004942 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	58024800 	.word	0x58024800

08004974 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	@ 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f000 bc48 	b.w	8005218 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8088 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	4b99      	ldr	r3, [pc, #612]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049a0:	4b96      	ldr	r3, [pc, #600]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d007      	beq.n	80049bc <HAL_RCC_OscConfig+0x48>
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ae:	2b18      	cmp	r3, #24
 80049b0:	d111      	bne.n	80049d6 <HAL_RCC_OscConfig+0x62>
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	4b8f      	ldr	r3, [pc, #572]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d06d      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x130>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d169      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f000 bc21 	b.w	8005218 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x7a>
 80049e0:	4b86      	ldr	r3, [pc, #536]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a85      	ldr	r2, [pc, #532]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e02e      	b.n	8004a4c <HAL_RCC_OscConfig+0xd8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x9c>
 80049f6:	4b81      	ldr	r3, [pc, #516]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a80      	ldr	r2, [pc, #512]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b7e      	ldr	r3, [pc, #504]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7d      	ldr	r2, [pc, #500]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xd8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a1a:	4b78      	ldr	r3, [pc, #480]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a77      	ldr	r2, [pc, #476]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b75      	ldr	r3, [pc, #468]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a74      	ldr	r2, [pc, #464]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xd8>
 8004a34:	4b71      	ldr	r3, [pc, #452]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a70      	ldr	r2, [pc, #448]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b6e      	ldr	r3, [pc, #440]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6d      	ldr	r2, [pc, #436]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fe06 	bl	8002664 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fe02 	bl	8002664 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e3d4      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fdf2 	bl	8002664 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fd fdee 	bl	8002664 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	@ 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e3c0      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a96:	4b59      	ldr	r3, [pc, #356]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x110>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80ca 	beq.w	8004c48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab4:	4b51      	ldr	r3, [pc, #324]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004abc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004abe:	4b4f      	ldr	r3, [pc, #316]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_OscConfig+0x166>
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b18      	cmp	r3, #24
 8004ace:	d156      	bne.n	8004b7e <HAL_RCC_OscConfig+0x20a>
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d151      	bne.n	8004b7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ada:	4b48      	ldr	r3, [pc, #288]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e392      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004af2:	4b42      	ldr	r3, [pc, #264]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 0219 	bic.w	r2, r3, #25
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	493f      	ldr	r1, [pc, #252]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fdae 	bl	8002664 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fdaa 	bl	8002664 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e37c      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1e:	4b37      	ldr	r3, [pc, #220]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	f7fd fda7 	bl	800267c <HAL_GetREVID>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d817      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x1f4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d108      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1de>
 8004b40:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b48:	4a2c      	ldr	r2, [pc, #176]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b50:	e07a      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	031b      	lsls	r3, r3, #12
 8004b60:	4926      	ldr	r1, [pc, #152]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b66:	e06f      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b68:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	4921      	ldr	r1, [pc, #132]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b7c:	e064      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d047      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b86:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 0219 	bic.w	r2, r3, #25
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	491a      	ldr	r1, [pc, #104]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fd64 	bl	8002664 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fd60 	bl	8002664 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e332      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb2:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	f7fd fd5d 	bl	800267c <HAL_GetREVID>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d819      	bhi.n	8004c00 <HAL_RCC_OscConfig+0x28c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d108      	bne.n	8004be6 <HAL_RCC_OscConfig+0x272>
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bdc:	4a07      	ldr	r2, [pc, #28]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be2:	6053      	str	r3, [r2, #4]
 8004be4:	e030      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
 8004be6:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	031b      	lsls	r3, r3, #12
 8004bf4:	4901      	ldr	r1, [pc, #4]	@ (8004bfc <HAL_RCC_OscConfig+0x288>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
 8004bfa:	e025      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	4b9a      	ldr	r3, [pc, #616]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	4997      	ldr	r1, [pc, #604]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
 8004c14:	e018      	b.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c16:	4b95      	ldr	r3, [pc, #596]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a94      	ldr	r2, [pc, #592]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fd fd1f 	bl	8002664 <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7fd fd1b 	bl	8002664 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e2ed      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c3c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80a9 	beq.w	8004da8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c56:	4b85      	ldr	r3, [pc, #532]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c60:	4b82      	ldr	r3, [pc, #520]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d007      	beq.n	8004c7c <HAL_RCC_OscConfig+0x308>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b18      	cmp	r3, #24
 8004c70:	d13a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x374>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d135      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_OscConfig+0x320>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	2b80      	cmp	r3, #128	@ 0x80
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e2c1      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c94:	f7fd fcf2 	bl	800267c <HAL_GetREVID>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d817      	bhi.n	8004cd2 <HAL_RCC_OscConfig+0x35e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d108      	bne.n	8004cbc <HAL_RCC_OscConfig+0x348>
 8004caa:	4b70      	ldr	r3, [pc, #448]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cba:	e075      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	069b      	lsls	r3, r3, #26
 8004cca:	4968      	ldr	r1, [pc, #416]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cd0:	e06a      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd2:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	4962      	ldr	r1, [pc, #392]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce6:	e05f      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d042      	beq.n	8004d76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fcb2 	bl	8002664 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d04:	f7fd fcae 	bl	8002664 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e280      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d16:	4b55      	ldr	r3, [pc, #340]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d22:	f7fd fcab 	bl	800267c <HAL_GetREVID>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d817      	bhi.n	8004d60 <HAL_RCC_OscConfig+0x3ec>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d108      	bne.n	8004d4a <HAL_RCC_OscConfig+0x3d6>
 8004d38:	4b4c      	ldr	r3, [pc, #304]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d40:	4a4a      	ldr	r2, [pc, #296]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d46:	6053      	str	r3, [r2, #4]
 8004d48:	e02e      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
 8004d4a:	4b48      	ldr	r3, [pc, #288]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	4944      	ldr	r1, [pc, #272]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
 8004d5e:	e023      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
 8004d60:	4b42      	ldr	r3, [pc, #264]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	493f      	ldr	r1, [pc, #252]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60cb      	str	r3, [r1, #12]
 8004d74:	e018      	b.n	8004da8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d76:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fd fc6f 	bl	8002664 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d8a:	f7fd fc6b 	bl	8002664 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e23d      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d9c:	4b33      	ldr	r3, [pc, #204]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d036      	beq.n	8004e22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d019      	beq.n	8004df0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fc4c 	bl	8002664 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fd fc48 	bl	8002664 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e21a      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x45c>
 8004dee:	e018      	b.n	8004e22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fd fc32 	bl	8002664 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fd fc2e 	bl	8002664 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e200      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e16:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d039      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e42:	f7fd fc0f 	bl	8002664 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e4a:	f7fd fc0b 	bl	8002664 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e1dd      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e5c:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
 8004e68:	e01b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x52e>
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e70:	4b9b      	ldr	r3, [pc, #620]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a9a      	ldr	r2, [pc, #616]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e7c:	f7fd fbf2 	bl	8002664 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e84:	f7fd fbee 	bl	8002664 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e1c0      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e96:	4b92      	ldr	r3, [pc, #584]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8081 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80050e4 <HAL_RCC_OscConfig+0x770>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a8b      	ldr	r2, [pc, #556]	@ (80050e4 <HAL_RCC_OscConfig+0x770>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd fbd2 	bl	8002664 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fd fbce 	bl	8002664 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1a0      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed6:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <HAL_RCC_OscConfig+0x770>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x584>
 8004eea:	4b7d      	ldr	r3, [pc, #500]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	4a7c      	ldr	r2, [pc, #496]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef6:	e02d      	b.n	8004f54 <HAL_RCC_OscConfig+0x5e0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCC_OscConfig+0x5a6>
 8004f00:	4b77      	ldr	r3, [pc, #476]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f04:	4a76      	ldr	r2, [pc, #472]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0c:	4b74      	ldr	r3, [pc, #464]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	4a73      	ldr	r2, [pc, #460]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f12:	f023 0304 	bic.w	r3, r3, #4
 8004f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f18:	e01c      	b.n	8004f54 <HAL_RCC_OscConfig+0x5e0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c8>
 8004f22:	4b6f      	ldr	r3, [pc, #444]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f26:	4a6e      	ldr	r2, [pc, #440]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	4a6b      	ldr	r2, [pc, #428]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0x5e0>
 8004f3c:	4b68      	ldr	r3, [pc, #416]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a67      	ldr	r2, [pc, #412]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	4b65      	ldr	r3, [pc, #404]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a64      	ldr	r2, [pc, #400]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f4e:	f023 0304 	bic.w	r3, r3, #4
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fd fb82 	bl	8002664 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fd fb7e 	bl	8002664 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e14e      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f7a:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ee      	beq.n	8004f64 <HAL_RCC_OscConfig+0x5f0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fb6c 	bl	8002664 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd fb68 	bl	8002664 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e138      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 812d 	beq.w	8005216 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fbc:	4b48      	ldr	r3, [pc, #288]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc4:	2b18      	cmp	r3, #24
 8004fc6:	f000 80bd 	beq.w	8005144 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	f040 809e 	bne.w	8005110 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fb40 	bl	8002664 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fd fb3c 	bl	8002664 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e10e      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ffa:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	4b36      	ldr	r3, [pc, #216]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800500a:	4b37      	ldr	r3, [pc, #220]	@ (80050e8 <HAL_RCC_OscConfig+0x774>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005016:	0112      	lsls	r2, r2, #4
 8005018:	430a      	orrs	r2, r1
 800501a:	4931      	ldr	r1, [pc, #196]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005050:	4923      	ldr	r1, [pc, #140]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005056:	4b22      	ldr	r3, [pc, #136]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	4a21      	ldr	r2, [pc, #132]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005066:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <HAL_RCC_OscConfig+0x778>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	491b      	ldr	r1, [pc, #108]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	f023 020c 	bic.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	4917      	ldr	r1, [pc, #92]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005088:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	f023 0202 	bic.w	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005094:	4912      	ldr	r1, [pc, #72]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800509a:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	4a10      	ldr	r2, [pc, #64]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	4a0d      	ldr	r2, [pc, #52]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050be:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	4a07      	ldr	r2, [pc, #28]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fd fac5 	bl	8002664 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050dc:	e011      	b.n	8005102 <HAL_RCC_OscConfig+0x78e>
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	58024800 	.word	0x58024800
 80050e8:	fffffc0c 	.word	0xfffffc0c
 80050ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fab8 	bl	8002664 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e08a      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005102:	4b47      	ldr	r3, [pc, #284]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x77c>
 800510e:	e082      	b.n	8005216 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005110:	4b43      	ldr	r3, [pc, #268]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a42      	ldr	r2, [pc, #264]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800511a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd faa2 	bl	8002664 <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd fa9e 	bl	8002664 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e070      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005136:	4b3a      	ldr	r3, [pc, #232]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x7b0>
 8005142:	e068      	b.n	8005216 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005144:	4b36      	ldr	r3, [pc, #216]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800514a:	4b35      	ldr	r3, [pc, #212]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	2b01      	cmp	r3, #1
 8005156:	d031      	beq.n	80051bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0203 	and.w	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d12a      	bne.n	80051bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d122      	bne.n	80051bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11a      	bne.n	80051bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	0a5b      	lsrs	r3, r3, #9
 800518a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005192:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d111      	bne.n	80051bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d108      	bne.n	80051bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0e1b      	lsrs	r3, r3, #24
 80051ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e02b      	b.n	8005218 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051c0:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d01f      	beq.n	8005216 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051d6:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051e2:	f7fd fa3f 	bl	8002664 <HAL_GetTick>
 80051e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051e8:	bf00      	nop
 80051ea:	f7fd fa3b 	bl	8002664 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d0f9      	beq.n	80051ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 80051f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005224 <HAL_RCC_OscConfig+0x8b0>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005202:	00d2      	lsls	r2, r2, #3
 8005204:	4906      	ldr	r1, [pc, #24]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005206:	4313      	orrs	r3, r2
 8005208:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800520a:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <HAL_RCC_OscConfig+0x8ac>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3730      	adds	r7, #48	@ 0x30
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e19c      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b8a      	ldr	r3, [pc, #552]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b87      	ldr	r3, [pc, #540]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 020f 	bic.w	r2, r3, #15
 8005252:	4985      	ldr	r1, [pc, #532]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b83      	ldr	r3, [pc, #524]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e184      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d010      	beq.n	800529a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	4b7b      	ldr	r3, [pc, #492]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005284:	429a      	cmp	r2, r3
 8005286:	d908      	bls.n	800529a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005288:	4b78      	ldr	r3, [pc, #480]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4975      	ldr	r1, [pc, #468]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	4b70      	ldr	r3, [pc, #448]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d908      	bls.n	80052c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052b6:	4b6d      	ldr	r3, [pc, #436]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	496a      	ldr	r1, [pc, #424]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	4b64      	ldr	r3, [pc, #400]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d908      	bls.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052e4:	4b61      	ldr	r3, [pc, #388]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	495e      	ldr	r1, [pc, #376]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	4b59      	ldr	r3, [pc, #356]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800530e:	429a      	cmp	r2, r3
 8005310:	d908      	bls.n	8005324 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005312:	4b56      	ldr	r3, [pc, #344]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4953      	ldr	r1, [pc, #332]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b4d      	ldr	r3, [pc, #308]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b4a      	ldr	r3, [pc, #296]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f023 020f 	bic.w	r2, r3, #15
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4947      	ldr	r1, [pc, #284]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800534e:	4313      	orrs	r3, r2
 8005350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d055      	beq.n	800540a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800535e:	4b43      	ldr	r3, [pc, #268]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4940      	ldr	r1, [pc, #256]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800536c:	4313      	orrs	r3, r2
 800536e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005378:	4b3c      	ldr	r3, [pc, #240]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d121      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0f6      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005390:	4b36      	ldr	r3, [pc, #216]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0ea      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053a8:	4b30      	ldr	r3, [pc, #192]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0de      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b8:	4b2c      	ldr	r3, [pc, #176]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d6      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053c8:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f023 0207 	bic.w	r2, r3, #7
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4925      	ldr	r1, [pc, #148]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053da:	f7fd f943 	bl	8002664 <HAL_GetTick>
 80053de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e2:	f7fd f93f 	bl	8002664 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0be      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f8:	4b1c      	ldr	r3, [pc, #112]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	429a      	cmp	r2, r3
 8005408:	d1eb      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	429a      	cmp	r2, r3
 8005424:	d208      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005426:	4b11      	ldr	r3, [pc, #68]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f023 020f 	bic.w	r2, r3, #15
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	490e      	ldr	r1, [pc, #56]	@ (800546c <HAL_RCC_ClockConfig+0x244>)
 8005434:	4313      	orrs	r3, r2
 8005436:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d214      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 020f 	bic.w	r2, r3, #15
 800544e:	4906      	ldr	r1, [pc, #24]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e086      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
 8005468:	52002000 	.word	0x52002000
 800546c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	4b3f      	ldr	r3, [pc, #252]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005488:	429a      	cmp	r2, r3
 800548a:	d208      	bcs.n	800549e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800548c:	4b3c      	ldr	r3, [pc, #240]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4939      	ldr	r1, [pc, #228]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 800549a:	4313      	orrs	r3, r2
 800549c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d208      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ba:	4b31      	ldr	r3, [pc, #196]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	492e      	ldr	r1, [pc, #184]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	4b28      	ldr	r3, [pc, #160]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d208      	bcs.n	80054fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e8:	4b25      	ldr	r3, [pc, #148]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4922      	ldr	r1, [pc, #136]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	4b1d      	ldr	r3, [pc, #116]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d208      	bcs.n	8005528 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005516:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4917      	ldr	r1, [pc, #92]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005524:	4313      	orrs	r3, r2
 8005526:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005528:	f000 f834 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	4912      	ldr	r1, [pc, #72]	@ (8005584 <HAL_RCC_ClockConfig+0x35c>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005546:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	4a0d      	ldr	r2, [pc, #52]	@ (8005584 <HAL_RCC_ClockConfig+0x35c>)
 8005550:	5cd3      	ldrb	r3, [r2, r3]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <HAL_RCC_ClockConfig+0x360>)
 800555e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <HAL_RCC_ClockConfig+0x364>)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <HAL_RCC_ClockConfig+0x368>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd f830 	bl	80025d0 <HAL_InitTick>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
 8005584:	0800b714 	.word	0x0800b714
 8005588:	24000004 	.word	0x24000004
 800558c:	24000000 	.word	0x24000000
 8005590:	24000008 	.word	0x24000008

08005594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	@ 0x24
 8005598:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800559a:	4bb3      	ldr	r3, [pc, #716]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055a2:	2b18      	cmp	r3, #24
 80055a4:	f200 8155 	bhi.w	8005852 <HAL_RCC_GetSysClockFreq+0x2be>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005853 	.word	0x08005853
 80055b8:	08005853 	.word	0x08005853
 80055bc:	08005853 	.word	0x08005853
 80055c0:	08005853 	.word	0x08005853
 80055c4:	08005853 	.word	0x08005853
 80055c8:	08005853 	.word	0x08005853
 80055cc:	08005853 	.word	0x08005853
 80055d0:	0800563b 	.word	0x0800563b
 80055d4:	08005853 	.word	0x08005853
 80055d8:	08005853 	.word	0x08005853
 80055dc:	08005853 	.word	0x08005853
 80055e0:	08005853 	.word	0x08005853
 80055e4:	08005853 	.word	0x08005853
 80055e8:	08005853 	.word	0x08005853
 80055ec:	08005853 	.word	0x08005853
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005853 	.word	0x08005853
 80055f8:	08005853 	.word	0x08005853
 80055fc:	08005853 	.word	0x08005853
 8005600:	08005853 	.word	0x08005853
 8005604:	08005853 	.word	0x08005853
 8005608:	08005853 	.word	0x08005853
 800560c:	08005853 	.word	0x08005853
 8005610:	08005647 	.word	0x08005647
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005614:	4b94      	ldr	r3, [pc, #592]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005620:	4b91      	ldr	r3, [pc, #580]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	08db      	lsrs	r3, r3, #3
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	4a90      	ldr	r2, [pc, #576]	@ (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005632:	e111      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005634:	4b8d      	ldr	r3, [pc, #564]	@ (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005636:	61bb      	str	r3, [r7, #24]
      break;
 8005638:	e10e      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800563a:	4b8d      	ldr	r3, [pc, #564]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800563c:	61bb      	str	r3, [r7, #24]
      break;
 800563e:	e10b      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005640:	4b8c      	ldr	r3, [pc, #560]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005642:	61bb      	str	r3, [r7, #24]
      break;
 8005644:	e108      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005646:	4b88      	ldr	r3, [pc, #544]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005650:	4b85      	ldr	r3, [pc, #532]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800565a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800565c:	4b82      	ldr	r3, [pc, #520]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005666:	4b80      	ldr	r3, [pc, #512]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80e1 	beq.w	800584c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b02      	cmp	r3, #2
 800568e:	f000 8083 	beq.w	8005798 <HAL_RCC_GetSysClockFreq+0x204>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b02      	cmp	r3, #2
 8005696:	f200 80a1 	bhi.w	80057dc <HAL_RCC_GetSysClockFreq+0x248>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x114>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d056      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056a6:	e099      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02d      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	08db      	lsrs	r3, r3, #3
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	4a6b      	ldr	r2, [pc, #428]	@ (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b62      	ldr	r3, [pc, #392]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800570e:	e087      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800587c <HAL_RCC_GetSysClockFreq+0x2e8>
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a02 	vldr	s12, [r7, #8]
 8005736:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005752:	e065      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005880 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b40      	ldr	r3, [pc, #256]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a02 	vldr	s12, [r7, #8]
 800577a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005796:	e043      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005884 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80057be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057da:	e021      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005880 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005802:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800581e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582a:	3301      	adds	r3, #1
 800582c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005838:	edd7 6a07 	vldr	s13, [r7, #28]
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005844:	ee17 3a90 	vmov	r3, s15
 8005848:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800584a:	e005      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
      break;
 8005850:	e002      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005854:	61bb      	str	r3, [r7, #24]
      break;
 8005856:	bf00      	nop
  }

  return sysclockfreq;
 8005858:	69bb      	ldr	r3, [r7, #24]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	@ 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
 800586c:	03d09000 	.word	0x03d09000
 8005870:	003d0900 	.word	0x003d0900
 8005874:	017d7840 	.word	0x017d7840
 8005878:	46000000 	.word	0x46000000
 800587c:	4c742400 	.word	0x4c742400
 8005880:	4a742400 	.word	0x4a742400
 8005884:	4bbebc20 	.word	0x4bbebc20

08005888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800588e:	f7ff fe81 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490f      	ldr	r1, [pc, #60]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x54>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	4a09      	ldr	r2, [pc, #36]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x54>)
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	fa22 f303 	lsr.w	r3, r2, r3
 80058c2:	4a07      	ldr	r2, [pc, #28]	@ (80058e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058c6:	4a07      	ldr	r2, [pc, #28]	@ (80058e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	58024400 	.word	0x58024400
 80058dc:	0800b714 	.word	0x0800b714
 80058e0:	24000004 	.word	0x24000004
 80058e4:	24000000 	.word	0x24000000

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058ec:	f7ff ffcc 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4904      	ldr	r1, [pc, #16]	@ (8005910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	58024400 	.word	0x58024400
 8005910:	0800b714 	.word	0x0800b714

08005914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005918:	f7ff ffb6 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4904      	ldr	r1, [pc, #16]	@ (800593c <HAL_RCC_GetPCLK2Freq+0x28>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400
 800593c:	0800b714 	.word	0x0800b714

08005940 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005944:	b0ca      	sub	sp, #296	@ 0x128
 8005946:	af00      	add	r7, sp, #0
 8005948:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005952:	2300      	movs	r3, #0
 8005954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005964:	2500      	movs	r5, #0
 8005966:	ea54 0305 	orrs.w	r3, r4, r5
 800596a:	d049      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005976:	d02f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800597c:	d828      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800597e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005982:	d01a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005988:	d822      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d007      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005994:	e01c      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005996:	4bb8      	ldr	r3, [pc, #736]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	4ab7      	ldr	r2, [pc, #732]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800599c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059a2:	e01a      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a8:	3308      	adds	r3, #8
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fc8f 	bl	80072d0 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059b8:	e00f      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	3328      	adds	r3, #40	@ 0x28
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fd36 	bl	8007434 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059ce:	e004      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f2:	430b      	orrs	r3, r1
 80059f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80059f6:	e003      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	ea58 0309 	orrs.w	r3, r8, r9
 8005a14:	d047      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d82a      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005a4b 	.word	0x08005a4b
 8005a30:	08005a61 	.word	0x08005a61
 8005a34:	08005a7f 	.word	0x08005a7f
 8005a38:	08005a7f 	.word	0x08005a7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	4a8d      	ldr	r2, [pc, #564]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a48:	e01a      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	3308      	adds	r3, #8
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 fc3c 	bl	80072d0 <RCCEx_PLL2_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a5e:	e00f      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a64:	3328      	adds	r3, #40	@ 0x28
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fce3 	bl	8007434 <RCCEx_PLL3_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a74:	e004      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a88:	4b7b      	ldr	r3, [pc, #492]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8c:	f023 0107 	bic.w	r1, r3, #7
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	4a78      	ldr	r2, [pc, #480]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a9c:	e003      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005ab2:	f04f 0b00 	mov.w	fp, #0
 8005ab6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005aba:	d04c      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac6:	d030      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d829      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad0:	d02d      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad4:	d825      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ad6:	2b80      	cmp	r3, #128	@ 0x80
 8005ad8:	d018      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ada:	2b80      	cmp	r3, #128	@ 0x80
 8005adc:	d821      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ae2:	2b40      	cmp	r3, #64	@ 0x40
 8005ae4:	d007      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005ae6:	e01c      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae8:	4b63      	ldr	r3, [pc, #396]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	4a62      	ldr	r2, [pc, #392]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005af4:	e01c      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	3308      	adds	r3, #8
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fbe6 	bl	80072d0 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e011      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 fc8d 	bl	8007434 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b28:	e002      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b38:	4b4f      	ldr	r3, [pc, #316]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	4a4c      	ldr	r2, [pc, #304]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b6c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005b70:	460b      	mov	r3, r1
 8005b72:	4313      	orrs	r3, r2
 8005b74:	d053      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b82:	d035      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b88:	d82e      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b8e:	d031      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b94:	d828      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b9a:	d01a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba0:	d822      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005baa:	d007      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005bac:	e01c      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bae:	4b32      	ldr	r3, [pc, #200]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	4a31      	ldr	r2, [pc, #196]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bba:	e01c      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 fb83 	bl	80072d0 <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e011      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	3328      	adds	r3, #40	@ 0x28
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fc2a 	bl	8007434 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be6:	e006      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bee:	e002      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bf0:	bf00      	nop
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	d056      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c4a:	d038      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c50:	d831      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c56:	d034      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c5c:	d82b      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c62:	d01d      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c68:	d825      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d006      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c74:	e01f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c76:	bf00      	nop
 8005c78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7c:	4ba2      	ldr	r3, [pc, #648]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	4aa1      	ldr	r2, [pc, #644]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c88:	e01c      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	3308      	adds	r3, #8
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fb1c 	bl	80072d0 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c9e:	e011      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	3328      	adds	r3, #40	@ 0x28
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fbc3 	bl	8007434 <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cbc:	e002      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cdc:	4a8a      	ldr	r2, [pc, #552]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d06:	460b      	mov	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d03a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d12:	2b30      	cmp	r3, #48	@ 0x30
 8005d14:	d01f      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d16:	2b30      	cmp	r3, #48	@ 0x30
 8005d18:	d819      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d00c      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d815      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d019      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d111      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2a:	4b77      	ldr	r3, [pc, #476]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	4a76      	ldr	r2, [pc, #472]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d36:	e011      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	2102      	movs	r1, #2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fac5 	bl	80072d0 <RCCEx_PLL2_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d64:	4b68      	ldr	r3, [pc, #416]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d72:	4a65      	ldr	r2, [pc, #404]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d74:	430b      	orrs	r3, r1
 8005d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d78:	e003      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	d051      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dac:	d035      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005db2:	d82e      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005db4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005db8:	d031      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005dba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dbe:	d828      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc4:	d01a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dca:	d822      	bhi.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd4:	d007      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005dd6:	e01c      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005de4:	e01c      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	3308      	adds	r3, #8
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fa6e 	bl	80072d0 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005dfa:	e011      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	3328      	adds	r3, #40	@ 0x28
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fb15 	bl	8007434 <RCCEx_PLL3_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e28:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e36:	4a34      	ldr	r2, [pc, #208]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e3c:	e003      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d056      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e70:	d033      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e76:	d82c      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e7c:	d02f      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e82:	d826      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e88:	d02b      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e8e:	d820      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e94:	d012      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e9a:	d81a      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d022      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea4:	d115      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2101      	movs	r1, #1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fa0e 	bl	80072d0 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005eba:	e015      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fab5 	bl	8007434 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e00a      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eda:	bf00      	nop
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ef0:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005efe:	4a02      	ldr	r2, [pc, #8]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f04:	e006      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f06:	bf00      	nop
 8005f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4313      	orrs	r3, r2
 8005f32:	d055      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f40:	d033      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f46:	d82c      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d02f      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f52:	d826      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f58:	d02b      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f5e:	d820      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f64:	d012      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6a:	d81a      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d022      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f74:	d115      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f9a6 	bl	80072d0 <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f8a:	e015      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	2101      	movs	r1, #1
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 fa4d 	bl	8007434 <RCCEx_PLL3_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa8:	e006      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005faa:	bf00      	nop
 8005fac:	e004      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fc0:	4ba3      	ldr	r3, [pc, #652]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fd0:	4a9f      	ldr	r2, [pc, #636]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	d037      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600a:	d00e      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006010:	d816      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800601a:	d111      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601c:	4b8c      	ldr	r3, [pc, #560]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	4a8b      	ldr	r2, [pc, #556]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006028:	e00f      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	3308      	adds	r3, #8
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f94c 	bl	80072d0 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800603e:	e004      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006046:	e000      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006052:	4b7f      	ldr	r3, [pc, #508]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006056:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006060:	4a7b      	ldr	r2, [pc, #492]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006062:	430b      	orrs	r3, r1
 8006064:	6513      	str	r3, [r2, #80]	@ 0x50
 8006066:	e003      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006086:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d039      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006096:	2b03      	cmp	r3, #3
 8006098:	d81c      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800609a:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060dd 	.word	0x080060dd
 80060a4:	080060b1 	.word	0x080060b1
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	080060dd 	.word	0x080060dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b0:	4b67      	ldr	r3, [pc, #412]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b4:	4a66      	ldr	r2, [pc, #408]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060bc:	e00f      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	3308      	adds	r3, #8
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f902 	bl	80072d0 <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060d2:	e004      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060da:	e000      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80060dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ea:	f023 0103 	bic.w	r1, r3, #3
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f4:	4a56      	ldr	r2, [pc, #344]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f6:	430b      	orrs	r3, r1
 80060f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060fa:	e003      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006114:	2300      	movs	r3, #0
 8006116:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800611a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800611e:	460b      	mov	r3, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	f000 809f 	beq.w	8006264 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006126:	4b4b      	ldr	r3, [pc, #300]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4a      	ldr	r2, [pc, #296]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006132:	f7fc fa97 	bl	8002664 <HAL_GetTick>
 8006136:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800613a:	e00b      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613c:	f7fc fa92 	bl	8002664 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b64      	cmp	r3, #100	@ 0x64
 800614a:	d903      	bls.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006152:	e005      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006154:	4b3f      	ldr	r3, [pc, #252]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ed      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006164:	2b00      	cmp	r3, #0
 8006166:	d179      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006168:	4b39      	ldr	r3, [pc, #228]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800616a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006174:	4053      	eors	r3, r2
 8006176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617a:	2b00      	cmp	r3, #0
 800617c:	d015      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800617e:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006186:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800618a:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618e:	4a30      	ldr	r2, [pc, #192]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006194:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006196:	4b2e      	ldr	r3, [pc, #184]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619a:	4a2d      	ldr	r2, [pc, #180]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d118      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fc fa54 	bl	8002664 <HAL_GetTick>
 80061bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c0:	e00d      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fc fa4f 	bl	8002664 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d903      	bls.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80061dc:	e005      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061de:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0eb      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d129      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006202:	d10e      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006204:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006214:	091a      	lsrs	r2, r3, #4
 8006216:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006218:	4013      	ands	r3, r2
 800621a:	4a0d      	ldr	r2, [pc, #52]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621c:	430b      	orrs	r3, r1
 800621e:	6113      	str	r3, [r2, #16]
 8006220:	e005      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800622c:	6113      	str	r3, [r2, #16]
 800622e:	4b08      	ldr	r3, [pc, #32]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006230:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800623a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623e:	4a04      	ldr	r2, [pc, #16]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	430b      	orrs	r3, r1
 8006242:	6713      	str	r3, [r2, #112]	@ 0x70
 8006244:	e00e      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800624a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006250:	58024400 	.word	0x58024400
 8006254:	58024800 	.word	0x58024800
 8006258:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 0301 	and.w	r3, r2, #1
 8006270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800627a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	f000 8089 	beq.w	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800628c:	2b28      	cmp	r3, #40	@ 0x28
 800628e:	d86b      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	08006371 	.word	0x08006371
 800629c:	08006369 	.word	0x08006369
 80062a0:	08006369 	.word	0x08006369
 80062a4:	08006369 	.word	0x08006369
 80062a8:	08006369 	.word	0x08006369
 80062ac:	08006369 	.word	0x08006369
 80062b0:	08006369 	.word	0x08006369
 80062b4:	08006369 	.word	0x08006369
 80062b8:	0800633d 	.word	0x0800633d
 80062bc:	08006369 	.word	0x08006369
 80062c0:	08006369 	.word	0x08006369
 80062c4:	08006369 	.word	0x08006369
 80062c8:	08006369 	.word	0x08006369
 80062cc:	08006369 	.word	0x08006369
 80062d0:	08006369 	.word	0x08006369
 80062d4:	08006369 	.word	0x08006369
 80062d8:	08006353 	.word	0x08006353
 80062dc:	08006369 	.word	0x08006369
 80062e0:	08006369 	.word	0x08006369
 80062e4:	08006369 	.word	0x08006369
 80062e8:	08006369 	.word	0x08006369
 80062ec:	08006369 	.word	0x08006369
 80062f0:	08006369 	.word	0x08006369
 80062f4:	08006369 	.word	0x08006369
 80062f8:	08006371 	.word	0x08006371
 80062fc:	08006369 	.word	0x08006369
 8006300:	08006369 	.word	0x08006369
 8006304:	08006369 	.word	0x08006369
 8006308:	08006369 	.word	0x08006369
 800630c:	08006369 	.word	0x08006369
 8006310:	08006369 	.word	0x08006369
 8006314:	08006369 	.word	0x08006369
 8006318:	08006371 	.word	0x08006371
 800631c:	08006369 	.word	0x08006369
 8006320:	08006369 	.word	0x08006369
 8006324:	08006369 	.word	0x08006369
 8006328:	08006369 	.word	0x08006369
 800632c:	08006369 	.word	0x08006369
 8006330:	08006369 	.word	0x08006369
 8006334:	08006369 	.word	0x08006369
 8006338:	08006371 	.word	0x08006371
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006340:	3308      	adds	r3, #8
 8006342:	2101      	movs	r1, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ffc3 	bl	80072d0 <RCCEx_PLL2_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006350:	e00f      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006356:	3328      	adds	r3, #40	@ 0x28
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f001 f86a 	bl	8007434 <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006366:	e004      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800637a:	4bbf      	ldr	r3, [pc, #764]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006388:	4abb      	ldr	r2, [pc, #748]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800638a:	430b      	orrs	r3, r1
 800638c:	6553      	str	r3, [r2, #84]	@ 0x54
 800638e:	e003      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f002 0302 	and.w	r3, r2, #2
 80063a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d041      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d824      	bhi.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	08006415 	.word	0x08006415
 80063cc:	080063e1 	.word	0x080063e1
 80063d0:	080063f7 	.word	0x080063f7
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	3308      	adds	r3, #8
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 ff71 	bl	80072d0 <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80063f4:	e00f      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	3328      	adds	r3, #40	@ 0x28
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 f818 	bl	8007434 <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800640a:	e004      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006412:	e000      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800641e:	4b96      	ldr	r3, [pc, #600]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006422:	f023 0107 	bic.w	r1, r3, #7
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800642c:	4a92      	ldr	r2, [pc, #584]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800642e:	430b      	orrs	r3, r1
 8006430:	6553      	str	r3, [r2, #84]	@ 0x54
 8006432:	e003      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 0304 	and.w	r3, r2, #4
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006452:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d044      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006464:	2b05      	cmp	r3, #5
 8006466:	d825      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	080064bd 	.word	0x080064bd
 8006474:	08006489 	.word	0x08006489
 8006478:	0800649f 	.word	0x0800649f
 800647c:	080064bd 	.word	0x080064bd
 8006480:	080064bd 	.word	0x080064bd
 8006484:	080064bd 	.word	0x080064bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3308      	adds	r3, #8
 800648e:	2101      	movs	r1, #1
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ff1d 	bl	80072d0 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800649c:	e00f      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	3328      	adds	r3, #40	@ 0x28
 80064a4:	2101      	movs	r1, #1
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ffc4 	bl	8007434 <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064b2:	e004      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80064bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ca:	f023 0107 	bic.w	r1, r3, #7
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d6:	4a68      	ldr	r2, [pc, #416]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d8:	430b      	orrs	r3, r1
 80064da:	6593      	str	r3, [r2, #88]	@ 0x58
 80064dc:	e003      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f002 0320 	and.w	r3, r2, #32
 80064f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064f6:	2300      	movs	r3, #0
 80064f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006500:	460b      	mov	r3, r1
 8006502:	4313      	orrs	r3, r2
 8006504:	d055      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006512:	d033      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006518:	d82c      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651e:	d02f      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006524:	d826      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006526:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800652a:	d02b      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800652c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006530:	d820      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006536:	d012      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800653c:	d81a      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d022      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006546:	d115      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3308      	adds	r3, #8
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f000 febd 	bl	80072d0 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800655c:	e015      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	3328      	adds	r3, #40	@ 0x28
 8006564:	2102      	movs	r1, #2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 ff64 	bl	8007434 <RCCEx_PLL3_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006572:	e00a      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800657a:	e006      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800657c:	bf00      	nop
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006580:	bf00      	nop
 8006582:	e002      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006584:	bf00      	nop
 8006586:	e000      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006592:	4b39      	ldr	r3, [pc, #228]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006596:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a2:	4a35      	ldr	r2, [pc, #212]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d058      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065de:	d033      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065e4:	d82c      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ea:	d02f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80065ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f0:	d826      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f6:	d02b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80065f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065fc:	d820      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006602:	d012      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006608:	d81a      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d022      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006612:	d115      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006618:	3308      	adds	r3, #8
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fe57 	bl	80072d0 <RCCEx_PLL2_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006628:	e015      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662e:	3328      	adds	r3, #40	@ 0x28
 8006630:	2102      	movs	r1, #2
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fefe 	bl	8007434 <RCCEx_PLL3_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800663e:	e00a      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006648:	bf00      	nop
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006662:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800666e:	4a02      	ldr	r2, [pc, #8]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6593      	str	r3, [r2, #88]	@ 0x58
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800669a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d055      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066b0:	d033      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80066b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066b6:	d82c      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066bc:	d02f      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c2:	d826      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066c8:	d02b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80066ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066ce:	d820      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d4:	d012      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80066d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066da:	d81a      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d022      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80066e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e4:	d115      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	3308      	adds	r3, #8
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fdee 	bl	80072d0 <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066fa:	e015      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	3328      	adds	r3, #40	@ 0x28
 8006702:	2102      	movs	r1, #2
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fe95 	bl	8007434 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006710:	e00a      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800671a:	bf00      	nop
 800671c:	e004      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800671e:	bf00      	nop
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006730:	4ba1      	ldr	r3, [pc, #644]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006734:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006740:	4a9d      	ldr	r2, [pc, #628]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006742:	430b      	orrs	r3, r1
 8006744:	6593      	str	r3, [r2, #88]	@ 0x58
 8006746:	e003      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f002 0308 	and.w	r3, r2, #8
 800675c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006766:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d01e      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677c:	d10c      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3328      	adds	r3, #40	@ 0x28
 8006784:	2102      	movs	r1, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fe54 	bl	8007434 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006798:	4b87      	ldr	r3, [pc, #540]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800679a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a8:	4a83      	ldr	r2, [pc, #524]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f002 0310 	and.w	r3, r2, #16
 80067ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067be:	2300      	movs	r3, #0
 80067c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067c8:	460b      	mov	r3, r1
 80067ca:	4313      	orrs	r3, r2
 80067cc:	d01e      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067da:	d10c      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	3328      	adds	r3, #40	@ 0x28
 80067e2:	2102      	movs	r1, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fe25 	bl	8007434 <RCCEx_PLL3_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067f6:	4b70      	ldr	r3, [pc, #448]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006806:	4a6c      	ldr	r2, [pc, #432]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800681c:	2300      	movs	r3, #0
 800681e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006822:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006826:	460b      	mov	r3, r1
 8006828:	4313      	orrs	r3, r2
 800682a:	d03e      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006838:	d022      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683e:	d81b      	bhi.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006848:	d00b      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800684a:	e015      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	3308      	adds	r3, #8
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fd3b 	bl	80072d0 <RCCEx_PLL2_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006860:	e00f      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	3328      	adds	r3, #40	@ 0x28
 8006868:	2102      	movs	r1, #2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fde2 	bl	8007434 <RCCEx_PLL3_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006876:	e004      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800688a:	4b4b      	ldr	r3, [pc, #300]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800689a:	4a47      	ldr	r2, [pc, #284]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068b8:	2300      	movs	r3, #0
 80068ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d03b      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068d2:	d01f      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80068d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068d8:	d818      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80068e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068e4:	d007      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80068e6:	e011      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e8:	4b33      	ldr	r3, [pc, #204]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	4a32      	ldr	r2, [pc, #200]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80068f4:	e00f      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	3328      	adds	r3, #40	@ 0x28
 80068fc:	2101      	movs	r1, #1
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fd98 	bl	8007434 <RCCEx_PLL3_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800690a:	e004      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006912:	e000      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800691e:	4b26      	ldr	r3, [pc, #152]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006922:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692e:	4a22      	ldr	r2, [pc, #136]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6553      	str	r3, [r2, #84]	@ 0x54
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800694a:	673b      	str	r3, [r7, #112]	@ 0x70
 800694c:	2300      	movs	r3, #0
 800694e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006950:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006954:	460b      	mov	r3, r1
 8006956:	4313      	orrs	r3, r2
 8006958:	d034      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d007      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800696a:	e011      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800696c:	4b12      	ldr	r3, [pc, #72]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	4a11      	ldr	r2, [pc, #68]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006978:	e00e      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	3308      	adds	r3, #8
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fca4 	bl	80072d0 <RCCEx_PLL2_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800698e:	e003      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10d      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ae:	4a02      	ldr	r2, [pc, #8]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069b4:	e006      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80069d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069d2:	2300      	movs	r3, #0
 80069d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069da:	460b      	mov	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	d00c      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	3328      	adds	r3, #40	@ 0x28
 80069e6:	2102      	movs	r1, #2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fd23 	bl	8007434 <RCCEx_PLL3_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a08:	2300      	movs	r3, #0
 8006a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a10:	460b      	mov	r3, r1
 8006a12:	4313      	orrs	r3, r2
 8006a14:	d038      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a22:	d018      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a28:	d811      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2e:	d014      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a34:	d80b      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a40:	4bc3      	ldr	r3, [pc, #780]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	4ac2      	ldr	r2, [pc, #776]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a4c:	e008      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a54:	e004      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a68:	4bb9      	ldr	r3, [pc, #740]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a78:	4ab5      	ldr	r2, [pc, #724]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a7e:	e003      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a96:	2300      	movs	r3, #0
 8006a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006aa4:	4baa      	ldr	r3, [pc, #680]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab2:	4aa7      	ldr	r2, [pc, #668]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ae4:	4a9a      	ldr	r2, [pc, #616]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af8:	2300      	movs	r3, #0
 8006afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006afc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b00:	460b      	mov	r3, r1
 8006b02:	4313      	orrs	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b06:	4b92      	ldr	r3, [pc, #584]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b14:	4a8e      	ldr	r2, [pc, #568]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b26:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b28:	2300      	movs	r3, #0
 8006b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b30:	460b      	mov	r3, r1
 8006b32:	4313      	orrs	r3, r2
 8006b34:	d00e      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b36:	4b86      	ldr	r3, [pc, #536]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	4a85      	ldr	r2, [pc, #532]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b40:	6113      	str	r3, [r2, #16]
 8006b42:	4b83      	ldr	r3, [pc, #524]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b44:	6919      	ldr	r1, [r3, #16]
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b4e:	4a80      	ldr	r2, [pc, #512]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b70:	4b77      	ldr	r3, [pc, #476]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b74:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7e:	4a74      	ldr	r2, [pc, #464]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bb0:	4a67      	ldr	r2, [pc, #412]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	d011      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fb78 	bl	80072d0 <RCCEx_PLL2_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6239      	str	r1, [r7, #32]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	d011      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	3308      	adds	r3, #8
 8006c18:	2101      	movs	r1, #1
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fb58 	bl	80072d0 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	61b9      	str	r1, [r7, #24]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d011      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	3308      	adds	r3, #8
 8006c58:	2102      	movs	r1, #2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fb38 	bl	80072d0 <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6139      	str	r1, [r7, #16]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d011      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c96:	3328      	adds	r3, #40	@ 0x28
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fbca 	bl	8007434 <RCCEx_PLL3_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d011      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	3328      	adds	r3, #40	@ 0x28
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fbaa 	bl	8007434 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d011      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d16:	3328      	adds	r3, #40	@ 0x28
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fb8a 	bl	8007434 <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d50:	58024400 	.word	0x58024400

08006d54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d58:	f7fe fd96 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	091b      	lsrs	r3, r3, #4
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	4904      	ldr	r1, [pc, #16]	@ (8006d7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d6a:	5ccb      	ldrb	r3, [r1, r3]
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	0800b714 	.word	0x0800b714

08006d80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	@ 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d88:	4ba1      	ldr	r3, [pc, #644]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d92:	4b9f      	ldr	r3, [pc, #636]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	0b1b      	lsrs	r3, r3, #12
 8006d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006daa:	4b99      	ldr	r3, [pc, #612]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	08db      	lsrs	r3, r3, #3
 8006db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8111 	beq.w	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	f000 8083 	beq.w	8006edc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	f200 80a1 	bhi.w	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d056      	beq.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006dea:	e099      	b.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dec:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02d      	beq.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df8:	4b85      	ldr	r3, [pc, #532]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a84      	ldr	r2, [pc, #528]	@ (8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b7b      	ldr	r3, [pc, #492]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e52:	e087      	b.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800701c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b6a      	ldr	r3, [pc, #424]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	e065      	b.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b59      	ldr	r3, [pc, #356]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eda:	e043      	b.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b48      	ldr	r3, [pc, #288]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1e:	e021      	b.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b37      	ldr	r3, [pc, #220]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f64:	4b2a      	ldr	r3, [pc, #168]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f68:	0a5b      	lsrs	r3, r3, #9
 8006f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 2a90 	vmov	r2, s15
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f92:	4b1f      	ldr	r3, [pc, #124]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f96:	0c1b      	lsrs	r3, r3, #16
 8006f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb8:	ee17 2a90 	vmov	r2, s15
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006fc0:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe6:	ee17 2a90 	vmov	r2, s15
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fee:	e008      	b.n	8007002 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	609a      	str	r2, [r3, #8]
}
 8007002:	bf00      	nop
 8007004:	3724      	adds	r7, #36	@ 0x24
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	58024400 	.word	0x58024400
 8007014:	03d09000 	.word	0x03d09000
 8007018:	46000000 	.word	0x46000000
 800701c:	4c742400 	.word	0x4c742400
 8007020:	4a742400 	.word	0x4a742400
 8007024:	4bbebc20 	.word	0x4bbebc20

08007028 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	@ 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007030:	4ba1      	ldr	r3, [pc, #644]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800703a:	4b9f      	ldr	r3, [pc, #636]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	0d1b      	lsrs	r3, r3, #20
 8007040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007044:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007046:	4b9c      	ldr	r3, [pc, #624]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007052:	4b99      	ldr	r3, [pc, #612]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8111 	beq.w	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f000 8083 	beq.w	8007184 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f200 80a1 	bhi.w	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d056      	beq.n	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007092:	e099      	b.n	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007094:	4b88      	ldr	r3, [pc, #544]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02d      	beq.n	80070fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a0:	4b85      	ldr	r3, [pc, #532]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	08db      	lsrs	r3, r3, #3
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	4a84      	ldr	r2, [pc, #528]	@ (80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
 80070b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b7b      	ldr	r3, [pc, #492]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070fa:	e087      	b.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b6a      	ldr	r3, [pc, #424]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	e065      	b.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b59      	ldr	r3, [pc, #356]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a03 	vldr	s12, [r7, #12]
 8007166:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007182:	e043      	b.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b48      	ldr	r3, [pc, #288]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c6:	e021      	b.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b37      	ldr	r3, [pc, #220]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800720c:	4b2a      	ldr	r3, [pc, #168]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	0a5b      	lsrs	r3, r3, #9
 8007212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007226:	edd7 6a07 	vldr	s13, [r7, #28]
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 2a90 	vmov	r2, s15
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800723a:	4b1f      	ldr	r3, [pc, #124]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007254:	edd7 6a07 	vldr	s13, [r7, #28]
 8007258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007260:	ee17 2a90 	vmov	r2, s15
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007268:	4b13      	ldr	r3, [pc, #76]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007282:	edd7 6a07 	vldr	s13, [r7, #28]
 8007286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728e:	ee17 2a90 	vmov	r2, s15
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
}
 80072aa:	bf00      	nop
 80072ac:	3724      	adds	r7, #36	@ 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	58024400 	.word	0x58024400
 80072bc:	03d09000 	.word	0x03d09000
 80072c0:	46000000 	.word	0x46000000
 80072c4:	4c742400 	.word	0x4c742400
 80072c8:	4a742400 	.word	0x4a742400
 80072cc:	4bbebc20 	.word	0x4bbebc20

080072d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072de:	4b53      	ldr	r3, [pc, #332]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d101      	bne.n	80072ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e099      	b.n	8007422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072ee:	4b4f      	ldr	r3, [pc, #316]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4e      	ldr	r2, [pc, #312]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80072f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072fa:	f7fb f9b3 	bl	8002664 <HAL_GetTick>
 80072fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007300:	e008      	b.n	8007314 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007302:	f7fb f9af 	bl	8002664 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d901      	bls.n	8007314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e086      	b.n	8007422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007314:	4b45      	ldr	r3, [pc, #276]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f0      	bne.n	8007302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007320:	4b42      	ldr	r3, [pc, #264]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	031b      	lsls	r3, r3, #12
 800732e:	493f      	ldr	r1, [pc, #252]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	628b      	str	r3, [r1, #40]	@ 0x28
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	3b01      	subs	r3, #1
 800733a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	3b01      	subs	r3, #1
 8007344:	025b      	lsls	r3, r3, #9
 8007346:	b29b      	uxth	r3, r3
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	3b01      	subs	r3, #1
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	3b01      	subs	r3, #1
 800735e:	061b      	lsls	r3, r3, #24
 8007360:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007364:	4931      	ldr	r1, [pc, #196]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007366:	4313      	orrs	r3, r2
 8007368:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800736a:	4b30      	ldr	r3, [pc, #192]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	492d      	ldr	r1, [pc, #180]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800737c:	4b2b      	ldr	r3, [pc, #172]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 800737e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007380:	f023 0220 	bic.w	r2, r3, #32
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	4928      	ldr	r1, [pc, #160]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 800738a:	4313      	orrs	r3, r2
 800738c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800738e:	4b27      	ldr	r3, [pc, #156]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	4a26      	ldr	r2, [pc, #152]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007394:	f023 0310 	bic.w	r3, r3, #16
 8007398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800739a:	4b24      	ldr	r3, [pc, #144]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 800739c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800739e:	4b24      	ldr	r3, [pc, #144]	@ (8007430 <RCCEx_PLL2_Config+0x160>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	69d2      	ldr	r2, [r2, #28]
 80073a6:	00d2      	lsls	r2, r2, #3
 80073a8:	4920      	ldr	r1, [pc, #128]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073ae:	4b1f      	ldr	r3, [pc, #124]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	4a1e      	ldr	r2, [pc, #120]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073b4:	f043 0310 	orr.w	r3, r3, #16
 80073b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073c0:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	4a19      	ldr	r2, [pc, #100]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073cc:	e00f      	b.n	80073ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d106      	bne.n	80073e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073d4:	4b15      	ldr	r3, [pc, #84]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	4a14      	ldr	r2, [pc, #80]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073e0:	e005      	b.n	80073ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073e2:	4b12      	ldr	r3, [pc, #72]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	4a11      	ldr	r2, [pc, #68]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073ee:	4b0f      	ldr	r3, [pc, #60]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a0e      	ldr	r2, [pc, #56]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 80073f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073fa:	f7fb f933 	bl	8002664 <HAL_GetTick>
 80073fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007400:	e008      	b.n	8007414 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007402:	f7fb f92f 	bl	8002664 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e006      	b.n	8007422 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <RCCEx_PLL2_Config+0x15c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	58024400 	.word	0x58024400
 8007430:	ffff0007 	.word	0xffff0007

08007434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007442:	4b53      	ldr	r3, [pc, #332]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b03      	cmp	r3, #3
 800744c:	d101      	bne.n	8007452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e099      	b.n	8007586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007452:	4b4f      	ldr	r3, [pc, #316]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a4e      	ldr	r2, [pc, #312]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745e:	f7fb f901 	bl	8002664 <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007464:	e008      	b.n	8007478 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007466:	f7fb f8fd 	bl	8002664 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e086      	b.n	8007586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007478:	4b45      	ldr	r3, [pc, #276]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1f0      	bne.n	8007466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007484:	4b42      	ldr	r3, [pc, #264]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	051b      	lsls	r3, r3, #20
 8007492:	493f      	ldr	r1, [pc, #252]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	628b      	str	r3, [r1, #40]	@ 0x28
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	3b01      	subs	r3, #1
 800749e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	025b      	lsls	r3, r3, #9
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	061b      	lsls	r3, r3, #24
 80074c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074c8:	4931      	ldr	r1, [pc, #196]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074ce:	4b30      	ldr	r3, [pc, #192]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	492d      	ldr	r1, [pc, #180]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	4928      	ldr	r1, [pc, #160]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074f2:	4b27      	ldr	r3, [pc, #156]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	4a26      	ldr	r2, [pc, #152]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074fe:	4b24      	ldr	r3, [pc, #144]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007502:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <RCCEx_PLL3_Config+0x160>)
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	69d2      	ldr	r2, [r2, #28]
 800750a:	00d2      	lsls	r2, r2, #3
 800750c:	4920      	ldr	r1, [pc, #128]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800750e:	4313      	orrs	r3, r2
 8007510:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007512:	4b1f      	ldr	r3, [pc, #124]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	4a1e      	ldr	r2, [pc, #120]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007524:	4b1a      	ldr	r3, [pc, #104]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	4a19      	ldr	r2, [pc, #100]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800752a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800752e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007530:	e00f      	b.n	8007552 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d106      	bne.n	8007546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007538:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	4a14      	ldr	r2, [pc, #80]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800753e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007542:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007544:	e005      	b.n	8007552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007546:	4b12      	ldr	r3, [pc, #72]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	4a11      	ldr	r2, [pc, #68]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800754c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007550:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007552:	4b0f      	ldr	r3, [pc, #60]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0e      	ldr	r2, [pc, #56]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 8007558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800755c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755e:	f7fb f881 	bl	8002664 <HAL_GetTick>
 8007562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007564:	e008      	b.n	8007578 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007566:	f7fb f87d 	bl	8002664 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e006      	b.n	8007586 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007578:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <RCCEx_PLL3_Config+0x15c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400
 8007594:	ffff0007 	.word	0xffff0007

08007598 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e10f      	b.n	80077ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a87      	ldr	r2, [pc, #540]	@ (80077d4 <HAL_SPI_Init+0x23c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00f      	beq.n	80075da <HAL_SPI_Init+0x42>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a86      	ldr	r2, [pc, #536]	@ (80077d8 <HAL_SPI_Init+0x240>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00a      	beq.n	80075da <HAL_SPI_Init+0x42>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a84      	ldr	r2, [pc, #528]	@ (80077dc <HAL_SPI_Init+0x244>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d005      	beq.n	80075da <HAL_SPI_Init+0x42>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d901      	bls.n	80075da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0f7      	b.n	80077ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fe2e 	bl	800823c <SPI_GetPacketSize>
 80075e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a7b      	ldr	r2, [pc, #492]	@ (80077d4 <HAL_SPI_Init+0x23c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00c      	beq.n	8007606 <HAL_SPI_Init+0x6e>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a79      	ldr	r2, [pc, #484]	@ (80077d8 <HAL_SPI_Init+0x240>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d007      	beq.n	8007606 <HAL_SPI_Init+0x6e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a78      	ldr	r2, [pc, #480]	@ (80077dc <HAL_SPI_Init+0x244>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d002      	beq.n	8007606 <HAL_SPI_Init+0x6e>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b08      	cmp	r3, #8
 8007604:	d811      	bhi.n	800762a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800760a:	4a72      	ldr	r2, [pc, #456]	@ (80077d4 <HAL_SPI_Init+0x23c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a70      	ldr	r2, [pc, #448]	@ (80077d8 <HAL_SPI_Init+0x240>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_SPI_Init+0x8c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6f      	ldr	r2, [pc, #444]	@ (80077dc <HAL_SPI_Init+0x244>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d104      	bne.n	800762e <HAL_SPI_Init+0x96>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b10      	cmp	r3, #16
 8007628:	d901      	bls.n	800762e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e0cd      	b.n	80077ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fa fb3a 	bl	8001cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800766a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007674:	d119      	bne.n	80076aa <HAL_SPI_Init+0x112>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800767e:	d103      	bne.n	8007688 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007698:	d107      	bne.n	80076aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00f      	beq.n	80076d6 <HAL_SPI_Init+0x13e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b06      	cmp	r3, #6
 80076bc:	d90b      	bls.n	80076d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	e007      	b.n	80076e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007746:	ea42 0103 	orr.w	r1, r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d113      	bne.n	8007786 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007770:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007784:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40013000 	.word	0x40013000
 80077d8:	40003800 	.word	0x40003800
 80077dc:	40003c00 	.word	0x40003c00

080077e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3320      	adds	r3, #32
 80077f6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077f8:	f7fa ff34 	bl	8002664 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d001      	beq.n	800780e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
 800780c:	e1d1      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_SPI_Transmit+0x3a>
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e1c9      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_SPI_Transmit+0x4c>
 8007828:	2302      	movs	r3, #2
 800782a:	e1c2      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2203      	movs	r2, #3
 8007838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007884:	d108      	bne.n	8007898 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e009      	b.n	80078ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80078aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4b96      	ldr	r3, [pc, #600]	@ (8007b0c <HAL_SPI_Transmit+0x32c>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	88f9      	ldrh	r1, [r7, #6]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	430b      	orrs	r3, r1
 80078be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078d8:	d107      	bne.n	80078ea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	2b0f      	cmp	r3, #15
 80078f0:	d947      	bls.n	8007982 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80078f2:	e03f      	b.n	8007974 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d114      	bne.n	800792c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800792a:	e023      	b.n	8007974 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792c:	f7fa fe9a 	bl	8002664 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d803      	bhi.n	8007944 <HAL_SPI_Transmit+0x164>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d102      	bne.n	800794a <HAL_SPI_Transmit+0x16a>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d114      	bne.n	8007974 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fba8 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007956:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e11e      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1b9      	bne.n	80078f4 <HAL_SPI_Transmit+0x114>
 8007980:	e0f1      	b.n	8007b66 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b07      	cmp	r3, #7
 8007988:	f240 80e6 	bls.w	8007b58 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800798c:	e05d      	b.n	8007a4a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d132      	bne.n	8007a02 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d918      	bls.n	80079da <HAL_SPI_Transmit+0x1fa>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d014      	beq.n	80079da <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c0:	1d1a      	adds	r2, r3, #4
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b02      	subs	r3, #2
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079d8:	e037      	b.n	8007a4a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079de:	881a      	ldrh	r2, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e8:	1c9a      	adds	r2, r3, #2
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a00:	e023      	b.n	8007a4a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a02:	f7fa fe2f 	bl	8002664 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d803      	bhi.n	8007a1a <HAL_SPI_Transmit+0x23a>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d102      	bne.n	8007a20 <HAL_SPI_Transmit+0x240>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d114      	bne.n	8007a4a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fb3d 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e0b3      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d19b      	bne.n	800798e <HAL_SPI_Transmit+0x1ae>
 8007a56:	e086      	b.n	8007b66 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d154      	bne.n	8007b10 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d918      	bls.n	8007aa4 <HAL_SPI_Transmit+0x2c4>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a76:	2b40      	cmp	r3, #64	@ 0x40
 8007a78:	d914      	bls.n	8007aa4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007aa2:	e059      	b.n	8007b58 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d917      	bls.n	8007ae0 <HAL_SPI_Transmit+0x300>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d013      	beq.n	8007ae0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abc:	881a      	ldrh	r2, [r3, #0]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac6:	1c9a      	adds	r2, r3, #2
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b02      	subs	r3, #2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007ade:	e03b      	b.n	8007b58 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3320      	adds	r3, #32
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007b0a:	e025      	b.n	8007b58 <HAL_SPI_Transmit+0x378>
 8007b0c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b10:	f7fa fda8 	bl	8002664 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d803      	bhi.n	8007b28 <HAL_SPI_Transmit+0x348>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d102      	bne.n	8007b2e <HAL_SPI_Transmit+0x34e>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d114      	bne.n	8007b58 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fab6 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e02c      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f47f af79 	bne.w	8007a58 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2108      	movs	r1, #8
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fb35 	bl	80081e0 <SPI_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fa87 	bl	80080a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop

08007bbc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3330      	adds	r3, #48	@ 0x30
 8007bde:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007be0:	f7fa fd40 	bl	8002664 <HAL_GetTick>
 8007be4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e250      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_SPI_Receive+0x46>
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e248      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_SPI_Receive+0x58>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e241      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	88fa      	ldrh	r2, [r7, #6]
 8007c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007c6c:	d108      	bne.n	8007c80 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	e009      	b.n	8007c94 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007c92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	4b95      	ldr	r3, [pc, #596]	@ (8007ef0 <HAL_SPI_Receive+0x334>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	88f9      	ldrh	r1, [r7, #6]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cc0:	d107      	bne.n	8007cd2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	d96c      	bls.n	8007db4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007cda:	e064      	b.n	8007da6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d114      	bne.n	8007d1c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007cfc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d1a:	e044      	b.n	8007da6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	8bfa      	ldrh	r2, [r7, #30]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d919      	bls.n	8007d5e <HAL_SPI_Receive+0x1a2>
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d014      	beq.n	8007d5e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d3e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d44:	1d1a      	adds	r2, r3, #4
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d5c:	e023      	b.n	8007da6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d5e:	f7fa fc81 	bl	8002664 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d803      	bhi.n	8007d76 <HAL_SPI_Receive+0x1ba>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d102      	bne.n	8007d7c <HAL_SPI_Receive+0x1c0>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d114      	bne.n	8007da6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f98f 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e178      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d194      	bne.n	8007cdc <HAL_SPI_Receive+0x120>
 8007db2:	e15e      	b.n	8008072 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b07      	cmp	r3, #7
 8007dba:	f240 8153 	bls.w	8008064 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007dbe:	e08f      	b.n	8007ee0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d114      	bne.n	8007e00 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	8812      	ldrh	r2, [r2, #0]
 8007dde:	b292      	uxth	r2, r2
 8007de0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de6:	1c9a      	adds	r2, r3, #2
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dfe:	e06f      	b.n	8007ee0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	8bfa      	ldrh	r2, [r7, #30]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d924      	bls.n	8007e58 <HAL_SPI_Receive+0x29c>
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01f      	beq.n	8007e58 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	8812      	ldrh	r2, [r2, #0]
 8007e20:	b292      	uxth	r2, r2
 8007e22:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e28:	1c9a      	adds	r2, r3, #2
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	8812      	ldrh	r2, [r2, #0]
 8007e36:	b292      	uxth	r2, r2
 8007e38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3e:	1c9a      	adds	r2, r3, #2
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b02      	subs	r3, #2
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e56:	e043      	b.n	8007ee0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d119      	bne.n	8007e98 <HAL_SPI_Receive+0x2dc>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d014      	beq.n	8007e98 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	8812      	ldrh	r2, [r2, #0]
 8007e76:	b292      	uxth	r2, r2
 8007e78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e96:	e023      	b.n	8007ee0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e98:	f7fa fbe4 	bl	8002664 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d803      	bhi.n	8007eb0 <HAL_SPI_Receive+0x2f4>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d102      	bne.n	8007eb6 <HAL_SPI_Receive+0x2fa>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d114      	bne.n	8007ee0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f8f2 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e0db      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f47f af69 	bne.w	8007dc0 <HAL_SPI_Receive+0x204>
 8007eee:	e0c0      	b.n	8008072 <HAL_SPI_Receive+0x4b6>
 8007ef0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d117      	bne.n	8007f3a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f38:	e094      	b.n	8008064 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	8bfa      	ldrh	r2, [r7, #30]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d946      	bls.n	8007fd6 <HAL_SPI_Receive+0x41a>
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d041      	beq.n	8007fd6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f7a:	7812      	ldrb	r2, [r2, #0]
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb2:	7812      	ldrb	r2, [r2, #0]
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b04      	subs	r3, #4
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007fd4:	e046      	b.n	8008064 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d81c      	bhi.n	800801c <HAL_SPI_Receive+0x460>
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d017      	beq.n	800801c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800801a:	e023      	b.n	8008064 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800801c:	f7fa fb22 	bl	8002664 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d803      	bhi.n	8008034 <HAL_SPI_Receive+0x478>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008032:	d102      	bne.n	800803a <HAL_SPI_Receive+0x47e>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d114      	bne.n	8008064 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 f830 	bl	80080a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008046:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e019      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	f47f af41 	bne.w	8007ef4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f814 	bl	80080a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008096:	2300      	movs	r3, #0
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0208 	orr.w	r2, r2, #8
 80080be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0210 	orr.w	r2, r2, #16
 80080ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6919      	ldr	r1, [r3, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b3c      	ldr	r3, [pc, #240]	@ (80081dc <SPI_CloseTransfer+0x13c>)
 80080ec:	400b      	ands	r3, r1
 80080ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80080fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b04      	cmp	r3, #4
 800810a:	d014      	beq.n	8008136 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00f      	beq.n	8008136 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800811c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0220 	orr.w	r2, r2, #32
 8008134:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d014      	beq.n	800816c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008152:	f043 0204 	orr.w	r2, r3, #4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800816a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00f      	beq.n	8008196 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800817c:	f043 0201 	orr.w	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008194:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00f      	beq.n	80081c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a6:	f043 0208 	orr.w	r2, r3, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	fffffc90 	.word	0xfffffc90

080081e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081f0:	e010      	b.n	8008214 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081f2:	f7fa fa37 	bl	8002664 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d803      	bhi.n	800820a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d102      	bne.n	8008210 <SPI_WaitOnFlagUntilTimeout+0x30>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e00f      	b.n	8008234 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4013      	ands	r3, r2
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	429a      	cmp	r2, r3
 8008230:	d0df      	beq.n	80081f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	3301      	adds	r3, #1
 8008254:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	3307      	adds	r3, #7
 800825a:	08db      	lsrs	r3, r3, #3
 800825c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e042      	b.n	800830a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7f9 fd78 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	@ 0x24
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0201 	bic.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fb29 	bl	8009914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fdbe 	bl	8008e44 <UART_SetConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01b      	b.n	800830a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0201 	orr.w	r2, r2, #1
 8008300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 fba8 	bl	8009a58 <UART_CheckIdleState>
 8008308:	4603      	mov	r3, r0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b08a      	sub	sp, #40	@ 0x28
 8008316:	af02      	add	r7, sp, #8
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	4613      	mov	r3, r2
 8008320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008328:	2b20      	cmp	r3, #32
 800832a:	d17b      	bne.n	8008424 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_UART_Transmit+0x26>
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e074      	b.n	8008426 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2221      	movs	r2, #33	@ 0x21
 8008348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800834c:	f7fa f98a 	bl	8002664 <HAL_GetTick>
 8008350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800836a:	d108      	bne.n	800837e <HAL_UART_Transmit+0x6c>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	e003      	b.n	8008386 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008386:	e030      	b.n	80083ea <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2200      	movs	r2, #0
 8008390:	2180      	movs	r1, #128	@ 0x80
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f001 fc0a 	bl	8009bac <UART_WaitOnFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e03d      	b.n	8008426 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10b      	bne.n	80083c8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	461a      	mov	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	3302      	adds	r3, #2
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	e007      	b.n	80083d8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1c8      	bne.n	8008388 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2140      	movs	r1, #64	@ 0x40
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fbd3 	bl	8009bac <UART_WaitOnFlagUntilTimeout>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2220      	movs	r2, #32
 8008410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e006      	b.n	8008426 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2220      	movs	r2, #32
 800841c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008424:	2302      	movs	r3, #2
  }
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b08a      	sub	sp, #40	@ 0x28
 8008432:	af02      	add	r7, sp, #8
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008444:	2b20      	cmp	r3, #32
 8008446:	f040 80b5 	bne.w	80085b4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <HAL_UART_Receive+0x28>
 8008450:	88fb      	ldrh	r3, [r7, #6]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e0ad      	b.n	80085b6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2222      	movs	r2, #34	@ 0x22
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008470:	f7fa f8f8 	bl	8002664 <HAL_GetTick>
 8008474:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800848e:	d10e      	bne.n	80084ae <HAL_UART_Receive+0x80>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <HAL_UART_Receive+0x76>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800849e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084a2:	e02d      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	22ff      	movs	r2, #255	@ 0xff
 80084a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084ac:	e028      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10d      	bne.n	80084d2 <HAL_UART_Receive+0xa4>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <HAL_UART_Receive+0x9a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	22ff      	movs	r2, #255	@ 0xff
 80084c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084c6:	e01b      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	227f      	movs	r2, #127	@ 0x7f
 80084cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084d0:	e016      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084da:	d10d      	bne.n	80084f8 <HAL_UART_Receive+0xca>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <HAL_UART_Receive+0xc0>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	227f      	movs	r2, #127	@ 0x7f
 80084e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084ec:	e008      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	223f      	movs	r2, #63	@ 0x3f
 80084f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084f6:	e003      	b.n	8008500 <HAL_UART_Receive+0xd2>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008506:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008510:	d108      	bne.n	8008524 <HAL_UART_Receive+0xf6>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	e003      	b.n	800852c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800852c:	e036      	b.n	800859c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	2120      	movs	r1, #32
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 fb37 	bl	8009bac <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e032      	b.n	80085b6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10c      	bne.n	8008570 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855c:	b29a      	uxth	r2, r3
 800855e:	8a7b      	ldrh	r3, [r7, #18]
 8008560:	4013      	ands	r3, r2
 8008562:	b29a      	uxth	r2, r3
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3302      	adds	r3, #2
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e00c      	b.n	800858a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008576:	b2da      	uxtb	r2, r3
 8008578:	8a7b      	ldrh	r3, [r7, #18]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	4013      	ands	r3, r2
 800857e:	b2da      	uxtb	r2, r3
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	3301      	adds	r3, #1
 8008588:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1c2      	bne.n	800852e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	@ 0x28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d137      	bne.n	8008648 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_UART_Receive_IT+0x24>
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e030      	b.n	800864a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <HAL_UART_Receive_IT+0x94>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01f      	beq.n	8008638 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d018      	beq.n	8008638 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	613b      	str	r3, [r7, #16]
   return(result);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	623b      	str	r3, [r7, #32]
 8008626:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	69f9      	ldr	r1, [r7, #28]
 800862a:	6a3a      	ldr	r2, [r7, #32]
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	61bb      	str	r3, [r7, #24]
   return(result);
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e6      	bne.n	8008606 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008638:	88fb      	ldrh	r3, [r7, #6]
 800863a:	461a      	mov	r2, r3
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 fb22 	bl	8009c88 <UART_Start_Receive_IT>
 8008644:	4603      	mov	r3, r0
 8008646:	e000      	b.n	800864a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008648:	2302      	movs	r3, #2
  }
}
 800864a:	4618      	mov	r0, r3
 800864c:	3728      	adds	r7, #40	@ 0x28
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	58000c00 	.word	0x58000c00

08008658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b0ba      	sub	sp, #232	@ 0xe8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800867e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008682:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008686:	4013      	ands	r3, r2
 8008688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800868c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d11b      	bne.n	80086cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d015      	beq.n	80086cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8393 	beq.w	8008de8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
      }
      return;
 80086ca:	e38d      	b.n	8008de8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80086cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8123 	beq.w	800891c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80086d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086da:	4b8d      	ldr	r3, [pc, #564]	@ (8008910 <HAL_UART_IRQHandler+0x2b8>)
 80086dc:	4013      	ands	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80086e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80086e6:	4b8b      	ldr	r3, [pc, #556]	@ (8008914 <HAL_UART_IRQHandler+0x2bc>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8116 	beq.w	800891c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d011      	beq.n	8008720 <HAL_UART_IRQHandler+0xc8>
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008716:	f043 0201 	orr.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d011      	beq.n	8008750 <HAL_UART_IRQHandler+0xf8>
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2202      	movs	r2, #2
 800873e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008746:	f043 0204 	orr.w	r2, r3, #4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d011      	beq.n	8008780 <HAL_UART_IRQHandler+0x128>
 800875c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2204      	movs	r2, #4
 800876e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008776:	f043 0202 	orr.w	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d017      	beq.n	80087bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008798:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800879c:	4b5c      	ldr	r3, [pc, #368]	@ (8008910 <HAL_UART_IRQHandler+0x2b8>)
 800879e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2208      	movs	r2, #8
 80087aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b2:	f043 0208 	orr.w	r2, r3, #8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d012      	beq.n	80087ee <HAL_UART_IRQHandler+0x196>
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 82f9 	beq.w	8008dec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008842:	2b40      	cmp	r3, #64	@ 0x40
 8008844:	d005      	beq.n	8008852 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800884a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800884e:	2b00      	cmp	r3, #0
 8008850:	d054      	beq.n	80088fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 fb3a 	bl	8009ecc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008862:	2b40      	cmp	r3, #64	@ 0x40
 8008864:	d146      	bne.n	80088f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800887c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800889e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1d9      	bne.n	8008866 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d017      	beq.n	80088ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <HAL_UART_IRQHandler+0x2c0>)
 80088c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fa fb87 	bl	8002fe0 <HAL_DMA_Abort_IT>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d019      	beq.n	800890c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80088e6:	4610      	mov	r0, r2
 80088e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ea:	e00f      	b.n	800890c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fa93 	bl	8008e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f2:	e00b      	b.n	800890c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fa8f 	bl	8008e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fa:	e007      	b.n	800890c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa8b 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800890a:	e26f      	b.n	8008dec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890c:	bf00      	nop
    return;
 800890e:	e26d      	b.n	8008dec <HAL_UART_IRQHandler+0x794>
 8008910:	10000001 	.word	0x10000001
 8008914:	04000120 	.word	0x04000120
 8008918:	08009f99 	.word	0x08009f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008920:	2b01      	cmp	r3, #1
 8008922:	f040 8203 	bne.w	8008d2c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 81fc 	beq.w	8008d2c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 81f5 	beq.w	8008d2c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2210      	movs	r2, #16
 8008948:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008954:	2b40      	cmp	r3, #64	@ 0x40
 8008956:	f040 816d 	bne.w	8008c34 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4aa4      	ldr	r2, [pc, #656]	@ (8008bf4 <HAL_UART_IRQHandler+0x59c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d068      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4aa1      	ldr	r2, [pc, #644]	@ (8008bf8 <HAL_UART_IRQHandler+0x5a0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d061      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a9f      	ldr	r2, [pc, #636]	@ (8008bfc <HAL_UART_IRQHandler+0x5a4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d05a      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a9c      	ldr	r2, [pc, #624]	@ (8008c00 <HAL_UART_IRQHandler+0x5a8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d053      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a9a      	ldr	r2, [pc, #616]	@ (8008c04 <HAL_UART_IRQHandler+0x5ac>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d04c      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a97      	ldr	r2, [pc, #604]	@ (8008c08 <HAL_UART_IRQHandler+0x5b0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d045      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a95      	ldr	r2, [pc, #596]	@ (8008c0c <HAL_UART_IRQHandler+0x5b4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d03e      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a92      	ldr	r2, [pc, #584]	@ (8008c10 <HAL_UART_IRQHandler+0x5b8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d037      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a90      	ldr	r2, [pc, #576]	@ (8008c14 <HAL_UART_IRQHandler+0x5bc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d030      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a8d      	ldr	r2, [pc, #564]	@ (8008c18 <HAL_UART_IRQHandler+0x5c0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d029      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a8b      	ldr	r2, [pc, #556]	@ (8008c1c <HAL_UART_IRQHandler+0x5c4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a88      	ldr	r2, [pc, #544]	@ (8008c20 <HAL_UART_IRQHandler+0x5c8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d01b      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a86      	ldr	r2, [pc, #536]	@ (8008c24 <HAL_UART_IRQHandler+0x5cc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d014      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a83      	ldr	r2, [pc, #524]	@ (8008c28 <HAL_UART_IRQHandler+0x5d0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00d      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a81      	ldr	r2, [pc, #516]	@ (8008c2c <HAL_UART_IRQHandler+0x5d4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d006      	beq.n	8008a3a <HAL_UART_IRQHandler+0x3e2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a7e      	ldr	r2, [pc, #504]	@ (8008c30 <HAL_UART_IRQHandler+0x5d8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d106      	bne.n	8008a48 <HAL_UART_IRQHandler+0x3f0>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	e005      	b.n	8008a54 <HAL_UART_IRQHandler+0x3fc>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80ad 	beq.w	8008bbc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	f080 80a5 	bcs.w	8008bbc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a88:	f000 8087 	beq.w	8008b9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008aba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1da      	bne.n	8008a8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3308      	adds	r3, #8
 8008af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008afa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e1      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e3      	bne.n	8008b12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b68:	f023 0310 	bic.w	r3, r3, #16
 8008b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e4      	bne.n	8008b58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f9 ff05 	bl	80029a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f939 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bba:	e119      	b.n	8008df0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	f040 8112 	bne.w	8008df0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bd8:	f040 810a 	bne.w	8008df0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f91e 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
      return;
 8008bf0:	e0fe      	b.n	8008df0 <HAL_UART_IRQHandler+0x798>
 8008bf2:	bf00      	nop
 8008bf4:	40020010 	.word	0x40020010
 8008bf8:	40020028 	.word	0x40020028
 8008bfc:	40020040 	.word	0x40020040
 8008c00:	40020058 	.word	0x40020058
 8008c04:	40020070 	.word	0x40020070
 8008c08:	40020088 	.word	0x40020088
 8008c0c:	400200a0 	.word	0x400200a0
 8008c10:	400200b8 	.word	0x400200b8
 8008c14:	40020410 	.word	0x40020410
 8008c18:	40020428 	.word	0x40020428
 8008c1c:	40020440 	.word	0x40020440
 8008c20:	40020458 	.word	0x40020458
 8008c24:	40020470 	.word	0x40020470
 8008c28:	40020488 	.word	0x40020488
 8008c2c:	400204a0 	.word	0x400204a0
 8008c30:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80cf 	beq.w	8008df4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80ca 	beq.w	8008df4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e4      	bne.n	8008c60 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ca6:	6a3a      	ldr	r2, [r7, #32]
 8008ca8:	4b55      	ldr	r3, [pc, #340]	@ (8008e00 <HAL_UART_IRQHandler+0x7a8>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0310 	bic.w	r3, r3, #16
 8008cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d04:	61fb      	str	r3, [r7, #28]
 8008d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	69b9      	ldr	r1, [r7, #24]
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	617b      	str	r3, [r7, #20]
   return(result);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e4      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f881 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d2a:	e063      	b.n	8008df4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00e      	beq.n	8008d56 <HAL_UART_IRQHandler+0x6fe>
 8008d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d008      	beq.n	8008d56 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fe80 	bl	800aa54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d54:	e051      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d014      	beq.n	8008d8c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d105      	bne.n	8008d7a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d03a      	beq.n	8008df8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
    }
    return;
 8008d8a:	e035      	b.n	8008df8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <HAL_UART_IRQHandler+0x754>
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f909 	bl	8009fbc <UART_EndTransmit_IT>
    return;
 8008daa:	e026      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <HAL_UART_IRQHandler+0x774>
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fe59 	bl	800aa7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dca:	e016      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d010      	beq.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
 8008dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da0c      	bge.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fe41 	bl	800aa68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008de6:	e008      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008de8:	bf00      	nop
 8008dea:	e006      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
    return;
 8008dec:	bf00      	nop
 8008dee:	e004      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <HAL_UART_IRQHandler+0x7a2>
    return;
 8008df8:	bf00      	nop
  }
}
 8008dfa:	37e8      	adds	r7, #232	@ 0xe8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	effffffe 	.word	0xeffffffe

08008e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e48:	b092      	sub	sp, #72	@ 0x48
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4bbe      	ldr	r3, [pc, #760]	@ (800916c <UART_SetConfig+0x328>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4ab3      	ldr	r2, [pc, #716]	@ (8009170 <UART_SetConfig+0x32c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eac:	4313      	orrs	r3, r2
 8008eae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	4baf      	ldr	r3, [pc, #700]	@ (8009174 <UART_SetConfig+0x330>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eca:	f023 010f 	bic.w	r1, r3, #15
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4aa6      	ldr	r2, [pc, #664]	@ (8009178 <UART_SetConfig+0x334>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d177      	bne.n	8008fd4 <UART_SetConfig+0x190>
 8008ee4:	4ba5      	ldr	r3, [pc, #660]	@ (800917c <UART_SetConfig+0x338>)
 8008ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eec:	2b28      	cmp	r3, #40	@ 0x28
 8008eee:	d86d      	bhi.n	8008fcc <UART_SetConfig+0x188>
 8008ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0xb4>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f9d 	.word	0x08008f9d
 8008efc:	08008fcd 	.word	0x08008fcd
 8008f00:	08008fcd 	.word	0x08008fcd
 8008f04:	08008fcd 	.word	0x08008fcd
 8008f08:	08008fcd 	.word	0x08008fcd
 8008f0c:	08008fcd 	.word	0x08008fcd
 8008f10:	08008fcd 	.word	0x08008fcd
 8008f14:	08008fcd 	.word	0x08008fcd
 8008f18:	08008fa5 	.word	0x08008fa5
 8008f1c:	08008fcd 	.word	0x08008fcd
 8008f20:	08008fcd 	.word	0x08008fcd
 8008f24:	08008fcd 	.word	0x08008fcd
 8008f28:	08008fcd 	.word	0x08008fcd
 8008f2c:	08008fcd 	.word	0x08008fcd
 8008f30:	08008fcd 	.word	0x08008fcd
 8008f34:	08008fcd 	.word	0x08008fcd
 8008f38:	08008fad 	.word	0x08008fad
 8008f3c:	08008fcd 	.word	0x08008fcd
 8008f40:	08008fcd 	.word	0x08008fcd
 8008f44:	08008fcd 	.word	0x08008fcd
 8008f48:	08008fcd 	.word	0x08008fcd
 8008f4c:	08008fcd 	.word	0x08008fcd
 8008f50:	08008fcd 	.word	0x08008fcd
 8008f54:	08008fcd 	.word	0x08008fcd
 8008f58:	08008fb5 	.word	0x08008fb5
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008fcd 	.word	0x08008fcd
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008fcd 	.word	0x08008fcd
 8008f6c:	08008fcd 	.word	0x08008fcd
 8008f70:	08008fcd 	.word	0x08008fcd
 8008f74:	08008fcd 	.word	0x08008fcd
 8008f78:	08008fbd 	.word	0x08008fbd
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	08008fcd 	.word	0x08008fcd
 8008f84:	08008fcd 	.word	0x08008fcd
 8008f88:	08008fcd 	.word	0x08008fcd
 8008f8c:	08008fcd 	.word	0x08008fcd
 8008f90:	08008fcd 	.word	0x08008fcd
 8008f94:	08008fcd 	.word	0x08008fcd
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e222      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e21e      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e21a      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e216      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e212      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fc4:	2340      	movs	r3, #64	@ 0x40
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e20e      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fcc:	2380      	movs	r3, #128	@ 0x80
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e20a      	b.n	80093ea <UART_SetConfig+0x5a6>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a69      	ldr	r2, [pc, #420]	@ (8009180 <UART_SetConfig+0x33c>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d130      	bne.n	8009040 <UART_SetConfig+0x1fc>
 8008fde:	4b67      	ldr	r3, [pc, #412]	@ (800917c <UART_SetConfig+0x338>)
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d826      	bhi.n	8009038 <UART_SetConfig+0x1f4>
 8008fea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <UART_SetConfig+0x1ac>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	2300      	movs	r3, #0
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e1ec      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e1e8      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e1e4      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e1e0      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009028:	2320      	movs	r3, #32
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e1dc      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009030:	2340      	movs	r3, #64	@ 0x40
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e1d8      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009038:	2380      	movs	r3, #128	@ 0x80
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e1d4      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a4f      	ldr	r2, [pc, #316]	@ (8009184 <UART_SetConfig+0x340>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d130      	bne.n	80090ac <UART_SetConfig+0x268>
 800904a:	4b4c      	ldr	r3, [pc, #304]	@ (800917c <UART_SetConfig+0x338>)
 800904c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b05      	cmp	r3, #5
 8009054:	d826      	bhi.n	80090a4 <UART_SetConfig+0x260>
 8009056:	a201      	add	r2, pc, #4	@ (adr r2, 800905c <UART_SetConfig+0x218>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009075 	.word	0x08009075
 8009060:	0800907d 	.word	0x0800907d
 8009064:	08009085 	.word	0x08009085
 8009068:	0800908d 	.word	0x0800908d
 800906c:	08009095 	.word	0x08009095
 8009070:	0800909d 	.word	0x0800909d
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e1b6      	b.n	80093ea <UART_SetConfig+0x5a6>
 800907c:	2304      	movs	r3, #4
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e1b2      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e1ae      	b.n	80093ea <UART_SetConfig+0x5a6>
 800908c:	2310      	movs	r3, #16
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e1aa      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009094:	2320      	movs	r3, #32
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e1a6      	b.n	80093ea <UART_SetConfig+0x5a6>
 800909c:	2340      	movs	r3, #64	@ 0x40
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e1a2      	b.n	80093ea <UART_SetConfig+0x5a6>
 80090a4:	2380      	movs	r3, #128	@ 0x80
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e19e      	b.n	80093ea <UART_SetConfig+0x5a6>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a35      	ldr	r2, [pc, #212]	@ (8009188 <UART_SetConfig+0x344>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d130      	bne.n	8009118 <UART_SetConfig+0x2d4>
 80090b6:	4b31      	ldr	r3, [pc, #196]	@ (800917c <UART_SetConfig+0x338>)
 80090b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d826      	bhi.n	8009110 <UART_SetConfig+0x2cc>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <UART_SetConfig+0x284>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090e1 	.word	0x080090e1
 80090cc:	080090e9 	.word	0x080090e9
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	080090f9 	.word	0x080090f9
 80090d8:	08009101 	.word	0x08009101
 80090dc:	08009109 	.word	0x08009109
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e180      	b.n	80093ea <UART_SetConfig+0x5a6>
 80090e8:	2304      	movs	r3, #4
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e17c      	b.n	80093ea <UART_SetConfig+0x5a6>
 80090f0:	2308      	movs	r3, #8
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e178      	b.n	80093ea <UART_SetConfig+0x5a6>
 80090f8:	2310      	movs	r3, #16
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e174      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009100:	2320      	movs	r3, #32
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e170      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009108:	2340      	movs	r3, #64	@ 0x40
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e16c      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009110:	2380      	movs	r3, #128	@ 0x80
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e168      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1b      	ldr	r2, [pc, #108]	@ (800918c <UART_SetConfig+0x348>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d142      	bne.n	80091a8 <UART_SetConfig+0x364>
 8009122:	4b16      	ldr	r3, [pc, #88]	@ (800917c <UART_SetConfig+0x338>)
 8009124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b05      	cmp	r3, #5
 800912c:	d838      	bhi.n	80091a0 <UART_SetConfig+0x35c>
 800912e:	a201      	add	r2, pc, #4	@ (adr r2, 8009134 <UART_SetConfig+0x2f0>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	0800914d 	.word	0x0800914d
 8009138:	08009155 	.word	0x08009155
 800913c:	0800915d 	.word	0x0800915d
 8009140:	08009165 	.word	0x08009165
 8009144:	08009191 	.word	0x08009191
 8009148:	08009199 	.word	0x08009199
 800914c:	2300      	movs	r3, #0
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e14a      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009154:	2304      	movs	r3, #4
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e146      	b.n	80093ea <UART_SetConfig+0x5a6>
 800915c:	2308      	movs	r3, #8
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e142      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009164:	2310      	movs	r3, #16
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e13e      	b.n	80093ea <UART_SetConfig+0x5a6>
 800916c:	cfff69f3 	.word	0xcfff69f3
 8009170:	58000c00 	.word	0x58000c00
 8009174:	11fff4ff 	.word	0x11fff4ff
 8009178:	40011000 	.word	0x40011000
 800917c:	58024400 	.word	0x58024400
 8009180:	40004400 	.word	0x40004400
 8009184:	40004800 	.word	0x40004800
 8009188:	40004c00 	.word	0x40004c00
 800918c:	40005000 	.word	0x40005000
 8009190:	2320      	movs	r3, #32
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e128      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009198:	2340      	movs	r3, #64	@ 0x40
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e124      	b.n	80093ea <UART_SetConfig+0x5a6>
 80091a0:	2380      	movs	r3, #128	@ 0x80
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e120      	b.n	80093ea <UART_SetConfig+0x5a6>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4acb      	ldr	r2, [pc, #812]	@ (80094dc <UART_SetConfig+0x698>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d176      	bne.n	80092a0 <UART_SetConfig+0x45c>
 80091b2:	4bcb      	ldr	r3, [pc, #812]	@ (80094e0 <UART_SetConfig+0x69c>)
 80091b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091ba:	2b28      	cmp	r3, #40	@ 0x28
 80091bc:	d86c      	bhi.n	8009298 <UART_SetConfig+0x454>
 80091be:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <UART_SetConfig+0x380>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	08009269 	.word	0x08009269
 80091c8:	08009299 	.word	0x08009299
 80091cc:	08009299 	.word	0x08009299
 80091d0:	08009299 	.word	0x08009299
 80091d4:	08009299 	.word	0x08009299
 80091d8:	08009299 	.word	0x08009299
 80091dc:	08009299 	.word	0x08009299
 80091e0:	08009299 	.word	0x08009299
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009299 	.word	0x08009299
 80091ec:	08009299 	.word	0x08009299
 80091f0:	08009299 	.word	0x08009299
 80091f4:	08009299 	.word	0x08009299
 80091f8:	08009299 	.word	0x08009299
 80091fc:	08009299 	.word	0x08009299
 8009200:	08009299 	.word	0x08009299
 8009204:	08009279 	.word	0x08009279
 8009208:	08009299 	.word	0x08009299
 800920c:	08009299 	.word	0x08009299
 8009210:	08009299 	.word	0x08009299
 8009214:	08009299 	.word	0x08009299
 8009218:	08009299 	.word	0x08009299
 800921c:	08009299 	.word	0x08009299
 8009220:	08009299 	.word	0x08009299
 8009224:	08009281 	.word	0x08009281
 8009228:	08009299 	.word	0x08009299
 800922c:	08009299 	.word	0x08009299
 8009230:	08009299 	.word	0x08009299
 8009234:	08009299 	.word	0x08009299
 8009238:	08009299 	.word	0x08009299
 800923c:	08009299 	.word	0x08009299
 8009240:	08009299 	.word	0x08009299
 8009244:	08009289 	.word	0x08009289
 8009248:	08009299 	.word	0x08009299
 800924c:	08009299 	.word	0x08009299
 8009250:	08009299 	.word	0x08009299
 8009254:	08009299 	.word	0x08009299
 8009258:	08009299 	.word	0x08009299
 800925c:	08009299 	.word	0x08009299
 8009260:	08009299 	.word	0x08009299
 8009264:	08009291 	.word	0x08009291
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e0bc      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e0b8      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e0b4      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e0b0      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009288:	2320      	movs	r3, #32
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e0ac      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009290:	2340      	movs	r3, #64	@ 0x40
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e0a8      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009298:	2380      	movs	r3, #128	@ 0x80
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e0a4      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a8f      	ldr	r2, [pc, #572]	@ (80094e4 <UART_SetConfig+0x6a0>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d130      	bne.n	800930c <UART_SetConfig+0x4c8>
 80092aa:	4b8d      	ldr	r3, [pc, #564]	@ (80094e0 <UART_SetConfig+0x69c>)
 80092ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d826      	bhi.n	8009304 <UART_SetConfig+0x4c0>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <UART_SetConfig+0x478>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d5 	.word	0x080092d5
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	2300      	movs	r3, #0
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e086      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092dc:	2304      	movs	r3, #4
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e082      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092e4:	2308      	movs	r3, #8
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e07e      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092ec:	2310      	movs	r3, #16
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e07a      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092f4:	2320      	movs	r3, #32
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e076      	b.n	80093ea <UART_SetConfig+0x5a6>
 80092fc:	2340      	movs	r3, #64	@ 0x40
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e072      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009304:	2380      	movs	r3, #128	@ 0x80
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e06e      	b.n	80093ea <UART_SetConfig+0x5a6>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a75      	ldr	r2, [pc, #468]	@ (80094e8 <UART_SetConfig+0x6a4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d130      	bne.n	8009378 <UART_SetConfig+0x534>
 8009316:	4b72      	ldr	r3, [pc, #456]	@ (80094e0 <UART_SetConfig+0x69c>)
 8009318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	2b05      	cmp	r3, #5
 8009320:	d826      	bhi.n	8009370 <UART_SetConfig+0x52c>
 8009322:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <UART_SetConfig+0x4e4>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009341 	.word	0x08009341
 800932c:	08009349 	.word	0x08009349
 8009330:	08009351 	.word	0x08009351
 8009334:	08009359 	.word	0x08009359
 8009338:	08009361 	.word	0x08009361
 800933c:	08009369 	.word	0x08009369
 8009340:	2300      	movs	r3, #0
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e050      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009348:	2304      	movs	r3, #4
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e04c      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009350:	2308      	movs	r3, #8
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e048      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009358:	2310      	movs	r3, #16
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e044      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009360:	2320      	movs	r3, #32
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e040      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009368:	2340      	movs	r3, #64	@ 0x40
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e03c      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009370:	2380      	movs	r3, #128	@ 0x80
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e038      	b.n	80093ea <UART_SetConfig+0x5a6>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a5b      	ldr	r2, [pc, #364]	@ (80094ec <UART_SetConfig+0x6a8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d130      	bne.n	80093e4 <UART_SetConfig+0x5a0>
 8009382:	4b57      	ldr	r3, [pc, #348]	@ (80094e0 <UART_SetConfig+0x69c>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b05      	cmp	r3, #5
 800938c:	d826      	bhi.n	80093dc <UART_SetConfig+0x598>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <UART_SetConfig+0x550>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093ad 	.word	0x080093ad
 8009398:	080093b5 	.word	0x080093b5
 800939c:	080093bd 	.word	0x080093bd
 80093a0:	080093c5 	.word	0x080093c5
 80093a4:	080093cd 	.word	0x080093cd
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	2302      	movs	r3, #2
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e01a      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093b4:	2304      	movs	r3, #4
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e016      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093bc:	2308      	movs	r3, #8
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e012      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093c4:	2310      	movs	r3, #16
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e00e      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093cc:	2320      	movs	r3, #32
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e00a      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093d4:	2340      	movs	r3, #64	@ 0x40
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e006      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093dc:	2380      	movs	r3, #128	@ 0x80
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e002      	b.n	80093ea <UART_SetConfig+0x5a6>
 80093e4:	2380      	movs	r3, #128	@ 0x80
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a3f      	ldr	r2, [pc, #252]	@ (80094ec <UART_SetConfig+0x6a8>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	f040 80f8 	bne.w	80095e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	dc46      	bgt.n	800948c <UART_SetConfig+0x648>
 80093fe:	2b02      	cmp	r3, #2
 8009400:	f2c0 8082 	blt.w	8009508 <UART_SetConfig+0x6c4>
 8009404:	3b02      	subs	r3, #2
 8009406:	2b1e      	cmp	r3, #30
 8009408:	d87e      	bhi.n	8009508 <UART_SetConfig+0x6c4>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <UART_SetConfig+0x5cc>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009493 	.word	0x08009493
 8009414:	08009509 	.word	0x08009509
 8009418:	0800949b 	.word	0x0800949b
 800941c:	08009509 	.word	0x08009509
 8009420:	08009509 	.word	0x08009509
 8009424:	08009509 	.word	0x08009509
 8009428:	080094ab 	.word	0x080094ab
 800942c:	08009509 	.word	0x08009509
 8009430:	08009509 	.word	0x08009509
 8009434:	08009509 	.word	0x08009509
 8009438:	08009509 	.word	0x08009509
 800943c:	08009509 	.word	0x08009509
 8009440:	08009509 	.word	0x08009509
 8009444:	08009509 	.word	0x08009509
 8009448:	080094bb 	.word	0x080094bb
 800944c:	08009509 	.word	0x08009509
 8009450:	08009509 	.word	0x08009509
 8009454:	08009509 	.word	0x08009509
 8009458:	08009509 	.word	0x08009509
 800945c:	08009509 	.word	0x08009509
 8009460:	08009509 	.word	0x08009509
 8009464:	08009509 	.word	0x08009509
 8009468:	08009509 	.word	0x08009509
 800946c:	08009509 	.word	0x08009509
 8009470:	08009509 	.word	0x08009509
 8009474:	08009509 	.word	0x08009509
 8009478:	08009509 	.word	0x08009509
 800947c:	08009509 	.word	0x08009509
 8009480:	08009509 	.word	0x08009509
 8009484:	08009509 	.word	0x08009509
 8009488:	080094fb 	.word	0x080094fb
 800948c:	2b40      	cmp	r3, #64	@ 0x40
 800948e:	d037      	beq.n	8009500 <UART_SetConfig+0x6bc>
 8009490:	e03a      	b.n	8009508 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009492:	f7fd fc5f 	bl	8006d54 <HAL_RCCEx_GetD3PCLK1Freq>
 8009496:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009498:	e03c      	b.n	8009514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fd fc6e 	bl	8006d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a8:	e034      	b.n	8009514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fd fdba 	bl	8007028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b8:	e02c      	b.n	8009514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ba:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <UART_SetConfig+0x69c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d016      	beq.n	80094f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094c6:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <UART_SetConfig+0x69c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	08db      	lsrs	r3, r3, #3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	4a07      	ldr	r2, [pc, #28]	@ (80094f0 <UART_SetConfig+0x6ac>)
 80094d2:	fa22 f303 	lsr.w	r3, r2, r3
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094d8:	e01c      	b.n	8009514 <UART_SetConfig+0x6d0>
 80094da:	bf00      	nop
 80094dc:	40011400 	.word	0x40011400
 80094e0:	58024400 	.word	0x58024400
 80094e4:	40007800 	.word	0x40007800
 80094e8:	40007c00 	.word	0x40007c00
 80094ec:	58000c00 	.word	0x58000c00
 80094f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80094f4:	4b9d      	ldr	r3, [pc, #628]	@ (800976c <UART_SetConfig+0x928>)
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f8:	e00c      	b.n	8009514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094fa:	4b9d      	ldr	r3, [pc, #628]	@ (8009770 <UART_SetConfig+0x92c>)
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094fe:	e009      	b.n	8009514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009506:	e005      	b.n	8009514 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009512:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 81de 	beq.w	80098d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009520:	4a94      	ldr	r2, [pc, #592]	@ (8009774 <UART_SetConfig+0x930>)
 8009522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009526:	461a      	mov	r2, r3
 8009528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800952a:	fbb3 f3f2 	udiv	r3, r3, r2
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800953c:	429a      	cmp	r2, r3
 800953e:	d305      	bcc.n	800954c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009552:	e1c1      	b.n	80098d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009556:	2200      	movs	r2, #0
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	60fa      	str	r2, [r7, #12]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009560:	4a84      	ldr	r2, [pc, #528]	@ (8009774 <UART_SetConfig+0x930>)
 8009562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009566:	b29b      	uxth	r3, r3
 8009568:	2200      	movs	r2, #0
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009576:	f7f6 ff0b 	bl	8000390 <__aeabi_uldivmod>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4610      	mov	r0, r2
 8009580:	4619      	mov	r1, r3
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	020b      	lsls	r3, r1, #8
 800958c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009590:	0202      	lsls	r2, r0, #8
 8009592:	6979      	ldr	r1, [r7, #20]
 8009594:	6849      	ldr	r1, [r1, #4]
 8009596:	0849      	lsrs	r1, r1, #1
 8009598:	2000      	movs	r0, #0
 800959a:	460c      	mov	r4, r1
 800959c:	4605      	mov	r5, r0
 800959e:	eb12 0804 	adds.w	r8, r2, r4
 80095a2:	eb43 0905 	adc.w	r9, r3, r5
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	469a      	mov	sl, r3
 80095ae:	4693      	mov	fp, r2
 80095b0:	4652      	mov	r2, sl
 80095b2:	465b      	mov	r3, fp
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f6 feea 	bl	8000390 <__aeabi_uldivmod>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4613      	mov	r3, r2
 80095c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095ca:	d308      	bcc.n	80095de <UART_SetConfig+0x79a>
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095d2:	d204      	bcs.n	80095de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095da:	60da      	str	r2, [r3, #12]
 80095dc:	e17c      	b.n	80098d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095e4:	e178      	b.n	80098d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ee:	f040 80c5 	bne.w	800977c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80095f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	dc48      	bgt.n	800968c <UART_SetConfig+0x848>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	db7b      	blt.n	80096f6 <UART_SetConfig+0x8b2>
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d879      	bhi.n	80096f6 <UART_SetConfig+0x8b2>
 8009602:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <UART_SetConfig+0x7c4>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009693 	.word	0x08009693
 800960c:	0800969b 	.word	0x0800969b
 8009610:	080096f7 	.word	0x080096f7
 8009614:	080096f7 	.word	0x080096f7
 8009618:	080096a3 	.word	0x080096a3
 800961c:	080096f7 	.word	0x080096f7
 8009620:	080096f7 	.word	0x080096f7
 8009624:	080096f7 	.word	0x080096f7
 8009628:	080096b3 	.word	0x080096b3
 800962c:	080096f7 	.word	0x080096f7
 8009630:	080096f7 	.word	0x080096f7
 8009634:	080096f7 	.word	0x080096f7
 8009638:	080096f7 	.word	0x080096f7
 800963c:	080096f7 	.word	0x080096f7
 8009640:	080096f7 	.word	0x080096f7
 8009644:	080096f7 	.word	0x080096f7
 8009648:	080096c3 	.word	0x080096c3
 800964c:	080096f7 	.word	0x080096f7
 8009650:	080096f7 	.word	0x080096f7
 8009654:	080096f7 	.word	0x080096f7
 8009658:	080096f7 	.word	0x080096f7
 800965c:	080096f7 	.word	0x080096f7
 8009660:	080096f7 	.word	0x080096f7
 8009664:	080096f7 	.word	0x080096f7
 8009668:	080096f7 	.word	0x080096f7
 800966c:	080096f7 	.word	0x080096f7
 8009670:	080096f7 	.word	0x080096f7
 8009674:	080096f7 	.word	0x080096f7
 8009678:	080096f7 	.word	0x080096f7
 800967c:	080096f7 	.word	0x080096f7
 8009680:	080096f7 	.word	0x080096f7
 8009684:	080096f7 	.word	0x080096f7
 8009688:	080096e9 	.word	0x080096e9
 800968c:	2b40      	cmp	r3, #64	@ 0x40
 800968e:	d02e      	beq.n	80096ee <UART_SetConfig+0x8aa>
 8009690:	e031      	b.n	80096f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009692:	f7fc f929 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8009696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009698:	e033      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800969a:	f7fc f93b 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 800969e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096a0:	e02f      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd fb6a 	bl	8006d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b0:	e027      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd fcb6 	bl	8007028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c0:	e01f      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009778 <UART_SetConfig+0x934>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009778 <UART_SetConfig+0x934>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	08db      	lsrs	r3, r3, #3
 80096d4:	f003 0303 	and.w	r3, r3, #3
 80096d8:	4a24      	ldr	r2, [pc, #144]	@ (800976c <UART_SetConfig+0x928>)
 80096da:	fa22 f303 	lsr.w	r3, r2, r3
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096e0:	e00f      	b.n	8009702 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80096e2:	4b22      	ldr	r3, [pc, #136]	@ (800976c <UART_SetConfig+0x928>)
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e00c      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096e8:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <UART_SetConfig+0x92c>)
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ec:	e009      	b.n	8009702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f4:	e005      	b.n	8009702 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80e7 	beq.w	80098d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970e:	4a19      	ldr	r2, [pc, #100]	@ (8009774 <UART_SetConfig+0x930>)
 8009710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009714:	461a      	mov	r2, r3
 8009716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009718:	fbb3 f3f2 	udiv	r3, r3, r2
 800971c:	005a      	lsls	r2, r3, #1
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	085b      	lsrs	r3, r3, #1
 8009724:	441a      	add	r2, r3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	fbb2 f3f3 	udiv	r3, r2, r3
 800972e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	2b0f      	cmp	r3, #15
 8009734:	d916      	bls.n	8009764 <UART_SetConfig+0x920>
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800973c:	d212      	bcs.n	8009764 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	b29b      	uxth	r3, r3
 8009742:	f023 030f 	bic.w	r3, r3, #15
 8009746:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	b29b      	uxth	r3, r3
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	b29a      	uxth	r2, r3
 8009754:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009756:	4313      	orrs	r3, r2
 8009758:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	e0b9      	b.n	80098d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800976a:	e0b5      	b.n	80098d8 <UART_SetConfig+0xa94>
 800976c:	03d09000 	.word	0x03d09000
 8009770:	003d0900 	.word	0x003d0900
 8009774:	0800b734 	.word	0x0800b734
 8009778:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800977c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009780:	2b20      	cmp	r3, #32
 8009782:	dc49      	bgt.n	8009818 <UART_SetConfig+0x9d4>
 8009784:	2b00      	cmp	r3, #0
 8009786:	db7c      	blt.n	8009882 <UART_SetConfig+0xa3e>
 8009788:	2b20      	cmp	r3, #32
 800978a:	d87a      	bhi.n	8009882 <UART_SetConfig+0xa3e>
 800978c:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <UART_SetConfig+0x950>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	0800981f 	.word	0x0800981f
 8009798:	08009827 	.word	0x08009827
 800979c:	08009883 	.word	0x08009883
 80097a0:	08009883 	.word	0x08009883
 80097a4:	0800982f 	.word	0x0800982f
 80097a8:	08009883 	.word	0x08009883
 80097ac:	08009883 	.word	0x08009883
 80097b0:	08009883 	.word	0x08009883
 80097b4:	0800983f 	.word	0x0800983f
 80097b8:	08009883 	.word	0x08009883
 80097bc:	08009883 	.word	0x08009883
 80097c0:	08009883 	.word	0x08009883
 80097c4:	08009883 	.word	0x08009883
 80097c8:	08009883 	.word	0x08009883
 80097cc:	08009883 	.word	0x08009883
 80097d0:	08009883 	.word	0x08009883
 80097d4:	0800984f 	.word	0x0800984f
 80097d8:	08009883 	.word	0x08009883
 80097dc:	08009883 	.word	0x08009883
 80097e0:	08009883 	.word	0x08009883
 80097e4:	08009883 	.word	0x08009883
 80097e8:	08009883 	.word	0x08009883
 80097ec:	08009883 	.word	0x08009883
 80097f0:	08009883 	.word	0x08009883
 80097f4:	08009883 	.word	0x08009883
 80097f8:	08009883 	.word	0x08009883
 80097fc:	08009883 	.word	0x08009883
 8009800:	08009883 	.word	0x08009883
 8009804:	08009883 	.word	0x08009883
 8009808:	08009883 	.word	0x08009883
 800980c:	08009883 	.word	0x08009883
 8009810:	08009883 	.word	0x08009883
 8009814:	08009875 	.word	0x08009875
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d02e      	beq.n	800987a <UART_SetConfig+0xa36>
 800981c:	e031      	b.n	8009882 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800981e:	f7fc f863 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8009822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009824:	e033      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009826:	f7fc f875 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 800982a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800982c:	e02f      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd faa4 	bl	8006d80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983c:	e027      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800983e:	f107 0318 	add.w	r3, r7, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f7fd fbf0 	bl	8007028 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800984c:	e01f      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800984e:	4b2d      	ldr	r3, [pc, #180]	@ (8009904 <UART_SetConfig+0xac0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800985a:	4b2a      	ldr	r3, [pc, #168]	@ (8009904 <UART_SetConfig+0xac0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	08db      	lsrs	r3, r3, #3
 8009860:	f003 0303 	and.w	r3, r3, #3
 8009864:	4a28      	ldr	r2, [pc, #160]	@ (8009908 <UART_SetConfig+0xac4>)
 8009866:	fa22 f303 	lsr.w	r3, r2, r3
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800986c:	e00f      	b.n	800988e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800986e:	4b26      	ldr	r3, [pc, #152]	@ (8009908 <UART_SetConfig+0xac4>)
 8009870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009872:	e00c      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009874:	4b25      	ldr	r3, [pc, #148]	@ (800990c <UART_SetConfig+0xac8>)
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009878:	e009      	b.n	800988e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800987a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009880:	e005      	b.n	800988e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800988c:	bf00      	nop
    }

    if (pclk != 0U)
 800988e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d021      	beq.n	80098d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009898:	4a1d      	ldr	r2, [pc, #116]	@ (8009910 <UART_SetConfig+0xacc>)
 800989a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800989e:	461a      	mov	r2, r3
 80098a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	441a      	add	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d909      	bls.n	80098d2 <UART_SetConfig+0xa8e>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c4:	d205      	bcs.n	80098d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60da      	str	r2, [r3, #12]
 80098d0:	e002      	b.n	80098d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2200      	movs	r2, #0
 80098ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2200      	movs	r2, #0
 80098f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3748      	adds	r7, #72	@ 0x48
 80098fc:	46bd      	mov	sp, r7
 80098fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009902:	bf00      	nop
 8009904:	58024400 	.word	0x58024400
 8009908:	03d09000 	.word	0x03d09000
 800990c:	003d0900 	.word	0x003d0900
 8009910:	0800b734 	.word	0x0800b734

08009914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00a      	beq.n	800993e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00a      	beq.n	8009982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	f003 0310 	and.w	r3, r3, #16
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00a      	beq.n	80099c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00a      	beq.n	80099e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01a      	beq.n	8009a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a12:	d10a      	bne.n	8009a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00a      	beq.n	8009a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	605a      	str	r2, [r3, #4]
  }
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b098      	sub	sp, #96	@ 0x60
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a68:	f7f8 fdfc 	bl	8002664 <HAL_GetTick>
 8009a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0308 	and.w	r3, r3, #8
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d12f      	bne.n	8009adc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a84:	2200      	movs	r2, #0
 8009a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f88e 	bl	8009bac <UART_WaitOnFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d022      	beq.n	8009adc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e063      	b.n	8009ba4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d149      	bne.n	8009b7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af2:	2200      	movs	r2, #0
 8009af4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f857 	bl	8009bac <UART_WaitOnFlagUntilTimeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d03c      	beq.n	8009b7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	623b      	str	r3, [r7, #32]
   return(result);
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e6      	bne.n	8009b04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f023 0301 	bic.w	r3, r3, #1
 8009b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3308      	adds	r3, #8
 8009b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b56:	61fa      	str	r2, [r7, #28]
 8009b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	69b9      	ldr	r1, [r7, #24]
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	617b      	str	r3, [r7, #20]
   return(result);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e5      	bne.n	8009b36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e012      	b.n	8009ba4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3758      	adds	r7, #88	@ 0x58
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bbc:	e04f      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d04b      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc6:	f7f8 fd4d 	bl	8002664 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d302      	bcc.n	8009bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e04e      	b.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d037      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b80      	cmp	r3, #128	@ 0x80
 8009bf2:	d034      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d031      	beq.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d110      	bne.n	8009c2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f95b 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e029      	b.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c38:	d111      	bne.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 f941 	bl	8009ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e00f      	b.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4013      	ands	r3, r2
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	bf0c      	ite	eq
 8009c6e:	2301      	moveq	r3, #1
 8009c70:	2300      	movne	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d0a0      	beq.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b0a3      	sub	sp, #140	@ 0x8c
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	88fa      	ldrh	r2, [r7, #6]
 8009ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cba:	d10e      	bne.n	8009cda <UART_Start_Receive_IT+0x52>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <UART_Start_Receive_IT+0x48>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009cca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cce:	e02d      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	22ff      	movs	r2, #255	@ 0xff
 8009cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cd8:	e028      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10d      	bne.n	8009cfe <UART_Start_Receive_IT+0x76>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d104      	bne.n	8009cf4 <UART_Start_Receive_IT+0x6c>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	22ff      	movs	r2, #255	@ 0xff
 8009cee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cf2:	e01b      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	227f      	movs	r2, #127	@ 0x7f
 8009cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cfc:	e016      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d06:	d10d      	bne.n	8009d24 <UART_Start_Receive_IT+0x9c>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <UART_Start_Receive_IT+0x92>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	227f      	movs	r2, #127	@ 0x7f
 8009d14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009d18:	e008      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	223f      	movs	r2, #63	@ 0x3f
 8009d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009d22:	e003      	b.n	8009d2c <UART_Start_Receive_IT+0xa4>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2222      	movs	r2, #34	@ 0x22
 8009d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009d60:	673a      	str	r2, [r7, #112]	@ 0x70
 8009d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009d66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d68:	e841 2300 	strex	r3, r2, [r1]
 8009d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e3      	bne.n	8009d3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d7c:	d14f      	bne.n	8009e1e <UART_Start_Receive_IT+0x196>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d84:	88fa      	ldrh	r2, [r7, #6]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d349      	bcc.n	8009e1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d92:	d107      	bne.n	8009da4 <UART_Start_Receive_IT+0x11c>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4a47      	ldr	r2, [pc, #284]	@ (8009ebc <UART_Start_Receive_IT+0x234>)
 8009da0:	675a      	str	r2, [r3, #116]	@ 0x74
 8009da2:	e002      	b.n	8009daa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a46      	ldr	r2, [pc, #280]	@ (8009ec0 <UART_Start_Receive_IT+0x238>)
 8009da8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01a      	beq.n	8009de8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dd6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009dda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3308      	adds	r3, #8
 8009e06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009e08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009e0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e5      	bne.n	8009de8 <UART_Start_Receive_IT+0x160>
 8009e1c:	e046      	b.n	8009eac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e26:	d107      	bne.n	8009e38 <UART_Start_Receive_IT+0x1b0>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4a24      	ldr	r2, [pc, #144]	@ (8009ec4 <UART_Start_Receive_IT+0x23c>)
 8009e34:	675a      	str	r2, [r3, #116]	@ 0x74
 8009e36:	e002      	b.n	8009e3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4a23      	ldr	r2, [pc, #140]	@ (8009ec8 <UART_Start_Receive_IT+0x240>)
 8009e3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d019      	beq.n	8009e7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e56:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009e5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e66:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <UART_Start_Receive_IT+0x1be>
 8009e78:	e018      	b.n	8009eac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	613b      	str	r3, [r7, #16]
   return(result);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f043 0320 	orr.w	r3, r3, #32
 8009e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e98:	623b      	str	r3, [r7, #32]
 8009e9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	69f9      	ldr	r1, [r7, #28]
 8009e9e:	6a3a      	ldr	r2, [r7, #32]
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e6      	bne.n	8009e7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	378c      	adds	r7, #140	@ 0x8c
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	0800a6e9 	.word	0x0800a6e9
 8009ec0:	0800a385 	.word	0x0800a385
 8009ec4:	0800a1cd 	.word	0x0800a1cd
 8009ec8:	0800a015 	.word	0x0800a015

08009ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b095      	sub	sp, #84	@ 0x54
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e6      	bne.n	8009ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <UART_EndRxTransfer+0xc8>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e5      	bne.n	8009f06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d118      	bne.n	8009f74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f023 0310 	bic.w	r3, r3, #16
 8009f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6979      	ldr	r1, [r7, #20]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f88:	bf00      	nop
 8009f8a:	3754      	adds	r7, #84	@ 0x54
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	effffffe 	.word	0xeffffffe

08009f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7fe ff32 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb4:	bf00      	nop
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	61bb      	str	r3, [r7, #24]
 8009fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6979      	ldr	r1, [r7, #20]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e6      	bne.n	8009fc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7fe fefd 	bl	8008e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a00a:	bf00      	nop
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b09c      	sub	sp, #112	@ 0x70
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a022:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a02c:	2b22      	cmp	r3, #34	@ 0x22
 800a02e:	f040 80be 	bne.w	800a1ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a038:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a03c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a040:	b2d9      	uxtb	r1, r3
 800a042:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04c:	400a      	ands	r2, r1
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f040 80a1 	bne.w	800a1be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a08a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a08c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a090:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a09a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a09c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e6      	bne.n	800a07c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a0ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e5      	bne.n	800a0ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a33      	ldr	r2, [pc, #204]	@ (800a1c8 <UART_RxISR_8BIT+0x1b4>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d01f      	beq.n	800a140 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d018      	beq.n	800a140 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	623b      	str	r3, [r7, #32]
   return(result);
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a122:	663b      	str	r3, [r7, #96]	@ 0x60
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a12e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e6      	bne.n	800a10e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a144:	2b01      	cmp	r3, #1
 800a146:	d12e      	bne.n	800a1a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0310 	bic.w	r3, r3, #16
 800a162:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	69b9      	ldr	r1, [r7, #24]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	617b      	str	r3, [r7, #20]
   return(result);
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e6      	bne.n	800a14e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f003 0310 	and.w	r3, r3, #16
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d103      	bne.n	800a196 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2210      	movs	r2, #16
 800a194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fe fe44 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1a4:	e00b      	b.n	800a1be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7f8 f884 	bl	80022b4 <HAL_UART_RxCpltCallback>
}
 800a1ac:	e007      	b.n	800a1be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699a      	ldr	r2, [r3, #24]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0208 	orr.w	r2, r2, #8
 800a1bc:	619a      	str	r2, [r3, #24]
}
 800a1be:	bf00      	nop
 800a1c0:	3770      	adds	r7, #112	@ 0x70
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	58000c00 	.word	0x58000c00

0800a1cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b09c      	sub	sp, #112	@ 0x70
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1e4:	2b22      	cmp	r3, #34	@ 0x22
 800a1e6:	f040 80be 	bne.w	800a366 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a1fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a1fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a202:	4013      	ands	r3, r2
 800a204:	b29a      	uxth	r2, r3
 800a206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a208:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20e:	1c9a      	adds	r2, r3, #2
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f040 80a1 	bne.w	800a376 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a248:	667b      	str	r3, [r7, #100]	@ 0x64
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a252:	657b      	str	r3, [r7, #84]	@ 0x54
 800a254:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a258:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e6      	bne.n	800a234 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f023 0301 	bic.w	r3, r3, #1
 800a27c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a286:	643a      	str	r2, [r7, #64]	@ 0x40
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a28c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a33      	ldr	r2, [pc, #204]	@ (800a380 <UART_RxISR_16BIT+0x1b4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d01f      	beq.n	800a2f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e6      	bne.n	800a2c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d12e      	bne.n	800a35e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	60bb      	str	r3, [r7, #8]
   return(result);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f023 0310 	bic.w	r3, r3, #16
 800a31a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6979      	ldr	r1, [r7, #20]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	613b      	str	r3, [r7, #16]
   return(result);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e6      	bne.n	800a306 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b10      	cmp	r3, #16
 800a344:	d103      	bne.n	800a34e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2210      	movs	r2, #16
 800a34c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7fe fd68 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a35c:	e00b      	b.n	800a376 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7f7 ffa8 	bl	80022b4 <HAL_UART_RxCpltCallback>
}
 800a364:	e007      	b.n	800a376 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f042 0208 	orr.w	r2, r2, #8
 800a374:	619a      	str	r2, [r3, #24]
}
 800a376:	bf00      	nop
 800a378:	3770      	adds	r7, #112	@ 0x70
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	58000c00 	.word	0x58000c00

0800a384 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b0ac      	sub	sp, #176	@ 0xb0
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a392:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3ba:	2b22      	cmp	r3, #34	@ 0x22
 800a3bc:	f040 8181 	bne.w	800a6c2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3ca:	e124      	b.n	800a616 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a3da:	b2d9      	uxtb	r1, r3
 800a3dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e6:	400a      	ands	r2, r1
 800a3e8:	b2d2      	uxtb	r2, r2
 800a3ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	b29a      	uxth	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d053      	beq.n	800a4c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a41e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d011      	beq.n	800a44e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a42a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2201      	movs	r2, #1
 800a43c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a444:	f043 0201 	orr.w	r2, r3, #1
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d011      	beq.n	800a47e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2202      	movs	r2, #2
 800a46c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a474:	f043 0204 	orr.w	r2, r3, #4
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d011      	beq.n	800a4ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a48a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00b      	beq.n	800a4ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2204      	movs	r2, #4
 800a49c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a4:	f043 0202 	orr.w	r2, r3, #2
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d006      	beq.n	800a4c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7fe fcad 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f040 80a1 	bne.w	800a616 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a4e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a4f8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a4fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e4      	bne.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a51c:	4b6f      	ldr	r3, [pc, #444]	@ (800a6dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a51e:	4013      	ands	r3, r2
 800a520:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3308      	adds	r3, #8
 800a52a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a52e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a530:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a534:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a53c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e3      	bne.n	800a50a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a61      	ldr	r2, [pc, #388]	@ (800a6e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d021      	beq.n	800a5a4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01a      	beq.n	800a5a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a57c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a57e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a590:	657b      	str	r3, [r7, #84]	@ 0x54
 800a592:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a596:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a598:	e841 2300 	strex	r3, r2, [r1]
 800a59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e4      	bne.n	800a56e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d130      	bne.n	800a60e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	f023 0310 	bic.w	r3, r3, #16
 800a5c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e4      	bne.n	800a5b2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f003 0310 	and.w	r3, r3, #16
 800a5f2:	2b10      	cmp	r3, #16
 800a5f4:	d103      	bne.n	800a5fe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2210      	movs	r2, #16
 800a5fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fe fc10 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a60c:	e00e      	b.n	800a62c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7f7 fe50 	bl	80022b4 <HAL_UART_RxCpltCallback>
        break;
 800a614:	e00a      	b.n	800a62c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a616:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d006      	beq.n	800a62c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a61e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b00      	cmp	r3, #0
 800a628:	f47f aed0 	bne.w	800a3cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a632:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a636:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d049      	beq.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a644:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a648:	429a      	cmp	r2, r3
 800a64a:	d242      	bcs.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3308      	adds	r3, #8
 800a652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3308      	adds	r3, #8
 800a66c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e3      	bne.n	800a64c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a17      	ldr	r2, [pc, #92]	@ (800a6e4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a688:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	60bb      	str	r3, [r7, #8]
   return(result);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f043 0320 	orr.w	r3, r3, #32
 800a69e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e4      	bne.n	800a68a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6c0:	e007      	b.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	699a      	ldr	r2, [r3, #24]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 0208 	orr.w	r2, r2, #8
 800a6d0:	619a      	str	r2, [r3, #24]
}
 800a6d2:	bf00      	nop
 800a6d4:	37b0      	adds	r7, #176	@ 0xb0
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	effffffe 	.word	0xeffffffe
 800a6e0:	58000c00 	.word	0x58000c00
 800a6e4:	0800a015 	.word	0x0800a015

0800a6e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b0ae      	sub	sp, #184	@ 0xb8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a71e:	2b22      	cmp	r3, #34	@ 0x22
 800a720:	f040 8185 	bne.w	800aa2e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a72a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a72e:	e128      	b.n	800a982 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a742:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a746:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a74a:	4013      	ands	r3, r2
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a752:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a758:	1c9a      	adds	r2, r3, #2
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a764:	b29b      	uxth	r3, r3
 800a766:	3b01      	subs	r3, #1
 800a768:	b29a      	uxth	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a77a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	2b00      	cmp	r3, #0
 800a784:	d053      	beq.n	800a82e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d011      	beq.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ac:	f043 0201 	orr.w	r2, r3, #1
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d011      	beq.n	800a7e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a7c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7dc:	f043 0204 	orr.w	r2, r3, #4
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d011      	beq.n	800a816 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a7f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2204      	movs	r2, #4
 800a804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a80c:	f043 0202 	orr.w	r2, r3, #2
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7fe faf9 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a834:	b29b      	uxth	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	f040 80a3 	bne.w	800a982 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a84a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a84c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a850:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a85e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a862:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a866:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e2      	bne.n	800a83c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a886:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a888:	4b6f      	ldr	r3, [pc, #444]	@ (800aa48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3308      	adds	r3, #8
 800a896:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a89a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a89c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1e3      	bne.n	800a876 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a61      	ldr	r2, [pc, #388]	@ (800aa4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d021      	beq.n	800a910 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01a      	beq.n	800a910 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a902:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e4      	bne.n	800a8da <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a914:	2b01      	cmp	r3, #1
 800a916:	d130      	bne.n	800a97a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92e:	f023 0310 	bic.w	r3, r3, #16
 800a932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a940:	647b      	str	r3, [r7, #68]	@ 0x44
 800a942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e4      	bne.n	800a91e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d103      	bne.n	800a96a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2210      	movs	r2, #16
 800a968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fe fa5a 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a978:	e00e      	b.n	800a998 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7f7 fc9a 	bl	80022b4 <HAL_UART_RxCpltCallback>
        break;
 800a980:	e00a      	b.n	800a998 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a982:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a98a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a98e:	f003 0320 	and.w	r3, r3, #32
 800a992:	2b00      	cmp	r3, #0
 800a994:	f47f aecc 	bne.w	800a730 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a99e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d049      	beq.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0x356>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9b0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d242      	bcs.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3308      	adds	r3, #8
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a9dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e3      	bne.n	800a9b8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a9f4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f043 0320 	orr.w	r3, r3, #32
 800aa0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa18:	61fb      	str	r3, [r7, #28]
 800aa1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	69b9      	ldr	r1, [r7, #24]
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	617b      	str	r3, [r7, #20]
   return(result);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e4      	bne.n	800a9f6 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa2c:	e007      	b.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	699a      	ldr	r2, [r3, #24]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f042 0208 	orr.w	r2, r2, #8
 800aa3c:	619a      	str	r2, [r3, #24]
}
 800aa3e:	bf00      	nop
 800aa40:	37b8      	adds	r7, #184	@ 0xb8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	effffffe 	.word	0xeffffffe
 800aa4c:	58000c00 	.word	0x58000c00
 800aa50:	0800a1cd 	.word	0x0800a1cd

0800aa54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e027      	b.n	800aaf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2224      	movs	r2, #36	@ 0x24
 800aab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0201 	bic.w	r2, r2, #1
 800aacc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aad4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e02d      	b.n	800ab76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2224      	movs	r2, #36	@ 0x24
 800ab26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f850 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2220      	movs	r2, #32
 800ab68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab92:	2302      	movs	r3, #2
 800ab94:	e02d      	b.n	800abf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2224      	movs	r2, #36	@ 0x24
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f812 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2220      	movs	r2, #32
 800abe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d108      	bne.n	800ac1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac1c:	e031      	b.n	800ac82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac1e:	2310      	movs	r3, #16
 800ac20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac22:	2310      	movs	r3, #16
 800ac24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	0e5b      	lsrs	r3, r3, #25
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0307 	and.w	r3, r3, #7
 800ac34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	0f5b      	lsrs	r3, r3, #29
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	7b3a      	ldrb	r2, [r7, #12]
 800ac4a:	4911      	ldr	r1, [pc, #68]	@ (800ac90 <UARTEx_SetNbDataToProcess+0x94>)
 800ac4c:	5c8a      	ldrb	r2, [r1, r2]
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac52:	7b3a      	ldrb	r2, [r7, #12]
 800ac54:	490f      	ldr	r1, [pc, #60]	@ (800ac94 <UARTEx_SetNbDataToProcess+0x98>)
 800ac56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	7b7a      	ldrb	r2, [r7, #13]
 800ac68:	4909      	ldr	r1, [pc, #36]	@ (800ac90 <UARTEx_SetNbDataToProcess+0x94>)
 800ac6a:	5c8a      	ldrb	r2, [r1, r2]
 800ac6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac70:	7b7a      	ldrb	r2, [r7, #13]
 800ac72:	4908      	ldr	r1, [pc, #32]	@ (800ac94 <UARTEx_SetNbDataToProcess+0x98>)
 800ac74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac82:	bf00      	nop
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	0800b74c 	.word	0x0800b74c
 800ac94:	0800b754 	.word	0x0800b754

0800ac98 <_vsniprintf_r>:
 800ac98:	b530      	push	{r4, r5, lr}
 800ac9a:	4614      	mov	r4, r2
 800ac9c:	2c00      	cmp	r4, #0
 800ac9e:	b09b      	sub	sp, #108	@ 0x6c
 800aca0:	4605      	mov	r5, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	da05      	bge.n	800acb2 <_vsniprintf_r+0x1a>
 800aca6:	238b      	movs	r3, #139	@ 0x8b
 800aca8:	6003      	str	r3, [r0, #0]
 800acaa:	f04f 30ff 	mov.w	r0, #4294967295
 800acae:	b01b      	add	sp, #108	@ 0x6c
 800acb0:	bd30      	pop	{r4, r5, pc}
 800acb2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	9319      	str	r3, [sp, #100]	@ 0x64
 800acc0:	bf14      	ite	ne
 800acc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acc6:	4623      	moveq	r3, r4
 800acc8:	9302      	str	r3, [sp, #8]
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acd0:	9100      	str	r1, [sp, #0]
 800acd2:	9104      	str	r1, [sp, #16]
 800acd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800acd8:	4669      	mov	r1, sp
 800acda:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800acdc:	f000 f9ae 	bl	800b03c <_svfiprintf_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	bfbc      	itt	lt
 800ace4:	238b      	movlt	r3, #139	@ 0x8b
 800ace6:	602b      	strlt	r3, [r5, #0]
 800ace8:	2c00      	cmp	r4, #0
 800acea:	d0e0      	beq.n	800acae <_vsniprintf_r+0x16>
 800acec:	9b00      	ldr	r3, [sp, #0]
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	e7dc      	b.n	800acae <_vsniprintf_r+0x16>

0800acf4 <vsniprintf>:
 800acf4:	b507      	push	{r0, r1, r2, lr}
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	4613      	mov	r3, r2
 800acfa:	460a      	mov	r2, r1
 800acfc:	4601      	mov	r1, r0
 800acfe:	4803      	ldr	r0, [pc, #12]	@ (800ad0c <vsniprintf+0x18>)
 800ad00:	6800      	ldr	r0, [r0, #0]
 800ad02:	f7ff ffc9 	bl	800ac98 <_vsniprintf_r>
 800ad06:	b003      	add	sp, #12
 800ad08:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad0c:	24000010 	.word	0x24000010

0800ad10 <memset>:
 800ad10:	4402      	add	r2, r0
 800ad12:	4603      	mov	r3, r0
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d100      	bne.n	800ad1a <memset+0xa>
 800ad18:	4770      	bx	lr
 800ad1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1e:	e7f9      	b.n	800ad14 <memset+0x4>

0800ad20 <__errno>:
 800ad20:	4b01      	ldr	r3, [pc, #4]	@ (800ad28 <__errno+0x8>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	24000010 	.word	0x24000010

0800ad2c <__libc_init_array>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad64 <__libc_init_array+0x38>)
 800ad30:	4c0d      	ldr	r4, [pc, #52]	@ (800ad68 <__libc_init_array+0x3c>)
 800ad32:	1b64      	subs	r4, r4, r5
 800ad34:	10a4      	asrs	r4, r4, #2
 800ad36:	2600      	movs	r6, #0
 800ad38:	42a6      	cmp	r6, r4
 800ad3a:	d109      	bne.n	800ad50 <__libc_init_array+0x24>
 800ad3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad6c <__libc_init_array+0x40>)
 800ad3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ad70 <__libc_init_array+0x44>)
 800ad40:	f000 fc64 	bl	800b60c <_init>
 800ad44:	1b64      	subs	r4, r4, r5
 800ad46:	10a4      	asrs	r4, r4, #2
 800ad48:	2600      	movs	r6, #0
 800ad4a:	42a6      	cmp	r6, r4
 800ad4c:	d105      	bne.n	800ad5a <__libc_init_array+0x2e>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad54:	4798      	blx	r3
 800ad56:	3601      	adds	r6, #1
 800ad58:	e7ee      	b.n	800ad38 <__libc_init_array+0xc>
 800ad5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5e:	4798      	blx	r3
 800ad60:	3601      	adds	r6, #1
 800ad62:	e7f2      	b.n	800ad4a <__libc_init_array+0x1e>
 800ad64:	0800b798 	.word	0x0800b798
 800ad68:	0800b798 	.word	0x0800b798
 800ad6c:	0800b798 	.word	0x0800b798
 800ad70:	0800b79c 	.word	0x0800b79c

0800ad74 <__retarget_lock_acquire_recursive>:
 800ad74:	4770      	bx	lr

0800ad76 <__retarget_lock_release_recursive>:
 800ad76:	4770      	bx	lr

0800ad78 <memcpy>:
 800ad78:	440a      	add	r2, r1
 800ad7a:	4291      	cmp	r1, r2
 800ad7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad80:	d100      	bne.n	800ad84 <memcpy+0xc>
 800ad82:	4770      	bx	lr
 800ad84:	b510      	push	{r4, lr}
 800ad86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad8e:	4291      	cmp	r1, r2
 800ad90:	d1f9      	bne.n	800ad86 <memcpy+0xe>
 800ad92:	bd10      	pop	{r4, pc}

0800ad94 <_free_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4605      	mov	r5, r0
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	d041      	beq.n	800ae20 <_free_r+0x8c>
 800ad9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada0:	1f0c      	subs	r4, r1, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bfb8      	it	lt
 800ada6:	18e4      	addlt	r4, r4, r3
 800ada8:	f000 f8e0 	bl	800af6c <__malloc_lock>
 800adac:	4a1d      	ldr	r2, [pc, #116]	@ (800ae24 <_free_r+0x90>)
 800adae:	6813      	ldr	r3, [r2, #0]
 800adb0:	b933      	cbnz	r3, 800adc0 <_free_r+0x2c>
 800adb2:	6063      	str	r3, [r4, #4]
 800adb4:	6014      	str	r4, [r2, #0]
 800adb6:	4628      	mov	r0, r5
 800adb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adbc:	f000 b8dc 	b.w	800af78 <__malloc_unlock>
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	d908      	bls.n	800add6 <_free_r+0x42>
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	1821      	adds	r1, r4, r0
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf01      	itttt	eq
 800adcc:	6819      	ldreq	r1, [r3, #0]
 800adce:	685b      	ldreq	r3, [r3, #4]
 800add0:	1809      	addeq	r1, r1, r0
 800add2:	6021      	streq	r1, [r4, #0]
 800add4:	e7ed      	b.n	800adb2 <_free_r+0x1e>
 800add6:	461a      	mov	r2, r3
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	b10b      	cbz	r3, 800ade0 <_free_r+0x4c>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d9fa      	bls.n	800add6 <_free_r+0x42>
 800ade0:	6811      	ldr	r1, [r2, #0]
 800ade2:	1850      	adds	r0, r2, r1
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	d10b      	bne.n	800ae00 <_free_r+0x6c>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	4401      	add	r1, r0
 800adec:	1850      	adds	r0, r2, r1
 800adee:	4283      	cmp	r3, r0
 800adf0:	6011      	str	r1, [r2, #0]
 800adf2:	d1e0      	bne.n	800adb6 <_free_r+0x22>
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	6053      	str	r3, [r2, #4]
 800adfa:	4408      	add	r0, r1
 800adfc:	6010      	str	r0, [r2, #0]
 800adfe:	e7da      	b.n	800adb6 <_free_r+0x22>
 800ae00:	d902      	bls.n	800ae08 <_free_r+0x74>
 800ae02:	230c      	movs	r3, #12
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	e7d6      	b.n	800adb6 <_free_r+0x22>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	1821      	adds	r1, r4, r0
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	bf04      	itt	eq
 800ae10:	6819      	ldreq	r1, [r3, #0]
 800ae12:	685b      	ldreq	r3, [r3, #4]
 800ae14:	6063      	str	r3, [r4, #4]
 800ae16:	bf04      	itt	eq
 800ae18:	1809      	addeq	r1, r1, r0
 800ae1a:	6021      	streq	r1, [r4, #0]
 800ae1c:	6054      	str	r4, [r2, #4]
 800ae1e:	e7ca      	b.n	800adb6 <_free_r+0x22>
 800ae20:	bd38      	pop	{r3, r4, r5, pc}
 800ae22:	bf00      	nop
 800ae24:	240015cc 	.word	0x240015cc

0800ae28 <sbrk_aligned>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4e0f      	ldr	r6, [pc, #60]	@ (800ae68 <sbrk_aligned+0x40>)
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	6831      	ldr	r1, [r6, #0]
 800ae30:	4605      	mov	r5, r0
 800ae32:	b911      	cbnz	r1, 800ae3a <sbrk_aligned+0x12>
 800ae34:	f000 fba4 	bl	800b580 <_sbrk_r>
 800ae38:	6030      	str	r0, [r6, #0]
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f000 fb9f 	bl	800b580 <_sbrk_r>
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	d103      	bne.n	800ae4e <sbrk_aligned+0x26>
 800ae46:	f04f 34ff 	mov.w	r4, #4294967295
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	1cc4      	adds	r4, r0, #3
 800ae50:	f024 0403 	bic.w	r4, r4, #3
 800ae54:	42a0      	cmp	r0, r4
 800ae56:	d0f8      	beq.n	800ae4a <sbrk_aligned+0x22>
 800ae58:	1a21      	subs	r1, r4, r0
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 fb90 	bl	800b580 <_sbrk_r>
 800ae60:	3001      	adds	r0, #1
 800ae62:	d1f2      	bne.n	800ae4a <sbrk_aligned+0x22>
 800ae64:	e7ef      	b.n	800ae46 <sbrk_aligned+0x1e>
 800ae66:	bf00      	nop
 800ae68:	240015c8 	.word	0x240015c8

0800ae6c <_malloc_r>:
 800ae6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	1ccd      	adds	r5, r1, #3
 800ae72:	f025 0503 	bic.w	r5, r5, #3
 800ae76:	3508      	adds	r5, #8
 800ae78:	2d0c      	cmp	r5, #12
 800ae7a:	bf38      	it	cc
 800ae7c:	250c      	movcc	r5, #12
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	4606      	mov	r6, r0
 800ae82:	db01      	blt.n	800ae88 <_malloc_r+0x1c>
 800ae84:	42a9      	cmp	r1, r5
 800ae86:	d904      	bls.n	800ae92 <_malloc_r+0x26>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	6033      	str	r3, [r6, #0]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af68 <_malloc_r+0xfc>
 800ae96:	f000 f869 	bl	800af6c <__malloc_lock>
 800ae9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae9e:	461c      	mov	r4, r3
 800aea0:	bb44      	cbnz	r4, 800aef4 <_malloc_r+0x88>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7ff ffbf 	bl	800ae28 <sbrk_aligned>
 800aeaa:	1c43      	adds	r3, r0, #1
 800aeac:	4604      	mov	r4, r0
 800aeae:	d158      	bne.n	800af62 <_malloc_r+0xf6>
 800aeb0:	f8d8 4000 	ldr.w	r4, [r8]
 800aeb4:	4627      	mov	r7, r4
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d143      	bne.n	800af42 <_malloc_r+0xd6>
 800aeba:	2c00      	cmp	r4, #0
 800aebc:	d04b      	beq.n	800af56 <_malloc_r+0xea>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	4639      	mov	r1, r7
 800aec2:	4630      	mov	r0, r6
 800aec4:	eb04 0903 	add.w	r9, r4, r3
 800aec8:	f000 fb5a 	bl	800b580 <_sbrk_r>
 800aecc:	4581      	cmp	r9, r0
 800aece:	d142      	bne.n	800af56 <_malloc_r+0xea>
 800aed0:	6821      	ldr	r1, [r4, #0]
 800aed2:	1a6d      	subs	r5, r5, r1
 800aed4:	4629      	mov	r1, r5
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7ff ffa6 	bl	800ae28 <sbrk_aligned>
 800aedc:	3001      	adds	r0, #1
 800aede:	d03a      	beq.n	800af56 <_malloc_r+0xea>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	442b      	add	r3, r5
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	bb62      	cbnz	r2, 800af48 <_malloc_r+0xdc>
 800aeee:	f8c8 7000 	str.w	r7, [r8]
 800aef2:	e00f      	b.n	800af14 <_malloc_r+0xa8>
 800aef4:	6822      	ldr	r2, [r4, #0]
 800aef6:	1b52      	subs	r2, r2, r5
 800aef8:	d420      	bmi.n	800af3c <_malloc_r+0xd0>
 800aefa:	2a0b      	cmp	r2, #11
 800aefc:	d917      	bls.n	800af2e <_malloc_r+0xc2>
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	42a3      	cmp	r3, r4
 800af02:	6025      	str	r5, [r4, #0]
 800af04:	bf18      	it	ne
 800af06:	6059      	strne	r1, [r3, #4]
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	bf08      	it	eq
 800af0c:	f8c8 1000 	streq.w	r1, [r8]
 800af10:	5162      	str	r2, [r4, r5]
 800af12:	604b      	str	r3, [r1, #4]
 800af14:	4630      	mov	r0, r6
 800af16:	f000 f82f 	bl	800af78 <__malloc_unlock>
 800af1a:	f104 000b 	add.w	r0, r4, #11
 800af1e:	1d23      	adds	r3, r4, #4
 800af20:	f020 0007 	bic.w	r0, r0, #7
 800af24:	1ac2      	subs	r2, r0, r3
 800af26:	bf1c      	itt	ne
 800af28:	1a1b      	subne	r3, r3, r0
 800af2a:	50a3      	strne	r3, [r4, r2]
 800af2c:	e7af      	b.n	800ae8e <_malloc_r+0x22>
 800af2e:	6862      	ldr	r2, [r4, #4]
 800af30:	42a3      	cmp	r3, r4
 800af32:	bf0c      	ite	eq
 800af34:	f8c8 2000 	streq.w	r2, [r8]
 800af38:	605a      	strne	r2, [r3, #4]
 800af3a:	e7eb      	b.n	800af14 <_malloc_r+0xa8>
 800af3c:	4623      	mov	r3, r4
 800af3e:	6864      	ldr	r4, [r4, #4]
 800af40:	e7ae      	b.n	800aea0 <_malloc_r+0x34>
 800af42:	463c      	mov	r4, r7
 800af44:	687f      	ldr	r7, [r7, #4]
 800af46:	e7b6      	b.n	800aeb6 <_malloc_r+0x4a>
 800af48:	461a      	mov	r2, r3
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	d1fb      	bne.n	800af48 <_malloc_r+0xdc>
 800af50:	2300      	movs	r3, #0
 800af52:	6053      	str	r3, [r2, #4]
 800af54:	e7de      	b.n	800af14 <_malloc_r+0xa8>
 800af56:	230c      	movs	r3, #12
 800af58:	6033      	str	r3, [r6, #0]
 800af5a:	4630      	mov	r0, r6
 800af5c:	f000 f80c 	bl	800af78 <__malloc_unlock>
 800af60:	e794      	b.n	800ae8c <_malloc_r+0x20>
 800af62:	6005      	str	r5, [r0, #0]
 800af64:	e7d6      	b.n	800af14 <_malloc_r+0xa8>
 800af66:	bf00      	nop
 800af68:	240015cc 	.word	0x240015cc

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	@ (800af74 <__malloc_lock+0x8>)
 800af6e:	f7ff bf01 	b.w	800ad74 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	240015c4 	.word	0x240015c4

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	@ (800af80 <__malloc_unlock+0x8>)
 800af7a:	f7ff befc 	b.w	800ad76 <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	240015c4 	.word	0x240015c4

0800af84 <__ssputs_r>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	688e      	ldr	r6, [r1, #8]
 800af8a:	461f      	mov	r7, r3
 800af8c:	42be      	cmp	r6, r7
 800af8e:	680b      	ldr	r3, [r1, #0]
 800af90:	4682      	mov	sl, r0
 800af92:	460c      	mov	r4, r1
 800af94:	4690      	mov	r8, r2
 800af96:	d82d      	bhi.n	800aff4 <__ssputs_r+0x70>
 800af98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afa0:	d026      	beq.n	800aff0 <__ssputs_r+0x6c>
 800afa2:	6965      	ldr	r5, [r4, #20]
 800afa4:	6909      	ldr	r1, [r1, #16]
 800afa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afaa:	eba3 0901 	sub.w	r9, r3, r1
 800afae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afb2:	1c7b      	adds	r3, r7, #1
 800afb4:	444b      	add	r3, r9
 800afb6:	106d      	asrs	r5, r5, #1
 800afb8:	429d      	cmp	r5, r3
 800afba:	bf38      	it	cc
 800afbc:	461d      	movcc	r5, r3
 800afbe:	0553      	lsls	r3, r2, #21
 800afc0:	d527      	bpl.n	800b012 <__ssputs_r+0x8e>
 800afc2:	4629      	mov	r1, r5
 800afc4:	f7ff ff52 	bl	800ae6c <_malloc_r>
 800afc8:	4606      	mov	r6, r0
 800afca:	b360      	cbz	r0, 800b026 <__ssputs_r+0xa2>
 800afcc:	6921      	ldr	r1, [r4, #16]
 800afce:	464a      	mov	r2, r9
 800afd0:	f7ff fed2 	bl	800ad78 <memcpy>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	6126      	str	r6, [r4, #16]
 800afe2:	6165      	str	r5, [r4, #20]
 800afe4:	444e      	add	r6, r9
 800afe6:	eba5 0509 	sub.w	r5, r5, r9
 800afea:	6026      	str	r6, [r4, #0]
 800afec:	60a5      	str	r5, [r4, #8]
 800afee:	463e      	mov	r6, r7
 800aff0:	42be      	cmp	r6, r7
 800aff2:	d900      	bls.n	800aff6 <__ssputs_r+0x72>
 800aff4:	463e      	mov	r6, r7
 800aff6:	6820      	ldr	r0, [r4, #0]
 800aff8:	4632      	mov	r2, r6
 800affa:	4641      	mov	r1, r8
 800affc:	f000 faa6 	bl	800b54c <memmove>
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	1b9b      	subs	r3, r3, r6
 800b004:	60a3      	str	r3, [r4, #8]
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	4433      	add	r3, r6
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	2000      	movs	r0, #0
 800b00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b012:	462a      	mov	r2, r5
 800b014:	f000 fac4 	bl	800b5a0 <_realloc_r>
 800b018:	4606      	mov	r6, r0
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1e0      	bne.n	800afe0 <__ssputs_r+0x5c>
 800b01e:	6921      	ldr	r1, [r4, #16]
 800b020:	4650      	mov	r0, sl
 800b022:	f7ff feb7 	bl	800ad94 <_free_r>
 800b026:	230c      	movs	r3, #12
 800b028:	f8ca 3000 	str.w	r3, [sl]
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	e7e9      	b.n	800b00e <__ssputs_r+0x8a>
	...

0800b03c <_svfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	4698      	mov	r8, r3
 800b042:	898b      	ldrh	r3, [r1, #12]
 800b044:	061b      	lsls	r3, r3, #24
 800b046:	b09d      	sub	sp, #116	@ 0x74
 800b048:	4607      	mov	r7, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	4614      	mov	r4, r2
 800b04e:	d510      	bpl.n	800b072 <_svfiprintf_r+0x36>
 800b050:	690b      	ldr	r3, [r1, #16]
 800b052:	b973      	cbnz	r3, 800b072 <_svfiprintf_r+0x36>
 800b054:	2140      	movs	r1, #64	@ 0x40
 800b056:	f7ff ff09 	bl	800ae6c <_malloc_r>
 800b05a:	6028      	str	r0, [r5, #0]
 800b05c:	6128      	str	r0, [r5, #16]
 800b05e:	b930      	cbnz	r0, 800b06e <_svfiprintf_r+0x32>
 800b060:	230c      	movs	r3, #12
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	b01d      	add	sp, #116	@ 0x74
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	2340      	movs	r3, #64	@ 0x40
 800b070:	616b      	str	r3, [r5, #20]
 800b072:	2300      	movs	r3, #0
 800b074:	9309      	str	r3, [sp, #36]	@ 0x24
 800b076:	2320      	movs	r3, #32
 800b078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b07c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b080:	2330      	movs	r3, #48	@ 0x30
 800b082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b220 <_svfiprintf_r+0x1e4>
 800b086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b08a:	f04f 0901 	mov.w	r9, #1
 800b08e:	4623      	mov	r3, r4
 800b090:	469a      	mov	sl, r3
 800b092:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b096:	b10a      	cbz	r2, 800b09c <_svfiprintf_r+0x60>
 800b098:	2a25      	cmp	r2, #37	@ 0x25
 800b09a:	d1f9      	bne.n	800b090 <_svfiprintf_r+0x54>
 800b09c:	ebba 0b04 	subs.w	fp, sl, r4
 800b0a0:	d00b      	beq.n	800b0ba <_svfiprintf_r+0x7e>
 800b0a2:	465b      	mov	r3, fp
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7ff ff6b 	bl	800af84 <__ssputs_r>
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f000 80a7 	beq.w	800b202 <_svfiprintf_r+0x1c6>
 800b0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b6:	445a      	add	r2, fp
 800b0b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 809f 	beq.w	800b202 <_svfiprintf_r+0x1c6>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ce:	f10a 0a01 	add.w	sl, sl, #1
 800b0d2:	9304      	str	r3, [sp, #16]
 800b0d4:	9307      	str	r3, [sp, #28]
 800b0d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0da:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0dc:	4654      	mov	r4, sl
 800b0de:	2205      	movs	r2, #5
 800b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e4:	484e      	ldr	r0, [pc, #312]	@ (800b220 <_svfiprintf_r+0x1e4>)
 800b0e6:	f7f5 f903 	bl	80002f0 <memchr>
 800b0ea:	9a04      	ldr	r2, [sp, #16]
 800b0ec:	b9d8      	cbnz	r0, 800b126 <_svfiprintf_r+0xea>
 800b0ee:	06d0      	lsls	r0, r2, #27
 800b0f0:	bf44      	itt	mi
 800b0f2:	2320      	movmi	r3, #32
 800b0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0f8:	0711      	lsls	r1, r2, #28
 800b0fa:	bf44      	itt	mi
 800b0fc:	232b      	movmi	r3, #43	@ 0x2b
 800b0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b102:	f89a 3000 	ldrb.w	r3, [sl]
 800b106:	2b2a      	cmp	r3, #42	@ 0x2a
 800b108:	d015      	beq.n	800b136 <_svfiprintf_r+0xfa>
 800b10a:	9a07      	ldr	r2, [sp, #28]
 800b10c:	4654      	mov	r4, sl
 800b10e:	2000      	movs	r0, #0
 800b110:	f04f 0c0a 	mov.w	ip, #10
 800b114:	4621      	mov	r1, r4
 800b116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b11a:	3b30      	subs	r3, #48	@ 0x30
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d94b      	bls.n	800b1b8 <_svfiprintf_r+0x17c>
 800b120:	b1b0      	cbz	r0, 800b150 <_svfiprintf_r+0x114>
 800b122:	9207      	str	r2, [sp, #28]
 800b124:	e014      	b.n	800b150 <_svfiprintf_r+0x114>
 800b126:	eba0 0308 	sub.w	r3, r0, r8
 800b12a:	fa09 f303 	lsl.w	r3, r9, r3
 800b12e:	4313      	orrs	r3, r2
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	46a2      	mov	sl, r4
 800b134:	e7d2      	b.n	800b0dc <_svfiprintf_r+0xa0>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	1d19      	adds	r1, r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	9103      	str	r1, [sp, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bfbb      	ittet	lt
 800b142:	425b      	neglt	r3, r3
 800b144:	f042 0202 	orrlt.w	r2, r2, #2
 800b148:	9307      	strge	r3, [sp, #28]
 800b14a:	9307      	strlt	r3, [sp, #28]
 800b14c:	bfb8      	it	lt
 800b14e:	9204      	strlt	r2, [sp, #16]
 800b150:	7823      	ldrb	r3, [r4, #0]
 800b152:	2b2e      	cmp	r3, #46	@ 0x2e
 800b154:	d10a      	bne.n	800b16c <_svfiprintf_r+0x130>
 800b156:	7863      	ldrb	r3, [r4, #1]
 800b158:	2b2a      	cmp	r3, #42	@ 0x2a
 800b15a:	d132      	bne.n	800b1c2 <_svfiprintf_r+0x186>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	9203      	str	r2, [sp, #12]
 800b164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b168:	3402      	adds	r4, #2
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b230 <_svfiprintf_r+0x1f4>
 800b170:	7821      	ldrb	r1, [r4, #0]
 800b172:	2203      	movs	r2, #3
 800b174:	4650      	mov	r0, sl
 800b176:	f7f5 f8bb 	bl	80002f0 <memchr>
 800b17a:	b138      	cbz	r0, 800b18c <_svfiprintf_r+0x150>
 800b17c:	9b04      	ldr	r3, [sp, #16]
 800b17e:	eba0 000a 	sub.w	r0, r0, sl
 800b182:	2240      	movs	r2, #64	@ 0x40
 800b184:	4082      	lsls	r2, r0
 800b186:	4313      	orrs	r3, r2
 800b188:	3401      	adds	r4, #1
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b190:	4824      	ldr	r0, [pc, #144]	@ (800b224 <_svfiprintf_r+0x1e8>)
 800b192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b196:	2206      	movs	r2, #6
 800b198:	f7f5 f8aa 	bl	80002f0 <memchr>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d036      	beq.n	800b20e <_svfiprintf_r+0x1d2>
 800b1a0:	4b21      	ldr	r3, [pc, #132]	@ (800b228 <_svfiprintf_r+0x1ec>)
 800b1a2:	bb1b      	cbnz	r3, 800b1ec <_svfiprintf_r+0x1b0>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	3307      	adds	r3, #7
 800b1a8:	f023 0307 	bic.w	r3, r3, #7
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b2:	4433      	add	r3, r6
 800b1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b6:	e76a      	b.n	800b08e <_svfiprintf_r+0x52>
 800b1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1bc:	460c      	mov	r4, r1
 800b1be:	2001      	movs	r0, #1
 800b1c0:	e7a8      	b.n	800b114 <_svfiprintf_r+0xd8>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f04f 0c0a 	mov.w	ip, #10
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d4:	3a30      	subs	r2, #48	@ 0x30
 800b1d6:	2a09      	cmp	r2, #9
 800b1d8:	d903      	bls.n	800b1e2 <_svfiprintf_r+0x1a6>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0c6      	beq.n	800b16c <_svfiprintf_r+0x130>
 800b1de:	9105      	str	r1, [sp, #20]
 800b1e0:	e7c4      	b.n	800b16c <_svfiprintf_r+0x130>
 800b1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e7f0      	b.n	800b1ce <_svfiprintf_r+0x192>
 800b1ec:	ab03      	add	r3, sp, #12
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	462a      	mov	r2, r5
 800b1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b22c <_svfiprintf_r+0x1f0>)
 800b1f4:	a904      	add	r1, sp, #16
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	f3af 8000 	nop.w
 800b1fc:	1c42      	adds	r2, r0, #1
 800b1fe:	4606      	mov	r6, r0
 800b200:	d1d6      	bne.n	800b1b0 <_svfiprintf_r+0x174>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	065b      	lsls	r3, r3, #25
 800b206:	f53f af2d 	bmi.w	800b064 <_svfiprintf_r+0x28>
 800b20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b20c:	e72c      	b.n	800b068 <_svfiprintf_r+0x2c>
 800b20e:	ab03      	add	r3, sp, #12
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	462a      	mov	r2, r5
 800b214:	4b05      	ldr	r3, [pc, #20]	@ (800b22c <_svfiprintf_r+0x1f0>)
 800b216:	a904      	add	r1, sp, #16
 800b218:	4638      	mov	r0, r7
 800b21a:	f000 f879 	bl	800b310 <_printf_i>
 800b21e:	e7ed      	b.n	800b1fc <_svfiprintf_r+0x1c0>
 800b220:	0800b75c 	.word	0x0800b75c
 800b224:	0800b766 	.word	0x0800b766
 800b228:	00000000 	.word	0x00000000
 800b22c:	0800af85 	.word	0x0800af85
 800b230:	0800b762 	.word	0x0800b762

0800b234 <_printf_common>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	4616      	mov	r6, r2
 800b23a:	4698      	mov	r8, r3
 800b23c:	688a      	ldr	r2, [r1, #8]
 800b23e:	690b      	ldr	r3, [r1, #16]
 800b240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b244:	4293      	cmp	r3, r2
 800b246:	bfb8      	it	lt
 800b248:	4613      	movlt	r3, r2
 800b24a:	6033      	str	r3, [r6, #0]
 800b24c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b250:	4607      	mov	r7, r0
 800b252:	460c      	mov	r4, r1
 800b254:	b10a      	cbz	r2, 800b25a <_printf_common+0x26>
 800b256:	3301      	adds	r3, #1
 800b258:	6033      	str	r3, [r6, #0]
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	0699      	lsls	r1, r3, #26
 800b25e:	bf42      	ittt	mi
 800b260:	6833      	ldrmi	r3, [r6, #0]
 800b262:	3302      	addmi	r3, #2
 800b264:	6033      	strmi	r3, [r6, #0]
 800b266:	6825      	ldr	r5, [r4, #0]
 800b268:	f015 0506 	ands.w	r5, r5, #6
 800b26c:	d106      	bne.n	800b27c <_printf_common+0x48>
 800b26e:	f104 0a19 	add.w	sl, r4, #25
 800b272:	68e3      	ldr	r3, [r4, #12]
 800b274:	6832      	ldr	r2, [r6, #0]
 800b276:	1a9b      	subs	r3, r3, r2
 800b278:	42ab      	cmp	r3, r5
 800b27a:	dc26      	bgt.n	800b2ca <_printf_common+0x96>
 800b27c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b280:	6822      	ldr	r2, [r4, #0]
 800b282:	3b00      	subs	r3, #0
 800b284:	bf18      	it	ne
 800b286:	2301      	movne	r3, #1
 800b288:	0692      	lsls	r2, r2, #26
 800b28a:	d42b      	bmi.n	800b2e4 <_printf_common+0xb0>
 800b28c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b290:	4641      	mov	r1, r8
 800b292:	4638      	mov	r0, r7
 800b294:	47c8      	blx	r9
 800b296:	3001      	adds	r0, #1
 800b298:	d01e      	beq.n	800b2d8 <_printf_common+0xa4>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	6922      	ldr	r2, [r4, #16]
 800b29e:	f003 0306 	and.w	r3, r3, #6
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	bf02      	ittt	eq
 800b2a6:	68e5      	ldreq	r5, [r4, #12]
 800b2a8:	6833      	ldreq	r3, [r6, #0]
 800b2aa:	1aed      	subeq	r5, r5, r3
 800b2ac:	68a3      	ldr	r3, [r4, #8]
 800b2ae:	bf0c      	ite	eq
 800b2b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2b4:	2500      	movne	r5, #0
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	bfc4      	itt	gt
 800b2ba:	1a9b      	subgt	r3, r3, r2
 800b2bc:	18ed      	addgt	r5, r5, r3
 800b2be:	2600      	movs	r6, #0
 800b2c0:	341a      	adds	r4, #26
 800b2c2:	42b5      	cmp	r5, r6
 800b2c4:	d11a      	bne.n	800b2fc <_printf_common+0xc8>
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	e008      	b.n	800b2dc <_printf_common+0xa8>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	47c8      	blx	r9
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d103      	bne.n	800b2e0 <_printf_common+0xac>
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	e7c6      	b.n	800b272 <_printf_common+0x3e>
 800b2e4:	18e1      	adds	r1, r4, r3
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	2030      	movs	r0, #48	@ 0x30
 800b2ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2ee:	4422      	add	r2, r4
 800b2f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	e7c7      	b.n	800b28c <_printf_common+0x58>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4622      	mov	r2, r4
 800b300:	4641      	mov	r1, r8
 800b302:	4638      	mov	r0, r7
 800b304:	47c8      	blx	r9
 800b306:	3001      	adds	r0, #1
 800b308:	d0e6      	beq.n	800b2d8 <_printf_common+0xa4>
 800b30a:	3601      	adds	r6, #1
 800b30c:	e7d9      	b.n	800b2c2 <_printf_common+0x8e>
	...

0800b310 <_printf_i>:
 800b310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b314:	7e0f      	ldrb	r7, [r1, #24]
 800b316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b318:	2f78      	cmp	r7, #120	@ 0x78
 800b31a:	4691      	mov	r9, r2
 800b31c:	4680      	mov	r8, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	469a      	mov	sl, r3
 800b322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b326:	d807      	bhi.n	800b338 <_printf_i+0x28>
 800b328:	2f62      	cmp	r7, #98	@ 0x62
 800b32a:	d80a      	bhi.n	800b342 <_printf_i+0x32>
 800b32c:	2f00      	cmp	r7, #0
 800b32e:	f000 80d1 	beq.w	800b4d4 <_printf_i+0x1c4>
 800b332:	2f58      	cmp	r7, #88	@ 0x58
 800b334:	f000 80b8 	beq.w	800b4a8 <_printf_i+0x198>
 800b338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b33c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b340:	e03a      	b.n	800b3b8 <_printf_i+0xa8>
 800b342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b346:	2b15      	cmp	r3, #21
 800b348:	d8f6      	bhi.n	800b338 <_printf_i+0x28>
 800b34a:	a101      	add	r1, pc, #4	@ (adr r1, 800b350 <_printf_i+0x40>)
 800b34c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b350:	0800b3a9 	.word	0x0800b3a9
 800b354:	0800b3bd 	.word	0x0800b3bd
 800b358:	0800b339 	.word	0x0800b339
 800b35c:	0800b339 	.word	0x0800b339
 800b360:	0800b339 	.word	0x0800b339
 800b364:	0800b339 	.word	0x0800b339
 800b368:	0800b3bd 	.word	0x0800b3bd
 800b36c:	0800b339 	.word	0x0800b339
 800b370:	0800b339 	.word	0x0800b339
 800b374:	0800b339 	.word	0x0800b339
 800b378:	0800b339 	.word	0x0800b339
 800b37c:	0800b4bb 	.word	0x0800b4bb
 800b380:	0800b3e7 	.word	0x0800b3e7
 800b384:	0800b475 	.word	0x0800b475
 800b388:	0800b339 	.word	0x0800b339
 800b38c:	0800b339 	.word	0x0800b339
 800b390:	0800b4dd 	.word	0x0800b4dd
 800b394:	0800b339 	.word	0x0800b339
 800b398:	0800b3e7 	.word	0x0800b3e7
 800b39c:	0800b339 	.word	0x0800b339
 800b3a0:	0800b339 	.word	0x0800b339
 800b3a4:	0800b47d 	.word	0x0800b47d
 800b3a8:	6833      	ldr	r3, [r6, #0]
 800b3aa:	1d1a      	adds	r2, r3, #4
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6032      	str	r2, [r6, #0]
 800b3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e09c      	b.n	800b4f6 <_printf_i+0x1e6>
 800b3bc:	6833      	ldr	r3, [r6, #0]
 800b3be:	6820      	ldr	r0, [r4, #0]
 800b3c0:	1d19      	adds	r1, r3, #4
 800b3c2:	6031      	str	r1, [r6, #0]
 800b3c4:	0606      	lsls	r6, r0, #24
 800b3c6:	d501      	bpl.n	800b3cc <_printf_i+0xbc>
 800b3c8:	681d      	ldr	r5, [r3, #0]
 800b3ca:	e003      	b.n	800b3d4 <_printf_i+0xc4>
 800b3cc:	0645      	lsls	r5, r0, #25
 800b3ce:	d5fb      	bpl.n	800b3c8 <_printf_i+0xb8>
 800b3d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3d4:	2d00      	cmp	r5, #0
 800b3d6:	da03      	bge.n	800b3e0 <_printf_i+0xd0>
 800b3d8:	232d      	movs	r3, #45	@ 0x2d
 800b3da:	426d      	negs	r5, r5
 800b3dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e0:	4858      	ldr	r0, [pc, #352]	@ (800b544 <_printf_i+0x234>)
 800b3e2:	230a      	movs	r3, #10
 800b3e4:	e011      	b.n	800b40a <_printf_i+0xfa>
 800b3e6:	6821      	ldr	r1, [r4, #0]
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	0608      	lsls	r0, r1, #24
 800b3ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3f0:	d402      	bmi.n	800b3f8 <_printf_i+0xe8>
 800b3f2:	0649      	lsls	r1, r1, #25
 800b3f4:	bf48      	it	mi
 800b3f6:	b2ad      	uxthmi	r5, r5
 800b3f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3fa:	4852      	ldr	r0, [pc, #328]	@ (800b544 <_printf_i+0x234>)
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	bf14      	ite	ne
 800b400:	230a      	movne	r3, #10
 800b402:	2308      	moveq	r3, #8
 800b404:	2100      	movs	r1, #0
 800b406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b40a:	6866      	ldr	r6, [r4, #4]
 800b40c:	60a6      	str	r6, [r4, #8]
 800b40e:	2e00      	cmp	r6, #0
 800b410:	db05      	blt.n	800b41e <_printf_i+0x10e>
 800b412:	6821      	ldr	r1, [r4, #0]
 800b414:	432e      	orrs	r6, r5
 800b416:	f021 0104 	bic.w	r1, r1, #4
 800b41a:	6021      	str	r1, [r4, #0]
 800b41c:	d04b      	beq.n	800b4b6 <_printf_i+0x1a6>
 800b41e:	4616      	mov	r6, r2
 800b420:	fbb5 f1f3 	udiv	r1, r5, r3
 800b424:	fb03 5711 	mls	r7, r3, r1, r5
 800b428:	5dc7      	ldrb	r7, [r0, r7]
 800b42a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b42e:	462f      	mov	r7, r5
 800b430:	42bb      	cmp	r3, r7
 800b432:	460d      	mov	r5, r1
 800b434:	d9f4      	bls.n	800b420 <_printf_i+0x110>
 800b436:	2b08      	cmp	r3, #8
 800b438:	d10b      	bne.n	800b452 <_printf_i+0x142>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	07df      	lsls	r7, r3, #31
 800b43e:	d508      	bpl.n	800b452 <_printf_i+0x142>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	6861      	ldr	r1, [r4, #4]
 800b444:	4299      	cmp	r1, r3
 800b446:	bfde      	ittt	le
 800b448:	2330      	movle	r3, #48	@ 0x30
 800b44a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b44e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b452:	1b92      	subs	r2, r2, r6
 800b454:	6122      	str	r2, [r4, #16]
 800b456:	f8cd a000 	str.w	sl, [sp]
 800b45a:	464b      	mov	r3, r9
 800b45c:	aa03      	add	r2, sp, #12
 800b45e:	4621      	mov	r1, r4
 800b460:	4640      	mov	r0, r8
 800b462:	f7ff fee7 	bl	800b234 <_printf_common>
 800b466:	3001      	adds	r0, #1
 800b468:	d14a      	bne.n	800b500 <_printf_i+0x1f0>
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	b004      	add	sp, #16
 800b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	f043 0320 	orr.w	r3, r3, #32
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	4832      	ldr	r0, [pc, #200]	@ (800b548 <_printf_i+0x238>)
 800b47e:	2778      	movs	r7, #120	@ 0x78
 800b480:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	6831      	ldr	r1, [r6, #0]
 800b488:	061f      	lsls	r7, r3, #24
 800b48a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b48e:	d402      	bmi.n	800b496 <_printf_i+0x186>
 800b490:	065f      	lsls	r7, r3, #25
 800b492:	bf48      	it	mi
 800b494:	b2ad      	uxthmi	r5, r5
 800b496:	6031      	str	r1, [r6, #0]
 800b498:	07d9      	lsls	r1, r3, #31
 800b49a:	bf44      	itt	mi
 800b49c:	f043 0320 	orrmi.w	r3, r3, #32
 800b4a0:	6023      	strmi	r3, [r4, #0]
 800b4a2:	b11d      	cbz	r5, 800b4ac <_printf_i+0x19c>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	e7ad      	b.n	800b404 <_printf_i+0xf4>
 800b4a8:	4826      	ldr	r0, [pc, #152]	@ (800b544 <_printf_i+0x234>)
 800b4aa:	e7e9      	b.n	800b480 <_printf_i+0x170>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	f023 0320 	bic.w	r3, r3, #32
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	e7f6      	b.n	800b4a4 <_printf_i+0x194>
 800b4b6:	4616      	mov	r6, r2
 800b4b8:	e7bd      	b.n	800b436 <_printf_i+0x126>
 800b4ba:	6833      	ldr	r3, [r6, #0]
 800b4bc:	6825      	ldr	r5, [r4, #0]
 800b4be:	6961      	ldr	r1, [r4, #20]
 800b4c0:	1d18      	adds	r0, r3, #4
 800b4c2:	6030      	str	r0, [r6, #0]
 800b4c4:	062e      	lsls	r6, r5, #24
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	d501      	bpl.n	800b4ce <_printf_i+0x1be>
 800b4ca:	6019      	str	r1, [r3, #0]
 800b4cc:	e002      	b.n	800b4d4 <_printf_i+0x1c4>
 800b4ce:	0668      	lsls	r0, r5, #25
 800b4d0:	d5fb      	bpl.n	800b4ca <_printf_i+0x1ba>
 800b4d2:	8019      	strh	r1, [r3, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	6123      	str	r3, [r4, #16]
 800b4d8:	4616      	mov	r6, r2
 800b4da:	e7bc      	b.n	800b456 <_printf_i+0x146>
 800b4dc:	6833      	ldr	r3, [r6, #0]
 800b4de:	1d1a      	adds	r2, r3, #4
 800b4e0:	6032      	str	r2, [r6, #0]
 800b4e2:	681e      	ldr	r6, [r3, #0]
 800b4e4:	6862      	ldr	r2, [r4, #4]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7f4 ff01 	bl	80002f0 <memchr>
 800b4ee:	b108      	cbz	r0, 800b4f4 <_printf_i+0x1e4>
 800b4f0:	1b80      	subs	r0, r0, r6
 800b4f2:	6060      	str	r0, [r4, #4]
 800b4f4:	6863      	ldr	r3, [r4, #4]
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4fe:	e7aa      	b.n	800b456 <_printf_i+0x146>
 800b500:	6923      	ldr	r3, [r4, #16]
 800b502:	4632      	mov	r2, r6
 800b504:	4649      	mov	r1, r9
 800b506:	4640      	mov	r0, r8
 800b508:	47d0      	blx	sl
 800b50a:	3001      	adds	r0, #1
 800b50c:	d0ad      	beq.n	800b46a <_printf_i+0x15a>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	079b      	lsls	r3, r3, #30
 800b512:	d413      	bmi.n	800b53c <_printf_i+0x22c>
 800b514:	68e0      	ldr	r0, [r4, #12]
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	4298      	cmp	r0, r3
 800b51a:	bfb8      	it	lt
 800b51c:	4618      	movlt	r0, r3
 800b51e:	e7a6      	b.n	800b46e <_printf_i+0x15e>
 800b520:	2301      	movs	r3, #1
 800b522:	4632      	mov	r2, r6
 800b524:	4649      	mov	r1, r9
 800b526:	4640      	mov	r0, r8
 800b528:	47d0      	blx	sl
 800b52a:	3001      	adds	r0, #1
 800b52c:	d09d      	beq.n	800b46a <_printf_i+0x15a>
 800b52e:	3501      	adds	r5, #1
 800b530:	68e3      	ldr	r3, [r4, #12]
 800b532:	9903      	ldr	r1, [sp, #12]
 800b534:	1a5b      	subs	r3, r3, r1
 800b536:	42ab      	cmp	r3, r5
 800b538:	dcf2      	bgt.n	800b520 <_printf_i+0x210>
 800b53a:	e7eb      	b.n	800b514 <_printf_i+0x204>
 800b53c:	2500      	movs	r5, #0
 800b53e:	f104 0619 	add.w	r6, r4, #25
 800b542:	e7f5      	b.n	800b530 <_printf_i+0x220>
 800b544:	0800b76d 	.word	0x0800b76d
 800b548:	0800b77e 	.word	0x0800b77e

0800b54c <memmove>:
 800b54c:	4288      	cmp	r0, r1
 800b54e:	b510      	push	{r4, lr}
 800b550:	eb01 0402 	add.w	r4, r1, r2
 800b554:	d902      	bls.n	800b55c <memmove+0x10>
 800b556:	4284      	cmp	r4, r0
 800b558:	4623      	mov	r3, r4
 800b55a:	d807      	bhi.n	800b56c <memmove+0x20>
 800b55c:	1e43      	subs	r3, r0, #1
 800b55e:	42a1      	cmp	r1, r4
 800b560:	d008      	beq.n	800b574 <memmove+0x28>
 800b562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b56a:	e7f8      	b.n	800b55e <memmove+0x12>
 800b56c:	4402      	add	r2, r0
 800b56e:	4601      	mov	r1, r0
 800b570:	428a      	cmp	r2, r1
 800b572:	d100      	bne.n	800b576 <memmove+0x2a>
 800b574:	bd10      	pop	{r4, pc}
 800b576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b57e:	e7f7      	b.n	800b570 <memmove+0x24>

0800b580 <_sbrk_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d06      	ldr	r5, [pc, #24]	@ (800b59c <_sbrk_r+0x1c>)
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	f7f6 feca 	bl	8002324 <_sbrk>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_sbrk_r+0x1a>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_sbrk_r+0x1a>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	240015c0 	.word	0x240015c0

0800b5a0 <_realloc_r>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	4614      	mov	r4, r2
 800b5a8:	460d      	mov	r5, r1
 800b5aa:	b921      	cbnz	r1, 800b5b6 <_realloc_r+0x16>
 800b5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	f7ff bc5b 	b.w	800ae6c <_malloc_r>
 800b5b6:	b92a      	cbnz	r2, 800b5c4 <_realloc_r+0x24>
 800b5b8:	f7ff fbec 	bl	800ad94 <_free_r>
 800b5bc:	4625      	mov	r5, r4
 800b5be:	4628      	mov	r0, r5
 800b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c4:	f000 f81a 	bl	800b5fc <_malloc_usable_size_r>
 800b5c8:	4284      	cmp	r4, r0
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	d802      	bhi.n	800b5d4 <_realloc_r+0x34>
 800b5ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5d2:	d8f4      	bhi.n	800b5be <_realloc_r+0x1e>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7ff fc48 	bl	800ae6c <_malloc_r>
 800b5dc:	4680      	mov	r8, r0
 800b5de:	b908      	cbnz	r0, 800b5e4 <_realloc_r+0x44>
 800b5e0:	4645      	mov	r5, r8
 800b5e2:	e7ec      	b.n	800b5be <_realloc_r+0x1e>
 800b5e4:	42b4      	cmp	r4, r6
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	bf28      	it	cs
 800b5ec:	4632      	movcs	r2, r6
 800b5ee:	f7ff fbc3 	bl	800ad78 <memcpy>
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff fbcd 	bl	800ad94 <_free_r>
 800b5fa:	e7f1      	b.n	800b5e0 <_realloc_r+0x40>

0800b5fc <_malloc_usable_size_r>:
 800b5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b600:	1f18      	subs	r0, r3, #4
 800b602:	2b00      	cmp	r3, #0
 800b604:	bfbc      	itt	lt
 800b606:	580b      	ldrlt	r3, [r1, r0]
 800b608:	18c0      	addlt	r0, r0, r3
 800b60a:	4770      	bx	lr

0800b60c <_init>:
 800b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60e:	bf00      	nop
 800b610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b612:	bc08      	pop	{r3}
 800b614:	469e      	mov	lr, r3
 800b616:	4770      	bx	lr

0800b618 <_fini>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	bf00      	nop
 800b61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61e:	bc08      	pop	{r3}
 800b620:	469e      	mov	lr, r3
 800b622:	4770      	bx	lr
