
Hovedenhet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b874  0800b874  0000c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9e0  0800b9e0  0000c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b9e8  0800b9e8  0000c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800b9f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001598  24000060  0800ba50  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240015f8  0800ba50  0000d5f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a7fb  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000304b  00000000  00000000  00027889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001168  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d6e  00000000  00000000  0002ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ed6  00000000  00000000  0002c7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000191b6  00000000  00000000  00066684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a5f3  00000000  00000000  0007f83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9e2d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e80  00000000  00000000  001e9e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001eecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b85c 	.word	0x0800b85c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b85c 	.word	0x0800b85c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <command_cam>:
 *      Author: Thomas
 */
#include "main.h"
#include "EX_Global_var.h"

void command_cam(CAM_Data CAM, uint8_t CMD){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c8:	70fb      	strb	r3, [r7, #3]
	CAM.Tx_Buffer[0] = CMD;
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	713b      	strb	r3, [r7, #4]
	CAM.Tx_Buffer[1] = CMD;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(CAM.huart, CAM.Tx_Buffer, 2, 100);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	@ 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	f007 ff42 	bl	8008562 <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006f6:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <CAN_SendMessage+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000706:	2208      	movs	r2, #8
 8000708:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <CAN_SendMessage+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <CAN_SendMessage+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <CAN_SendMessage+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <CAN_SendMessage+0x60>)
 800072a:	4906      	ldr	r1, [pc, #24]	@ (8000744 <CAN_SendMessage+0x5c>)
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <CAN_SendMessage+0x64>)
 800072e:	f003 f8f6 	bl	800391e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <CAN_SendMessage+0x54>
        Error_Handler();
 8000738:	f001 fa52 	bl	8001be0 <Error_Handler>
    }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24001100 	.word	0x24001100
 8000748:	24000080 	.word	0x24000080
 800074c:	24001124 	.word	0x24001124

08000750 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800075a:	f000 fce7 	bl	800112c <W25N_WaitForReady>
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d012      	beq.n	800078a <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000764:	4b67      	ldr	r3, [pc, #412]	@ (8000904 <Flash_Init+0x1b4>)
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 faf3 	bl	8000d54 <Read_Status_Register>
 800076e:	4603      	mov	r3, r0
 8000770:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000772:	7ebb      	ldrb	r3, [r7, #26]
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800077a:	4b62      	ldr	r3, [pc, #392]	@ (8000904 <Flash_Init+0x1b4>)
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	7eba      	ldrb	r2, [r7, #26]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fb16 	bl	8000db4 <Write_Status_Register>
 8000788:	e011      	b.n	80007ae <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800078a:	4b5e      	ldr	r3, [pc, #376]	@ (8000904 <Flash_Init+0x1b4>)
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fae0 	bl	8000d54 <Read_Status_Register>
 8000794:	4603      	mov	r3, r0
 8000796:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 8000798:	7efb      	ldrb	r3, [r7, #27]
 800079a:	f023 0308 	bic.w	r3, r3, #8
 800079e:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 80007a0:	4b58      	ldr	r3, [pc, #352]	@ (8000904 <Flash_Init+0x1b4>)
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	7efa      	ldrb	r2, [r7, #27]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fb03 	bl	8000db4 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <Flash_Init+0x1b4>)
 80007b0:	78db      	ldrb	r3, [r3, #3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 face 	bl	8000d54 <Read_Status_Register>
 80007b8:	4603      	mov	r3, r0
 80007ba:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 80007bc:	7e7b      	ldrb	r3, [r7, #25]
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 80007c4:	7e7b      	ldrb	r3, [r7, #25]
 80007c6:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007ca:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000904 <Flash_Init+0x1b4>)
 80007ce:	78db      	ldrb	r3, [r3, #3]
 80007d0:	7e7a      	ldrb	r2, [r7, #25]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 faed 	bl	8000db4 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007e8:	2300      	movs	r3, #0
 80007ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007f0:	e031      	b.n	8000856 <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007f2:	2300      	movs	r3, #0
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007fc:	2210      	movs	r2, #16
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f950 	bl	8000aa4 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	e013      	b.n	8000832 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 800080a:	f107 0208 	add.w	r2, r7, #8
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2bff      	cmp	r3, #255	@ 0xff
 8000816:	d109      	bne.n	800082c <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 8000818:	2201      	movs	r2, #1
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	b21a      	sxth	r2, r3
 8000822:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000826:	4313      	orrs	r3, r2
 8000828:	b21b      	sxth	r3, r3
 800082a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	3301      	adds	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	dde8      	ble.n	800080a <Flash_Init+0xba>
			}
		}

		if(Page_Bit!=0xFFFF){
 8000838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	4293      	cmp	r3, r2
 8000840:	d003      	beq.n	800084a <Flash_Init+0xfa>
			Temp_Page += 64;
 8000842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000844:	3340      	adds	r3, #64	@ 0x40
 8000846:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000848:	e005      	b.n	8000856 <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <Flash_Init+0x112>
				break;
			}
			else Temp_Page -= 64;
 8000850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000852:	3b40      	subs	r3, #64	@ 0x40
 8000854:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000856:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	4293      	cmp	r3, r2
 800085e:	d1c8      	bne.n	80007f2 <Flash_Init+0xa2>
 8000860:	e000      	b.n	8000864 <Flash_Init+0x114>
				break;
 8000862:	bf00      	nop
		}
	}
	Page_Bit=0x0000;
 8000864:	2300      	movs	r3, #0
 8000866:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 8000868:	e02a      	b.n	80008c0 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 800086e:	f107 0108 	add.w	r1, r7, #8
 8000872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000874:	2210      	movs	r2, #16
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f914 	bl	8000aa4 <Read_Data>

		for(int i = 0; i < 16; i++){
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	e013      	b.n	80008aa <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000882:	f107 0208 	add.w	r2, r7, #8
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2bff      	cmp	r3, #255	@ 0xff
 800088e:	d109      	bne.n	80008a4 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	b21a      	sxth	r2, r3
 800089a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	dde8      	ble.n	8000882 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 80008b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d002      	beq.n	80008c0 <Flash_Init+0x170>
			Temp_Page++;
 80008ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008bc:	3301      	adds	r3, #1
 80008be:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 80008c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d1cf      	bne.n	800086a <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <Flash_Init+0x1b8>)
 80008cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d0:	461a      	mov	r2, r3
 80008d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008d4:	8093      	strh	r3, [r2, #4]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <Flash_Init+0x1b8>)
 80008d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <Flash_Init+0x1b8>)
 80008e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e8:	805a      	strh	r2, [r3, #2]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <Flash_Init+0x1b8>)
 80008ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f0:	889b      	ldrh	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <Flash_Init+0x1bc>)
 80008f6:	f000 fbf3 	bl	80010e0 <USART3_Printf>
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2400009c 	.word	0x2400009c
 8000908:	240000a4 	.word	0x240000a4
 800090c:	0800b874 	.word	0x0800b874

08000910 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	463b      	mov	r3, r7
 8000918:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fa18 	bl	8000d54 <Read_Status_Register>
 8000924:	4603      	mov	r3, r0
 8000926:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 8000928:	2064      	movs	r0, #100	@ 0x64
 800092a:	f000 fbaf 	bl	800108c <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fa0f 	bl	8000d54 <Read_Status_Register>
 8000936:	4603      	mov	r3, r0
 8000938:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800093a:	2064      	movs	r0, #100	@ 0x64
 800093c:	f000 fba6 	bl	800108c <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fa06 	bl	8000d54 <Read_Status_Register>
 8000948:	4603      	mov	r3, r0
 800094a:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 800094c:	2064      	movs	r0, #100	@ 0x64
 800094e:	f000 fb9d 	bl	800108c <delay_ns>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <Write_Data+0x94>)
 800096a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <Write_Data+0x2a>
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <Write_Data+0x94>)
 8000976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097a:	88db      	ldrh	r3, [r3, #6]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <Write_Data+0x2a>
		Block_Erase(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fb4f 	bl	8001024 <Block_Erase>
	}
	uint16_t count=0;
 8000986:	2300      	movs	r3, #0
 8000988:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800098a:	e028      	b.n	80009de <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <Write_Data+0x94>)
 800098e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <Write_Data+0x94>)
 800099c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <Write_Data+0x94>)
 80009a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80009aa:	60d3      	str	r3, [r2, #12]
		data++;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <Write_Data+0x94>)
 80009b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b8:	88db      	ldrh	r3, [r3, #6]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <Write_Data+0x94>)
 80009c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c4:	80da      	strh	r2, [r3, #6]
		count++;
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	3301      	adds	r3, #1
 80009ca:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <Write_Data+0x94>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	88db      	ldrh	r3, [r3, #6]
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009d8:	d301      	bcc.n	80009de <Write_Data+0x82>
			Write_to_page();
 80009da:	f000 f80b 	bl	80009f4 <Write_to_page>
	while(count<lenght){
 80009de:	89fa      	ldrh	r2, [r7, #14]
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3d2      	bcc.n	800098c <Write_Data+0x30>
		}
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	240000a4 	.word	0x240000a4

080009f4 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if(Flash.Buffer_Select==0){
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <Write_to_page+0xa8>)
 80009fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d116      	bne.n	8000a32 <Write_to_page+0x3e>
		Flash.Buffer_Select=1;
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <Write_to_page+0xa8>)
 8000a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_1;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <Write_to_page+0xa8>)
 8000a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <Write_to_page+0xac>)
 8000a18:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <Write_to_page+0xa8>)
 8000a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a20:	2200      	movs	r2, #0
 8000a22:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 8000a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a28:	491c      	ldr	r1, [pc, #112]	@ (8000a9c <Write_to_page+0xa8>)
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 fa24 	bl	8000e78 <Write_Data_Buffer>
 8000a30:	e015      	b.n	8000a5e <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_Select=0;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <Write_to_page+0xa8>)
 8000a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <Write_to_page+0xa8>)
 8000a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <Write_to_page+0xa8>)
 8000a46:	60d3      	str	r3, [r2, #12]
		Flash.Buffer_Index=0;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <Write_to_page+0xa8>)
 8000a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a4e:	2200      	movs	r2, #0
 8000a50:	80da      	strh	r2, [r3, #6]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a56:	4912      	ldr	r1, [pc, #72]	@ (8000aa0 <Write_to_page+0xac>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 fa0d 	bl	8000e78 <Write_Data_Buffer>
	}
	Program_Page_Flash(Flash.Page_Index);
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <Write_to_page+0xa8>)
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fa42 	bl	8000ef0 <Program_Page_Flash>
	Flash.Page_Index++;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <Write_to_page+0xa8>)
 8000a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a72:	889b      	ldrh	r3, [r3, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <Write_to_page+0xa8>)
 8000a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7e:	809a      	strh	r2, [r3, #4]
	Flash.Buffer_Index=0;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <Write_to_page+0xa8>)
 8000a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a86:	2200      	movs	r2, #0
 8000a88:	80da      	strh	r2, [r3, #6]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <Write_to_page+0xa8>)
 8000a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f81c 	bl	8000ad0 <Automatic_Block_Managment>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	240000a4 	.word	0x240000a4
 8000aa0:	240008a4 	.word	0x240008a4

08000aa4 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fa4e 	bl	8000f58 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6838      	ldr	r0, [r7, #0]
 8000ac2:	f000 fa7b 	bl	8000fbc <Read_Data_Buffer>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	099b      	lsrs	r3, r3, #6
 8000ade:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ae6:	885b      	ldrh	r3, [r3, #2]
 8000ae8:	89fa      	ldrh	r2, [r7, #14]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d00a      	beq.n	8000b04 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa97 	bl	8001024 <Block_Erase>
		Flash.Block_Mem=Block;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000afc:	461a      	mov	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	8053      	strh	r3, [r2, #2]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000b02:	e005      	b.n	8000b10 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <Automatic_Block_Managment+0x48>)
 8000b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	8053      	strh	r3, [r2, #2]
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240000a4 	.word	0x240000a4

08000b1c <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000b22:	482c      	ldr	r0, [pc, #176]	@ (8000bd4 <Chip_Erase+0xb8>)
 8000b24:	f000 fadc 	bl	80010e0 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	492a      	ldr	r1, [pc, #168]	@ (8000bd8 <Chip_Erase+0xbc>)
 8000b30:	482a      	ldr	r0, [pc, #168]	@ (8000bdc <Chip_Erase+0xc0>)
 8000b32:	f007 fda4 	bl	800867e <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000b36:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <Chip_Erase+0xbc>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b59      	cmp	r3, #89	@ 0x59
 8000b3c:	d143      	bne.n	8000bc6 <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000b3e:	4828      	ldr	r0, [pc, #160]	@ (8000be0 <Chip_Erase+0xc4>)
 8000b40:	f000 face 	bl	80010e0 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	e009      	b.n	8000b5e <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	019b      	lsls	r3, r3, #6
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa66 	bl	8001024 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b64:	ddf1      	ble.n	8000b4a <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	80da      	strh	r2, [r3, #6]
		Flash.Page_Index=0;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b76:	2200      	movs	r2, #0
 8000b78:	809a      	strh	r2, [r3, #4]
		Flash.Block_Mem=0;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b80:	2200      	movs	r2, #0
 8000b82:	805a      	strh	r2, [r3, #2]
		Flash.Buffer_Select=0;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b98:	60d3      	str	r3, [r2, #12]

		Flash_Data* pointer = &Flash;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <Chip_Erase+0xc8>)
 8000b9c:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba4:	21ff      	movs	r1, #255	@ 0xff
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f00a f9da 	bl	800af60 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000bb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb6:	21ff      	movs	r1, #255	@ 0xff
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00a f9d1 	bl	800af60 <memset>
		USART3_Printf("Ferdig\r\n");
 8000bbe:	480a      	ldr	r0, [pc, #40]	@ (8000be8 <Chip_Erase+0xcc>)
 8000bc0:	f000 fa8e 	bl	80010e0 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000bc4:	e002      	b.n	8000bcc <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000bc6:	4809      	ldr	r0, [pc, #36]	@ (8000bec <Chip_Erase+0xd0>)
 8000bc8:	f000 fa8a 	bl	80010e0 <USART3_Printf>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	0800b88c 	.word	0x0800b88c
 8000bd8:	2400007d 	.word	0x2400007d
 8000bdc:	24001408 	.word	0x24001408
 8000be0:	0800b8c0 	.word	0x0800b8c0
 8000be4:	240000a4 	.word	0x240000a4
 8000be8:	0800b8d4 	.word	0x0800b8d4
 8000bec:	0800b8e0 	.word	0x0800b8e0

08000bf0 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bf4:	b089      	sub	sp, #36	@ 0x24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	80fb      	strh	r3, [r7, #6]
 8000bfc:	466b      	mov	r3, sp
 8000bfe:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f9a9 	bl	8000f58 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000c06:	88f9      	ldrh	r1, [r7, #6]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	b28b      	uxth	r3, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	4698      	mov	r8, r3
 8000c14:	4691      	mov	r9, r2
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c2a:	b28b      	uxth	r3, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	461c      	mov	r4, r3
 8000c30:	4615      	mov	r5, r2
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	00eb      	lsls	r3, r5, #3
 8000c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c40:	00e2      	lsls	r2, r4, #3
 8000c42:	460b      	mov	r3, r1
 8000c44:	3307      	adds	r3, #7
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c4e:	466b      	mov	r3, sp
 8000c50:	3300      	adds	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <Read_Data_Cont+0x114>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <Read_Data_Cont+0x114>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c60:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <Read_Data_Cont+0x114>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c66:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <Read_Data_Cont+0x114>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2110      	movs	r1, #16
 8000c70:	4825      	ldr	r0, [pc, #148]	@ (8000d08 <Read_Data_Cont+0x118>)
 8000c72:	f003 ff53 	bl	8004b1c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	2204      	movs	r2, #4
 8000c7a:	4922      	ldr	r1, [pc, #136]	@ (8000d04 <Read_Data_Cont+0x114>)
 8000c7c:	4823      	ldr	r0, [pc, #140]	@ (8000d0c <Read_Data_Cont+0x11c>)
 8000c7e:	f006 fed7 	bl	8007a30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	68f9      	ldr	r1, [r7, #12]
 8000c8a:	4820      	ldr	r0, [pc, #128]	@ (8000d0c <Read_Data_Cont+0x11c>)
 8000c8c:	f007 f8be 	bl	8007e0c <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	330b      	adds	r3, #11
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000ca8:	e018      	b.n	8000cdc <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000caa:	8bf9      	ldrh	r1, [r7, #30]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <Read_Data_Cont+0x120>)
 8000cb2:	f000 fa15 	bl	80010e0 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	68f9      	ldr	r1, [r7, #12]
 8000cbe:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <Read_Data_Cont+0x11c>)
 8000cc0:	f007 f8a4 	bl	8007e0c <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3303      	adds	r3, #3
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	330b      	adds	r3, #11
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ce2:	d103      	bne.n	8000cec <Read_Data_Cont+0xfc>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	7bdb      	ldrb	r3, [r3, #15]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d0de      	beq.n	8000caa <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <Read_Data_Cont+0x118>)
 8000cf2:	f003 ff13 	bl	8004b1c <HAL_GPIO_WritePin>
 8000cf6:	46b5      	mov	sp, r6
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	@ 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d02:	bf00      	nop
 8000d04:	24000090 	.word	0x24000090
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	240011c4 	.word	0x240011c4
 8000d10:	0800b8f8 	.word	0x0800b8f8

08000d14 <Write_Enable>:
////////Low-level code for interfacing with Flash IC////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <Write_Enable+0x34>)
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2110      	movs	r1, #16
 8000d22:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <Write_Enable+0x38>)
 8000d24:	f003 fefa 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4906      	ldr	r1, [pc, #24]	@ (8000d48 <Write_Enable+0x34>)
 8000d2e:	4808      	ldr	r0, [pc, #32]	@ (8000d50 <Write_Enable+0x3c>)
 8000d30:	f006 fe7e 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <Write_Enable+0x38>)
 8000d3a:	f003 feef 	bl	8004b1c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f000 f9a4 	bl	800108c <delay_ns>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24000090 	.word	0x24000090
 8000d4c:	58020000 	.word	0x58020000
 8000d50:	240011c4 	.word	0x240011c4

08000d54 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <Read_Status_Register+0x50>)
 8000d60:	220f      	movs	r2, #15
 8000d62:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d64:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <Read_Status_Register+0x50>)
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	480e      	ldr	r0, [pc, #56]	@ (8000da8 <Read_Status_Register+0x54>)
 8000d70:	f003 fed4 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d74:	2364      	movs	r3, #100	@ 0x64
 8000d76:	2202      	movs	r2, #2
 8000d78:	490a      	ldr	r1, [pc, #40]	@ (8000da4 <Read_Status_Register+0x50>)
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <Read_Status_Register+0x58>)
 8000d7c:	f006 fe58 	bl	8007a30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d80:	2364      	movs	r3, #100	@ 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	490a      	ldr	r1, [pc, #40]	@ (8000db0 <Read_Status_Register+0x5c>)
 8000d86:	4809      	ldr	r0, [pc, #36]	@ (8000dac <Read_Status_Register+0x58>)
 8000d88:	f007 f840 	bl	8007e0c <HAL_SPI_Receive>
	csHIGH();
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <Read_Status_Register+0x54>)
 8000d92:	f003 fec3 	bl	8004b1c <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d96:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <Read_Status_Register+0x50>)
 8000d98:	795b      	ldrb	r3, [r3, #5]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000090 	.word	0x24000090
 8000da8:	58020000 	.word	0x58020000
 8000dac:	240011c4 	.word	0x240011c4
 8000db0:	24000095 	.word	0x24000095

08000db4 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <Write_Status_Register+0x50>)
 8000dc6:	221f      	movs	r2, #31
 8000dc8:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000dca:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <Write_Status_Register+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <Write_Status_Register+0x50>)
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2110      	movs	r1, #16
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <Write_Status_Register+0x54>)
 8000ddc:	f003 fe9e 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000de0:	2364      	movs	r3, #100	@ 0x64
 8000de2:	2203      	movs	r2, #3
 8000de4:	4907      	ldr	r1, [pc, #28]	@ (8000e04 <Write_Status_Register+0x50>)
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <Write_Status_Register+0x58>)
 8000de8:	f006 fe22 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <Write_Status_Register+0x54>)
 8000df2:	f003 fe93 	bl	8004b1c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000df6:	2064      	movs	r0, #100	@ 0x64
 8000df8:	f000 f948 	bl	800108c <delay_ns>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000090 	.word	0x24000090
 8000e08:	58020000 	.word	0x58020000
 8000e0c:	240011c4 	.word	0x240011c4

08000e10 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <Read_ID+0x5c>)
 8000e18:	229f      	movs	r2, #159	@ 0x9f
 8000e1a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <Read_ID+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000e22:	2200      	movs	r2, #0
 8000e24:	2110      	movs	r1, #16
 8000e26:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <Read_ID+0x60>)
 8000e28:	f003 fe78 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000e2c:	2364      	movs	r3, #100	@ 0x64
 8000e2e:	2202      	movs	r2, #2
 8000e30:	490e      	ldr	r1, [pc, #56]	@ (8000e6c <Read_ID+0x5c>)
 8000e32:	4810      	ldr	r0, [pc, #64]	@ (8000e74 <Read_ID+0x64>)
 8000e34:	f006 fdfc 	bl	8007a30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e38:	1d39      	adds	r1, r7, #4
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <Read_ID+0x64>)
 8000e40:	f006 ffe4 	bl	8007e0c <HAL_SPI_Receive>
	csHIGH();
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <Read_ID+0x60>)
 8000e4a:	f003 fe67 	bl	8004b1c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	f000 f91c 	bl	800108c <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e54:	793b      	ldrb	r3, [r7, #4]
 8000e56:	041a      	lsls	r2, r3, #16
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	79b9      	ldrb	r1, [r7, #6]
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	4313      	orrs	r3, r2
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	24000090 	.word	0x24000090
 8000e70:	58020000 	.word	0x58020000
 8000e74:	240011c4 	.word	0x240011c4

08000e78 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e88:	f7ff ff44 	bl	8000d14 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <Write_Data_Buffer+0x6c>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <Write_Data_Buffer+0x6c>)
 8000e9c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <Write_Data_Buffer+0x6c>)
 8000ea4:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <Write_Data_Buffer+0x70>)
 8000eac:	f003 fe36 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000eb0:	2364      	movs	r3, #100	@ 0x64
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	490b      	ldr	r1, [pc, #44]	@ (8000ee4 <Write_Data_Buffer+0x6c>)
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <Write_Data_Buffer+0x74>)
 8000eb8:	f006 fdba 	bl	8007a30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000ebc:	88ba      	ldrh	r2, [r7, #4]
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4809      	ldr	r0, [pc, #36]	@ (8000eec <Write_Data_Buffer+0x74>)
 8000ec6:	f006 fdb3 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <Write_Data_Buffer+0x70>)
 8000ed0:	f003 fe24 	bl	8004b1c <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f000 f8d9 	bl	800108c <delay_ns>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000090 	.word	0x24000090
 8000ee8:	58020000 	.word	0x58020000
 8000eec:	240011c4 	.word	0x240011c4

08000ef0 <Program_Page_Flash>:

//Program page with data in buffer
void Program_Page_Flash(uint16_t Page_Addr){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000efa:	f7ff ff0b 	bl	8000d14 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <Program_Page_Flash+0x5c>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <Program_Page_Flash+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <Program_Page_Flash+0x5c>)
 8000f14:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <Program_Page_Flash+0x5c>)
 8000f1c:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2110      	movs	r1, #16
 8000f22:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <Program_Page_Flash+0x60>)
 8000f24:	f003 fdfa 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4907      	ldr	r1, [pc, #28]	@ (8000f4c <Program_Page_Flash+0x5c>)
 8000f2e:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <Program_Page_Flash+0x64>)
 8000f30:	f006 fd7e 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8000f34:	2201      	movs	r2, #1
 8000f36:	2110      	movs	r1, #16
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <Program_Page_Flash+0x60>)
 8000f3a:	f003 fdef 	bl	8004b1c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f3e:	f000 f8f5 	bl	800112c <W25N_WaitForReady>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24000090 	.word	0x24000090
 8000f50:	58020000 	.word	0x58020000
 8000f54:	240011c4 	.word	0x240011c4

08000f58 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <Select_Page_Read+0x58>)
 8000f64:	2213      	movs	r2, #19
 8000f66:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <Select_Page_Read+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <Select_Page_Read+0x58>)
 8000f78:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <Select_Page_Read+0x58>)
 8000f80:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f82:	2200      	movs	r2, #0
 8000f84:	2110      	movs	r1, #16
 8000f86:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <Select_Page_Read+0x5c>)
 8000f88:	f003 fdc8 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4907      	ldr	r1, [pc, #28]	@ (8000fb0 <Select_Page_Read+0x58>)
 8000f92:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <Select_Page_Read+0x60>)
 8000f94:	f006 fd4c 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <Select_Page_Read+0x5c>)
 8000f9e:	f003 fdbd 	bl	8004b1c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000fa2:	f000 f8c3 	bl	800112c <W25N_WaitForReady>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000090 	.word	0x24000090
 8000fb4:	58020000 	.word	0x58020000
 8000fb8:	240011c4 	.word	0x240011c4

08000fbc <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <Read_Data_Buffer+0x5c>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <Read_Data_Buffer+0x5c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <Read_Data_Buffer+0x5c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <Read_Data_Buffer+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <Read_Data_Buffer+0x60>)
 8000fe6:	f003 fd99 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	2204      	movs	r2, #4
 8000fee:	490a      	ldr	r1, [pc, #40]	@ (8001018 <Read_Data_Buffer+0x5c>)
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <Read_Data_Buffer+0x64>)
 8000ff2:	f006 fd1d 	bl	8007a30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4808      	ldr	r0, [pc, #32]	@ (8001020 <Read_Data_Buffer+0x64>)
 8001000:	f006 ff04 	bl	8007e0c <HAL_SPI_Receive>
	csHIGH();
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <Read_Data_Buffer+0x60>)
 800100a:	f003 fd87 	bl	8004b1c <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000090 	.word	0x24000090
 800101c:	58020000 	.word	0x58020000
 8001020:	240011c4 	.word	0x240011c4

08001024 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 800102e:	f7ff fe71 	bl	8000d14 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <Block_Erase+0x5c>)
 8001034:	22d8      	movs	r2, #216	@ 0xd8
 8001036:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <Block_Erase+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29b      	uxth	r3, r3
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <Block_Erase+0x5c>)
 8001048:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <Block_Erase+0x5c>)
 8001050:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <Block_Erase+0x60>)
 8001058:	f003 fd60 	bl	8004b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	2204      	movs	r2, #4
 8001060:	4907      	ldr	r1, [pc, #28]	@ (8001080 <Block_Erase+0x5c>)
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <Block_Erase+0x64>)
 8001064:	f006 fce4 	bl	8007a30 <HAL_SPI_Transmit>
	csHIGH();
 8001068:	2201      	movs	r2, #1
 800106a:	2110      	movs	r1, #16
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <Block_Erase+0x60>)
 800106e:	f003 fd55 	bl	8004b1c <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001072:	f000 f85b 	bl	800112c <W25N_WaitForReady>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000090 	.word	0x24000090
 8001084:	58020000 	.word	0x58020000
 8001088:	240011c4 	.word	0x240011c4

0800108c <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <delay_ns+0x48>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0a5b      	lsrs	r3, r3, #9
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <delay_ns+0x4c>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	09db      	lsrs	r3, r3, #7
 80010a2:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <delay_ns+0x50>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 80010b4:	bf00      	nop
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <delay_ns+0x50>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f8      	bhi.n	80010b6 <delay_ns+0x2a>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	24000000 	.word	0x24000000
 80010d8:	00044b83 	.word	0x00044b83
 80010dc:	e0001000 	.word	0xe0001000

080010e0 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010e0:	b40f      	push	{r0, r1, r2, r3}
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b0a2      	sub	sp, #136	@ 0x88
 80010e6:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010e8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010ec:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010ee:	f107 0008 	add.w	r0, r7, #8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	f009 ff23 	bl	800af44 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f8ec 	bl	80002e0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f107 0108 	add.w	r1, r7, #8
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <USART3_Printf+0x48>)
 8001116:	f007 fa24 	bl	8008562 <HAL_UART_Transmit>
}
 800111a:	bf00      	nop
 800111c:	3788      	adds	r7, #136	@ 0x88
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001124:	b004      	add	sp, #16
 8001126:	4770      	bx	lr
 8001128:	24001408 	.word	0x24001408

0800112c <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001130:	2064      	movs	r0, #100	@ 0x64
 8001132:	f7ff ffab 	bl	800108c <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001136:	e002      	b.n	800113e <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8001138:	2064      	movs	r0, #100	@ 0x64
 800113a:	f7ff ffa7 	bl	800108c <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <W25N_WaitForReady+0x2c>)
 8001140:	795b      	ldrb	r3, [r3, #5]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fe06 	bl	8000d54 <Read_Status_Register>
 8001148:	4603      	mov	r3, r0
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f2      	bne.n	8001138 <W25N_WaitForReady+0xc>
    }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2400009c 	.word	0x2400009c

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001160:	f000 fd12 	bl	8001b88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f001 fa48 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f936 	bl	80013d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 800116c:	f000 fc98 	bl	8001aa0 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 fbbe 	bl	80018f0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001174:	f000 f9ac 	bl	80014d0 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001178:	f000 fa34 	bl	80015e4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800117c:	f000 fb6c 	bl	8001858 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001180:	f000 fa86 	bl	8001690 <MX_UART5_Init>
  MX_UART8_Init();
 8001184:	f000 fad0 	bl	8001728 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8001188:	f000 fb1a 	bl	80017c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 800118c:	4b85      	ldr	r3, [pc, #532]	@ (80013a4 <main+0x248>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2202      	movs	r2, #2
 8001192:	4985      	ldr	r1, [pc, #532]	@ (80013a8 <main+0x24c>)
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fb3b 	bl	8008810 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 800119a:	4b84      	ldr	r3, [pc, #528]	@ (80013ac <main+0x250>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2202      	movs	r2, #2
 80011a0:	4983      	ldr	r1, [pc, #524]	@ (80013b0 <main+0x254>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 fb34 	bl	8008810 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 80011a8:	4b82      	ldr	r3, [pc, #520]	@ (80013b4 <main+0x258>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2202      	movs	r2, #2
 80011ae:	4982      	ldr	r1, [pc, #520]	@ (80013b8 <main+0x25c>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f007 fb2d 	bl	8008810 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff faca 	bl	8000750 <Flash_Init>
  Flash.ID=Read_ID();
 80011bc:	f7ff fe28 	bl	8000e10 <Read_ID>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a7e      	ldr	r2, [pc, #504]	@ (80013bc <main+0x260>)
 80011c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011c8:	6093      	str	r3, [r2, #8]
  while (1)
  {
	  Read_Register(SR);
 80011ca:	4b7d      	ldr	r3, [pc, #500]	@ (80013c0 <main+0x264>)
 80011cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d0:	f7ff fb9e 	bl	8000910 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 80011d4:	2364      	movs	r3, #100	@ 0x64
 80011d6:	2201      	movs	r2, #1
 80011d8:	497a      	ldr	r1, [pc, #488]	@ (80013c4 <main+0x268>)
 80011da:	487b      	ldr	r0, [pc, #492]	@ (80013c8 <main+0x26c>)
 80011dc:	f007 fa4f 	bl	800867e <HAL_UART_Receive>

	  //CAM to IDLE
	  if(command==0x41){
 80011e0:	4b78      	ldr	r3, [pc, #480]	@ (80013c4 <main+0x268>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b41      	cmp	r3, #65	@ 0x41
 80011e6:	d111      	bne.n	800120c <main+0xb0>
		  command_cam(CAM1, IDLE);
 80011e8:	4a6e      	ldr	r2, [pc, #440]	@ (80013a4 <main+0x248>)
 80011ea:	2341      	movs	r3, #65	@ 0x41
 80011ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ee:	f7ff fa65 	bl	80006bc <command_cam>
		  command_cam(CAM2, IDLE);
 80011f2:	4a6e      	ldr	r2, [pc, #440]	@ (80013ac <main+0x250>)
 80011f4:	2341      	movs	r3, #65	@ 0x41
 80011f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f8:	f7ff fa60 	bl	80006bc <command_cam>
		  command_cam(CAM3, IDLE);
 80011fc:	4a6d      	ldr	r2, [pc, #436]	@ (80013b4 <main+0x258>)
 80011fe:	2341      	movs	r3, #65	@ 0x41
 8001200:	ca07      	ldmia	r2, {r0, r1, r2}
 8001202:	f7ff fa5b 	bl	80006bc <command_cam>
		  command=0;
 8001206:	4b6f      	ldr	r3, [pc, #444]	@ (80013c4 <main+0x268>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REC
	  if(command==0x42){
 800120c:	4b6d      	ldr	r3, [pc, #436]	@ (80013c4 <main+0x268>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b42      	cmp	r3, #66	@ 0x42
 8001212:	d111      	bne.n	8001238 <main+0xdc>
		  command_cam(CAM1, REC);
 8001214:	4a63      	ldr	r2, [pc, #396]	@ (80013a4 <main+0x248>)
 8001216:	2342      	movs	r3, #66	@ 0x42
 8001218:	ca07      	ldmia	r2, {r0, r1, r2}
 800121a:	f7ff fa4f 	bl	80006bc <command_cam>
		  command_cam(CAM2, REC);
 800121e:	4a63      	ldr	r2, [pc, #396]	@ (80013ac <main+0x250>)
 8001220:	2342      	movs	r3, #66	@ 0x42
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	f7ff fa4a 	bl	80006bc <command_cam>
		  command_cam(CAM3, REC);
 8001228:	4a62      	ldr	r2, [pc, #392]	@ (80013b4 <main+0x258>)
 800122a:	2342      	movs	r3, #66	@ 0x42
 800122c:	ca07      	ldmia	r2, {r0, r1, r2}
 800122e:	f7ff fa45 	bl	80006bc <command_cam>
		  command=0;
 8001232:	4b64      	ldr	r3, [pc, #400]	@ (80013c4 <main+0x268>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to FORMAT
	  if(command==0x43){
 8001238:	4b62      	ldr	r3, [pc, #392]	@ (80013c4 <main+0x268>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b43      	cmp	r3, #67	@ 0x43
 800123e:	d111      	bne.n	8001264 <main+0x108>
		  command_cam(CAM1, FORMAT);
 8001240:	4a58      	ldr	r2, [pc, #352]	@ (80013a4 <main+0x248>)
 8001242:	2343      	movs	r3, #67	@ 0x43
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	f7ff fa39 	bl	80006bc <command_cam>
		  command_cam(CAM2, FORMAT);
 800124a:	4a58      	ldr	r2, [pc, #352]	@ (80013ac <main+0x250>)
 800124c:	2343      	movs	r3, #67	@ 0x43
 800124e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001250:	f7ff fa34 	bl	80006bc <command_cam>
		  command_cam(CAM3, FORMAT);
 8001254:	4a57      	ldr	r2, [pc, #348]	@ (80013b4 <main+0x258>)
 8001256:	2343      	movs	r3, #67	@ 0x43
 8001258:	ca07      	ldmia	r2, {r0, r1, r2}
 800125a:	f7ff fa2f 	bl	80006bc <command_cam>
		  command=0;
 800125e:	4b59      	ldr	r3, [pc, #356]	@ (80013c4 <main+0x268>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to REBOOT
	  if(command==0x44){
 8001264:	4b57      	ldr	r3, [pc, #348]	@ (80013c4 <main+0x268>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b44      	cmp	r3, #68	@ 0x44
 800126a:	d111      	bne.n	8001290 <main+0x134>
		  command_cam(CAM1, REBOOT);
 800126c:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <main+0x248>)
 800126e:	2344      	movs	r3, #68	@ 0x44
 8001270:	ca07      	ldmia	r2, {r0, r1, r2}
 8001272:	f7ff fa23 	bl	80006bc <command_cam>
		  command_cam(CAM2, REBOOT);
 8001276:	4a4d      	ldr	r2, [pc, #308]	@ (80013ac <main+0x250>)
 8001278:	2344      	movs	r3, #68	@ 0x44
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	f7ff fa1e 	bl	80006bc <command_cam>
		  command_cam(CAM3, REBOOT);
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <main+0x258>)
 8001282:	2344      	movs	r3, #68	@ 0x44
 8001284:	ca07      	ldmia	r2, {r0, r1, r2}
 8001286:	f7ff fa19 	bl	80006bc <command_cam>
		  command=0;
 800128a:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <main+0x268>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	  }

	  //CAM to DEB
	  if(command==0x45){
 8001290:	4b4c      	ldr	r3, [pc, #304]	@ (80013c4 <main+0x268>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b45      	cmp	r3, #69	@ 0x45
 8001296:	d111      	bne.n	80012bc <main+0x160>
		  command_cam(CAM1, DEB);
 8001298:	4a42      	ldr	r2, [pc, #264]	@ (80013a4 <main+0x248>)
 800129a:	2345      	movs	r3, #69	@ 0x45
 800129c:	ca07      	ldmia	r2, {r0, r1, r2}
 800129e:	f7ff fa0d 	bl	80006bc <command_cam>
		  command_cam(CAM2, DEB);
 80012a2:	4a42      	ldr	r2, [pc, #264]	@ (80013ac <main+0x250>)
 80012a4:	2345      	movs	r3, #69	@ 0x45
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	f7ff fa08 	bl	80006bc <command_cam>
		  command_cam(CAM3, DEB);
 80012ac:	4a41      	ldr	r2, [pc, #260]	@ (80013b4 <main+0x258>)
 80012ae:	2345      	movs	r3, #69	@ 0x45
 80012b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b2:	f7ff fa03 	bl	80006bc <command_cam>
		  command=0;
 80012b6:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <main+0x268>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	  }

	  //Reboot MCU
	  if(command==0x47){
 80012bc:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <main+0x268>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b47      	cmp	r3, #71	@ 0x47
 80012c2:	d102      	bne.n	80012ca <main+0x16e>
		  command=0;
 80012c4:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <main+0x268>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	  }

	  //Start GoPro filming
	  if(command==0x48){
 80012ca:	4b3e      	ldr	r3, [pc, #248]	@ (80013c4 <main+0x268>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b48      	cmp	r3, #72	@ 0x48
 80012d0:	d10b      	bne.n	80012ea <main+0x18e>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d8:	483c      	ldr	r0, [pc, #240]	@ (80013cc <main+0x270>)
 80012da:	f003 fc1f 	bl	8004b1c <HAL_GPIO_WritePin>
		  GoPro=1;
 80012de:	4b3c      	ldr	r3, [pc, #240]	@ (80013d0 <main+0x274>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
		  command=0;
 80012e4:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <main+0x268>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop GoPro filming
	  if(command==0x49){
 80012ea:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <main+0x268>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b49      	cmp	r3, #73	@ 0x49
 80012f0:	d10b      	bne.n	800130a <main+0x1ae>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f8:	4834      	ldr	r0, [pc, #208]	@ (80013cc <main+0x270>)
 80012fa:	f003 fc0f 	bl	8004b1c <HAL_GPIO_WritePin>
		  GoPro=1;
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <main+0x274>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <main+0x268>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn on GoPro
	  if(command==0x4A){
 800130a:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <main+0x268>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b4a      	cmp	r3, #74	@ 0x4a
 8001310:	d10b      	bne.n	800132a <main+0x1ce>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001318:	482c      	ldr	r0, [pc, #176]	@ (80013cc <main+0x270>)
 800131a:	f003 fbff 	bl	8004b1c <HAL_GPIO_WritePin>
		  GoPro=1;
 800131e:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <main+0x274>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <main+0x268>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	  }

	  //Turn off GoPro
	  if(command==0x4B){
 800132a:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <main+0x268>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b4b      	cmp	r3, #75	@ 0x4b
 8001330:	d10b      	bne.n	800134a <main+0x1ee>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001338:	4824      	ldr	r0, [pc, #144]	@ (80013cc <main+0x270>)
 800133a:	f003 fbef 	bl	8004b1c <HAL_GPIO_WritePin>
		  GoPro=1;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <main+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <main+0x268>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase flight REC
	  if(command==0x4C){
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <main+0x268>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001350:	d104      	bne.n	800135c <main+0x200>
		  Chip_Erase();
 8001352:	f7ff fbe3 	bl	8000b1c <Chip_Erase>
		  command=0;
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <main+0x268>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
	  }

	  //Start fligt REC
	  if(command==0x4D){
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <main+0x268>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b4d      	cmp	r3, #77	@ 0x4d
 8001362:	d109      	bne.n	8001378 <main+0x21c>
		  CAN_SendMessage(0x100);
 8001364:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001368:	f7ff f9be 	bl	80006e8 <CAN_SendMessage>
		  Start_Flight_Recording=1;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <main+0x278>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <main+0x268>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop flight REC
	  if(command==0x4E){
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <main+0x268>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b4e      	cmp	r3, #78	@ 0x4e
 800137e:	d105      	bne.n	800138c <main+0x230>
		  Start_Flight_Recording=0;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <main+0x278>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		  command=0;
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <main+0x268>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	  }

	  //Read flight REC
	  if(command==0x52){
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <main+0x268>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b52      	cmp	r3, #82	@ 0x52
 8001392:	f47f af1a 	bne.w	80011ca <main+0x6e>
		  Read_Data_Cont(16);
 8001396:	2010      	movs	r0, #16
 8001398:	f7ff fc2a 	bl	8000bf0 <Read_Data_Cont>
		  command = 0;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <main+0x268>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 80013a2:	e712      	b.n	80011ca <main+0x6e>
 80013a4:	240010b4 	.word	0x240010b4
 80013a8:	240010b8 	.word	0x240010b8
 80013ac:	240010c0 	.word	0x240010c0
 80013b0:	240010c4 	.word	0x240010c4
 80013b4:	240010cc 	.word	0x240010cc
 80013b8:	240010d0 	.word	0x240010d0
 80013bc:	240000a4 	.word	0x240000a4
 80013c0:	2400009c 	.word	0x2400009c
 80013c4:	2400007d 	.word	0x2400007d
 80013c8:	24001408 	.word	0x24001408
 80013cc:	58020c00 	.word	0x58020c00
 80013d0:	2400007e 	.word	0x2400007e
 80013d4:	2400007c 	.word	0x2400007c

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09c      	sub	sp, #112	@ 0x70
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	224c      	movs	r2, #76	@ 0x4c
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 fdba 	bl	800af60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2220      	movs	r2, #32
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 fdb4 	bl	800af60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f003 fba9 	bl	8004b50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <SystemClock_Config+0xf0>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <SystemClock_Config+0xf0>)
 8001408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <SystemClock_Config+0xf0>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <SystemClock_Config+0xf4>)
 800141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141c:	4a2b      	ldr	r2, [pc, #172]	@ (80014cc <SystemClock_Config+0xf4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <SystemClock_Config+0xf4>)
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001430:	bf00      	nop
 8001432:	4b25      	ldr	r3, [pc, #148]	@ (80014c8 <SystemClock_Config+0xf0>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800143a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800143e:	d1f8      	bne.n	8001432 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001440:	2302      	movs	r3, #2
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001444:	2301      	movs	r3, #1
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001448:	2340      	movs	r3, #64	@ 0x40
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001450:	2300      	movs	r3, #0
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001458:	233c      	movs	r3, #60	@ 0x3c
 800145a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001460:	230a      	movs	r3, #10
 8001462:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001464:	2302      	movs	r3, #2
 8001466:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001468:	230c      	movs	r3, #12
 800146a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800146c:	2300      	movs	r3, #0
 800146e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fba3 	bl	8004bc4 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001484:	f000 fbac 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	233f      	movs	r3, #63	@ 0x3f
 800148a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2303      	movs	r3, #3
 800148e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001494:	2308      	movs	r3, #8
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014a6:	2340      	movs	r3, #64	@ 0x40
 80014a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2104      	movs	r1, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 ffe2 	bl	8005478 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014ba:	f000 fb91 	bl	8001be0 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3770      	adds	r7, #112	@ 0x70
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	58024800 	.word	0x58024800
 80014cc:	58000400 	.word	0x58000400

080014d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <MX_FDCAN1_Init+0x108>)
 80014d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014dc:	4a3e      	ldr	r2, [pc, #248]	@ (80015d8 <MX_FDCAN1_Init+0x108>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <MX_FDCAN1_Init+0x108>)
 80014e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80014ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014f4:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 80014f6:	4a3a      	ldr	r2, [pc, #232]	@ (80015e0 <MX_FDCAN1_Init+0x110>)
 80014f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001506:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001508:	2200      	movs	r2, #0
 800150a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800150e:	2200      	movs	r2, #0
 8001510:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001514:	2200      	movs	r2, #0
 8001516:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800151a:	2201      	movs	r2, #1
 800151c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001520:	2202      	movs	r2, #2
 8001522:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001526:	2205      	movs	r2, #5
 8001528:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800152a:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800152c:	2202      	movs	r2, #2
 800152e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001532:	2201      	movs	r2, #1
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001538:	2203      	movs	r2, #3
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800153e:	2204      	movs	r2, #4
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001544:	2203      	movs	r2, #3
 8001546:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001550:	2200      	movs	r2, #0
 8001552:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001556:	2200      	movs	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800155c:	2240      	movs	r2, #64	@ 0x40
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001562:	2204      	movs	r2, #4
 8001564:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001568:	2200      	movs	r2, #0
 800156a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800156e:	2204      	movs	r2, #4
 8001570:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001574:	2200      	movs	r2, #0
 8001576:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800157a:	2204      	movs	r2, #4
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001580:	2200      	movs	r2, #0
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001586:	2200      	movs	r2, #0
 8001588:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800158c:	2202      	movs	r2, #2
 800158e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001592:	2200      	movs	r2, #0
 8001594:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 8001598:	2204      	movs	r2, #4
 800159a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800159c:	480f      	ldr	r0, [pc, #60]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 800159e:	f001 ffb5 	bl	800350c <HAL_FDCAN_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80015a8:	f000 fb1a 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 80015ae:	f002 f98b 	bl	80038c8 <HAL_FDCAN_Start>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80015b8:	f000 fb12 	bl	8001be0 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_FDCAN1_Init+0x10c>)
 80015c2:	f002 fb73 	bl	8003cac <HAL_FDCAN_ActivateNotification>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80015cc:	f000 fb08 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	58024400 	.word	0x58024400
 80015dc:	24001124 	.word	0x24001124
 80015e0:	4000a000 	.word	0x4000a000

080015e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <MX_SPI1_Init+0xa4>)
 80015ea:	4a28      	ldr	r2, [pc, #160]	@ (800168c <MX_SPI1_Init+0xa8>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <MX_SPI1_Init+0xa4>)
 80015f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <MX_SPI1_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <MX_SPI1_Init+0xa4>)
 80015fe:	2207      	movs	r2, #7
 8001600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <MX_SPI1_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001610:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800161c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_SPI1_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001638:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_SPI1_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <MX_SPI1_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <MX_SPI1_Init+0xa4>)
 800166a:	2200      	movs	r2, #0
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_SPI1_Init+0xa4>)
 8001676:	f006 f8b7 	bl	80077e8 <HAL_SPI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001680:	f000 faae 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	240011c4 	.word	0x240011c4
 800168c:	40013000 	.word	0x40013000

08001690 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <MX_UART5_Init+0x90>)
 8001696:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <MX_UART5_Init+0x94>)
 8001698:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <MX_UART5_Init+0x90>)
 800169c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <MX_UART5_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_UART5_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <MX_UART5_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_UART5_Init+0x90>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <MX_UART5_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_UART5_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <MX_UART5_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_UART5_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_UART5_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016d8:	4811      	ldr	r0, [pc, #68]	@ (8001720 <MX_UART5_Init+0x90>)
 80016da:	f006 fef2 	bl	80084c2 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 fa7c 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_UART5_Init+0x90>)
 80016ec:	f009 fb31 	bl	800ad52 <HAL_UARTEx_SetTxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80016f6:	f000 fa73 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4808      	ldr	r0, [pc, #32]	@ (8001720 <MX_UART5_Init+0x90>)
 80016fe:	f009 fb66 	bl	800adce <HAL_UARTEx_SetRxFifoThreshold>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001708:	f000 fa6a 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_UART5_Init+0x90>)
 800170e:	f009 fae7 	bl	800ace0 <HAL_UARTEx_DisableFifoMode>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001718:	f000 fa62 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2400124c 	.word	0x2400124c
 8001724:	40005000 	.word	0x40005000

08001728 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800172c:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <MX_UART8_Init+0x90>)
 800172e:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <MX_UART8_Init+0x94>)
 8001730:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001734:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001738:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <MX_UART8_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001746:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <MX_UART8_Init+0x90>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MX_UART8_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <MX_UART8_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001770:	4811      	ldr	r0, [pc, #68]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001772:	f006 fea6 	bl	80084c2 <HAL_UART_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800177c:	f000 fa30 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001784:	f009 fae5 	bl	800ad52 <HAL_UARTEx_SetTxFifoThreshold>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800178e:	f000 fa27 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4808      	ldr	r0, [pc, #32]	@ (80017b8 <MX_UART8_Init+0x90>)
 8001796:	f009 fb1a 	bl	800adce <HAL_UARTEx_SetRxFifoThreshold>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80017a0:	f000 fa1e 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <MX_UART8_Init+0x90>)
 80017a6:	f009 fa9b 	bl	800ace0 <HAL_UARTEx_DisableFifoMode>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80017b0:	f000 fa16 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	240012e0 	.word	0x240012e0
 80017bc:	40007c00 	.word	0x40007c00

080017c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017c6:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <MX_USART2_UART_Init+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001808:	4811      	ldr	r0, [pc, #68]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 800180a:	f006 fe5a 	bl	80084c2 <HAL_UART_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001814:	f000 f9e4 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 800181c:	f009 fa99 	bl	800ad52 <HAL_UARTEx_SetTxFifoThreshold>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001826:	f000 f9db 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	4808      	ldr	r0, [pc, #32]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 800182e:	f009 face 	bl	800adce <HAL_UARTEx_SetRxFifoThreshold>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 f9d2 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <MX_USART2_UART_Init+0x90>)
 800183e:	f009 fa4f 	bl	800ace0 <HAL_UARTEx_DisableFifoMode>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001848:	f000 f9ca 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24001374 	.word	0x24001374
 8001854:	40004400 	.word	0x40004400

08001858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 800185e:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <MX_USART3_UART_Init+0x94>)
 8001860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001864:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 80018a2:	f006 fe0e 	bl	80084c2 <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018ac:	f000 f998 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 80018b4:	f009 fa4d 	bl	800ad52 <HAL_UARTEx_SetTxFifoThreshold>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018be:	f000 f98f 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 80018c6:	f009 fa82 	bl	800adce <HAL_UARTEx_SetRxFifoThreshold>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 f986 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_USART3_UART_Init+0x90>)
 80018d6:	f009 fa03 	bl	800ace0 <HAL_UARTEx_DisableFifoMode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f000 f97e 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	24001408 	.word	0x24001408
 80018ec:	40004800 	.word	0x40004800

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a84 <MX_GPIO_Init+0x194>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001924:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192a:	4a56      	ldr	r2, [pc, #344]	@ (8001a84 <MX_GPIO_Init+0x194>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	4a4e      	ldr	r2, [pc, #312]	@ (8001a84 <MX_GPIO_Init+0x194>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001952:	4b4c      	ldr	r3, [pc, #304]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b48      	ldr	r3, [pc, #288]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	4a47      	ldr	r2, [pc, #284]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001970:	4b44      	ldr	r3, [pc, #272]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a3f      	ldr	r2, [pc, #252]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <MX_GPIO_Init+0x194>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <MX_GPIO_Init+0x194>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	4a38      	ldr	r2, [pc, #224]	@ (8001a84 <MX_GPIO_Init+0x194>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ac:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <MX_GPIO_Init+0x194>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2110      	movs	r1, #16
 80019be:	4832      	ldr	r0, [pc, #200]	@ (8001a88 <MX_GPIO_Init+0x198>)
 80019c0:	f003 f8ac 	bl	8004b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GOPRO_GPIO_Port, GOPRO_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ca:	4830      	ldr	r0, [pc, #192]	@ (8001a8c <MX_GPIO_Init+0x19c>)
 80019cc:	f003 f8a6 	bl	8004b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2118      	movs	r1, #24
 80019d4:	482e      	ldr	r0, [pc, #184]	@ (8001a90 <MX_GPIO_Init+0x1a0>)
 80019d6:	f003 f8a1 	bl	8004b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM2_PWR_Pin */
  GPIO_InitStruct.Pin = CAM2_PWR_Pin;
 80019da:	2308      	movs	r3, #8
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM2_PWR_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4829      	ldr	r0, [pc, #164]	@ (8001a94 <MX_GPIO_Init+0x1a4>)
 80019ee:	f002 fee5 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM1_PWR_Pin */
  GPIO_InitStruct.Pin = CAM1_PWR_Pin;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM1_PWR_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4824      	ldr	r0, [pc, #144]	@ (8001a98 <MX_GPIO_Init+0x1a8>)
 8001a06:	f002 fed9 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4819      	ldr	r0, [pc, #100]	@ (8001a88 <MX_GPIO_Init+0x198>)
 8001a22:	f002 fecb 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM3_PWR_Pin */
  GPIO_InitStruct.Pin = CAM3_PWR_Pin;
 8001a26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAM3_PWR_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4818      	ldr	r0, [pc, #96]	@ (8001a9c <MX_GPIO_Init+0x1ac>)
 8001a3c:	f002 febe 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GOPRO_Pin */
  GPIO_InitStruct.Pin = GOPRO_Pin;
 8001a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GOPRO_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x19c>)
 8001a5a:	f002 feaf 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|GREEN_LED_Pin;
 8001a5e:	2318      	movs	r3, #24
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <MX_GPIO_Init+0x1a0>)
 8001a76:	f002 fea1 	bl	80047bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	@ 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58020000 	.word	0x58020000
 8001a8c:	58020c00 	.word	0x58020c00
 8001a90:	58021800 	.word	0x58021800
 8001a94:	58021000 	.word	0x58021000
 8001a98:	58020800 	.word	0x58020800
 8001a9c:	58020400 	.word	0x58020400

08001aa0 <init>:

/* USER CODE BEGIN 4 */
static void init(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <init+0xc0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <init+0xc0>)
 8001aae:	22a0      	movs	r2, #160	@ 0xa0
 8001ab0:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <init+0xc0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <init+0xc0>)
 8001aba:	22b0      	movs	r2, #176	@ 0xb0
 8001abc:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <init+0xc0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <init+0xc0>)
 8001ac6:	22c0      	movs	r2, #192	@ 0xc0
 8001ac8:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <init+0xc4>)
 8001acc:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ad4:	21ff      	movs	r1, #255	@ 0xff
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 fa42 	bl	800af60 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ae6:	21ff      	movs	r1, #255	@ 0xff
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f009 fa39 	bl	800af60 <memset>
	Flash.Buffer_Index = 0;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <init+0xc4>)
 8001af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af4:	2200      	movs	r2, #0
 8001af6:	80da      	strh	r2, [r3, #6]
	Flash.Buffer_Select = 0;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <init+0xc4>)
 8001afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	Flash.Block_Mem = 0;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <init+0xc4>)
 8001b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b08:	2200      	movs	r2, #0
 8001b0a:	805a      	strh	r2, [r3, #2]
	Flash.Page_Index = 0;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <init+0xc4>)
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b12:	2200      	movs	r2, #0
 8001b14:	809a      	strh	r2, [r3, #4]
	Flash.ID = 0;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <init+0xc4>)
 8001b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	6093      	str	r3, [r2, #8]
	Flash.Buffer_p = Flash.Buffer_0;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <init+0xc4>)
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <init+0xc4>)
 8001b2c:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <init+0xc8>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <init+0xc8>)
 8001b34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b38:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <init+0xcc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b6c <init+0xcc>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]

	CAM1.huart = &huart2;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <init+0xd0>)
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <init+0xd4>)
 8001b4a:	609a      	str	r2, [r3, #8]
	CAM2.huart = &huart8;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <init+0xd8>)
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b7c <init+0xdc>)
 8001b50:	609a      	str	r2, [r3, #8]
	CAM3.huart = &huart5;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <init+0xe0>)
 8001b54:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <init+0xe4>)
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2400009c 	.word	0x2400009c
 8001b64:	240000a4 	.word	0x240000a4
 8001b68:	e000edf0 	.word	0xe000edf0
 8001b6c:	e0001000 	.word	0xe0001000
 8001b70:	240010b4 	.word	0x240010b4
 8001b74:	24001374 	.word	0x24001374
 8001b78:	240010c0 	.word	0x240010c0
 8001b7c:	240012e0 	.word	0x240012e0
 8001b80:	240010cc 	.word	0x240010cc
 8001b84:	2400124c 	.word	0x2400124c

08001b88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b9a:	f000 fedb 	bl	8002954 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001baa:	231f      	movs	r3, #31
 8001bac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001bae:	2387      	movs	r3, #135	@ 0x87
 8001bb0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fef9 	bl	80029c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f000 fed6 	bl	8002984 <HAL_MPU_Enable>

}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <Error_Handler+0x10>)
 8001be6:	f001 fe6f 	bl	80038c8 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	24001124 	.word	0x24001124

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_MspInit+0x30>)
 8001bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c00:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_MspInit+0x30>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_MspInit+0x30>)
 8001c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	58024400 	.word	0x58024400

08001c28 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0ba      	sub	sp, #232	@ 0xe8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	22c0      	movs	r2, #192	@ 0xc0
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f009 f989 	bl	800af60 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a33      	ldr	r2, [pc, #204]	@ (8001d20 <HAL_FDCAN_MspInit+0xf8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d15f      	bne.n	8001d18 <HAL_FDCAN_MspInit+0xf0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001c70:	2314      	movs	r3, #20
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c78:	23c0      	movs	r3, #192	@ 0xc0
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001c84:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 ff7d 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001c9c:	f7ff ffa0 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001ca2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cac:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001cb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc4:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_FDCAN_MspInit+0xfc>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <HAL_FDCAN_MspInit+0x100>)
 8001d04:	f002 fd5a 	bl	80047bc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2013      	movs	r0, #19
 8001d0e:	f000 fdec 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d12:	2013      	movs	r0, #19
 8001d14:	f000 fe03 	bl	800291e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001d18:	bf00      	nop
 8001d1a:	37e8      	adds	r7, #232	@ 0xe8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	4000a000 	.word	0x4000a000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58020400 	.word	0x58020400

08001d2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	22c0      	movs	r2, #192	@ 0xc0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f009 f907 	bl	800af60 <memset>
  if(hspi->Instance==SPI1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a26      	ldr	r2, [pc, #152]	@ (8001df0 <HAL_SPI_MspInit+0xc4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d144      	bne.n	8001de6 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 ff0d 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001d7c:	f7ff ff30 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da4:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_SPI_MspInit+0xc8>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dbc:	23e0      	movs	r3, #224	@ 0xe0
 8001dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <HAL_SPI_MspInit+0xcc>)
 8001de2:	f002 fceb 	bl	80047bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001de6:	bf00      	nop
 8001de8:	37e8      	adds	r7, #232	@ 0xe8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40013000 	.word	0x40013000
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58020000 	.word	0x58020000

08001dfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0c0      	sub	sp, #256	@ 0x100
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e18:	22c0      	movs	r2, #192	@ 0xc0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f009 f89f 	bl	800af60 <memset>
  if(huart->Instance==UART5)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4aa6      	ldr	r2, [pc, #664]	@ (80020c0 <HAL_UART_MspInit+0x2c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d14f      	bne.n	8001ecc <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e2c:	f04f 0202 	mov.w	r2, #2
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fea4 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e4e:	f7ff fec7 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e52:	4b9c      	ldr	r3, [pc, #624]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e58:	4a9a      	ldr	r2, [pc, #616]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e62:	4b98      	ldr	r3, [pc, #608]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e70:	4b94      	ldr	r3, [pc, #592]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e76:	4a93      	ldr	r2, [pc, #588]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e80:	4b90      	ldr	r3, [pc, #576]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001ea8:	230e      	movs	r3, #14
 8001eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4884      	ldr	r0, [pc, #528]	@ (80020c8 <HAL_UART_MspInit+0x2cc>)
 8001eb6:	f002 fc81 	bl	80047bc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2035      	movs	r0, #53	@ 0x35
 8001ec0:	f000 fd13 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ec4:	2035      	movs	r0, #53	@ 0x35
 8001ec6:	f000 fd2a 	bl	800291e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eca:	e0f3      	b.n	80020b4 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==UART8)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7e      	ldr	r2, [pc, #504]	@ (80020cc <HAL_UART_MspInit+0x2d0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d14e      	bne.n	8001f74 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001ed6:	f04f 0202 	mov.w	r2, #2
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fe4f 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001ef8:	f7ff fe72 	bl	8001be0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001efc:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f02:	4a70      	ldr	r2, [pc, #448]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f20:	4a68      	ldr	r2, [pc, #416]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f2a:	4b66      	ldr	r3, [pc, #408]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f50:	2308      	movs	r3, #8
 8001f52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f56:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	485c      	ldr	r0, [pc, #368]	@ (80020d0 <HAL_UART_MspInit+0x2d4>)
 8001f5e:	f002 fc2d 	bl	80047bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2053      	movs	r0, #83	@ 0x53
 8001f68:	f000 fcbf 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f6c:	2053      	movs	r0, #83	@ 0x53
 8001f6e:	f000 fcd6 	bl	800291e <HAL_NVIC_EnableIRQ>
}
 8001f72:	e09f      	b.n	80020b4 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <HAL_UART_MspInit+0x2d8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d14e      	bne.n	800201c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7e:	f04f 0202 	mov.w	r2, #2
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fdfb 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001fa0:	f7ff fe1e 	bl	8001be0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa4:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001faa:	4a46      	ldr	r2, [pc, #280]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b40      	ldr	r3, [pc, #256]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002002:	4619      	mov	r1, r3
 8002004:	4834      	ldr	r0, [pc, #208]	@ (80020d8 <HAL_UART_MspInit+0x2dc>)
 8002006:	f002 fbd9 	bl	80047bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2026      	movs	r0, #38	@ 0x26
 8002010:	f000 fc6b 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002014:	2026      	movs	r0, #38	@ 0x26
 8002016:	f000 fc82 	bl	800291e <HAL_NVIC_EnableIRQ>
}
 800201a:	e04b      	b.n	80020b4 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2e      	ldr	r2, [pc, #184]	@ (80020dc <HAL_UART_MspInit+0x2e0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d146      	bne.n	80020b4 <HAL_UART_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002026:	f04f 0202 	mov.w	r2, #2
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fda7 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x250>
      Error_Handler();
 8002048:	f7ff fdca 	bl	8001be0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 800204e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002052:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 800205e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_UART_MspInit+0x2c8>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002088:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800208c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a2:	2307      	movs	r3, #7
 80020a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020ac:	4619      	mov	r1, r3
 80020ae:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <HAL_UART_MspInit+0x2e4>)
 80020b0:	f002 fb84 	bl	80047bc <HAL_GPIO_Init>
}
 80020b4:	bf00      	nop
 80020b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40005000 	.word	0x40005000
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58020400 	.word	0x58020400
 80020cc:	40007c00 	.word	0x40007c00
 80020d0:	58021000 	.word	0x58021000
 80020d4:	40004400 	.word	0x40004400
 80020d8:	58020000 	.word	0x58020000
 80020dc:	40004800 	.word	0x40004800
 80020e0:	58020c00 	.word	0x58020c00

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <NMI_Handler+0x4>

080020ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <MemManage_Handler+0x4>

080020fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <UsageFault_Handler+0x4>

0800210c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	blink++;
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <SysTick_Handler+0x80>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <SysTick_Handler+0x80>)
 8002146:	801a      	strh	r2, [r3, #0]
	if(blink>=500){
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <SysTick_Handler+0x80>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002150:	d308      	bcc.n	8002164 <SysTick_Handler+0x2c>
		GPIOG->ODR^=GPIO_PIN_3;
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <SysTick_Handler+0x84>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <SysTick_Handler+0x84>)
 8002158:	f083 0308 	eor.w	r3, r3, #8
 800215c:	6153      	str	r3, [r2, #20]
		blink=0;
 800215e:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <SysTick_Handler+0x80>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002164:	f000 faba 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <SysTick_Handler+0x88>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <SysTick_Handler+0x44>
	  CLK_SIM++;
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <SysTick_Handler+0x8c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <SysTick_Handler+0x8c>)
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e002      	b.n	8002182 <SysTick_Handler+0x4a>
  }
  else{
	  CLK_SIM=0;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <SysTick_Handler+0x8c>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  }

  if(GoPro){
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <SysTick_Handler+0x90>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d014      	beq.n	80021b4 <SysTick_Handler+0x7c>
	  GoPro_timer++;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <SysTick_Handler+0x94>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a0e      	ldr	r2, [pc, #56]	@ (80021cc <SysTick_Handler+0x94>)
 8002192:	6013      	str	r3, [r2, #0]
	  if(GoPro_timer>=GOPRO_MAX){
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <SysTick_Handler+0x94>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b63      	cmp	r3, #99	@ 0x63
 800219a:	d90b      	bls.n	80021b4 <SysTick_Handler+0x7c>
		  HAL_GPIO_WritePin (GPIOD, GOPRO_Pin, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021a2:	480b      	ldr	r0, [pc, #44]	@ (80021d0 <SysTick_Handler+0x98>)
 80021a4:	f002 fcba 	bl	8004b1c <HAL_GPIO_WritePin>
		  GoPro_timer=0;
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <SysTick_Handler+0x94>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
		  GoPro=0;
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <SysTick_Handler+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	240014a4 	.word	0x240014a4
 80021bc:	58021800 	.word	0x58021800
 80021c0:	2400007c 	.word	0x2400007c
 80021c4:	2400149c 	.word	0x2400149c
 80021c8:	2400007e 	.word	0x2400007e
 80021cc:	240014a0 	.word	0x240014a0
 80021d0:	58020c00 	.word	0x58020c00

080021d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80021da:	f001 fde1 	bl	8003da0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24001124 	.word	0x24001124

080021e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <USART2_IRQHandler+0x10>)
 80021ee:	f006 fb5b 	bl	80088a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24001374 	.word	0x24001374

080021fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <UART5_IRQHandler+0x10>)
 8002202:	f006 fb51 	bl	80088a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2400124c 	.word	0x2400124c

08002210 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <UART8_IRQHandler+0x10>)
 8002216:	f006 fb47 	bl	80088a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	240012e0 	.word	0x240012e0

08002224 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 800222e:	e071      	b.n	8002314 <HAL_FDCAN_RxFifo0Callback+0xf0>
		//CAN ID = 401 is CAN message for commands to black box
		if(RxHeader.Identifier == 401){
 8002230:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f240 1291 	movw	r2, #401	@ 0x191
 8002238:	4293      	cmp	r3, r2
 800223a:	d109      	bne.n	8002250 <HAL_FDCAN_RxFifo0Callback+0x2c>
			if(CAN.Rx_Buffer[6] == CAN.Rx_Buffer[7]){
 800223c:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800223e:	7b9a      	ldrb	r2, [r3, #14]
 8002240:	4b3c      	ldr	r3, [pc, #240]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 8002242:	7bdb      	ldrb	r3, [r3, #15]
 8002244:	429a      	cmp	r2, r3
 8002246:	d103      	bne.n	8002250 <HAL_FDCAN_RxFifo0Callback+0x2c>
				command = CAN.Rx_Buffer[6];
 8002248:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 800224a:	7b9a      	ldrb	r2, [r3, #14]
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_FDCAN_RxFifo0Callback+0x114>)
 800224e:	701a      	strb	r2, [r3, #0]
			}

		}
		//CAN ID = 402 is CAN message for manual update of current page
		if(RxHeader.Identifier == 402){
 8002250:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f5b3 7fc9 	cmp.w	r3, #402	@ 0x192
 8002258:	d11c      	bne.n	8002294 <HAL_FDCAN_RxFifo0Callback+0x70>
			uint16_t Page = *(uint16_t*)&CAN.Rx_Buffer[6];
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_FDCAN_RxFifo0Callback+0x118>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	83fb      	strh	r3, [r7, #30]

			Automatic_Block_Managment(Page);
 8002260:	8bfb      	ldrh	r3, [r7, #30]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fc34 	bl	8000ad0 <Automatic_Block_Managment>

			Flash.Buffer_Index=0;
 8002268:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	2200      	movs	r2, #0
 8002270:	80da      	strh	r2, [r3, #6]
			Flash.Page_Index=Page;
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002278:	461a      	mov	r2, r3
 800227a:	8bfb      	ldrh	r3, [r7, #30]
 800227c:	8093      	strh	r3, [r2, #4]
			Flash.Buffer_Select=0;
 800227e:	4b30      	ldr	r3, [pc, #192]	@ (8002340 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
			Flash.Buffer_p=Flash.Buffer_0;
 8002288:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800228a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228e:	461a      	mov	r2, r3
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8002292:	60d3      	str	r3, [r2, #12]
		}

		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8002294:	23f0      	movs	r3, #240	@ 0xf0
 8002296:	733b      	strb	r3, [r7, #12]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	3301      	adds	r3, #1
 80022a2:	b292      	uxth	r2, r2
 80022a4:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 80022a6:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	73fb      	strb	r3, [r7, #15]
		Temp[4]=CAN.Rx_Buffer[1];
 80022ac:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022ae:	7a5b      	ldrb	r3, [r3, #9]
 80022b0:	743b      	strb	r3, [r7, #16]
		Temp[5]=CAN.Rx_Buffer[2];
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022b4:	7a9b      	ldrb	r3, [r3, #10]
 80022b6:	747b      	strb	r3, [r7, #17]
		Temp[6]=CAN.Rx_Buffer[3];
 80022b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022ba:	7adb      	ldrb	r3, [r3, #11]
 80022bc:	74bb      	strb	r3, [r7, #18]
		Temp[7]=CAN.Rx_Buffer[4];
 80022be:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022c0:	7b1b      	ldrb	r3, [r3, #12]
 80022c2:	74fb      	strb	r3, [r7, #19]
		Temp[8]=CAN.Rx_Buffer[5];
 80022c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022c6:	7b5b      	ldrb	r3, [r3, #13]
 80022c8:	753b      	strb	r3, [r7, #20]
		Temp[9]=CAN.Rx_Buffer[6];
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022cc:	7b9b      	ldrb	r3, [r3, #14]
 80022ce:	757b      	strb	r3, [r7, #21]
		Temp[10]=CAN.Rx_Buffer[7];
 80022d0:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_FDCAN_RxFifo0Callback+0x110>)
 80022d2:	7bdb      	ldrb	r3, [r3, #15]
 80022d4:	75bb      	strb	r3, [r7, #22]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	75fb      	strb	r3, [r7, #23]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	763b      	strb	r3, [r7, #24]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	767b      	strb	r3, [r7, #25]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 80022f2:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e1b      	lsrs	r3, r3, #24
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	76bb      	strb	r3, [r7, #26]

		//Stop byte
		Temp[15]=0x0F;
 80022fc:	230f      	movs	r3, #15
 80022fe:	76fb      	strb	r3, [r7, #27]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_FDCAN_RxFifo0Callback+0xf0>
			Write_Data(Temp, sizeof(Temp));
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2110      	movs	r1, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fb24 	bl	800095c <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_FDCAN_RxFifo0Callback+0x128>)
 8002316:	4a06      	ldr	r2, [pc, #24]	@ (8002330 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8002318:	2140      	movs	r1, #64	@ 0x40
 800231a:	480d      	ldr	r0, [pc, #52]	@ (8002350 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800231c:	f001 fb5a 	bl	80039d4 <HAL_FDCAN_GetRxMessage>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d084      	beq.n	8002230 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	240010d8 	.word	0x240010d8
 8002334:	24000080 	.word	0x24000080
 8002338:	2400007d 	.word	0x2400007d
 800233c:	2400008e 	.word	0x2400008e
 8002340:	240000a4 	.word	0x240000a4
 8002344:	2400149c 	.word	0x2400149c
 8002348:	2400007c 	.word	0x2400007c
 800234c:	24000088 	.word	0x24000088
 8002350:	24001124 	.word	0x24001124

08002354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	if(huart == CAM1.huart)HAL_UART_Receive_IT(CAM1.huart, CAM1.Status, 2);
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_UART_RxCpltCallback+0x58>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d106      	bne.n	8002374 <HAL_UART_RxCpltCallback+0x20>
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_UART_RxCpltCallback+0x58>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2202      	movs	r2, #2
 800236c:	4910      	ldr	r1, [pc, #64]	@ (80023b0 <HAL_UART_RxCpltCallback+0x5c>)
 800236e:	4618      	mov	r0, r3
 8002370:	f006 fa4e 	bl	8008810 <HAL_UART_Receive_IT>
	if(huart == CAM2.huart)HAL_UART_Receive_IT(CAM2.huart, CAM2.Status, 2);
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_UART_RxCpltCallback+0x60>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d106      	bne.n	800238c <HAL_UART_RxCpltCallback+0x38>
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <HAL_UART_RxCpltCallback+0x60>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2202      	movs	r2, #2
 8002384:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <HAL_UART_RxCpltCallback+0x64>)
 8002386:	4618      	mov	r0, r3
 8002388:	f006 fa42 	bl	8008810 <HAL_UART_Receive_IT>
	if(huart == CAM3.huart)HAL_UART_Receive_IT(CAM3.huart, CAM3.Status, 2);
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_UART_RxCpltCallback+0x68>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d106      	bne.n	80023a4 <HAL_UART_RxCpltCallback+0x50>
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_UART_RxCpltCallback+0x68>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2202      	movs	r2, #2
 800239c:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <HAL_UART_RxCpltCallback+0x6c>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 fa36 	bl	8008810 <HAL_UART_Receive_IT>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	240010b4 	.word	0x240010b4
 80023b0:	240010b8 	.word	0x240010b8
 80023b4:	240010c0 	.word	0x240010c0
 80023b8:	240010c4 	.word	0x240010c4
 80023bc:	240010cc 	.word	0x240010cc
 80023c0:	240010d0 	.word	0x240010d0

080023c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023cc:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <_sbrk+0x5c>)
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <_sbrk+0x60>)
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <_sbrk+0x64>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <_sbrk+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d207      	bcs.n	8002404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f4:	f008 fdbc 	bl	800af70 <__errno>
 80023f8:	4603      	mov	r3, r0
 80023fa:	220c      	movs	r2, #12
 80023fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	e009      	b.n	8002418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002404:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <_sbrk+0x64>)
 8002414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	24080000 	.word	0x24080000
 8002424:	00000400 	.word	0x00000400
 8002428:	240014a8 	.word	0x240014a8
 800242c:	240015f8 	.word	0x240015f8

08002430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002434:	4b43      	ldr	r3, [pc, #268]	@ (8002544 <SystemInit+0x114>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	4a42      	ldr	r2, [pc, #264]	@ (8002544 <SystemInit+0x114>)
 800243c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <SystemInit+0x118>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	2b06      	cmp	r3, #6
 800244e:	d807      	bhi.n	8002460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002450:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <SystemInit+0x118>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 030f 	bic.w	r3, r3, #15
 8002458:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <SystemInit+0x118>)
 800245a:	f043 0307 	orr.w	r3, r3, #7
 800245e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002460:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <SystemInit+0x11c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a39      	ldr	r2, [pc, #228]	@ (800254c <SystemInit+0x11c>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800246c:	4b37      	ldr	r3, [pc, #220]	@ (800254c <SystemInit+0x11c>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002472:	4b36      	ldr	r3, [pc, #216]	@ (800254c <SystemInit+0x11c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4935      	ldr	r1, [pc, #212]	@ (800254c <SystemInit+0x11c>)
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <SystemInit+0x120>)
 800247a:	4013      	ands	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800247e:	4b32      	ldr	r3, [pc, #200]	@ (8002548 <SystemInit+0x118>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <SystemInit+0x118>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 030f 	bic.w	r3, r3, #15
 8002492:	4a2d      	ldr	r2, [pc, #180]	@ (8002548 <SystemInit+0x118>)
 8002494:	f043 0307 	orr.w	r3, r3, #7
 8002498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800249a:	4b2c      	ldr	r3, [pc, #176]	@ (800254c <SystemInit+0x11c>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024a0:	4b2a      	ldr	r3, [pc, #168]	@ (800254c <SystemInit+0x11c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <SystemInit+0x11c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024ac:	4b27      	ldr	r3, [pc, #156]	@ (800254c <SystemInit+0x11c>)
 80024ae:	4a29      	ldr	r2, [pc, #164]	@ (8002554 <SystemInit+0x124>)
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024b2:	4b26      	ldr	r3, [pc, #152]	@ (800254c <SystemInit+0x11c>)
 80024b4:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <SystemInit+0x128>)
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <SystemInit+0x11c>)
 80024ba:	4a28      	ldr	r2, [pc, #160]	@ (800255c <SystemInit+0x12c>)
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024be:	4b23      	ldr	r3, [pc, #140]	@ (800254c <SystemInit+0x11c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024c4:	4b21      	ldr	r3, [pc, #132]	@ (800254c <SystemInit+0x11c>)
 80024c6:	4a25      	ldr	r2, [pc, #148]	@ (800255c <SystemInit+0x12c>)
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <SystemInit+0x11c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <SystemInit+0x11c>)
 80024d2:	4a22      	ldr	r2, [pc, #136]	@ (800255c <SystemInit+0x12c>)
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <SystemInit+0x11c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <SystemInit+0x11c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1a      	ldr	r2, [pc, #104]	@ (800254c <SystemInit+0x11c>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <SystemInit+0x11c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <SystemInit+0x130>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <SystemInit+0x134>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024fa:	d202      	bcs.n	8002502 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <SystemInit+0x138>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <SystemInit+0x11c>)
 8002504:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d113      	bne.n	8002538 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002510:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <SystemInit+0x11c>)
 8002512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002516:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <SystemInit+0x11c>)
 8002518:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800251c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <SystemInit+0x13c>)
 8002522:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002526:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <SystemInit+0x11c>)
 800252a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800252e:	4a07      	ldr	r2, [pc, #28]	@ (800254c <SystemInit+0x11c>)
 8002530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002534:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	52002000 	.word	0x52002000
 800254c:	58024400 	.word	0x58024400
 8002550:	eaf6ed7f 	.word	0xeaf6ed7f
 8002554:	02020200 	.word	0x02020200
 8002558:	01ff0000 	.word	0x01ff0000
 800255c:	01010280 	.word	0x01010280
 8002560:	5c001000 	.word	0x5c001000
 8002564:	ffff0000 	.word	0xffff0000
 8002568:	51008108 	.word	0x51008108
 800256c:	52004000 	.word	0x52004000

08002570 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <ExitRun0Mode+0x2c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a08      	ldr	r2, [pc, #32]	@ (800259c <ExitRun0Mode+0x2c>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002580:	bf00      	nop
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <ExitRun0Mode+0x2c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f9      	beq.n	8002582 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	58024800 	.word	0x58024800

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80025dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80025a4:	f7ff ffe4 	bl	8002570 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a8:	f7ff ff42 	bl	8002430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f008 fcd3 	bl	800af7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7fe fdc1 	bl	800115c <main>
  bx  lr
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025e4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80025e8:	0800b9f0 	.word	0x0800b9f0
  ldr r2, =_sbss
 80025ec:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80025f0:	240015f8 	.word	0x240015f8

080025f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC3_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fe:	2003      	movs	r0, #3
 8002600:	f000 f968 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002604:	f003 f8ee 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_Init+0x68>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	4913      	ldr	r1, [pc, #76]	@ (8002664 <HAL_Init+0x6c>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <HAL_Init+0x68>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_Init+0x6c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <HAL_Init+0x70>)
 800263a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_Init+0x74>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002642:	200f      	movs	r0, #15
 8002644:	f000 f814 	bl	8002670 <HAL_InitTick>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e002      	b.n	8002658 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002652:	f7ff facf 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58024400 	.word	0x58024400
 8002664:	0800b964 	.word	0x0800b964
 8002668:	24000004 	.word	0x24000004
 800266c:	24000000 	.word	0x24000000

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_InitTick+0x60>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e021      	b.n	80026c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_InitTick+0x64>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_InitTick+0x60>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f94d 	bl	800293a <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f000 f917 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <HAL_InitTick+0x68>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2400000c 	.word	0x2400000c
 80026d4:	24000000 	.word	0x24000000
 80026d8:	24000008 	.word	0x24000008

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2400000c 	.word	0x2400000c
 8002700:	240014ac 	.word	0x240014ac

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	240014ac 	.word	0x240014ac

0800271c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002720:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <HAL_GetREVID+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0c1b      	lsrs	r3, r3, #16
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	5c001000 	.word	0x5c001000

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <__NVIC_SetPriorityGrouping+0x40>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <__NVIC_SetPriorityGrouping+0x40>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00
 8002778:	05fa0000 	.word	0x05fa0000

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	@ (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	@ (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	@ 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f7ff ff8e 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff29 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f8:	f7ff ff40 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f7ff ff90 	bl	8002828 <NVIC_EncodePriority>
 8002908:	4602      	mov	r2, r0
 800290a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff5f 	bl	80027d4 <__NVIC_SetPriority>
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff33 	bl	8002798 <__NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffa4 	bl	8002890 <SysTick_Config>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002958:	f3bf 8f5f 	dmb	sy
}
 800295c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800295e:	4b07      	ldr	r3, [pc, #28]	@ (800297c <HAL_MPU_Disable+0x28>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	4a06      	ldr	r2, [pc, #24]	@ (800297c <HAL_MPU_Disable+0x28>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002968:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_MPU_Disable+0x2c>)
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00
 8002980:	e000ed90 	.word	0xe000ed90

08002984 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800298c:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <HAL_MPU_Enable+0x38>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_MPU_Enable+0x3c>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	4a09      	ldr	r2, [pc, #36]	@ (80029c0 <HAL_MPU_Enable+0x3c>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029a2:	f3bf 8f4f 	dsb	sy
}
 80029a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029a8:	f3bf 8f6f 	isb	sy
}
 80029ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed90 	.word	0xe000ed90
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	785a      	ldrb	r2, [r3, #1]
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_MPU_ConfigRegion+0x7c>)
 80029d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HAL_MPU_ConfigRegion+0x7c>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_MPU_ConfigRegion+0x7c>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_MPU_ConfigRegion+0x7c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7b1b      	ldrb	r3, [r3, #12]
 80029ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7adb      	ldrb	r3, [r3, #11]
 80029f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7a9b      	ldrb	r3, [r3, #10]
 80029fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b5b      	ldrb	r3, [r3, #13]
 8002a02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7b9b      	ldrb	r3, [r3, #14]
 8002a0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7bdb      	ldrb	r3, [r3, #15]
 8002a12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7a5b      	ldrb	r3, [r3, #9]
 8002a1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7a1b      	ldrb	r3, [r3, #8]
 8002a22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a2c:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a30:	6113      	str	r3, [r2, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed90 	.word	0xe000ed90

08002a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff fe5a 	bl	8002704 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e2dc      	b.n	8003016 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e2cd      	b.n	8003016 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a76      	ldr	r2, [pc, #472]	@ (8002c58 <HAL_DMA_Abort+0x214>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a74      	ldr	r2, [pc, #464]	@ (8002c5c <HAL_DMA_Abort+0x218>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	@ (8002c60 <HAL_DMA_Abort+0x21c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a71      	ldr	r2, [pc, #452]	@ (8002c64 <HAL_DMA_Abort+0x220>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a70      	ldr	r2, [pc, #448]	@ (8002c68 <HAL_DMA_Abort+0x224>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c6c <HAL_DMA_Abort+0x228>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6d      	ldr	r2, [pc, #436]	@ (8002c70 <HAL_DMA_Abort+0x22c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c74 <HAL_DMA_Abort+0x230>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6a      	ldr	r2, [pc, #424]	@ (8002c78 <HAL_DMA_Abort+0x234>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a68      	ldr	r2, [pc, #416]	@ (8002c7c <HAL_DMA_Abort+0x238>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a67      	ldr	r2, [pc, #412]	@ (8002c80 <HAL_DMA_Abort+0x23c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <HAL_DMA_Abort+0x240>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a64      	ldr	r2, [pc, #400]	@ (8002c88 <HAL_DMA_Abort+0x244>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a62      	ldr	r2, [pc, #392]	@ (8002c8c <HAL_DMA_Abort+0x248>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a61      	ldr	r2, [pc, #388]	@ (8002c90 <HAL_DMA_Abort+0x24c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_Abort+0xd6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_DMA_Abort+0x250>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Abort+0xda>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_Abort+0xdc>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 021e 	bic.w	r2, r2, #30
 8002b32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e00a      	b.n	8002b62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 020e 	bic.w	r2, r2, #14
 8002b5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3c      	ldr	r2, [pc, #240]	@ (8002c58 <HAL_DMA_Abort+0x214>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d072      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3a      	ldr	r2, [pc, #232]	@ (8002c5c <HAL_DMA_Abort+0x218>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d06d      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a39      	ldr	r2, [pc, #228]	@ (8002c60 <HAL_DMA_Abort+0x21c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d068      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a37      	ldr	r2, [pc, #220]	@ (8002c64 <HAL_DMA_Abort+0x220>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d063      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	@ (8002c68 <HAL_DMA_Abort+0x224>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d05e      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	@ (8002c6c <HAL_DMA_Abort+0x228>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d059      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	@ (8002c70 <HAL_DMA_Abort+0x22c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d054      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a31      	ldr	r2, [pc, #196]	@ (8002c74 <HAL_DMA_Abort+0x230>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04f      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a30      	ldr	r2, [pc, #192]	@ (8002c78 <HAL_DMA_Abort+0x234>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <HAL_DMA_Abort+0x238>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_DMA_Abort+0x23c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <HAL_DMA_Abort+0x240>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2a      	ldr	r2, [pc, #168]	@ (8002c88 <HAL_DMA_Abort+0x244>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <HAL_DMA_Abort+0x248>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <HAL_DMA_Abort+0x24c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_DMA_Abort+0x250>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <HAL_DMA_Abort+0x254>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <HAL_DMA_Abort+0x258>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ca0 <HAL_DMA_Abort+0x25c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <HAL_DMA_Abort+0x260>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca8 <HAL_DMA_Abort+0x264>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_DMA_Abort+0x268>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb0 <HAL_DMA_Abort+0x26c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_DMA_Abort+0x270>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d132      	bne.n	8002cb8 <HAL_DMA_Abort+0x274>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e031      	b.n	8002cba <HAL_DMA_Abort+0x276>
 8002c56:	bf00      	nop
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	58025408 	.word	0x58025408
 8002c9c:	5802541c 	.word	0x5802541c
 8002ca0:	58025430 	.word	0x58025430
 8002ca4:	58025444 	.word	0x58025444
 8002ca8:	58025458 	.word	0x58025458
 8002cac:	5802546c 	.word	0x5802546c
 8002cb0:	58025480 	.word	0x58025480
 8002cb4:	58025494 	.word	0x58025494
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6d      	ldr	r2, [pc, #436]	@ (8002e88 <HAL_DMA_Abort+0x444>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04a      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8002e8c <HAL_DMA_Abort+0x448>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d045      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8002e90 <HAL_DMA_Abort+0x44c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d040      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a68      	ldr	r2, [pc, #416]	@ (8002e94 <HAL_DMA_Abort+0x450>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d03b      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a67      	ldr	r2, [pc, #412]	@ (8002e98 <HAL_DMA_Abort+0x454>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d036      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_DMA_Abort+0x458>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d031      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a64      	ldr	r2, [pc, #400]	@ (8002ea0 <HAL_DMA_Abort+0x45c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d02c      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a62      	ldr	r2, [pc, #392]	@ (8002ea4 <HAL_DMA_Abort+0x460>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d027      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a61      	ldr	r2, [pc, #388]	@ (8002ea8 <HAL_DMA_Abort+0x464>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002eac <HAL_DMA_Abort+0x468>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb0 <HAL_DMA_Abort+0x46c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb4 <HAL_DMA_Abort+0x470>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002eb8 <HAL_DMA_Abort+0x474>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a59      	ldr	r2, [pc, #356]	@ (8002ebc <HAL_DMA_Abort+0x478>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_DMA_Abort+0x47c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Abort+0x32a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a56      	ldr	r2, [pc, #344]	@ (8002ec4 <HAL_DMA_Abort+0x480>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <HAL_DMA_Abort+0x33c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e007      	b.n	8002d90 <HAL_DMA_Abort+0x34c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d90:	e013      	b.n	8002dba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d92:	f7ff fcb7 	bl	8002704 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d90c      	bls.n	8002dba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e12d      	b.n	8003016 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2f      	ldr	r2, [pc, #188]	@ (8002e88 <HAL_DMA_Abort+0x444>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04a      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e8c <HAL_DMA_Abort+0x448>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d045      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <HAL_DMA_Abort+0x44c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d040      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e94 <HAL_DMA_Abort+0x450>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d03b      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <HAL_DMA_Abort+0x454>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d036      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_DMA_Abort+0x458>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a26      	ldr	r2, [pc, #152]	@ (8002ea0 <HAL_DMA_Abort+0x45c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02c      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <HAL_DMA_Abort+0x460>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d027      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_DMA_Abort+0x464>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a21      	ldr	r2, [pc, #132]	@ (8002eac <HAL_DMA_Abort+0x468>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_DMA_Abort+0x46c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb4 <HAL_DMA_Abort+0x470>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <HAL_DMA_Abort+0x474>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <HAL_DMA_Abort+0x478>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_DMA_Abort+0x47c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_Abort+0x422>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_DMA_Abort+0x480>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Abort+0x426>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_Abort+0x428>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02b      	beq.n	8002ec8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	223f      	movs	r2, #63	@ 0x3f
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	e02a      	b.n	8002ede <HAL_DMA_Abort+0x49a>
 8002e88:	40020010 	.word	0x40020010
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40020040 	.word	0x40020040
 8002e94:	40020058 	.word	0x40020058
 8002e98:	40020070 	.word	0x40020070
 8002e9c:	40020088 	.word	0x40020088
 8002ea0:	400200a0 	.word	0x400200a0
 8002ea4:	400200b8 	.word	0x400200b8
 8002ea8:	40020410 	.word	0x40020410
 8002eac:	40020428 	.word	0x40020428
 8002eb0:	40020440 	.word	0x40020440
 8002eb4:	40020458 	.word	0x40020458
 8002eb8:	40020470 	.word	0x40020470
 8002ebc:	40020488 	.word	0x40020488
 8002ec0:	400204a0 	.word	0x400204a0
 8002ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_DMA_Abort+0x5dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d072      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_DMA_Abort+0x5e0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d06d      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_DMA_Abort+0x5e4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d068      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4a      	ldr	r2, [pc, #296]	@ (800302c <HAL_DMA_Abort+0x5e8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d063      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a49      	ldr	r2, [pc, #292]	@ (8003030 <HAL_DMA_Abort+0x5ec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d05e      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a47      	ldr	r2, [pc, #284]	@ (8003034 <HAL_DMA_Abort+0x5f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d059      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a46      	ldr	r2, [pc, #280]	@ (8003038 <HAL_DMA_Abort+0x5f4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d054      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a44      	ldr	r2, [pc, #272]	@ (800303c <HAL_DMA_Abort+0x5f8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04f      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a43      	ldr	r2, [pc, #268]	@ (8003040 <HAL_DMA_Abort+0x5fc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a41      	ldr	r2, [pc, #260]	@ (8003044 <HAL_DMA_Abort+0x600>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a40      	ldr	r2, [pc, #256]	@ (8003048 <HAL_DMA_Abort+0x604>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3e      	ldr	r2, [pc, #248]	@ (800304c <HAL_DMA_Abort+0x608>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003050 <HAL_DMA_Abort+0x60c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3b      	ldr	r2, [pc, #236]	@ (8003054 <HAL_DMA_Abort+0x610>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8003058 <HAL_DMA_Abort+0x614>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a38      	ldr	r2, [pc, #224]	@ (800305c <HAL_DMA_Abort+0x618>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <HAL_DMA_Abort+0x61c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a35      	ldr	r2, [pc, #212]	@ (8003064 <HAL_DMA_Abort+0x620>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a34      	ldr	r2, [pc, #208]	@ (8003068 <HAL_DMA_Abort+0x624>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a32      	ldr	r2, [pc, #200]	@ (800306c <HAL_DMA_Abort+0x628>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a31      	ldr	r2, [pc, #196]	@ (8003070 <HAL_DMA_Abort+0x62c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8003074 <HAL_DMA_Abort+0x630>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8003078 <HAL_DMA_Abort+0x634>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <HAL_DMA_Abort+0x638>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Abort+0x58e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_Abort+0x590>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002fe0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003002:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40020010 	.word	0x40020010
 8003024:	40020028 	.word	0x40020028
 8003028:	40020040 	.word	0x40020040
 800302c:	40020058 	.word	0x40020058
 8003030:	40020070 	.word	0x40020070
 8003034:	40020088 	.word	0x40020088
 8003038:	400200a0 	.word	0x400200a0
 800303c:	400200b8 	.word	0x400200b8
 8003040:	40020410 	.word	0x40020410
 8003044:	40020428 	.word	0x40020428
 8003048:	40020440 	.word	0x40020440
 800304c:	40020458 	.word	0x40020458
 8003050:	40020470 	.word	0x40020470
 8003054:	40020488 	.word	0x40020488
 8003058:	400204a0 	.word	0x400204a0
 800305c:	400204b8 	.word	0x400204b8
 8003060:	58025408 	.word	0x58025408
 8003064:	5802541c 	.word	0x5802541c
 8003068:	58025430 	.word	0x58025430
 800306c:	58025444 	.word	0x58025444
 8003070:	58025458 	.word	0x58025458
 8003074:	5802546c 	.word	0x5802546c
 8003078:	58025480 	.word	0x58025480
 800307c:	58025494 	.word	0x58025494

08003080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e237      	b.n	8003502 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d004      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e22c      	b.n	8003502 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003220 <HAL_DMA_Abort_IT+0x1a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003224 <HAL_DMA_Abort_IT+0x1a4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d045      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a59      	ldr	r2, [pc, #356]	@ (8003228 <HAL_DMA_Abort_IT+0x1a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_DMA_Abort_IT+0x1ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d03b      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <HAL_DMA_Abort_IT+0x1b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d036      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_DMA_Abort_IT+0x1b4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d031      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a53      	ldr	r2, [pc, #332]	@ (8003238 <HAL_DMA_Abort_IT+0x1b8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02c      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a52      	ldr	r2, [pc, #328]	@ (800323c <HAL_DMA_Abort_IT+0x1bc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d027      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a50      	ldr	r2, [pc, #320]	@ (8003240 <HAL_DMA_Abort_IT+0x1c0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4f      	ldr	r2, [pc, #316]	@ (8003244 <HAL_DMA_Abort_IT+0x1c4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01d      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4d      	ldr	r2, [pc, #308]	@ (8003248 <HAL_DMA_Abort_IT+0x1c8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a4c      	ldr	r2, [pc, #304]	@ (800324c <HAL_DMA_Abort_IT+0x1cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4a      	ldr	r2, [pc, #296]	@ (8003250 <HAL_DMA_Abort_IT+0x1d0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a49      	ldr	r2, [pc, #292]	@ (8003254 <HAL_DMA_Abort_IT+0x1d4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a47      	ldr	r2, [pc, #284]	@ (8003258 <HAL_DMA_Abort_IT+0x1d8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Abort_IT+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a46      	ldr	r2, [pc, #280]	@ (800325c <HAL_DMA_Abort_IT+0x1dc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_DMA_Abort_IT+0xcc>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_DMA_Abort_IT+0xce>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8086 	beq.w	8003260 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2f      	ldr	r2, [pc, #188]	@ (8003220 <HAL_DMA_Abort_IT+0x1a0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d04a      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <HAL_DMA_Abort_IT+0x1a4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d045      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2c      	ldr	r2, [pc, #176]	@ (8003228 <HAL_DMA_Abort_IT+0x1a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d040      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	@ (800322c <HAL_DMA_Abort_IT+0x1ac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d03b      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <HAL_DMA_Abort_IT+0x1b0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d036      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_DMA_Abort_IT+0x1b4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d031      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a26      	ldr	r2, [pc, #152]	@ (8003238 <HAL_DMA_Abort_IT+0x1b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02c      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a25      	ldr	r2, [pc, #148]	@ (800323c <HAL_DMA_Abort_IT+0x1bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d027      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a23      	ldr	r2, [pc, #140]	@ (8003240 <HAL_DMA_Abort_IT+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <HAL_DMA_Abort_IT+0x1c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a20      	ldr	r2, [pc, #128]	@ (8003248 <HAL_DMA_Abort_IT+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <HAL_DMA_Abort_IT+0x1cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <HAL_DMA_Abort_IT+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <HAL_DMA_Abort_IT+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_DMA_Abort_IT+0x1d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Abort_IT+0x17c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a19      	ldr	r2, [pc, #100]	@ (800325c <HAL_DMA_Abort_IT+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <HAL_DMA_Abort_IT+0x18e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e178      	b.n	8003500 <HAL_DMA_Abort_IT+0x480>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e16f      	b.n	8003500 <HAL_DMA_Abort_IT+0x480>
 8003220:	40020010 	.word	0x40020010
 8003224:	40020028 	.word	0x40020028
 8003228:	40020040 	.word	0x40020040
 800322c:	40020058 	.word	0x40020058
 8003230:	40020070 	.word	0x40020070
 8003234:	40020088 	.word	0x40020088
 8003238:	400200a0 	.word	0x400200a0
 800323c:	400200b8 	.word	0x400200b8
 8003240:	40020410 	.word	0x40020410
 8003244:	40020428 	.word	0x40020428
 8003248:	40020440 	.word	0x40020440
 800324c:	40020458 	.word	0x40020458
 8003250:	40020470 	.word	0x40020470
 8003254:	40020488 	.word	0x40020488
 8003258:	400204a0 	.word	0x400204a0
 800325c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020e 	bic.w	r2, r2, #14
 800326e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6c      	ldr	r2, [pc, #432]	@ (8003428 <HAL_DMA_Abort_IT+0x3a8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6b      	ldr	r2, [pc, #428]	@ (800342c <HAL_DMA_Abort_IT+0x3ac>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d045      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a69      	ldr	r2, [pc, #420]	@ (8003430 <HAL_DMA_Abort_IT+0x3b0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a68      	ldr	r2, [pc, #416]	@ (8003434 <HAL_DMA_Abort_IT+0x3b4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03b      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a66      	ldr	r2, [pc, #408]	@ (8003438 <HAL_DMA_Abort_IT+0x3b8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d036      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a65      	ldr	r2, [pc, #404]	@ (800343c <HAL_DMA_Abort_IT+0x3bc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a63      	ldr	r2, [pc, #396]	@ (8003440 <HAL_DMA_Abort_IT+0x3c0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02c      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a62      	ldr	r2, [pc, #392]	@ (8003444 <HAL_DMA_Abort_IT+0x3c4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d027      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a60      	ldr	r2, [pc, #384]	@ (8003448 <HAL_DMA_Abort_IT+0x3c8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5f      	ldr	r2, [pc, #380]	@ (800344c <HAL_DMA_Abort_IT+0x3cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003450 <HAL_DMA_Abort_IT+0x3d0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003454 <HAL_DMA_Abort_IT+0x3d4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003458 <HAL_DMA_Abort_IT+0x3d8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a59      	ldr	r2, [pc, #356]	@ (800345c <HAL_DMA_Abort_IT+0x3dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a57      	ldr	r2, [pc, #348]	@ (8003460 <HAL_DMA_Abort_IT+0x3e0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_Abort_IT+0x290>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a56      	ldr	r2, [pc, #344]	@ (8003464 <HAL_DMA_Abort_IT+0x3e4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <HAL_DMA_Abort_IT+0x2a2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e007      	b.n	8003332 <HAL_DMA_Abort_IT+0x2b2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3c      	ldr	r2, [pc, #240]	@ (8003428 <HAL_DMA_Abort_IT+0x3a8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d072      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3a      	ldr	r2, [pc, #232]	@ (800342c <HAL_DMA_Abort_IT+0x3ac>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d06d      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a39      	ldr	r2, [pc, #228]	@ (8003430 <HAL_DMA_Abort_IT+0x3b0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d068      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a37      	ldr	r2, [pc, #220]	@ (8003434 <HAL_DMA_Abort_IT+0x3b4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d063      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a36      	ldr	r2, [pc, #216]	@ (8003438 <HAL_DMA_Abort_IT+0x3b8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d05e      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a34      	ldr	r2, [pc, #208]	@ (800343c <HAL_DMA_Abort_IT+0x3bc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d059      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a33      	ldr	r2, [pc, #204]	@ (8003440 <HAL_DMA_Abort_IT+0x3c0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d054      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a31      	ldr	r2, [pc, #196]	@ (8003444 <HAL_DMA_Abort_IT+0x3c4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d04f      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a30      	ldr	r2, [pc, #192]	@ (8003448 <HAL_DMA_Abort_IT+0x3c8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04a      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <HAL_DMA_Abort_IT+0x3cc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d045      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2d      	ldr	r2, [pc, #180]	@ (8003450 <HAL_DMA_Abort_IT+0x3d0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d040      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003454 <HAL_DMA_Abort_IT+0x3d4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d03b      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003458 <HAL_DMA_Abort_IT+0x3d8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d036      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a28      	ldr	r2, [pc, #160]	@ (800345c <HAL_DMA_Abort_IT+0x3dc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d031      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a27      	ldr	r2, [pc, #156]	@ (8003460 <HAL_DMA_Abort_IT+0x3e0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d02c      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a25      	ldr	r2, [pc, #148]	@ (8003464 <HAL_DMA_Abort_IT+0x3e4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d027      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a24      	ldr	r2, [pc, #144]	@ (8003468 <HAL_DMA_Abort_IT+0x3e8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a22      	ldr	r2, [pc, #136]	@ (800346c <HAL_DMA_Abort_IT+0x3ec>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a21      	ldr	r2, [pc, #132]	@ (8003470 <HAL_DMA_Abort_IT+0x3f0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003474 <HAL_DMA_Abort_IT+0x3f4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <HAL_DMA_Abort_IT+0x3f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <HAL_DMA_Abort_IT+0x3fc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1b      	ldr	r2, [pc, #108]	@ (8003480 <HAL_DMA_Abort_IT+0x400>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Abort_IT+0x3a2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a19      	ldr	r2, [pc, #100]	@ (8003484 <HAL_DMA_Abort_IT+0x404>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d132      	bne.n	8003488 <HAL_DMA_Abort_IT+0x408>
 8003422:	2301      	movs	r3, #1
 8003424:	e031      	b.n	800348a <HAL_DMA_Abort_IT+0x40a>
 8003426:	bf00      	nop
 8003428:	40020010 	.word	0x40020010
 800342c:	40020028 	.word	0x40020028
 8003430:	40020040 	.word	0x40020040
 8003434:	40020058 	.word	0x40020058
 8003438:	40020070 	.word	0x40020070
 800343c:	40020088 	.word	0x40020088
 8003440:	400200a0 	.word	0x400200a0
 8003444:	400200b8 	.word	0x400200b8
 8003448:	40020410 	.word	0x40020410
 800344c:	40020428 	.word	0x40020428
 8003450:	40020440 	.word	0x40020440
 8003454:	40020458 	.word	0x40020458
 8003458:	40020470 	.word	0x40020470
 800345c:	40020488 	.word	0x40020488
 8003460:	400204a0 	.word	0x400204a0
 8003464:	400204b8 	.word	0x400204b8
 8003468:	58025408 	.word	0x58025408
 800346c:	5802541c 	.word	0x5802541c
 8003470:	58025430 	.word	0x58025430
 8003474:	58025444 	.word	0x58025444
 8003478:	58025458 	.word	0x58025458
 800347c:	5802546c 	.word	0x5802546c
 8003480:	58025480 	.word	0x58025480
 8003484:	58025494 	.word	0x58025494
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d028      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800349c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	@ 0x60
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003514:	4a84      	ldr	r2, [pc, #528]	@ (8003728 <HAL_FDCAN_Init+0x21c>)
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	4611      	mov	r1, r2
 800351c:	224c      	movs	r2, #76	@ 0x4c
 800351e:	4618      	mov	r0, r3
 8003520:	f007 fd52 	bl	800afc8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1c6      	b.n	80038bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7e      	ldr	r2, [pc, #504]	@ (800372c <HAL_FDCAN_Init+0x220>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d106      	bne.n	8003546 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fb64 	bl	8001c28 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0210 	bic.w	r2, r2, #16
 800356e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003570:	f7ff f8c8 	bl	8002704 <HAL_GetTick>
 8003574:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003576:	e014      	b.n	80035a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003578:	f7ff f8c4 	bl	8002704 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b0a      	cmp	r3, #10
 8003584:	d90d      	bls.n	80035a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2203      	movs	r2, #3
 800359a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e18c      	b.n	80038bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d0e3      	beq.n	8003578 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c0:	f7ff f8a0 	bl	8002704 <HAL_GetTick>
 80035c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035c6:	e014      	b.n	80035f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035c8:	f7ff f89c 	bl	8002704 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d90d      	bls.n	80035f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e164      	b.n	80038bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0e3      	beq.n	80035c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0202 	orr.w	r2, r2, #2
 800360e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7c1b      	ldrb	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d108      	bne.n	800362a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003626:	619a      	str	r2, [r3, #24]
 8003628:	e007      	b.n	800363a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003638:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7c5b      	ldrb	r3, [r3, #17]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003650:	619a      	str	r2, [r3, #24]
 8003652:	e007      	b.n	8003664 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003662:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7c9b      	ldrb	r3, [r3, #18]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800367a:	619a      	str	r2, [r3, #24]
 800367c:	e007      	b.n	800368e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800368c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80036b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0210 	bic.w	r2, r2, #16
 80036c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d108      	bne.n	80036de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0204 	orr.w	r2, r2, #4
 80036da:	619a      	str	r2, [r3, #24]
 80036dc:	e030      	b.n	8003740 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d02c      	beq.n	8003740 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d020      	beq.n	8003730 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0210 	orr.w	r2, r2, #16
 800370c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d114      	bne.n	8003740 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0220 	orr.w	r2, r2, #32
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e00b      	b.n	8003740 <HAL_FDCAN_Init+0x234>
 8003728:	0800b918 	.word	0x0800b918
 800372c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	3b01      	subs	r3, #1
 8003746:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	3b01      	subs	r3, #1
 800374e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003750:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003758:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	3b01      	subs	r3, #1
 8003762:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003768:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800376a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003774:	d115      	bne.n	80037a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	3b01      	subs	r3, #1
 8003782:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003784:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	3b01      	subs	r3, #1
 800378c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800378e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	3b01      	subs	r3, #1
 8003798:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800379e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c8:	4413      	add	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80037d6:	f023 0107 	bic.w	r1, r3, #7
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3360      	adds	r3, #96	@ 0x60
 80037e2:	443b      	add	r3, r7
 80037e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003802:	f023 0107 	bic.w	r1, r3, #7
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3360      	adds	r3, #96	@ 0x60
 800380e:	443b      	add	r3, r7
 8003810:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003822:	2b00      	cmp	r3, #0
 8003824:	d012      	beq.n	800384c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800382e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	3360      	adds	r3, #96	@ 0x60
 800383a:	443b      	add	r3, r7
 800383c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003840:	011a      	lsls	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	2b00      	cmp	r3, #0
 8003852:	d012      	beq.n	800387a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800385c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	3360      	adds	r3, #96	@ 0x60
 8003868:	443b      	add	r3, r7
 800386a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <HAL_FDCAN_Init+0x3b8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d107      	bne.n	8003894 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f022 0203 	bic.w	r2, r2, #3
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fd81 	bl	80043b4 <FDCAN_CalcultateRamBlockAddresses>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80038b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3760      	adds	r7, #96	@ 0x60
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	4000a000 	.word	0x4000a000

080038c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d111      	bne.n	8003900 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e008      	b.n	8003912 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d141      	bne.n	80039ba <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800393e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e038      	b.n	80039cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e026      	b.n	80039cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fe93 	bl	80046c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80039aa:	2201      	movs	r2, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e008      	b.n	80039cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039c0:	f043 0208 	orr.w	r2, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b08b      	sub	sp, #44	@ 0x2c
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80039ec:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80039ee:	7efb      	ldrb	r3, [r7, #27]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f040 8149 	bne.w	8003c88 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b40      	cmp	r3, #64	@ 0x40
 80039fa:	d14c      	bne.n	8003a96 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e13c      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e12a      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a54:	d10a      	bne.n	8003a6c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a66:	d101      	bne.n	8003a6c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a94:	e068      	b.n	8003b68 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b41      	cmp	r3, #65	@ 0x41
 8003a9a:	d14c      	bne.n	8003b36 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aa4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0ec      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0da      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af4:	d10a      	bne.n	8003b0c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003afe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b06:	d101      	bne.n	8003b0c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b34:	e018      	b.n	8003b68 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d309      	bcc.n	8003b54 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0a2      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0c9b      	lsrs	r3, r3, #18
 8003b82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e005      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e1b      	lsrs	r3, r3, #24
 8003bec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0fda      	lsrs	r2, r3, #31
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	3304      	adds	r3, #4
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	e00a      	b.n	8003c24 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	441a      	add	r2, r3
 8003c14:	6839      	ldr	r1, [r7, #0]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	440b      	add	r3, r1
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	3301      	adds	r3, #1
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d3ec      	bcc.n	8003c0e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b40      	cmp	r3, #64	@ 0x40
 8003c38:	d105      	bne.n	8003c46 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003c44:	e01e      	b.n	8003c84 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b41      	cmp	r3, #65	@ 0x41
 8003c4a:	d105      	bne.n	8003c58 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003c56:	e015      	b.n	8003c84 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b1f      	cmp	r3, #31
 8003c5c:	d808      	bhi.n	8003c70 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8003c6e:	e009      	b.n	8003c84 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 021f 	and.w	r2, r3, #31
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e008      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	372c      	adds	r7, #44	@ 0x2c
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	0800b974 	.word	0x0800b974

08003cac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003cbe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <HAL_FDCAN_ActivateNotification+0x20>
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d155      	bne.n	8003d78 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cea:	e014      	b.n	8003d16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d108      	bne.n	8003d0e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0202 	orr.w	r2, r2, #2
 8003d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d0c:	e003      	b.n	8003d16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2203      	movs	r2, #3
 8003d14:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_FDCAN_ActivateNotification+0xec>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	0f9b      	lsrs	r3, r3, #30
 8003d6e:	490b      	ldr	r1, [pc, #44]	@ (8003d9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e008      	b.n	8003d8a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	3fcfffff 	.word	0x3fcfffff
 8003d9c:	4000a800 	.word	0x4000a800

08003da0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b096      	sub	sp, #88	@ 0x58
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003da8:	4b9a      	ldr	r3, [pc, #616]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	079b      	lsls	r3, r3, #30
 8003dae:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003db0:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	079b      	lsls	r3, r3, #30
 8003db6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003db8:	4013      	ands	r3, r2
 8003dba:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003dc6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de8:	4013      	ands	r3, r2
 8003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e00:	4013      	ands	r3, r2
 8003e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e18:	4013      	ands	r3, r2
 8003e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003e26:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e30:	4013      	ands	r3, r2
 8003e32:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e66:	4b6b      	ldr	r3, [pc, #428]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa54 	bl	800431a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e74:	0a9b      	lsrs	r3, r3, #10
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01d      	beq.n	8003eba <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e80:	0a9b      	lsrs	r3, r3, #10
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e92:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fa07 	bl	80042c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ec6:	4b54      	ldr	r3, [pc, #336]	@ (8004018 <HAL_FDCAN_IRQHandler+0x278>)
 8003ec8:	400b      	ands	r3, r1
 8003eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ecc:	4a51      	ldr	r2, [pc, #324]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed0:	0f9b      	lsrs	r3, r3, #30
 8003ed2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003ed4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9c0 	bl	800425c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8004018 <HAL_FDCAN_IRQHandler+0x278>)
 8003eea:	400b      	ands	r3, r1
 8003eec:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eee:	4a49      	ldr	r2, [pc, #292]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef2:	0f9b      	lsrs	r3, r3, #30
 8003ef4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003ef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9ba 	bl	8004272 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003f0a:	4b43      	ldr	r3, [pc, #268]	@ (8004018 <HAL_FDCAN_IRQHandler+0x278>)
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f10:	4a40      	ldr	r2, [pc, #256]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f14:	0f9b      	lsrs	r3, r3, #30
 8003f16:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe f982 	bl	8002224 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004018 <HAL_FDCAN_IRQHandler+0x278>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f32:	4a38      	ldr	r2, [pc, #224]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f36:	0f9b      	lsrs	r3, r3, #30
 8003f38:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003f3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9a3 	bl	8004288 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f44:	0adb      	lsrs	r3, r3, #11
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	0adb      	lsrs	r3, r3, #11
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f64:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f997 	bl	800429e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01d      	beq.n	8003fb8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	0a5b      	lsrs	r3, r3, #9
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003fb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f97d 	bl	80042b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	0cdb      	lsrs	r3, r3, #19
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	0cdb      	lsrs	r3, r3, #19
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f97c 	bl	80042de <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d010      	beq.n	8004020 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004006:	651a      	str	r2, [r3, #80]	@ 0x50
 8004008:	4b02      	ldr	r3, [pc, #8]	@ (8004014 <HAL_FDCAN_IRQHandler+0x274>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	e004      	b.n	800401c <HAL_FDCAN_IRQHandler+0x27c>
 8004012:	bf00      	nop
 8004014:	4000a800 	.word	0x4000a800
 8004018:	3fcfffff 	.word	0x3fcfffff
 800401c:	f000 f969 	bl	80042f2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004022:	0c9b      	lsrs	r3, r3, #18
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d010      	beq.n	800404e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	0c9b      	lsrs	r3, r3, #18
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004040:	651a      	str	r2, [r3, #80]	@ 0x50
 8004042:	4b83      	ldr	r3, [pc, #524]	@ (8004250 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f95c 	bl	8004306 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004050:	0c5b      	lsrs	r3, r3, #17
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405c:	0c5b      	lsrs	r3, r3, #17
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00f      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800406e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004070:	4b77      	ldr	r3, [pc, #476]	@ (8004250 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800407c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004092:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004094:	400b      	ands	r3, r1
 8004096:	6513      	str	r3, [r2, #80]	@ 0x50
 8004098:	4a6d      	ldr	r2, [pc, #436]	@ (8004250 <HAL_FDCAN_IRQHandler+0x4b0>)
 800409a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409c:	0f9b      	lsrs	r3, r3, #30
 800409e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80040a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f94d 	bl	8004342 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80040a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040b4:	4b67      	ldr	r3, [pc, #412]	@ (8004254 <HAL_FDCAN_IRQHandler+0x4b4>)
 80040b6:	400b      	ands	r3, r1
 80040b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80040ba:	4a65      	ldr	r2, [pc, #404]	@ (8004250 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	0f9b      	lsrs	r3, r3, #30
 80040c0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80040c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a60      	ldr	r2, [pc, #384]	@ (8004258 <HAL_FDCAN_IRQHandler+0x4b8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	f040 80ac 	bne.w	8004236 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80a4 	beq.w	8004236 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004102:	4013      	ands	r3, r2
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800411a:	4013      	ands	r3, r2
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	4013      	ands	r3, r2
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004140:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	4013      	ands	r3, r2
 800414c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004158:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	4013      	ands	r3, r2
 8004164:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004182:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8e6 	bl	8004358 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004198:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800419a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8e6 	bl	800436e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2240      	movs	r2, #64	@ 0x40
 80041d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8d0 	bl	8004384 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80041f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f8d1 	bl	800439c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f874 	bl	800432e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004246:	bf00      	nop
 8004248:	3758      	adds	r7, #88	@ 0x58
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	4000a800 	.word	0x4000a800
 8004254:	3fcfffff 	.word	0x3fcfffff
 8004258:	4000a000 	.word	0x4000a000

0800425c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80043ca:	4ba7      	ldr	r3, [pc, #668]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0091      	lsls	r1, r2, #2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	041a      	lsls	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4413      	add	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800440a:	4b97      	ldr	r3, [pc, #604]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800440c:	4013      	ands	r3, r2
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	0091      	lsls	r1, r2, #2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	430b      	orrs	r3, r1
 8004418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	041a      	lsls	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800444c:	4b86      	ldr	r3, [pc, #536]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800444e:	4013      	ands	r3, r2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	0091      	lsls	r1, r2, #2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004466:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	041a      	lsls	r2, r3, #16
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004494:	4b74      	ldr	r3, [pc, #464]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004496:	4013      	ands	r3, r2
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	0091      	lsls	r1, r2, #2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044ae:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b6:	041a      	lsls	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80044dc:	4b62      	ldr	r3, [pc, #392]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044de:	4013      	ands	r3, r2
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	0091      	lsls	r1, r2, #2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004508:	4b57      	ldr	r3, [pc, #348]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	0091      	lsls	r1, r2, #2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	430b      	orrs	r3, r1
 8004516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004522:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	041a      	lsls	r2, r3, #16
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4413      	add	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800454a:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800454c:	4013      	ands	r3, r2
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	0091      	lsls	r1, r2, #2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	430b      	orrs	r3, r1
 8004558:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004564:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456c:	041a      	lsls	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004580:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	061a      	lsls	r2, r3, #24
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004598:	4b34      	ldr	r3, [pc, #208]	@ (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800459a:	4413      	add	r3, r2
 800459c:	009a      	lsls	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d915      	bls.n	8004690 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004664:	e006      	b.n	8004674 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004666:	bf00      	nop
 8004668:	ffff0003 	.word	0xffff0003
 800466c:	10002b00 	.word	0x10002b00
 8004670:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e010      	b.n	80046b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e005      	b.n	80046a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3304      	adds	r3, #4
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3f3      	bcc.n	8004698 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	@ 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80046de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e00a      	b.n	8004702 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80046f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80046fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004700:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800470c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004712:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004718:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3304      	adds	r3, #4
 8004744:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	3304      	adds	r3, #4
 8004750:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e020      	b.n	800479a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	3303      	adds	r3, #3
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3302      	adds	r3, #2
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	440b      	add	r3, r1
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004770:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	440b      	add	r3, r1
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800477e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	440a      	add	r2, r1
 8004786:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004788:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3304      	adds	r3, #4
 8004792:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3304      	adds	r3, #4
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <FDCAN_CopyMessageToRAM+0xf8>)
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d3d6      	bcc.n	8004758 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	3724      	adds	r7, #36	@ 0x24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	0800b974 	.word	0x0800b974

080047bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	@ 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047ca:	4b89      	ldr	r3, [pc, #548]	@ (80049f0 <HAL_GPIO_Init+0x234>)
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047ce:	e194      	b.n	8004afa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8186 	beq.w	8004af4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d005      	beq.n	8004800 <HAL_GPIO_Init+0x44>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d130      	bne.n	8004862 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004836:	2201      	movs	r2, #1
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0201 	and.w	r2, r3, #1
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d017      	beq.n	800489e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d123      	bne.n	80048f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80e0 	beq.w	8004af4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	4b2f      	ldr	r3, [pc, #188]	@ (80049f4 <HAL_GPIO_Init+0x238>)
 8004936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800493a:	4a2e      	ldr	r2, [pc, #184]	@ (80049f4 <HAL_GPIO_Init+0x238>)
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_GPIO_Init+0x238>)
 8004946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004952:	4a29      	ldr	r2, [pc, #164]	@ (80049f8 <HAL_GPIO_Init+0x23c>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a20      	ldr	r2, [pc, #128]	@ (80049fc <HAL_GPIO_Init+0x240>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d052      	beq.n	8004a24 <HAL_GPIO_Init+0x268>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1f      	ldr	r2, [pc, #124]	@ (8004a00 <HAL_GPIO_Init+0x244>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <HAL_GPIO_Init+0x22e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1e      	ldr	r2, [pc, #120]	@ (8004a04 <HAL_GPIO_Init+0x248>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02b      	beq.n	80049e6 <HAL_GPIO_Init+0x22a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_GPIO_Init+0x24c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d025      	beq.n	80049e2 <HAL_GPIO_Init+0x226>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_GPIO_Init+0x250>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <HAL_GPIO_Init+0x222>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_GPIO_Init+0x254>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_GPIO_Init+0x21e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a14 <HAL_GPIO_Init+0x258>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_GPIO_Init+0x21a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_GPIO_Init+0x25c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00d      	beq.n	80049d2 <HAL_GPIO_Init+0x216>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <HAL_GPIO_Init+0x260>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_Init+0x212>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_GPIO_Init+0x264>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_GPIO_Init+0x20e>
 80049c6:	2309      	movs	r3, #9
 80049c8:	e02d      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049ca:	230a      	movs	r3, #10
 80049cc:	e02b      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049ce:	2308      	movs	r3, #8
 80049d0:	e029      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049d2:	2307      	movs	r3, #7
 80049d4:	e027      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049d6:	2306      	movs	r3, #6
 80049d8:	e025      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049da:	2305      	movs	r3, #5
 80049dc:	e023      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049de:	2304      	movs	r3, #4
 80049e0:	e021      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049e2:	2303      	movs	r3, #3
 80049e4:	e01f      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e01d      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e01b      	b.n	8004a26 <HAL_GPIO_Init+0x26a>
 80049ee:	bf00      	nop
 80049f0:	58000080 	.word	0x58000080
 80049f4:	58024400 	.word	0x58024400
 80049f8:	58000400 	.word	0x58000400
 80049fc:	58020000 	.word	0x58020000
 8004a00:	58020400 	.word	0x58020400
 8004a04:	58020800 	.word	0x58020800
 8004a08:	58020c00 	.word	0x58020c00
 8004a0c:	58021000 	.word	0x58021000
 8004a10:	58021400 	.word	0x58021400
 8004a14:	58021800 	.word	0x58021800
 8004a18:	58021c00 	.word	0x58021c00
 8004a1c:	58022000 	.word	0x58022000
 8004a20:	58022400 	.word	0x58022400
 8004a24:	2300      	movs	r3, #0
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	f002 0203 	and.w	r2, r2, #3
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a36:	4938      	ldr	r1, [pc, #224]	@ (8004b18 <HAL_GPIO_Init+0x35c>)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f ae63 	bne.w	80047d0 <HAL_GPIO_Init+0x14>
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	3724      	adds	r7, #36	@ 0x24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	58000400 	.word	0x58000400

08004b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b38:	e003      	b.n	8004b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	041a      	lsls	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b58:	4b19      	ldr	r3, [pc, #100]	@ (8004bc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d00a      	beq.n	8004b7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e01f      	b.n	8004bb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e01d      	b.n	8004bb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f023 0207 	bic.w	r2, r3, #7
 8004b82:	490f      	ldr	r1, [pc, #60]	@ (8004bc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b8a:	f7fd fdbb 	bl	8002704 <HAL_GetTick>
 8004b8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b90:	e009      	b.n	8004ba6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b92:	f7fd fdb7 	bl	8002704 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba0:	d901      	bls.n	8004ba6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e007      	b.n	8004bb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_PWREx_ConfigSupply+0x70>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb2:	d1ee      	bne.n	8004b92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	58024800 	.word	0x58024800

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	@ 0x30
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f000 bc48 	b.w	8005468 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8088 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be6:	4b99      	ldr	r3, [pc, #612]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf0:	4b96      	ldr	r3, [pc, #600]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d007      	beq.n	8004c0c <HAL_RCC_OscConfig+0x48>
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	2b18      	cmp	r3, #24
 8004c00:	d111      	bne.n	8004c26 <HAL_RCC_OscConfig+0x62>
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d10c      	bne.n	8004c26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d06d      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x130>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d169      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f000 bc21 	b.w	8005468 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_OscConfig+0x7a>
 8004c30:	4b86      	ldr	r3, [pc, #536]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a85      	ldr	r2, [pc, #532]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e02e      	b.n	8004c9c <HAL_RCC_OscConfig+0xd8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x9c>
 8004c46:	4b81      	ldr	r3, [pc, #516]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a80      	ldr	r2, [pc, #512]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b7e      	ldr	r3, [pc, #504]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7d      	ldr	r2, [pc, #500]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCC_OscConfig+0xd8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0xc0>
 8004c6a:	4b78      	ldr	r3, [pc, #480]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a77      	ldr	r2, [pc, #476]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b75      	ldr	r3, [pc, #468]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a74      	ldr	r2, [pc, #464]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0xd8>
 8004c84:	4b71      	ldr	r3, [pc, #452]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a70      	ldr	r2, [pc, #448]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a6d      	ldr	r2, [pc, #436]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fd2e 	bl	8002704 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fd fd2a 	bl	8002704 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e3d4      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cbe:	4b63      	ldr	r3, [pc, #396]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0xe8>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fd1a 	bl	8002704 <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fd fd16 	bl	8002704 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e3c0      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ce6:	4b59      	ldr	r3, [pc, #356]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x110>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80ca 	beq.w	8004e98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d04:	4b51      	ldr	r3, [pc, #324]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_RCC_OscConfig+0x166>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2b18      	cmp	r3, #24
 8004d1e:	d156      	bne.n	8004dce <HAL_RCC_OscConfig+0x20a>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d151      	bne.n	8004dce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d2a:	4b48      	ldr	r3, [pc, #288]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e392      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d42:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 0219 	bic.w	r2, r3, #25
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	493f      	ldr	r1, [pc, #252]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd fcd6 	bl	8002704 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fd fcd2 	bl	8002704 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e37c      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6e:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	f7fd fccf 	bl	800271c <HAL_GetREVID>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d817      	bhi.n	8004db8 <HAL_RCC_OscConfig+0x1f4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d108      	bne.n	8004da2 <HAL_RCC_OscConfig+0x1de>
 8004d90:	4b2e      	ldr	r3, [pc, #184]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d98:	4a2c      	ldr	r2, [pc, #176]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da0:	e07a      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	031b      	lsls	r3, r3, #12
 8004db0:	4926      	ldr	r1, [pc, #152]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db6:	e06f      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	4921      	ldr	r1, [pc, #132]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dcc:	e064      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d047      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 0219 	bic.w	r2, r3, #25
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	491a      	ldr	r1, [pc, #104]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fc8c 	bl	8002704 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fd fc88 	bl	8002704 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e332      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	f7fd fc85 	bl	800271c <HAL_GetREVID>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d819      	bhi.n	8004e50 <HAL_RCC_OscConfig+0x28c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d108      	bne.n	8004e36 <HAL_RCC_OscConfig+0x272>
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e2c:	4a07      	ldr	r2, [pc, #28]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e030      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
 8004e36:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	031b      	lsls	r3, r3, #12
 8004e44:	4901      	ldr	r1, [pc, #4]	@ (8004e4c <HAL_RCC_OscConfig+0x288>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 8004e4a:	e025      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	4b9a      	ldr	r3, [pc, #616]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	4997      	ldr	r1, [pc, #604]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
 8004e64:	e018      	b.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	4b95      	ldr	r3, [pc, #596]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a94      	ldr	r2, [pc, #592]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fd fc47 	bl	8002704 <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7a:	f7fd fc43 	bl	8002704 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e2ed      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e8c:	4b8b      	ldr	r3, [pc, #556]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a9 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea6:	4b85      	ldr	r3, [pc, #532]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eb0:	4b82      	ldr	r3, [pc, #520]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d007      	beq.n	8004ecc <HAL_RCC_OscConfig+0x308>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b18      	cmp	r3, #24
 8004ec0:	d13a      	bne.n	8004f38 <HAL_RCC_OscConfig+0x374>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d135      	bne.n	8004f38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x320>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b80      	cmp	r3, #128	@ 0x80
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e2c1      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee4:	f7fd fc1a 	bl	800271c <HAL_GetREVID>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d817      	bhi.n	8004f22 <HAL_RCC_OscConfig+0x35e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d108      	bne.n	8004f0c <HAL_RCC_OscConfig+0x348>
 8004efa:	4b70      	ldr	r3, [pc, #448]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f02:	4a6e      	ldr	r2, [pc, #440]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f0a:	e075      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	069b      	lsls	r3, r3, #26
 8004f1a:	4968      	ldr	r1, [pc, #416]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f20:	e06a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f22:	4b66      	ldr	r3, [pc, #408]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	061b      	lsls	r3, r3, #24
 8004f30:	4962      	ldr	r1, [pc, #392]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f36:	e05f      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d042      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f40:	4b5e      	ldr	r3, [pc, #376]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5d      	ldr	r2, [pc, #372]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fbda 	bl	8002704 <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f54:	f7fd fbd6 	bl	8002704 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e280      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f66:	4b55      	ldr	r3, [pc, #340]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f72:	f7fd fbd3 	bl	800271c <HAL_GetREVID>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d817      	bhi.n	8004fb0 <HAL_RCC_OscConfig+0x3ec>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d108      	bne.n	8004f9a <HAL_RCC_OscConfig+0x3d6>
 8004f88:	4b4c      	ldr	r3, [pc, #304]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f90:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f96:	6053      	str	r3, [r2, #4]
 8004f98:	e02e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
 8004f9a:	4b48      	ldr	r3, [pc, #288]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	069b      	lsls	r3, r3, #26
 8004fa8:	4944      	ldr	r1, [pc, #272]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
 8004fae:	e023      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
 8004fb0:	4b42      	ldr	r3, [pc, #264]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	493f      	ldr	r1, [pc, #252]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	e018      	b.n	8004ff8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fd fb97 	bl	8002704 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fda:	f7fd fb93 	bl	8002704 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e23d      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fec:	4b33      	ldr	r3, [pc, #204]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d036      	beq.n	8005072 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500c:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 800500e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd fb74 	bl	8002704 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005020:	f7fd fb70 	bl	8002704 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e21a      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005032:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x45c>
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	4b1e      	ldr	r3, [pc, #120]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd fb5a 	bl	8002704 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005054:	f7fd fb56 	bl	8002704 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e200      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005066:	4b15      	ldr	r3, [pc, #84]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d039      	beq.n	80050f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 800508c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005090:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005092:	f7fd fb37 	bl	8002704 <HAL_GetTick>
 8005096:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509a:	f7fd fb33 	bl	8002704 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e1dd      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050ac:	4b03      	ldr	r3, [pc, #12]	@ (80050bc <HAL_RCC_OscConfig+0x4f8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x4d6>
 80050b8:	e01b      	b.n	80050f2 <HAL_RCC_OscConfig+0x52e>
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050c0:	4b9b      	ldr	r3, [pc, #620]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a9a      	ldr	r2, [pc, #616]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80050c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050cc:	f7fd fb1a 	bl	8002704 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d4:	f7fd fb16 	bl	8002704 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e1c0      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050e6:	4b92      	ldr	r3, [pc, #584]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8081 	beq.w	8005202 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005100:	4b8c      	ldr	r3, [pc, #560]	@ (8005334 <HAL_RCC_OscConfig+0x770>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a8b      	ldr	r2, [pc, #556]	@ (8005334 <HAL_RCC_OscConfig+0x770>)
 8005106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800510c:	f7fd fafa 	bl	8002704 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005114:	f7fd faf6 	bl	8002704 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1a0      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005126:	4b83      	ldr	r3, [pc, #524]	@ (8005334 <HAL_RCC_OscConfig+0x770>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d106      	bne.n	8005148 <HAL_RCC_OscConfig+0x584>
 800513a:	4b7d      	ldr	r3, [pc, #500]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a7c      	ldr	r2, [pc, #496]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	e02d      	b.n	80051a4 <HAL_RCC_OscConfig+0x5e0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10c      	bne.n	800516a <HAL_RCC_OscConfig+0x5a6>
 8005150:	4b77      	ldr	r3, [pc, #476]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005154:	4a76      	ldr	r2, [pc, #472]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6713      	str	r3, [r2, #112]	@ 0x70
 800515c:	4b74      	ldr	r3, [pc, #464]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	4a73      	ldr	r2, [pc, #460]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	6713      	str	r3, [r2, #112]	@ 0x70
 8005168:	e01c      	b.n	80051a4 <HAL_RCC_OscConfig+0x5e0>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x5c8>
 8005172:	4b6f      	ldr	r3, [pc, #444]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005176:	4a6e      	ldr	r2, [pc, #440]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6713      	str	r3, [r2, #112]	@ 0x70
 800517e:	4b6c      	ldr	r3, [pc, #432]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a6b      	ldr	r2, [pc, #428]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6713      	str	r3, [r2, #112]	@ 0x70
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0x5e0>
 800518c:	4b68      	ldr	r3, [pc, #416]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005190:	4a67      	ldr	r2, [pc, #412]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	@ 0x70
 8005198:	4b65      	ldr	r3, [pc, #404]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a64      	ldr	r2, [pc, #400]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800519e:	f023 0304 	bic.w	r3, r3, #4
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd faaa 	bl	8002704 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fd faa6 	bl	8002704 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e14e      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ca:	4b59      	ldr	r3, [pc, #356]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ee      	beq.n	80051b4 <HAL_RCC_OscConfig+0x5f0>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd fa94 	bl	8002704 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fd fa90 	bl	8002704 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e138      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ee      	bne.n	80051e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 812d 	beq.w	8005466 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800520c:	4b48      	ldr	r3, [pc, #288]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005214:	2b18      	cmp	r3, #24
 8005216:	f000 80bd 	beq.w	8005394 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	2b02      	cmp	r3, #2
 8005220:	f040 809e 	bne.w	8005360 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a41      	ldr	r2, [pc, #260]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd fa68 	bl	8002704 <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fd fa64 	bl	8002704 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e10e      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524a:	4b39      	ldr	r3, [pc, #228]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005256:	4b36      	ldr	r3, [pc, #216]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_OscConfig+0x774>)
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	430a      	orrs	r2, r1
 800526a:	4931      	ldr	r1, [pc, #196]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	3b01      	subs	r3, #1
 8005276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	3b01      	subs	r3, #1
 8005280:	025b      	lsls	r3, r3, #9
 8005282:	b29b      	uxth	r3, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	3b01      	subs	r3, #1
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	3b01      	subs	r3, #1
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052a0:	4923      	ldr	r1, [pc, #140]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80052a6:	4b22      	ldr	r3, [pc, #136]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a21      	ldr	r2, [pc, #132]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b6:	4b21      	ldr	r3, [pc, #132]	@ (800533c <HAL_RCC_OscConfig+0x778>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052be:	00d2      	lsls	r2, r2, #3
 80052c0:	491b      	ldr	r1, [pc, #108]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ca:	f023 020c 	bic.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	4917      	ldr	r1, [pc, #92]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052d8:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	f023 0202 	bic.w	r2, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	4912      	ldr	r1, [pc, #72]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052ea:	4b11      	ldr	r3, [pc, #68]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4a10      	ldr	r2, [pc, #64]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005302:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	4a0a      	ldr	r2, [pc, #40]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800530c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800530e:	4b08      	ldr	r3, [pc, #32]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	4a07      	ldr	r2, [pc, #28]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531a:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <HAL_RCC_OscConfig+0x76c>)
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd f9ed 	bl	8002704 <HAL_GetTick>
 800532a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800532c:	e011      	b.n	8005352 <HAL_RCC_OscConfig+0x78e>
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
 8005334:	58024800 	.word	0x58024800
 8005338:	fffffc0c 	.word	0xfffffc0c
 800533c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005340:	f7fd f9e0 	bl	8002704 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e08a      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005352:	4b47      	ldr	r3, [pc, #284]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x77c>
 800535e:	e082      	b.n	8005466 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005360:	4b43      	ldr	r3, [pc, #268]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a42      	ldr	r2, [pc, #264]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800536a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd f9ca 	bl	8002704 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005374:	f7fd f9c6 	bl	8002704 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e070      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005386:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x7b0>
 8005392:	e068      	b.n	8005466 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005394:	4b36      	ldr	r3, [pc, #216]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800539a:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d031      	beq.n	800540c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f003 0203 	and.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d12a      	bne.n	800540c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d122      	bne.n	800540c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d11a      	bne.n	800540c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	0a5b      	lsrs	r3, r3, #9
 80053da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d111      	bne.n	800540c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d108      	bne.n	800540c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e02b      	b.n	8005468 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005410:	4b17      	ldr	r3, [pc, #92]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005414:	08db      	lsrs	r3, r3, #3
 8005416:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800541a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d01f      	beq.n	8005466 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005432:	f7fd f967 	bl	8002704 <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005438:	bf00      	nop
 800543a:	f7fd f963 	bl	8002704 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	4293      	cmp	r3, r2
 8005444:	d0f9      	beq.n	800543a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800544a:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <HAL_RCC_OscConfig+0x8b0>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4906      	ldr	r1, [pc, #24]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005456:	4313      	orrs	r3, r2
 8005458:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800545a:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_RCC_OscConfig+0x8ac>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3730      	adds	r7, #48	@ 0x30
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	ffff0007 	.word	0xffff0007

08005478 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e19c      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b8a      	ldr	r3, [pc, #552]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d910      	bls.n	80054bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b87      	ldr	r3, [pc, #540]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	4985      	ldr	r1, [pc, #532]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b83      	ldr	r3, [pc, #524]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e184      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	4b7b      	ldr	r3, [pc, #492]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d908      	bls.n	80054ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054d8:	4b78      	ldr	r3, [pc, #480]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	4975      	ldr	r1, [pc, #468]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	4b70      	ldr	r3, [pc, #448]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005502:	429a      	cmp	r2, r3
 8005504:	d908      	bls.n	8005518 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005506:	4b6d      	ldr	r3, [pc, #436]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	496a      	ldr	r1, [pc, #424]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005514:	4313      	orrs	r3, r2
 8005516:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d010      	beq.n	8005546 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b64      	ldr	r3, [pc, #400]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005530:	429a      	cmp	r2, r3
 8005532:	d908      	bls.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005534:	4b61      	ldr	r3, [pc, #388]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	495e      	ldr	r1, [pc, #376]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005542:	4313      	orrs	r3, r2
 8005544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d010      	beq.n	8005574 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	4b59      	ldr	r3, [pc, #356]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800555e:	429a      	cmp	r2, r3
 8005560:	d908      	bls.n	8005574 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005562:	4b56      	ldr	r3, [pc, #344]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4953      	ldr	r1, [pc, #332]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005570:	4313      	orrs	r3, r2
 8005572:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	4b4d      	ldr	r3, [pc, #308]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005590:	4b4a      	ldr	r3, [pc, #296]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 020f 	bic.w	r2, r3, #15
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4947      	ldr	r1, [pc, #284]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d055      	beq.n	800565a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055ae:	4b43      	ldr	r3, [pc, #268]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4940      	ldr	r1, [pc, #256]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055c8:	4b3c      	ldr	r3, [pc, #240]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d121      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0f6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055e0:	4b36      	ldr	r3, [pc, #216]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d115      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0ea      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f8:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0de      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005608:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0d6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005618:	4b28      	ldr	r3, [pc, #160]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f023 0207 	bic.w	r2, r3, #7
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4925      	ldr	r1, [pc, #148]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005626:	4313      	orrs	r3, r2
 8005628:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562a:	f7fd f86b 	bl	8002704 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005630:	e00a      	b.n	8005648 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005632:	f7fd f867 	bl	8002704 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0be      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005648:	4b1c      	ldr	r3, [pc, #112]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	429a      	cmp	r2, r3
 8005658:	d1eb      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	429a      	cmp	r2, r3
 8005674:	d208      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005676:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	490e      	ldr	r1, [pc, #56]	@ (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005684:	4313      	orrs	r3, r2
 8005686:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d214      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 020f 	bic.w	r2, r3, #15
 800569e:	4906      	ldr	r1, [pc, #24]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b04      	ldr	r3, [pc, #16]	@ (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e086      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
 80056b8:	52002000 	.word	0x52002000
 80056bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	4b3f      	ldr	r3, [pc, #252]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056d8:	429a      	cmp	r2, r3
 80056da:	d208      	bcs.n	80056ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056dc:	4b3c      	ldr	r3, [pc, #240]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	4939      	ldr	r1, [pc, #228]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005706:	429a      	cmp	r2, r3
 8005708:	d208      	bcs.n	800571c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800570a:	4b31      	ldr	r3, [pc, #196]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	492e      	ldr	r1, [pc, #184]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d010      	beq.n	800574a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005734:	429a      	cmp	r2, r3
 8005736:	d208      	bcs.n	800574a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005738:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	4922      	ldr	r1, [pc, #136]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005746:	4313      	orrs	r3, r2
 8005748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d010      	beq.n	8005778 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	4b1d      	ldr	r3, [pc, #116]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005762:	429a      	cmp	r2, r3
 8005764:	d208      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005766:	4b1a      	ldr	r3, [pc, #104]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4917      	ldr	r1, [pc, #92]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005774:	4313      	orrs	r3, r2
 8005776:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005778:	f000 f834 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b14      	ldr	r3, [pc, #80]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	4912      	ldr	r1, [pc, #72]	@ (80057d4 <HAL_RCC_ClockConfig+0x35c>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
 8005794:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005796:	4b0e      	ldr	r3, [pc, #56]	@ (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <HAL_RCC_ClockConfig+0x35c>)
 80057a0:	5cd3      	ldrb	r3, [r2, r3]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	4a0a      	ldr	r2, [pc, #40]	@ (80057d8 <HAL_RCC_ClockConfig+0x360>)
 80057ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b0:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <HAL_RCC_ClockConfig+0x364>)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80057b6:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <HAL_RCC_ClockConfig+0x368>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fc ff58 	bl	8002670 <HAL_InitTick>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	0800b964 	.word	0x0800b964
 80057d8:	24000004 	.word	0x24000004
 80057dc:	24000000 	.word	0x24000000
 80057e0:	24000008 	.word	0x24000008

080057e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	@ 0x24
 80057e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ea:	4bb3      	ldr	r3, [pc, #716]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057f2:	2b18      	cmp	r3, #24
 80057f4:	f200 8155 	bhi.w	8005aa2 <HAL_RCC_GetSysClockFreq+0x2be>
 80057f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005865 	.word	0x08005865
 8005804:	08005aa3 	.word	0x08005aa3
 8005808:	08005aa3 	.word	0x08005aa3
 800580c:	08005aa3 	.word	0x08005aa3
 8005810:	08005aa3 	.word	0x08005aa3
 8005814:	08005aa3 	.word	0x08005aa3
 8005818:	08005aa3 	.word	0x08005aa3
 800581c:	08005aa3 	.word	0x08005aa3
 8005820:	0800588b 	.word	0x0800588b
 8005824:	08005aa3 	.word	0x08005aa3
 8005828:	08005aa3 	.word	0x08005aa3
 800582c:	08005aa3 	.word	0x08005aa3
 8005830:	08005aa3 	.word	0x08005aa3
 8005834:	08005aa3 	.word	0x08005aa3
 8005838:	08005aa3 	.word	0x08005aa3
 800583c:	08005aa3 	.word	0x08005aa3
 8005840:	08005891 	.word	0x08005891
 8005844:	08005aa3 	.word	0x08005aa3
 8005848:	08005aa3 	.word	0x08005aa3
 800584c:	08005aa3 	.word	0x08005aa3
 8005850:	08005aa3 	.word	0x08005aa3
 8005854:	08005aa3 	.word	0x08005aa3
 8005858:	08005aa3 	.word	0x08005aa3
 800585c:	08005aa3 	.word	0x08005aa3
 8005860:	08005897 	.word	0x08005897
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005864:	4b94      	ldr	r3, [pc, #592]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005870:	4b91      	ldr	r3, [pc, #580]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	4a90      	ldr	r2, [pc, #576]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005882:	e111      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005884:	4b8d      	ldr	r3, [pc, #564]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005886:	61bb      	str	r3, [r7, #24]
      break;
 8005888:	e10e      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800588a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800588c:	61bb      	str	r3, [r7, #24]
      break;
 800588e:	e10b      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005890:	4b8c      	ldr	r3, [pc, #560]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005892:	61bb      	str	r3, [r7, #24]
      break;
 8005894:	e108      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005896:	4b88      	ldr	r3, [pc, #544]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80058a0:	4b85      	ldr	r3, [pc, #532]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	091b      	lsrs	r3, r3, #4
 80058a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058ac:	4b82      	ldr	r3, [pc, #520]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058b6:	4b80      	ldr	r3, [pc, #512]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	08db      	lsrs	r3, r3, #3
 80058bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80e1 	beq.w	8005a9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f000 8083 	beq.w	80059e8 <HAL_RCC_GetSysClockFreq+0x204>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	f200 80a1 	bhi.w	8005a2c <HAL_RCC_GetSysClockFreq+0x248>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x114>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d056      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058f6:	e099      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f8:	4b6f      	ldr	r3, [pc, #444]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02d      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005904:	4b6c      	ldr	r3, [pc, #432]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	4a6b      	ldr	r2, [pc, #428]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b62      	ldr	r3, [pc, #392]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005942:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800595e:	e087      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005acc <HAL_RCC_GetSysClockFreq+0x2e8>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b51      	ldr	r3, [pc, #324]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a02 	vldr	s12, [r7, #8]
 8005986:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059a2:	e065      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b6:	4b40      	ldr	r3, [pc, #256]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059e6:	e043      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ad4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fa:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a2a:	e021      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a70:	4b11      	ldr	r3, [pc, #68]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a74:	0a5b      	lsrs	r3, r3, #9
 8005a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a94:	ee17 3a90 	vmov	r3, s15
 8005a98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
      break;
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005aa2:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005aa4:	61bb      	str	r3, [r7, #24]
      break;
 8005aa6:	bf00      	nop
  }

  return sysclockfreq;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	003d0900 	.word	0x003d0900
 8005ac4:	017d7840 	.word	0x017d7840
 8005ac8:	46000000 	.word	0x46000000
 8005acc:	4c742400 	.word	0x4c742400
 8005ad0:	4a742400 	.word	0x4a742400
 8005ad4:	4bbebc20 	.word	0x4bbebc20

08005ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ade:	f7ff fe81 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	490f      	ldr	r1, [pc, #60]	@ (8005b2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005af0:	5ccb      	ldrb	r3, [r1, r3]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005b06:	5cd3      	ldrb	r3, [r2, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b16:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b1c:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	0800b964 	.word	0x0800b964
 8005b30:	24000004 	.word	0x24000004
 8005b34:	24000000 	.word	0x24000000

08005b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b3c:	f7ff ffcc 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4904      	ldr	r1, [pc, #16]	@ (8005b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	58024400 	.word	0x58024400
 8005b60:	0800b964 	.word	0x0800b964

08005b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b68:	f7ff ffb6 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4904      	ldr	r1, [pc, #16]	@ (8005b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	58024400 	.word	0x58024400
 8005b8c:	0800b964 	.word	0x0800b964

08005b90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b94:	b0ca      	sub	sp, #296	@ 0x128
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	ea54 0305 	orrs.w	r3, r4, r5
 8005bba:	d049      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bc6:	d02f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005bc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bcc:	d828      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bd2:	d01a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bd8:	d822      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be2:	d007      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005be4:	e01c      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	4ab7      	ldr	r2, [pc, #732]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bf2:	e01a      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fc8f 	bl	8007520 <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c08:	e00f      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	3328      	adds	r3, #40	@ 0x28
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fd36 	bl	8007684 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c1e:	e004      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c26:	e000      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c32:	4ba5      	ldr	r3, [pc, #660]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c40:	4aa1      	ldr	r2, [pc, #644]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c46:	e003      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c5c:	f04f 0900 	mov.w	r9, #0
 8005c60:	ea58 0309 	orrs.w	r3, r8, r9
 8005c64:	d047      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d82a      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c70:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005c8d 	.word	0x08005c8d
 8005c7c:	08005c9b 	.word	0x08005c9b
 8005c80:	08005cb1 	.word	0x08005cb1
 8005c84:	08005ccf 	.word	0x08005ccf
 8005c88:	08005ccf 	.word	0x08005ccf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	4a8d      	ldr	r2, [pc, #564]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c98:	e01a      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fc3c 	bl	8007520 <RCCEx_PLL2_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cae:	e00f      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	3328      	adds	r3, #40	@ 0x28
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fce3 	bl	8007684 <RCCEx_PLL3_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cc4:	e004      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cdc:	f023 0107 	bic.w	r1, r3, #7
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	4a78      	ldr	r2, [pc, #480]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d02:	f04f 0b00 	mov.w	fp, #0
 8005d06:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d0a:	d04c      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d030      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1c:	d829      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d20:	d02d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d24:	d825      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d26:	2b80      	cmp	r3, #128	@ 0x80
 8005d28:	d018      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d2a:	2b80      	cmp	r3, #128	@ 0x80
 8005d2c:	d821      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d007      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005d36:	e01c      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d38:	4b63      	ldr	r3, [pc, #396]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	4a62      	ldr	r2, [pc, #392]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d44:	e01c      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fbe6 	bl	8007520 <RCCEx_PLL2_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d5a:	e011      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d60:	3328      	adds	r3, #40	@ 0x28
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fc8d 	bl	8007684 <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d70:	e006      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d88:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	4a4c      	ldr	r2, [pc, #304]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005db2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005db6:	2300      	movs	r3, #0
 8005db8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005dbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d053      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dd2:	d035      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005dd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dd8:	d82e      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005dda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dde:	d031      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005de0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005de4:	d828      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dea:	d01a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005df0:	d822      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005df6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dfa:	d007      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005dfc:	e01c      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfe:	4b32      	ldr	r3, [pc, #200]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	4a31      	ldr	r2, [pc, #196]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e01c      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e10:	3308      	adds	r3, #8
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fb83 	bl	8007520 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e20:	e011      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	3328      	adds	r3, #40	@ 0x28
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fc2a 	bl	8007684 <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e36:	e006      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e3e:	e002      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e52:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e84:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d056      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e9a:	d038      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ea0:	d831      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ea2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ea6:	d034      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ea8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005eac:	d82b      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eb8:	d825      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ec2:	d00a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ec4:	e01f      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ecc:	4ba2      	ldr	r3, [pc, #648]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	4aa1      	ldr	r2, [pc, #644]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fb1c 	bl	8007520 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eee:	e011      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef4:	3328      	adds	r3, #40	@ 0x28
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 fbc3 	bl	8007684 <RCCEx_PLL3_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f04:	e006      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f0c:	e002      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e000      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f2c:	4a8a      	ldr	r2, [pc, #552]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f32:	e003      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d03a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f62:	2b30      	cmp	r3, #48	@ 0x30
 8005f64:	d01f      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005f66:	2b30      	cmp	r3, #48	@ 0x30
 8005f68:	d819      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d00c      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d815      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d019      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d111      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7a:	4b77      	ldr	r3, [pc, #476]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	4a76      	ldr	r2, [pc, #472]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f86:	e011      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	2102      	movs	r1, #2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fac5 	bl	8007520 <RCCEx_PLL2_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa4:	e002      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fb4:	4b68      	ldr	r3, [pc, #416]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc2:	4a65      	ldr	r2, [pc, #404]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005fde:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	d051      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ffc:	d035      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006002:	d82e      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006004:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006008:	d031      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800600a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600e:	d828      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006014:	d01a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	d822      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006024:	d007      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006026:	e01c      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006028:	4b4b      	ldr	r3, [pc, #300]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	4a4a      	ldr	r2, [pc, #296]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800602e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006034:	e01c      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603a:	3308      	adds	r3, #8
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fa6e 	bl	8007520 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800604a:	e011      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	3328      	adds	r3, #40	@ 0x28
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f001 fb15 	bl	8007684 <RCCEx_PLL3_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800606e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006078:	4b37      	ldr	r3, [pc, #220]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800607a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006086:	4a34      	ldr	r2, [pc, #208]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006088:	430b      	orrs	r3, r1
 800608a:	6513      	str	r3, [r2, #80]	@ 0x50
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80060a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060a6:	2300      	movs	r3, #0
 80060a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80060ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d056      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c0:	d033      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80060c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c6:	d82c      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060cc:	d02f      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80060ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d2:	d826      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060d8:	d02b      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80060da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060de:	d820      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060e4:	d012      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80060e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060ea:	d81a      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d022      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d115      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3308      	adds	r3, #8
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fa0e 	bl	8007520 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800610a:	e015      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	3328      	adds	r3, #40	@ 0x28
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fab5 	bl	8007684 <RCCEx_PLL3_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006120:	e00a      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006128:	e006      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800612a:	bf00      	nop
 800612c:	e004      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800612e:	bf00      	nop
 8006130:	e002      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006144:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614e:	4a02      	ldr	r2, [pc, #8]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6513      	str	r3, [r2, #80]	@ 0x50
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006174:	2300      	movs	r3, #0
 8006176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800617a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800617e:	460b      	mov	r3, r1
 8006180:	4313      	orrs	r3, r2
 8006182:	d055      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800618c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006190:	d033      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006196:	d82c      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d02f      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a2:	d826      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061a8:	d02b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80061aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061ae:	d820      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b4:	d012      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80061b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ba:	d81a      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d022      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80061c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c4:	d115      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	3308      	adds	r3, #8
 80061cc:	2101      	movs	r1, #1
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 f9a6 	bl	8007520 <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061da:	e015      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e0:	3328      	adds	r3, #40	@ 0x28
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 fa4d 	bl	8007684 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061f0:	e00a      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006210:	4ba3      	ldr	r3, [pc, #652]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006214:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006220:	4a9f      	ldr	r2, [pc, #636]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006222:	430b      	orrs	r3, r1
 8006224:	6593      	str	r3, [r2, #88]	@ 0x58
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800623c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800624a:	460b      	mov	r3, r1
 800624c:	4313      	orrs	r3, r2
 800624e:	d037      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625a:	d00e      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800625c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006260:	d816      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800626a:	d111      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626c:	4b8c      	ldr	r3, [pc, #560]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	4a8b      	ldr	r2, [pc, #556]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006278:	e00f      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	3308      	adds	r3, #8
 8006280:	2101      	movs	r1, #1
 8006282:	4618      	mov	r0, r3
 8006284:	f001 f94c 	bl	8007520 <RCCEx_PLL2_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062a2:	4b7f      	ldr	r3, [pc, #508]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b0:	4a7b      	ldr	r2, [pc, #492]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d039      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d81c      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	0800632d 	.word	0x0800632d
 80062f4:	08006301 	.word	0x08006301
 80062f8:	0800630f 	.word	0x0800630f
 80062fc:	0800632d 	.word	0x0800632d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006300:	4b67      	ldr	r3, [pc, #412]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	4a66      	ldr	r2, [pc, #408]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800630a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800630c:	e00f      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	3308      	adds	r3, #8
 8006314:	2102      	movs	r1, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 f902 	bl	8007520 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006322:	e004      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800632a:	e000      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800632c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006336:	4b5a      	ldr	r3, [pc, #360]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633a:	f023 0103 	bic.w	r1, r3, #3
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006344:	4a56      	ldr	r2, [pc, #344]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006346:	430b      	orrs	r3, r1
 8006348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800634a:	e003      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006360:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800636a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800636e:	460b      	mov	r3, r1
 8006370:	4313      	orrs	r3, r2
 8006372:	f000 809f 	beq.w	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006376:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4a      	ldr	r2, [pc, #296]	@ (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006382:	f7fc f9bf 	bl	8002704 <HAL_GetTick>
 8006386:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638a:	e00b      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638c:	f7fc f9ba 	bl	8002704 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b64      	cmp	r3, #100	@ 0x64
 800639a:	d903      	bls.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a2:	e005      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a4:	4b3f      	ldr	r3, [pc, #252]	@ (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ed      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80063b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d179      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063b8:	4b39      	ldr	r3, [pc, #228]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063c4:	4053      	eors	r3, r2
 80063c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ce:	4b34      	ldr	r3, [pc, #208]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063da:	4b31      	ldr	r3, [pc, #196]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	4a30      	ldr	r2, [pc, #192]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e6:	4b2e      	ldr	r3, [pc, #184]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063f2:	4a2b      	ldr	r2, [pc, #172]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006406:	d118      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fc f97c 	bl	8002704 <HAL_GetTick>
 800640c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006410:	e00d      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fc f977 	bl	8002704 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006422:	429a      	cmp	r2, r3
 8006424:	d903      	bls.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800642c:	e005      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800642e:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0eb      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643e:	2b00      	cmp	r3, #0
 8006440:	d129      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800644a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800644e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006452:	d10e      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006454:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006464:	091a      	lsrs	r2, r3, #4
 8006466:	4b10      	ldr	r3, [pc, #64]	@ (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006468:	4013      	ands	r3, r2
 800646a:	4a0d      	ldr	r2, [pc, #52]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6113      	str	r3, [r2, #16]
 8006470:	e005      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006472:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	4a0a      	ldr	r2, [pc, #40]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006478:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800647c:	6113      	str	r3, [r2, #16]
 800647e:	4b08      	ldr	r3, [pc, #32]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006480:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800648a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648e:	4a04      	ldr	r2, [pc, #16]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6713      	str	r3, [r2, #112]	@ 0x70
 8006494:	e00e      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800649e:	e009      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80064a0:	58024400 	.word	0x58024400
 80064a4:	58024800 	.word	0x58024800
 80064a8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f002 0301 	and.w	r3, r2, #1
 80064c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f000 8089 	beq.w	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064dc:	2b28      	cmp	r3, #40	@ 0x28
 80064de:	d86b      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080065c1 	.word	0x080065c1
 80064ec:	080065b9 	.word	0x080065b9
 80064f0:	080065b9 	.word	0x080065b9
 80064f4:	080065b9 	.word	0x080065b9
 80064f8:	080065b9 	.word	0x080065b9
 80064fc:	080065b9 	.word	0x080065b9
 8006500:	080065b9 	.word	0x080065b9
 8006504:	080065b9 	.word	0x080065b9
 8006508:	0800658d 	.word	0x0800658d
 800650c:	080065b9 	.word	0x080065b9
 8006510:	080065b9 	.word	0x080065b9
 8006514:	080065b9 	.word	0x080065b9
 8006518:	080065b9 	.word	0x080065b9
 800651c:	080065b9 	.word	0x080065b9
 8006520:	080065b9 	.word	0x080065b9
 8006524:	080065b9 	.word	0x080065b9
 8006528:	080065a3 	.word	0x080065a3
 800652c:	080065b9 	.word	0x080065b9
 8006530:	080065b9 	.word	0x080065b9
 8006534:	080065b9 	.word	0x080065b9
 8006538:	080065b9 	.word	0x080065b9
 800653c:	080065b9 	.word	0x080065b9
 8006540:	080065b9 	.word	0x080065b9
 8006544:	080065b9 	.word	0x080065b9
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065b9 	.word	0x080065b9
 8006550:	080065b9 	.word	0x080065b9
 8006554:	080065b9 	.word	0x080065b9
 8006558:	080065b9 	.word	0x080065b9
 800655c:	080065b9 	.word	0x080065b9
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065b9 	.word	0x080065b9
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065b9 	.word	0x080065b9
 8006570:	080065b9 	.word	0x080065b9
 8006574:	080065b9 	.word	0x080065b9
 8006578:	080065b9 	.word	0x080065b9
 800657c:	080065b9 	.word	0x080065b9
 8006580:	080065b9 	.word	0x080065b9
 8006584:	080065b9 	.word	0x080065b9
 8006588:	080065c1 	.word	0x080065c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	3308      	adds	r3, #8
 8006592:	2101      	movs	r1, #1
 8006594:	4618      	mov	r0, r3
 8006596:	f000 ffc3 	bl	8007520 <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	3328      	adds	r3, #40	@ 0x28
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 f86a 	bl	8007684 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065ca:	4bbf      	ldr	r3, [pc, #764]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065d8:	4abb      	ldr	r2, [pc, #748]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 0302 	and.w	r3, r2, #2
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d041      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800660e:	2b05      	cmp	r3, #5
 8006610:	d824      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006665 	.word	0x08006665
 800661c:	08006631 	.word	0x08006631
 8006620:	08006647 	.word	0x08006647
 8006624:	08006665 	.word	0x08006665
 8006628:	08006665 	.word	0x08006665
 800662c:	08006665 	.word	0x08006665
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	3308      	adds	r3, #8
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ff71 	bl	8007520 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006644:	e00f      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664a:	3328      	adds	r3, #40	@ 0x28
 800664c:	2101      	movs	r1, #1
 800664e:	4618      	mov	r0, r3
 8006650:	f001 f818 	bl	8007684 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800666e:	4b96      	ldr	r3, [pc, #600]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006672:	f023 0107 	bic.w	r1, r3, #7
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800667c:	4a92      	ldr	r2, [pc, #584]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800667e:	430b      	orrs	r3, r1
 8006680:	6553      	str	r3, [r2, #84]	@ 0x54
 8006682:	e003      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f002 0304 	and.w	r3, r2, #4
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800669c:	2300      	movs	r3, #0
 800669e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d044      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d825      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	0800670d 	.word	0x0800670d
 80066c4:	080066d9 	.word	0x080066d9
 80066c8:	080066ef 	.word	0x080066ef
 80066cc:	0800670d 	.word	0x0800670d
 80066d0:	0800670d 	.word	0x0800670d
 80066d4:	0800670d 	.word	0x0800670d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	3308      	adds	r3, #8
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 ff1d 	bl	8007520 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066ec:	e00f      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	3328      	adds	r3, #40	@ 0x28
 80066f4:	2101      	movs	r1, #1
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 ffc4 	bl	8007684 <RCCEx_PLL3_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006702:	e004      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800670c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006716:	4b6c      	ldr	r3, [pc, #432]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671a:	f023 0107 	bic.w	r1, r3, #7
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006726:	4a68      	ldr	r2, [pc, #416]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6593      	str	r3, [r2, #88]	@ 0x58
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f002 0320 	and.w	r3, r2, #32
 8006742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800674c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d055      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006762:	d033      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006768:	d82c      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676e:	d02f      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006774:	d826      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800677a:	d02b      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800677c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006780:	d820      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006786:	d012      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800678c:	d81a      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d022      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006796:	d115      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	3308      	adds	r3, #8
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 febd 	bl	8007520 <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067ac:	e015      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ff64 	bl	8007684 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067c2:	e00a      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ca:	e006      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067cc:	bf00      	nop
 80067ce:	e004      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067e2:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	4a35      	ldr	r2, [pc, #212]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800680e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006818:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d058      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800682a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800682e:	d033      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006830:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006834:	d82c      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	d02f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006840:	d826      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006842:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006846:	d02b      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006848:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800684c:	d820      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800684e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006852:	d012      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006858:	d81a      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d022      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d115      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006868:	3308      	adds	r3, #8
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fe57 	bl	8007520 <RCCEx_PLL2_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006878:	e015      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	3328      	adds	r3, #40	@ 0x28
 8006880:	2102      	movs	r1, #2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fefe 	bl	8007684 <RCCEx_PLL3_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800688e:	e00a      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006896:	e006      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10e      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068ae:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068be:	4a02      	ldr	r2, [pc, #8]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c4:	e006      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80068e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d055      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006900:	d033      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006902:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006906:	d82c      	bhi.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800690c:	d02f      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800690e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006912:	d826      	bhi.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006914:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006918:	d02b      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800691a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800691e:	d820      	bhi.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006924:	d012      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800692a:	d81a      	bhi.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d022      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006934:	d115      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	3308      	adds	r3, #8
 800693c:	2100      	movs	r1, #0
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fdee 	bl	8007520 <RCCEx_PLL2_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800694a:	e015      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	3328      	adds	r3, #40	@ 0x28
 8006952:	2102      	movs	r1, #2
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fe95 	bl	8007684 <RCCEx_PLL3_Config>
 800695a:	4603      	mov	r3, r0
 800695c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006960:	e00a      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006968:	e006      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800696a:	bf00      	nop
 800696c:	e004      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10b      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006980:	4ba1      	ldr	r3, [pc, #644]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006984:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006990:	4a9d      	ldr	r2, [pc, #628]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006992:	430b      	orrs	r3, r1
 8006994:	6593      	str	r3, [r2, #88]	@ 0x58
 8006996:	e003      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f002 0308 	and.w	r3, r2, #8
 80069ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80069ba:	460b      	mov	r3, r1
 80069bc:	4313      	orrs	r3, r2
 80069be:	d01e      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	3328      	adds	r3, #40	@ 0x28
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fe54 	bl	8007684 <RCCEx_PLL3_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80069e8:	4b87      	ldr	r3, [pc, #540]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f8:	4a83      	ldr	r2, [pc, #524]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f002 0310 	and.w	r3, r2, #16
 8006a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d01e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2a:	d10c      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	3328      	adds	r3, #40	@ 0x28
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fe25 	bl	8007684 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a46:	4b70      	ldr	r3, [pc, #448]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a56:	4a6c      	ldr	r2, [pc, #432]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d03e      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a88:	d022      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a8e:	d81b      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a98:	d00b      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006a9a:	e015      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fd3b 	bl	8007520 <RCCEx_PLL2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ab0:	e00f      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	3328      	adds	r3, #40	@ 0x28
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fde2 	bl	8007684 <RCCEx_PLL3_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ada:	4b4b      	ldr	r3, [pc, #300]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006aea:	4a47      	ldr	r2, [pc, #284]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006af0:	e003      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b08:	2300      	movs	r3, #0
 8006b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006b10:	460b      	mov	r3, r1
 8006b12:	4313      	orrs	r3, r2
 8006b14:	d03b      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b22:	d01f      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b28:	d818      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b34:	d007      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006b36:	e011      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b38:	4b33      	ldr	r3, [pc, #204]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	4a32      	ldr	r2, [pc, #200]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b44:	e00f      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fd98 	bl	8007684 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b6e:	4b26      	ldr	r3, [pc, #152]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7e:	4a22      	ldr	r2, [pc, #136]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ba0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d034      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb8:	d007      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006bba:	e011      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00e      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	3308      	adds	r3, #8
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fca4 	bl	8007520 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10d      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	4a02      	ldr	r2, [pc, #8]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c00:	430b      	orrs	r3, r1
 8006c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c04:	e006      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006c06:	bf00      	nop
 8006c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c22:	2300      	movs	r3, #0
 8006c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d00c      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	3328      	adds	r3, #40	@ 0x28
 8006c36:	2102      	movs	r1, #2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fd23 	bl	8007684 <RCCEx_PLL3_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c58:	2300      	movs	r3, #0
 8006c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d038      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c72:	d018      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c78:	d811      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c7e:	d014      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c84:	d80b      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d011      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4bc3      	ldr	r3, [pc, #780]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	4ac2      	ldr	r2, [pc, #776]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca4:	e004      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ca6:	bf00      	nop
 8006ca8:	e002      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006caa:	bf00      	nop
 8006cac:	e000      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cb8:	4bb9      	ldr	r3, [pc, #740]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc8:	4ab5      	ldr	r2, [pc, #724]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cf4:	4baa      	ldr	r3, [pc, #680]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d02:	4aa7      	ldr	r2, [pc, #668]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d14:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d16:	2300      	movs	r3, #0
 8006d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d00a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d24:	4b9e      	ldr	r3, [pc, #632]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d34:	4a9a      	ldr	r2, [pc, #616]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d36:	430b      	orrs	r3, r1
 8006d38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d48:	2300      	movs	r3, #0
 8006d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d009      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d56:	4b92      	ldr	r3, [pc, #584]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d64:	4a8e      	ldr	r2, [pc, #568]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d78:	2300      	movs	r3, #0
 8006d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d80:	460b      	mov	r3, r1
 8006d82:	4313      	orrs	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d86:	4b86      	ldr	r3, [pc, #536]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	4a85      	ldr	r2, [pc, #532]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d90:	6113      	str	r3, [r2, #16]
 8006d92:	4b83      	ldr	r3, [pc, #524]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d94:	6919      	ldr	r1, [r3, #16]
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d9e:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006db6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d009      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006dc0:	4b77      	ldr	r3, [pc, #476]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dce:	4a74      	ldr	r2, [pc, #464]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006df0:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e00:	4a67      	ldr	r2, [pc, #412]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e02:	430b      	orrs	r3, r1
 8006e04:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	d011      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e26:	3308      	adds	r3, #8
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fb78 	bl	8007520 <RCCEx_PLL2_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6239      	str	r1, [r7, #32]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d011      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	3308      	adds	r3, #8
 8006e68:	2101      	movs	r1, #1
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fb58 	bl	8007520 <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	2100      	movs	r1, #0
 8006e90:	61b9      	str	r1, [r7, #24]
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d011      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fb38 	bl	8007520 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	6139      	str	r1, [r7, #16]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006edc:	460b      	mov	r3, r1
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	d011      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	3328      	adds	r3, #40	@ 0x28
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fbca 	bl	8007684 <RCCEx_PLL3_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	2100      	movs	r1, #0
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d011      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f26:	3328      	adds	r3, #40	@ 0x28
 8006f28:	2101      	movs	r1, #1
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fbaa 	bl	8007684 <RCCEx_PLL3_Config>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	d011      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3328      	adds	r3, #40	@ 0x28
 8006f68:	2102      	movs	r1, #2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fb8a 	bl	8007684 <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006f86:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fa0:	58024400 	.word	0x58024400

08006fa4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fa8:	f7fe fd96 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	091b      	lsrs	r3, r3, #4
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	4904      	ldr	r1, [pc, #16]	@ (8006fcc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fba:	5ccb      	ldrb	r3, [r1, r3]
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	58024400 	.word	0x58024400
 8006fcc:	0800b964 	.word	0x0800b964

08006fd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	@ 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fe2:	4b9f      	ldr	r3, [pc, #636]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe6:	0b1b      	lsrs	r3, r3, #12
 8006fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fee:	4b9c      	ldr	r3, [pc, #624]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ffa:	4b99      	ldr	r3, [pc, #612]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffe:	08db      	lsrs	r3, r3, #3
 8007000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8111 	beq.w	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b02      	cmp	r3, #2
 8007022:	f000 8083 	beq.w	800712c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b02      	cmp	r3, #2
 800702a:	f200 80a1 	bhi.w	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d056      	beq.n	80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800703a:	e099      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703c:	4b88      	ldr	r3, [pc, #544]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02d      	beq.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007048:	4b85      	ldr	r3, [pc, #532]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	08db      	lsrs	r3, r3, #3
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	4a84      	ldr	r2, [pc, #528]	@ (8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
 8007058:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007072:	4b7b      	ldr	r3, [pc, #492]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007082:	ed97 6a03 	vldr	s12, [r7, #12]
 8007086:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070a2:	e087      	b.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800726c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e6:	e065      	b.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fa:	4b59      	ldr	r3, [pc, #356]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710a:	ed97 6a03 	vldr	s12, [r7, #12]
 800710e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800712a:	e043      	b.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716e:	e021      	b.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b37      	ldr	r3, [pc, #220]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a03 	vldr	s12, [r7, #12]
 8007196:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e6:	0c1b      	lsrs	r3, r3, #16
 80071e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007208:	ee17 2a90 	vmov	r2, s15
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007210:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	0e1b      	lsrs	r3, r3, #24
 8007216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800722a:	edd7 6a07 	vldr	s13, [r7, #28]
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	ee17 2a90 	vmov	r2, s15
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800723e:	e008      	b.n	8007252 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	609a      	str	r2, [r3, #8]
}
 8007252:	bf00      	nop
 8007254:	3724      	adds	r7, #36	@ 0x24
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
 8007264:	03d09000 	.word	0x03d09000
 8007268:	46000000 	.word	0x46000000
 800726c:	4c742400 	.word	0x4c742400
 8007270:	4a742400 	.word	0x4a742400
 8007274:	4bbebc20 	.word	0x4bbebc20

08007278 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007278:	b480      	push	{r7}
 800727a:	b089      	sub	sp, #36	@ 0x24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007280:	4ba1      	ldr	r3, [pc, #644]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800728a:	4b9f      	ldr	r3, [pc, #636]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728e:	0d1b      	lsrs	r3, r3, #20
 8007290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007294:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007296:	4b9c      	ldr	r3, [pc, #624]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072a2:	4b99      	ldr	r3, [pc, #612]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8111 	beq.w	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	f000 8083 	beq.w	80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	f200 80a1 	bhi.w	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d056      	beq.n	8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072e2:	e099      	b.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e4:	4b88      	ldr	r3, [pc, #544]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02d      	beq.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f0:	4b85      	ldr	r3, [pc, #532]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	08db      	lsrs	r3, r3, #3
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	4a84      	ldr	r2, [pc, #528]	@ (800750c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731a:	4b7b      	ldr	r3, [pc, #492]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732a:	ed97 6a03 	vldr	s12, [r7, #12]
 800732e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800733e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800734a:	e087      	b.n	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800735a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735e:	4b6a      	ldr	r3, [pc, #424]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007372:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800738e:	e065      	b.n	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800739e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a2:	4b59      	ldr	r3, [pc, #356]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d2:	e043      	b.n	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b48      	ldr	r3, [pc, #288]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007416:	e021      	b.n	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b37      	ldr	r3, [pc, #220]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800745c:	4b2a      	ldr	r3, [pc, #168]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	0a5b      	lsrs	r3, r3, #9
 8007462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007476:	edd7 6a07 	vldr	s13, [r7, #28]
 800747a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007482:	ee17 2a90 	vmov	r2, s15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800748a:	4b1f      	ldr	r3, [pc, #124]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	0c1b      	lsrs	r3, r3, #16
 8007490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b0:	ee17 2a90 	vmov	r2, s15
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074b8:	4b13      	ldr	r3, [pc, #76]	@ (8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074bc:	0e1b      	lsrs	r3, r3, #24
 80074be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074de:	ee17 2a90 	vmov	r2, s15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074e6:	e008      	b.n	80074fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
}
 80074fa:	bf00      	nop
 80074fc:	3724      	adds	r7, #36	@ 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	58024400 	.word	0x58024400
 800750c:	03d09000 	.word	0x03d09000
 8007510:	46000000 	.word	0x46000000
 8007514:	4c742400 	.word	0x4c742400
 8007518:	4a742400 	.word	0x4a742400
 800751c:	4bbebc20 	.word	0x4bbebc20

08007520 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800752e:	4b53      	ldr	r3, [pc, #332]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b03      	cmp	r3, #3
 8007538:	d101      	bne.n	800753e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e099      	b.n	8007672 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800753e:	4b4f      	ldr	r3, [pc, #316]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a4e      	ldr	r2, [pc, #312]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007544:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754a:	f7fb f8db 	bl	8002704 <HAL_GetTick>
 800754e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007550:	e008      	b.n	8007564 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007552:	f7fb f8d7 	bl	8002704 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e086      	b.n	8007672 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007564:	4b45      	ldr	r3, [pc, #276]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f0      	bne.n	8007552 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007570:	4b42      	ldr	r3, [pc, #264]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	031b      	lsls	r3, r3, #12
 800757e:	493f      	ldr	r1, [pc, #252]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007580:	4313      	orrs	r3, r2
 8007582:	628b      	str	r3, [r1, #40]	@ 0x28
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	3b01      	subs	r3, #1
 800758a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	3b01      	subs	r3, #1
 8007594:	025b      	lsls	r3, r3, #9
 8007596:	b29b      	uxth	r3, r3
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	3b01      	subs	r3, #1
 80075a0:	041b      	lsls	r3, r3, #16
 80075a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	061b      	lsls	r3, r3, #24
 80075b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075b4:	4931      	ldr	r1, [pc, #196]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075ba:	4b30      	ldr	r3, [pc, #192]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	492d      	ldr	r1, [pc, #180]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075cc:	4b2b      	ldr	r3, [pc, #172]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	f023 0220 	bic.w	r2, r3, #32
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4928      	ldr	r1, [pc, #160]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075de:	4b27      	ldr	r3, [pc, #156]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	4a26      	ldr	r2, [pc, #152]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075e4:	f023 0310 	bic.w	r3, r3, #16
 80075e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075ea:	4b24      	ldr	r3, [pc, #144]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ee:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <RCCEx_PLL2_Config+0x160>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	69d2      	ldr	r2, [r2, #28]
 80075f6:	00d2      	lsls	r2, r2, #3
 80075f8:	4920      	ldr	r1, [pc, #128]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075fe:	4b1f      	ldr	r3, [pc, #124]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007602:	4a1e      	ldr	r2, [pc, #120]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007604:	f043 0310 	orr.w	r3, r3, #16
 8007608:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007610:	4b1a      	ldr	r3, [pc, #104]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a19      	ldr	r2, [pc, #100]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007616:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800761c:	e00f      	b.n	800763e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d106      	bne.n	8007632 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007624:	4b15      	ldr	r3, [pc, #84]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 800762a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007630:	e005      	b.n	800763e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007632:	4b12      	ldr	r3, [pc, #72]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	4a11      	ldr	r2, [pc, #68]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800763c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800763e:	4b0f      	ldr	r3, [pc, #60]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a0e      	ldr	r2, [pc, #56]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007644:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764a:	f7fb f85b 	bl	8002704 <HAL_GetTick>
 800764e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007650:	e008      	b.n	8007664 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007652:	f7fb f857 	bl	8002704 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e006      	b.n	8007672 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <RCCEx_PLL2_Config+0x15c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	58024400 	.word	0x58024400
 8007680:	ffff0007 	.word	0xffff0007

08007684 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007692:	4b53      	ldr	r3, [pc, #332]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d101      	bne.n	80076a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e099      	b.n	80077d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076a2:	4b4f      	ldr	r3, [pc, #316]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a4e      	ldr	r2, [pc, #312]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ae:	f7fb f829 	bl	8002704 <HAL_GetTick>
 80076b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076b4:	e008      	b.n	80076c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076b6:	f7fb f825 	bl	8002704 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e086      	b.n	80077d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076c8:	4b45      	ldr	r3, [pc, #276]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f0      	bne.n	80076b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076d4:	4b42      	ldr	r3, [pc, #264]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	051b      	lsls	r3, r3, #20
 80076e2:	493f      	ldr	r1, [pc, #252]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	025b      	lsls	r3, r3, #9
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	3b01      	subs	r3, #1
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	3b01      	subs	r3, #1
 8007712:	061b      	lsls	r3, r3, #24
 8007714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007718:	4931      	ldr	r1, [pc, #196]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800771e:	4b30      	ldr	r3, [pc, #192]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	492d      	ldr	r1, [pc, #180]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800772c:	4313      	orrs	r3, r2
 800772e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007730:	4b2b      	ldr	r3, [pc, #172]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	4928      	ldr	r1, [pc, #160]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007742:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	4a26      	ldr	r2, [pc, #152]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800774c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800774e:	4b24      	ldr	r3, [pc, #144]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007752:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <RCCEx_PLL3_Config+0x160>)
 8007754:	4013      	ands	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	69d2      	ldr	r2, [r2, #28]
 800775a:	00d2      	lsls	r2, r2, #3
 800775c:	4920      	ldr	r1, [pc, #128]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007762:	4b1f      	ldr	r3, [pc, #124]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	4a1e      	ldr	r2, [pc, #120]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800776c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007774:	4b1a      	ldr	r3, [pc, #104]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4a19      	ldr	r2, [pc, #100]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800777a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007780:	e00f      	b.n	80077a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d106      	bne.n	8007796 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007788:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	4a14      	ldr	r2, [pc, #80]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800778e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007794:	e005      	b.n	80077a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007796:	4b12      	ldr	r3, [pc, #72]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	4a11      	ldr	r2, [pc, #68]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 800779c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077a2:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a0e      	ldr	r2, [pc, #56]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ae:	f7fa ffa9 	bl	8002704 <HAL_GetTick>
 80077b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077b4:	e008      	b.n	80077c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077b6:	f7fa ffa5 	bl	8002704 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <RCCEx_PLL3_Config+0x15c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f0      	beq.n	80077b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
 80077e4:	ffff0007 	.word	0xffff0007

080077e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e10f      	b.n	8007a1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a87      	ldr	r2, [pc, #540]	@ (8007a24 <HAL_SPI_Init+0x23c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <HAL_SPI_Init+0x42>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a86      	ldr	r2, [pc, #536]	@ (8007a28 <HAL_SPI_Init+0x240>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00a      	beq.n	800782a <HAL_SPI_Init+0x42>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a84      	ldr	r2, [pc, #528]	@ (8007a2c <HAL_SPI_Init+0x244>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d005      	beq.n	800782a <HAL_SPI_Init+0x42>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d901      	bls.n	800782a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e0f7      	b.n	8007a1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fe2e 	bl	800848c <SPI_GetPacketSize>
 8007830:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a7b      	ldr	r2, [pc, #492]	@ (8007a24 <HAL_SPI_Init+0x23c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00c      	beq.n	8007856 <HAL_SPI_Init+0x6e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a79      	ldr	r2, [pc, #484]	@ (8007a28 <HAL_SPI_Init+0x240>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d007      	beq.n	8007856 <HAL_SPI_Init+0x6e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a78      	ldr	r2, [pc, #480]	@ (8007a2c <HAL_SPI_Init+0x244>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d002      	beq.n	8007856 <HAL_SPI_Init+0x6e>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b08      	cmp	r3, #8
 8007854:	d811      	bhi.n	800787a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800785a:	4a72      	ldr	r2, [pc, #456]	@ (8007a24 <HAL_SPI_Init+0x23c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d009      	beq.n	8007874 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a70      	ldr	r2, [pc, #448]	@ (8007a28 <HAL_SPI_Init+0x240>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d004      	beq.n	8007874 <HAL_SPI_Init+0x8c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a6f      	ldr	r2, [pc, #444]	@ (8007a2c <HAL_SPI_Init+0x244>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d104      	bne.n	800787e <HAL_SPI_Init+0x96>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b10      	cmp	r3, #16
 8007878:	d901      	bls.n	800787e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0cd      	b.n	8007a1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fa fa4a 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80078ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078c4:	d119      	bne.n	80078fa <HAL_SPI_Init+0x112>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ce:	d103      	bne.n	80078d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10c      	bne.n	80078fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e8:	d107      	bne.n	80078fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <HAL_SPI_Init+0x13e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d90b      	bls.n	8007926 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e007      	b.n	8007936 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007934:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	431a      	orrs	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007948:	ea42 0103 	orr.w	r1, r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007996:	ea42 0103 	orr.w	r1, r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0201 	bic.w	r2, r2, #1
 80079e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40013000 	.word	0x40013000
 8007a28:	40003800 	.word	0x40003800
 8007a2c:	40003c00 	.word	0x40003c00

08007a30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3320      	adds	r3, #32
 8007a46:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a48:	f7fa fe5c 	bl	8002704 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d001      	beq.n	8007a5e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e1d1      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SPI_Transmit+0x3a>
 8007a64:	88fb      	ldrh	r3, [r7, #6]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e1c9      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_SPI_Transmit+0x4c>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e1c2      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2203      	movs	r2, #3
 8007a88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007ad4:	d108      	bne.n	8007ae8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e009      	b.n	8007afc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007afa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	4b96      	ldr	r3, [pc, #600]	@ (8007d5c <HAL_SPI_Transmit+0x32c>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	88f9      	ldrh	r1, [r7, #6]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b28:	d107      	bne.n	8007b3a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d947      	bls.n	8007bd2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b42:	e03f      	b.n	8007bc4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d114      	bne.n	8007b7c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b62:	1d1a      	adds	r2, r3, #4
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007b7a:	e023      	b.n	8007bc4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b7c:	f7fa fdc2 	bl	8002704 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d803      	bhi.n	8007b94 <HAL_SPI_Transmit+0x164>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d102      	bne.n	8007b9a <HAL_SPI_Transmit+0x16a>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d114      	bne.n	8007bc4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fba8 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e11e      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1b9      	bne.n	8007b44 <HAL_SPI_Transmit+0x114>
 8007bd0:	e0f1      	b.n	8007db6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	2b07      	cmp	r3, #7
 8007bd8:	f240 80e6 	bls.w	8007da8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007bdc:	e05d      	b.n	8007c9a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d132      	bne.n	8007c52 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d918      	bls.n	8007c2a <HAL_SPI_Transmit+0x1fa>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d014      	beq.n	8007c2a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b02      	subs	r3, #2
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c28:	e037      	b.n	8007c9a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c38:	1c9a      	adds	r2, r3, #2
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c50:	e023      	b.n	8007c9a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c52:	f7fa fd57 	bl	8002704 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d803      	bhi.n	8007c6a <HAL_SPI_Transmit+0x23a>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d102      	bne.n	8007c70 <HAL_SPI_Transmit+0x240>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d114      	bne.n	8007c9a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fb3d 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e0b3      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d19b      	bne.n	8007bde <HAL_SPI_Transmit+0x1ae>
 8007ca6:	e086      	b.n	8007db6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d154      	bne.n	8007d60 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d918      	bls.n	8007cf4 <HAL_SPI_Transmit+0x2c4>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d914      	bls.n	8007cf4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b04      	subs	r3, #4
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007cf2:	e059      	b.n	8007da8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d917      	bls.n	8007d30 <HAL_SPI_Transmit+0x300>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d013      	beq.n	8007d30 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0c:	881a      	ldrh	r2, [r3, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b02      	subs	r3, #2
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d2e:	e03b      	b.n	8007da8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3320      	adds	r3, #32
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007d5a:	e025      	b.n	8007da8 <HAL_SPI_Transmit+0x378>
 8007d5c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d60:	f7fa fcd0 	bl	8002704 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d803      	bhi.n	8007d78 <HAL_SPI_Transmit+0x348>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d102      	bne.n	8007d7e <HAL_SPI_Transmit+0x34e>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d114      	bne.n	8007da8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fab6 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e02c      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f af79 	bne.w	8007ca8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2108      	movs	r1, #8
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fb35 	bl	8008430 <SPI_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fa87 	bl	80082f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007e00:	2300      	movs	r3, #0
  }
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3301      	adds	r3, #1
 8007e26:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3330      	adds	r3, #48	@ 0x30
 8007e2e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e30:	f7fa fc68 	bl	8002704 <HAL_GetTick>
 8007e34:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d001      	beq.n	8007e46 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007e42:	2302      	movs	r3, #2
 8007e44:	e250      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_Receive+0x46>
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e248      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_SPI_Receive+0x58>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e241      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007ebc:	d108      	bne.n	8007ed0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e009      	b.n	8007ee4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007ee2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	4b95      	ldr	r3, [pc, #596]	@ (8008140 <HAL_SPI_Receive+0x334>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	88f9      	ldrh	r1, [r7, #6]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f10:	d107      	bne.n	8007f22 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d96c      	bls.n	8008004 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007f2a:	e064      	b.n	8007ff6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d114      	bne.n	8007f6c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007f4c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f6a:	e044      	b.n	8007ff6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	8bfa      	ldrh	r2, [r7, #30]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d919      	bls.n	8007fae <HAL_SPI_Receive+0x1a2>
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d014      	beq.n	8007fae <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007f8e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f94:	1d1a      	adds	r2, r3, #4
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007fac:	e023      	b.n	8007ff6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fae:	f7fa fba9 	bl	8002704 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d803      	bhi.n	8007fc6 <HAL_SPI_Receive+0x1ba>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d102      	bne.n	8007fcc <HAL_SPI_Receive+0x1c0>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d114      	bne.n	8007ff6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f98f 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e178      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d194      	bne.n	8007f2c <HAL_SPI_Receive+0x120>
 8008002:	e15e      	b.n	80082c2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b07      	cmp	r3, #7
 800800a:	f240 8153 	bls.w	80082b4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800800e:	e08f      	b.n	8008130 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b01      	cmp	r3, #1
 8008024:	d114      	bne.n	8008050 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	8812      	ldrh	r2, [r2, #0]
 800802e:	b292      	uxth	r2, r2
 8008030:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800804e:	e06f      	b.n	8008130 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008056:	b29b      	uxth	r3, r3
 8008058:	8bfa      	ldrh	r2, [r7, #30]
 800805a:	429a      	cmp	r2, r3
 800805c:	d924      	bls.n	80080a8 <HAL_SPI_Receive+0x29c>
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01f      	beq.n	80080a8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	8812      	ldrh	r2, [r2, #0]
 8008070:	b292      	uxth	r2, r2
 8008072:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008078:	1c9a      	adds	r2, r3, #2
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	8812      	ldrh	r2, [r2, #0]
 8008086:	b292      	uxth	r2, r2
 8008088:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800808e:	1c9a      	adds	r2, r3, #2
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b02      	subs	r3, #2
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080a6:	e043      	b.n	8008130 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d119      	bne.n	80080e8 <HAL_SPI_Receive+0x2dc>
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d014      	beq.n	80080e8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	8812      	ldrh	r2, [r2, #0]
 80080c6:	b292      	uxth	r2, r2
 80080c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080e6:	e023      	b.n	8008130 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e8:	f7fa fb0c 	bl	8002704 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d803      	bhi.n	8008100 <HAL_SPI_Receive+0x2f4>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d102      	bne.n	8008106 <HAL_SPI_Receive+0x2fa>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d114      	bne.n	8008130 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f8f2 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008112:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e0db      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	f47f af69 	bne.w	8008010 <HAL_SPI_Receive+0x204>
 800813e:	e0c0      	b.n	80082c2 <HAL_SPI_Receive+0x4b6>
 8008140:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b01      	cmp	r3, #1
 8008158:	d117      	bne.n	800818a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	b2d2      	uxtb	r2, r2
 800816a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008188:	e094      	b.n	80082b4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008190:	b29b      	uxth	r3, r3
 8008192:	8bfa      	ldrh	r2, [r7, #30]
 8008194:	429a      	cmp	r2, r3
 8008196:	d946      	bls.n	8008226 <HAL_SPI_Receive+0x41a>
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d041      	beq.n	8008226 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ae:	7812      	ldrb	r2, [r2, #0]
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e6:	7812      	ldrb	r2, [r2, #0]
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b04      	subs	r3, #4
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008224:	e046      	b.n	80082b4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d81c      	bhi.n	800826c <HAL_SPI_Receive+0x460>
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d017      	beq.n	800826c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800826a:	e023      	b.n	80082b4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800826c:	f7fa fa4a 	bl	8002704 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d803      	bhi.n	8008284 <HAL_SPI_Receive+0x478>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d102      	bne.n	800828a <HAL_SPI_Receive+0x47e>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d114      	bne.n	80082b4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f830 	bl	80082f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e019      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f47f af41 	bne.w	8008144 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f814 	bl	80082f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80082e6:	2300      	movs	r3, #0
  }
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0208 	orr.w	r2, r2, #8
 800830e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699a      	ldr	r2, [r3, #24]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0210 	orr.w	r2, r2, #16
 800831e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6919      	ldr	r1, [r3, #16]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b3c      	ldr	r3, [pc, #240]	@ (800842c <SPI_CloseTransfer+0x13c>)
 800833c:	400b      	ands	r3, r1
 800833e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800834e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b04      	cmp	r3, #4
 800835a:	d014      	beq.n	8008386 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00f      	beq.n	8008386 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	699a      	ldr	r2, [r3, #24]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0220 	orr.w	r2, r2, #32
 8008384:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d014      	beq.n	80083bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00f      	beq.n	80083bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a2:	f043 0204 	orr.w	r2, r3, #4
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083cc:	f043 0201 	orr.w	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699a      	ldr	r2, [r3, #24]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f6:	f043 0208 	orr.w	r2, r3, #8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800840e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	fffffc90 	.word	0xfffffc90

08008430 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008440:	e010      	b.n	8008464 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008442:	f7fa f95f 	bl	8002704 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d803      	bhi.n	800845a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d102      	bne.n	8008460 <SPI_WaitOnFlagUntilTimeout+0x30>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e00f      	b.n	8008484 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695a      	ldr	r2, [r3, #20]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	461a      	mov	r2, r3
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	429a      	cmp	r2, r3
 8008480:	d0df      	beq.n	8008442 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3307      	adds	r3, #7
 80084aa:	08db      	lsrs	r3, r3, #3
 80084ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e042      	b.n	800855a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f9 fc88 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	@ 0x24
 80084f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fb29 	bl	8009b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fdbe 	bl	8009094 <UART_SetConfig>
 8008518:	4603      	mov	r3, r0
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e01b      	b.n	800855a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008530:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008540:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0201 	orr.w	r2, r2, #1
 8008550:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fba8 	bl	8009ca8 <UART_CheckIdleState>
 8008558:	4603      	mov	r3, r0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b08a      	sub	sp, #40	@ 0x28
 8008566:	af02      	add	r7, sp, #8
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008578:	2b20      	cmp	r3, #32
 800857a:	d17b      	bne.n	8008674 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_UART_Transmit+0x26>
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e074      	b.n	8008676 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2221      	movs	r2, #33	@ 0x21
 8008598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800859c:	f7fa f8b2 	bl	8002704 <HAL_GetTick>
 80085a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ba:	d108      	bne.n	80085ce <HAL_UART_Transmit+0x6c>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e003      	b.n	80085d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085d6:	e030      	b.n	800863a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2200      	movs	r2, #0
 80085e0:	2180      	movs	r1, #128	@ 0x80
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fc0a 	bl	8009dfc <UART_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e03d      	b.n	8008676 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10b      	bne.n	8008618 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800860e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	3302      	adds	r3, #2
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	e007      	b.n	8008628 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1c8      	bne.n	80085d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2200      	movs	r2, #0
 800864e:	2140      	movs	r1, #64	@ 0x40
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f001 fbd3 	bl	8009dfc <UART_WaitOnFlagUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2220      	movs	r2, #32
 800866c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b08a      	sub	sp, #40	@ 0x28
 8008682:	af02      	add	r7, sp, #8
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	603b      	str	r3, [r7, #0]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008694:	2b20      	cmp	r3, #32
 8008696:	f040 80b5 	bne.w	8008804 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_UART_Receive+0x28>
 80086a0:	88fb      	ldrh	r3, [r7, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e0ad      	b.n	8008806 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2222      	movs	r2, #34	@ 0x22
 80086b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086c0:	f7fa f820 	bl	8002704 <HAL_GetTick>
 80086c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	88fa      	ldrh	r2, [r7, #6]
 80086ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	88fa      	ldrh	r2, [r7, #6]
 80086d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086de:	d10e      	bne.n	80086fe <HAL_UART_Receive+0x80>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <HAL_UART_Receive+0x76>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086f2:	e02d      	b.n	8008750 <HAL_UART_Receive+0xd2>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	22ff      	movs	r2, #255	@ 0xff
 80086f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086fc:	e028      	b.n	8008750 <HAL_UART_Receive+0xd2>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10d      	bne.n	8008722 <HAL_UART_Receive+0xa4>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_UART_Receive+0x9a>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	@ 0xff
 8008712:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008716:	e01b      	b.n	8008750 <HAL_UART_Receive+0xd2>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	227f      	movs	r2, #127	@ 0x7f
 800871c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008720:	e016      	b.n	8008750 <HAL_UART_Receive+0xd2>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800872a:	d10d      	bne.n	8008748 <HAL_UART_Receive+0xca>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d104      	bne.n	800873e <HAL_UART_Receive+0xc0>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	227f      	movs	r2, #127	@ 0x7f
 8008738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800873c:	e008      	b.n	8008750 <HAL_UART_Receive+0xd2>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	223f      	movs	r2, #63	@ 0x3f
 8008742:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008746:	e003      	b.n	8008750 <HAL_UART_Receive+0xd2>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008756:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008760:	d108      	bne.n	8008774 <HAL_UART_Receive+0xf6>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d104      	bne.n	8008774 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	e003      	b.n	800877c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008778:	2300      	movs	r3, #0
 800877a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800877c:	e036      	b.n	80087ec <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2200      	movs	r2, #0
 8008786:	2120      	movs	r1, #32
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f001 fb37 	bl	8009dfc <UART_WaitOnFlagUntilTimeout>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e032      	b.n	8008806 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10c      	bne.n	80087c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	8a7b      	ldrh	r3, [r7, #18]
 80087b0:	4013      	ands	r3, r2
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	3302      	adds	r3, #2
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	e00c      	b.n	80087da <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	8a7b      	ldrh	r3, [r7, #18]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	4013      	ands	r3, r2
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1c2      	bne.n	800877e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e000      	b.n	8008806 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008804:	2302      	movs	r3, #2
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	@ 0x28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008824:	2b20      	cmp	r3, #32
 8008826:	d137      	bne.n	8008898 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <HAL_UART_Receive_IT+0x24>
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e030      	b.n	800889a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a18      	ldr	r2, [pc, #96]	@ (80088a4 <HAL_UART_Receive_IT+0x94>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d01f      	beq.n	8008888 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	613b      	str	r3, [r7, #16]
   return(result);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800886a:	627b      	str	r3, [r7, #36]	@ 0x24
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	623b      	str	r3, [r7, #32]
 8008876:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	61bb      	str	r3, [r7, #24]
   return(result);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	461a      	mov	r2, r3
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f001 fb22 	bl	8009ed8 <UART_Start_Receive_IT>
 8008894:	4603      	mov	r3, r0
 8008896:	e000      	b.n	800889a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3728      	adds	r7, #40	@ 0x28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	58000c00 	.word	0x58000c00

080088a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b0ba      	sub	sp, #232	@ 0xe8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80088d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80088d6:	4013      	ands	r3, r2
 80088d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80088dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11b      	bne.n	800891c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d015      	beq.n	800891c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8393 	beq.w	8009038 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
      }
      return;
 800891a:	e38d      	b.n	8009038 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800891c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 8123 	beq.w	8008b6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008926:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800892a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b60 <HAL_UART_IRQHandler+0x2b8>)
 800892c:	4013      	ands	r3, r2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008936:	4b8b      	ldr	r3, [pc, #556]	@ (8008b64 <HAL_UART_IRQHandler+0x2bc>)
 8008938:	4013      	ands	r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 8116 	beq.w	8008b6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d011      	beq.n	8008970 <HAL_UART_IRQHandler+0xc8>
 800894c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2201      	movs	r2, #1
 800895e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008966:	f043 0201 	orr.w	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d011      	beq.n	80089a0 <HAL_UART_IRQHandler+0xf8>
 800897c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2202      	movs	r2, #2
 800898e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008996:	f043 0204 	orr.w	r2, r3, #4
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d011      	beq.n	80089d0 <HAL_UART_IRQHandler+0x128>
 80089ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2204      	movs	r2, #4
 80089be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c6:	f043 0202 	orr.w	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d017      	beq.n	8008a0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d105      	bne.n	80089f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008b60 <HAL_UART_IRQHandler+0x2b8>)
 80089ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2208      	movs	r2, #8
 80089fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a02:	f043 0208 	orr.w	r2, r3, #8
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d012      	beq.n	8008a3e <HAL_UART_IRQHandler+0x196>
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00c      	beq.n	8008a3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a34:	f043 0220 	orr.w	r2, r3, #32
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 82f9 	beq.w	800903c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d013      	beq.n	8008a7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a92:	2b40      	cmp	r3, #64	@ 0x40
 8008a94:	d005      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d054      	beq.n	8008b4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 fb3a 	bl	800a11c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab2:	2b40      	cmp	r3, #64	@ 0x40
 8008ab4:	d146      	bne.n	8008b44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1d9      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d017      	beq.n	8008b3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b12:	4a15      	ldr	r2, [pc, #84]	@ (8008b68 <HAL_UART_IRQHandler+0x2c0>)
 8008b14:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fa faaf 	bl	8003080 <HAL_DMA_Abort_IT>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d019      	beq.n	8008b5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008b36:	4610      	mov	r0, r2
 8008b38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3a:	e00f      	b.n	8008b5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa93 	bl	8009068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b42:	e00b      	b.n	8008b5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fa8f 	bl	8009068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b4a:	e007      	b.n	8008b5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa8b 	bl	8009068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008b5a:	e26f      	b.n	800903c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5c:	bf00      	nop
    return;
 8008b5e:	e26d      	b.n	800903c <HAL_UART_IRQHandler+0x794>
 8008b60:	10000001 	.word	0x10000001
 8008b64:	04000120 	.word	0x04000120
 8008b68:	0800a1e9 	.word	0x0800a1e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	f040 8203 	bne.w	8008f7c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 81fc 	beq.w	8008f7c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 81f5 	beq.w	8008f7c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2210      	movs	r2, #16
 8008b98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	f040 816d 	bne.w	8008e84 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4aa4      	ldr	r2, [pc, #656]	@ (8008e44 <HAL_UART_IRQHandler+0x59c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d068      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4aa1      	ldr	r2, [pc, #644]	@ (8008e48 <HAL_UART_IRQHandler+0x5a0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d061      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a9f      	ldr	r2, [pc, #636]	@ (8008e4c <HAL_UART_IRQHandler+0x5a4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d05a      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a9c      	ldr	r2, [pc, #624]	@ (8008e50 <HAL_UART_IRQHandler+0x5a8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d053      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a9a      	ldr	r2, [pc, #616]	@ (8008e54 <HAL_UART_IRQHandler+0x5ac>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d04c      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a97      	ldr	r2, [pc, #604]	@ (8008e58 <HAL_UART_IRQHandler+0x5b0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d045      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a95      	ldr	r2, [pc, #596]	@ (8008e5c <HAL_UART_IRQHandler+0x5b4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d03e      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a92      	ldr	r2, [pc, #584]	@ (8008e60 <HAL_UART_IRQHandler+0x5b8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d037      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a90      	ldr	r2, [pc, #576]	@ (8008e64 <HAL_UART_IRQHandler+0x5bc>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d030      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a8d      	ldr	r2, [pc, #564]	@ (8008e68 <HAL_UART_IRQHandler+0x5c0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d029      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a8b      	ldr	r2, [pc, #556]	@ (8008e6c <HAL_UART_IRQHandler+0x5c4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d022      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a88      	ldr	r2, [pc, #544]	@ (8008e70 <HAL_UART_IRQHandler+0x5c8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d01b      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a86      	ldr	r2, [pc, #536]	@ (8008e74 <HAL_UART_IRQHandler+0x5cc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d014      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a83      	ldr	r2, [pc, #524]	@ (8008e78 <HAL_UART_IRQHandler+0x5d0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00d      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a81      	ldr	r2, [pc, #516]	@ (8008e7c <HAL_UART_IRQHandler+0x5d4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d006      	beq.n	8008c8a <HAL_UART_IRQHandler+0x3e2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a7e      	ldr	r2, [pc, #504]	@ (8008e80 <HAL_UART_IRQHandler+0x5d8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d106      	bne.n	8008c98 <HAL_UART_IRQHandler+0x3f0>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	e005      	b.n	8008ca4 <HAL_UART_IRQHandler+0x3fc>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 80ad 	beq.w	8008e0c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	f080 80a5 	bcs.w	8008e0c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cd8:	f000 8087 	beq.w	8008dea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1da      	bne.n	8008cdc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3308      	adds	r3, #8
 8008d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e1      	bne.n	8008d26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3308      	adds	r3, #8
 8008d68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e3      	bne.n	8008d62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db8:	f023 0310 	bic.w	r3, r3, #16
 8008dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e4      	bne.n	8008da8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7f9 fe2d 	bl	8002a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f939 	bl	800907c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008e0a:	e119      	b.n	8009040 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e16:	429a      	cmp	r2, r3
 8008e18:	f040 8112 	bne.w	8009040 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e28:	f040 810a 	bne.w	8009040 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f91e 	bl	800907c <HAL_UARTEx_RxEventCallback>
      return;
 8008e40:	e0fe      	b.n	8009040 <HAL_UART_IRQHandler+0x798>
 8008e42:	bf00      	nop
 8008e44:	40020010 	.word	0x40020010
 8008e48:	40020028 	.word	0x40020028
 8008e4c:	40020040 	.word	0x40020040
 8008e50:	40020058 	.word	0x40020058
 8008e54:	40020070 	.word	0x40020070
 8008e58:	40020088 	.word	0x40020088
 8008e5c:	400200a0 	.word	0x400200a0
 8008e60:	400200b8 	.word	0x400200b8
 8008e64:	40020410 	.word	0x40020410
 8008e68:	40020428 	.word	0x40020428
 8008e6c:	40020440 	.word	0x40020440
 8008e70:	40020458 	.word	0x40020458
 8008e74:	40020470 	.word	0x40020470
 8008e78:	40020488 	.word	0x40020488
 8008e7c:	400204a0 	.word	0x400204a0
 8008e80:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80cf 	beq.w	8009044 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80ca 	beq.w	8009044 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ed4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e4      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef6:	6a3a      	ldr	r2, [r7, #32]
 8008ef8:	4b55      	ldr	r3, [pc, #340]	@ (8009050 <HAL_UART_IRQHandler+0x7a8>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e3      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0310 	bic.w	r3, r3, #16
 8008f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	617b      	str	r3, [r7, #20]
   return(result);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e4      	bne.n	8008f32 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f881 	bl	800907c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f7a:	e063      	b.n	8009044 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00e      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x6fe>
 8008f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 fe80 	bl	800aca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fa4:	e051      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d014      	beq.n	8008fdc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d008      	beq.n	8008fdc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d03a      	beq.n	8009048 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
    }
    return;
 8008fda:	e035      	b.n	8009048 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <HAL_UART_IRQHandler+0x754>
 8008fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f909 	bl	800a20c <UART_EndTransmit_IT>
    return;
 8008ffa:	e026      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <HAL_UART_IRQHandler+0x774>
 8009008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800900c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fe59 	bl	800accc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800901a:	e016      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800901c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <HAL_UART_IRQHandler+0x7a2>
 8009028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800902c:	2b00      	cmp	r3, #0
 800902e:	da0c      	bge.n	800904a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fe41 	bl	800acb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009036:	e008      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009038:	bf00      	nop
 800903a:	e006      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
    return;
 800903c:	bf00      	nop
 800903e:	e004      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009040:	bf00      	nop
 8009042:	e002      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009044:	bf00      	nop
 8009046:	e000      	b.n	800904a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009048:	bf00      	nop
  }
}
 800904a:	37e8      	adds	r7, #232	@ 0xe8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	effffffe 	.word	0xeffffffe

08009054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009098:	b092      	sub	sp, #72	@ 0x48
 800909a:	af00      	add	r7, sp, #0
 800909c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4bbe      	ldr	r3, [pc, #760]	@ (80093bc <UART_SetConfig+0x328>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4ab3      	ldr	r2, [pc, #716]	@ (80093c0 <UART_SetConfig+0x32c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d004      	beq.n	8009100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090fc:	4313      	orrs	r3, r2
 80090fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	4baf      	ldr	r3, [pc, #700]	@ (80093c4 <UART_SetConfig+0x330>)
 8009108:	4013      	ands	r3, r2
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009110:	430b      	orrs	r3, r1
 8009112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	f023 010f 	bic.w	r1, r3, #15
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4aa6      	ldr	r2, [pc, #664]	@ (80093c8 <UART_SetConfig+0x334>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d177      	bne.n	8009224 <UART_SetConfig+0x190>
 8009134:	4ba5      	ldr	r3, [pc, #660]	@ (80093cc <UART_SetConfig+0x338>)
 8009136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009138:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800913c:	2b28      	cmp	r3, #40	@ 0x28
 800913e:	d86d      	bhi.n	800921c <UART_SetConfig+0x188>
 8009140:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <UART_SetConfig+0xb4>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	080091ed 	.word	0x080091ed
 800914c:	0800921d 	.word	0x0800921d
 8009150:	0800921d 	.word	0x0800921d
 8009154:	0800921d 	.word	0x0800921d
 8009158:	0800921d 	.word	0x0800921d
 800915c:	0800921d 	.word	0x0800921d
 8009160:	0800921d 	.word	0x0800921d
 8009164:	0800921d 	.word	0x0800921d
 8009168:	080091f5 	.word	0x080091f5
 800916c:	0800921d 	.word	0x0800921d
 8009170:	0800921d 	.word	0x0800921d
 8009174:	0800921d 	.word	0x0800921d
 8009178:	0800921d 	.word	0x0800921d
 800917c:	0800921d 	.word	0x0800921d
 8009180:	0800921d 	.word	0x0800921d
 8009184:	0800921d 	.word	0x0800921d
 8009188:	080091fd 	.word	0x080091fd
 800918c:	0800921d 	.word	0x0800921d
 8009190:	0800921d 	.word	0x0800921d
 8009194:	0800921d 	.word	0x0800921d
 8009198:	0800921d 	.word	0x0800921d
 800919c:	0800921d 	.word	0x0800921d
 80091a0:	0800921d 	.word	0x0800921d
 80091a4:	0800921d 	.word	0x0800921d
 80091a8:	08009205 	.word	0x08009205
 80091ac:	0800921d 	.word	0x0800921d
 80091b0:	0800921d 	.word	0x0800921d
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	0800921d 	.word	0x0800921d
 80091bc:	0800921d 	.word	0x0800921d
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	0800920d 	.word	0x0800920d
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800921d 	.word	0x0800921d
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	0800921d 	.word	0x0800921d
 80091dc:	0800921d 	.word	0x0800921d
 80091e0:	0800921d 	.word	0x0800921d
 80091e4:	0800921d 	.word	0x0800921d
 80091e8:	08009215 	.word	0x08009215
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e222      	b.n	800963a <UART_SetConfig+0x5a6>
 80091f4:	2304      	movs	r3, #4
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e21e      	b.n	800963a <UART_SetConfig+0x5a6>
 80091fc:	2308      	movs	r3, #8
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e21a      	b.n	800963a <UART_SetConfig+0x5a6>
 8009204:	2310      	movs	r3, #16
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e216      	b.n	800963a <UART_SetConfig+0x5a6>
 800920c:	2320      	movs	r3, #32
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e212      	b.n	800963a <UART_SetConfig+0x5a6>
 8009214:	2340      	movs	r3, #64	@ 0x40
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e20e      	b.n	800963a <UART_SetConfig+0x5a6>
 800921c:	2380      	movs	r3, #128	@ 0x80
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e20a      	b.n	800963a <UART_SetConfig+0x5a6>
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a69      	ldr	r2, [pc, #420]	@ (80093d0 <UART_SetConfig+0x33c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d130      	bne.n	8009290 <UART_SetConfig+0x1fc>
 800922e:	4b67      	ldr	r3, [pc, #412]	@ (80093cc <UART_SetConfig+0x338>)
 8009230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	2b05      	cmp	r3, #5
 8009238:	d826      	bhi.n	8009288 <UART_SetConfig+0x1f4>
 800923a:	a201      	add	r2, pc, #4	@ (adr r2, 8009240 <UART_SetConfig+0x1ac>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009259 	.word	0x08009259
 8009244:	08009261 	.word	0x08009261
 8009248:	08009269 	.word	0x08009269
 800924c:	08009271 	.word	0x08009271
 8009250:	08009279 	.word	0x08009279
 8009254:	08009281 	.word	0x08009281
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e1ec      	b.n	800963a <UART_SetConfig+0x5a6>
 8009260:	2304      	movs	r3, #4
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e1e8      	b.n	800963a <UART_SetConfig+0x5a6>
 8009268:	2308      	movs	r3, #8
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e1e4      	b.n	800963a <UART_SetConfig+0x5a6>
 8009270:	2310      	movs	r3, #16
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e1e0      	b.n	800963a <UART_SetConfig+0x5a6>
 8009278:	2320      	movs	r3, #32
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e1dc      	b.n	800963a <UART_SetConfig+0x5a6>
 8009280:	2340      	movs	r3, #64	@ 0x40
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e1d8      	b.n	800963a <UART_SetConfig+0x5a6>
 8009288:	2380      	movs	r3, #128	@ 0x80
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e1d4      	b.n	800963a <UART_SetConfig+0x5a6>
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a4f      	ldr	r2, [pc, #316]	@ (80093d4 <UART_SetConfig+0x340>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d130      	bne.n	80092fc <UART_SetConfig+0x268>
 800929a:	4b4c      	ldr	r3, [pc, #304]	@ (80093cc <UART_SetConfig+0x338>)
 800929c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	d826      	bhi.n	80092f4 <UART_SetConfig+0x260>
 80092a6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <UART_SetConfig+0x218>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092c5 	.word	0x080092c5
 80092b0:	080092cd 	.word	0x080092cd
 80092b4:	080092d5 	.word	0x080092d5
 80092b8:	080092dd 	.word	0x080092dd
 80092bc:	080092e5 	.word	0x080092e5
 80092c0:	080092ed 	.word	0x080092ed
 80092c4:	2300      	movs	r3, #0
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e1b6      	b.n	800963a <UART_SetConfig+0x5a6>
 80092cc:	2304      	movs	r3, #4
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e1b2      	b.n	800963a <UART_SetConfig+0x5a6>
 80092d4:	2308      	movs	r3, #8
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e1ae      	b.n	800963a <UART_SetConfig+0x5a6>
 80092dc:	2310      	movs	r3, #16
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e1aa      	b.n	800963a <UART_SetConfig+0x5a6>
 80092e4:	2320      	movs	r3, #32
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e1a6      	b.n	800963a <UART_SetConfig+0x5a6>
 80092ec:	2340      	movs	r3, #64	@ 0x40
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e1a2      	b.n	800963a <UART_SetConfig+0x5a6>
 80092f4:	2380      	movs	r3, #128	@ 0x80
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e19e      	b.n	800963a <UART_SetConfig+0x5a6>
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a35      	ldr	r2, [pc, #212]	@ (80093d8 <UART_SetConfig+0x344>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d130      	bne.n	8009368 <UART_SetConfig+0x2d4>
 8009306:	4b31      	ldr	r3, [pc, #196]	@ (80093cc <UART_SetConfig+0x338>)
 8009308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	2b05      	cmp	r3, #5
 8009310:	d826      	bhi.n	8009360 <UART_SetConfig+0x2cc>
 8009312:	a201      	add	r2, pc, #4	@ (adr r2, 8009318 <UART_SetConfig+0x284>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	08009331 	.word	0x08009331
 800931c:	08009339 	.word	0x08009339
 8009320:	08009341 	.word	0x08009341
 8009324:	08009349 	.word	0x08009349
 8009328:	08009351 	.word	0x08009351
 800932c:	08009359 	.word	0x08009359
 8009330:	2300      	movs	r3, #0
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e180      	b.n	800963a <UART_SetConfig+0x5a6>
 8009338:	2304      	movs	r3, #4
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e17c      	b.n	800963a <UART_SetConfig+0x5a6>
 8009340:	2308      	movs	r3, #8
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e178      	b.n	800963a <UART_SetConfig+0x5a6>
 8009348:	2310      	movs	r3, #16
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e174      	b.n	800963a <UART_SetConfig+0x5a6>
 8009350:	2320      	movs	r3, #32
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e170      	b.n	800963a <UART_SetConfig+0x5a6>
 8009358:	2340      	movs	r3, #64	@ 0x40
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e16c      	b.n	800963a <UART_SetConfig+0x5a6>
 8009360:	2380      	movs	r3, #128	@ 0x80
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e168      	b.n	800963a <UART_SetConfig+0x5a6>
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1b      	ldr	r2, [pc, #108]	@ (80093dc <UART_SetConfig+0x348>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d142      	bne.n	80093f8 <UART_SetConfig+0x364>
 8009372:	4b16      	ldr	r3, [pc, #88]	@ (80093cc <UART_SetConfig+0x338>)
 8009374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b05      	cmp	r3, #5
 800937c:	d838      	bhi.n	80093f0 <UART_SetConfig+0x35c>
 800937e:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <UART_SetConfig+0x2f0>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	0800939d 	.word	0x0800939d
 8009388:	080093a5 	.word	0x080093a5
 800938c:	080093ad 	.word	0x080093ad
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080093e1 	.word	0x080093e1
 8009398:	080093e9 	.word	0x080093e9
 800939c:	2300      	movs	r3, #0
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e14a      	b.n	800963a <UART_SetConfig+0x5a6>
 80093a4:	2304      	movs	r3, #4
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e146      	b.n	800963a <UART_SetConfig+0x5a6>
 80093ac:	2308      	movs	r3, #8
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e142      	b.n	800963a <UART_SetConfig+0x5a6>
 80093b4:	2310      	movs	r3, #16
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e13e      	b.n	800963a <UART_SetConfig+0x5a6>
 80093bc:	cfff69f3 	.word	0xcfff69f3
 80093c0:	58000c00 	.word	0x58000c00
 80093c4:	11fff4ff 	.word	0x11fff4ff
 80093c8:	40011000 	.word	0x40011000
 80093cc:	58024400 	.word	0x58024400
 80093d0:	40004400 	.word	0x40004400
 80093d4:	40004800 	.word	0x40004800
 80093d8:	40004c00 	.word	0x40004c00
 80093dc:	40005000 	.word	0x40005000
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e128      	b.n	800963a <UART_SetConfig+0x5a6>
 80093e8:	2340      	movs	r3, #64	@ 0x40
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e124      	b.n	800963a <UART_SetConfig+0x5a6>
 80093f0:	2380      	movs	r3, #128	@ 0x80
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e120      	b.n	800963a <UART_SetConfig+0x5a6>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4acb      	ldr	r2, [pc, #812]	@ (800972c <UART_SetConfig+0x698>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d176      	bne.n	80094f0 <UART_SetConfig+0x45c>
 8009402:	4bcb      	ldr	r3, [pc, #812]	@ (8009730 <UART_SetConfig+0x69c>)
 8009404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800940a:	2b28      	cmp	r3, #40	@ 0x28
 800940c:	d86c      	bhi.n	80094e8 <UART_SetConfig+0x454>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <UART_SetConfig+0x380>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	080094b9 	.word	0x080094b9
 8009418:	080094e9 	.word	0x080094e9
 800941c:	080094e9 	.word	0x080094e9
 8009420:	080094e9 	.word	0x080094e9
 8009424:	080094e9 	.word	0x080094e9
 8009428:	080094e9 	.word	0x080094e9
 800942c:	080094e9 	.word	0x080094e9
 8009430:	080094e9 	.word	0x080094e9
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094e9 	.word	0x080094e9
 800943c:	080094e9 	.word	0x080094e9
 8009440:	080094e9 	.word	0x080094e9
 8009444:	080094e9 	.word	0x080094e9
 8009448:	080094e9 	.word	0x080094e9
 800944c:	080094e9 	.word	0x080094e9
 8009450:	080094e9 	.word	0x080094e9
 8009454:	080094c9 	.word	0x080094c9
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094e9 	.word	0x080094e9
 8009460:	080094e9 	.word	0x080094e9
 8009464:	080094e9 	.word	0x080094e9
 8009468:	080094e9 	.word	0x080094e9
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094e9 	.word	0x080094e9
 8009474:	080094d1 	.word	0x080094d1
 8009478:	080094e9 	.word	0x080094e9
 800947c:	080094e9 	.word	0x080094e9
 8009480:	080094e9 	.word	0x080094e9
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094e9 	.word	0x080094e9
 800948c:	080094e9 	.word	0x080094e9
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094d9 	.word	0x080094d9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094e1 	.word	0x080094e1
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e0bc      	b.n	800963a <UART_SetConfig+0x5a6>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e0b8      	b.n	800963a <UART_SetConfig+0x5a6>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e0b4      	b.n	800963a <UART_SetConfig+0x5a6>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e0b0      	b.n	800963a <UART_SetConfig+0x5a6>
 80094d8:	2320      	movs	r3, #32
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e0ac      	b.n	800963a <UART_SetConfig+0x5a6>
 80094e0:	2340      	movs	r3, #64	@ 0x40
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e0a8      	b.n	800963a <UART_SetConfig+0x5a6>
 80094e8:	2380      	movs	r3, #128	@ 0x80
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e0a4      	b.n	800963a <UART_SetConfig+0x5a6>
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a8f      	ldr	r2, [pc, #572]	@ (8009734 <UART_SetConfig+0x6a0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d130      	bne.n	800955c <UART_SetConfig+0x4c8>
 80094fa:	4b8d      	ldr	r3, [pc, #564]	@ (8009730 <UART_SetConfig+0x69c>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	2b05      	cmp	r3, #5
 8009504:	d826      	bhi.n	8009554 <UART_SetConfig+0x4c0>
 8009506:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <UART_SetConfig+0x478>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009525 	.word	0x08009525
 8009510:	0800952d 	.word	0x0800952d
 8009514:	08009535 	.word	0x08009535
 8009518:	0800953d 	.word	0x0800953d
 800951c:	08009545 	.word	0x08009545
 8009520:	0800954d 	.word	0x0800954d
 8009524:	2300      	movs	r3, #0
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e086      	b.n	800963a <UART_SetConfig+0x5a6>
 800952c:	2304      	movs	r3, #4
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e082      	b.n	800963a <UART_SetConfig+0x5a6>
 8009534:	2308      	movs	r3, #8
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e07e      	b.n	800963a <UART_SetConfig+0x5a6>
 800953c:	2310      	movs	r3, #16
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e07a      	b.n	800963a <UART_SetConfig+0x5a6>
 8009544:	2320      	movs	r3, #32
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e076      	b.n	800963a <UART_SetConfig+0x5a6>
 800954c:	2340      	movs	r3, #64	@ 0x40
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e072      	b.n	800963a <UART_SetConfig+0x5a6>
 8009554:	2380      	movs	r3, #128	@ 0x80
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e06e      	b.n	800963a <UART_SetConfig+0x5a6>
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a75      	ldr	r2, [pc, #468]	@ (8009738 <UART_SetConfig+0x6a4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d130      	bne.n	80095c8 <UART_SetConfig+0x534>
 8009566:	4b72      	ldr	r3, [pc, #456]	@ (8009730 <UART_SetConfig+0x69c>)
 8009568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	2b05      	cmp	r3, #5
 8009570:	d826      	bhi.n	80095c0 <UART_SetConfig+0x52c>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <UART_SetConfig+0x4e4>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	08009591 	.word	0x08009591
 800957c:	08009599 	.word	0x08009599
 8009580:	080095a1 	.word	0x080095a1
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e050      	b.n	800963a <UART_SetConfig+0x5a6>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e04c      	b.n	800963a <UART_SetConfig+0x5a6>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e048      	b.n	800963a <UART_SetConfig+0x5a6>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e044      	b.n	800963a <UART_SetConfig+0x5a6>
 80095b0:	2320      	movs	r3, #32
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e040      	b.n	800963a <UART_SetConfig+0x5a6>
 80095b8:	2340      	movs	r3, #64	@ 0x40
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e03c      	b.n	800963a <UART_SetConfig+0x5a6>
 80095c0:	2380      	movs	r3, #128	@ 0x80
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e038      	b.n	800963a <UART_SetConfig+0x5a6>
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a5b      	ldr	r2, [pc, #364]	@ (800973c <UART_SetConfig+0x6a8>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d130      	bne.n	8009634 <UART_SetConfig+0x5a0>
 80095d2:	4b57      	ldr	r3, [pc, #348]	@ (8009730 <UART_SetConfig+0x69c>)
 80095d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d826      	bhi.n	800962c <UART_SetConfig+0x598>
 80095de:	a201      	add	r2, pc, #4	@ (adr r2, 80095e4 <UART_SetConfig+0x550>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	080095fd 	.word	0x080095fd
 80095e8:	08009605 	.word	0x08009605
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	08009615 	.word	0x08009615
 80095f4:	0800961d 	.word	0x0800961d
 80095f8:	08009625 	.word	0x08009625
 80095fc:	2302      	movs	r3, #2
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e01a      	b.n	800963a <UART_SetConfig+0x5a6>
 8009604:	2304      	movs	r3, #4
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e016      	b.n	800963a <UART_SetConfig+0x5a6>
 800960c:	2308      	movs	r3, #8
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e012      	b.n	800963a <UART_SetConfig+0x5a6>
 8009614:	2310      	movs	r3, #16
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e00e      	b.n	800963a <UART_SetConfig+0x5a6>
 800961c:	2320      	movs	r3, #32
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e00a      	b.n	800963a <UART_SetConfig+0x5a6>
 8009624:	2340      	movs	r3, #64	@ 0x40
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e006      	b.n	800963a <UART_SetConfig+0x5a6>
 800962c:	2380      	movs	r3, #128	@ 0x80
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e002      	b.n	800963a <UART_SetConfig+0x5a6>
 8009634:	2380      	movs	r3, #128	@ 0x80
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a3f      	ldr	r2, [pc, #252]	@ (800973c <UART_SetConfig+0x6a8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	f040 80f8 	bne.w	8009836 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009646:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800964a:	2b20      	cmp	r3, #32
 800964c:	dc46      	bgt.n	80096dc <UART_SetConfig+0x648>
 800964e:	2b02      	cmp	r3, #2
 8009650:	f2c0 8082 	blt.w	8009758 <UART_SetConfig+0x6c4>
 8009654:	3b02      	subs	r3, #2
 8009656:	2b1e      	cmp	r3, #30
 8009658:	d87e      	bhi.n	8009758 <UART_SetConfig+0x6c4>
 800965a:	a201      	add	r2, pc, #4	@ (adr r2, 8009660 <UART_SetConfig+0x5cc>)
 800965c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009660:	080096e3 	.word	0x080096e3
 8009664:	08009759 	.word	0x08009759
 8009668:	080096eb 	.word	0x080096eb
 800966c:	08009759 	.word	0x08009759
 8009670:	08009759 	.word	0x08009759
 8009674:	08009759 	.word	0x08009759
 8009678:	080096fb 	.word	0x080096fb
 800967c:	08009759 	.word	0x08009759
 8009680:	08009759 	.word	0x08009759
 8009684:	08009759 	.word	0x08009759
 8009688:	08009759 	.word	0x08009759
 800968c:	08009759 	.word	0x08009759
 8009690:	08009759 	.word	0x08009759
 8009694:	08009759 	.word	0x08009759
 8009698:	0800970b 	.word	0x0800970b
 800969c:	08009759 	.word	0x08009759
 80096a0:	08009759 	.word	0x08009759
 80096a4:	08009759 	.word	0x08009759
 80096a8:	08009759 	.word	0x08009759
 80096ac:	08009759 	.word	0x08009759
 80096b0:	08009759 	.word	0x08009759
 80096b4:	08009759 	.word	0x08009759
 80096b8:	08009759 	.word	0x08009759
 80096bc:	08009759 	.word	0x08009759
 80096c0:	08009759 	.word	0x08009759
 80096c4:	08009759 	.word	0x08009759
 80096c8:	08009759 	.word	0x08009759
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009759 	.word	0x08009759
 80096d4:	08009759 	.word	0x08009759
 80096d8:	0800974b 	.word	0x0800974b
 80096dc:	2b40      	cmp	r3, #64	@ 0x40
 80096de:	d037      	beq.n	8009750 <UART_SetConfig+0x6bc>
 80096e0:	e03a      	b.n	8009758 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096e2:	f7fd fc5f 	bl	8006fa4 <HAL_RCCEx_GetD3PCLK1Freq>
 80096e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096e8:	e03c      	b.n	8009764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fd fc6e 	bl	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f8:	e034      	b.n	8009764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096fa:	f107 0318 	add.w	r3, r7, #24
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd fdba 	bl	8007278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e02c      	b.n	8009764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800970a:	4b09      	ldr	r3, [pc, #36]	@ (8009730 <UART_SetConfig+0x69c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	d016      	beq.n	8009744 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009716:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <UART_SetConfig+0x69c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	08db      	lsrs	r3, r3, #3
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	4a07      	ldr	r2, [pc, #28]	@ (8009740 <UART_SetConfig+0x6ac>)
 8009722:	fa22 f303 	lsr.w	r3, r2, r3
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009728:	e01c      	b.n	8009764 <UART_SetConfig+0x6d0>
 800972a:	bf00      	nop
 800972c:	40011400 	.word	0x40011400
 8009730:	58024400 	.word	0x58024400
 8009734:	40007800 	.word	0x40007800
 8009738:	40007c00 	.word	0x40007c00
 800973c:	58000c00 	.word	0x58000c00
 8009740:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009744:	4b9d      	ldr	r3, [pc, #628]	@ (80099bc <UART_SetConfig+0x928>)
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009748:	e00c      	b.n	8009764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800974a:	4b9d      	ldr	r3, [pc, #628]	@ (80099c0 <UART_SetConfig+0x92c>)
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974e:	e009      	b.n	8009764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009756:	e005      	b.n	8009764 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009762:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 81de 	beq.w	8009b28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	4a94      	ldr	r2, [pc, #592]	@ (80099c4 <UART_SetConfig+0x930>)
 8009772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009776:	461a      	mov	r2, r3
 8009778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977a:	fbb3 f3f2 	udiv	r3, r3, r2
 800977e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4613      	mov	r3, r2
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	4413      	add	r3, r2
 800978a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800978c:	429a      	cmp	r2, r3
 800978e:	d305      	bcc.n	800979c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009798:	429a      	cmp	r2, r3
 800979a:	d903      	bls.n	80097a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097a2:	e1c1      	b.n	8009b28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a6:	2200      	movs	r2, #0
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	60fa      	str	r2, [r7, #12]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b0:	4a84      	ldr	r2, [pc, #528]	@ (80099c4 <UART_SetConfig+0x930>)
 80097b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2200      	movs	r2, #0
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097c6:	f7f6 fde3 	bl	8000390 <__aeabi_uldivmod>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4610      	mov	r0, r2
 80097d0:	4619      	mov	r1, r3
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	f04f 0300 	mov.w	r3, #0
 80097da:	020b      	lsls	r3, r1, #8
 80097dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097e0:	0202      	lsls	r2, r0, #8
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	6849      	ldr	r1, [r1, #4]
 80097e6:	0849      	lsrs	r1, r1, #1
 80097e8:	2000      	movs	r0, #0
 80097ea:	460c      	mov	r4, r1
 80097ec:	4605      	mov	r5, r0
 80097ee:	eb12 0804 	adds.w	r8, r2, r4
 80097f2:	eb43 0905 	adc.w	r9, r3, r5
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	469a      	mov	sl, r3
 80097fe:	4693      	mov	fp, r2
 8009800:	4652      	mov	r2, sl
 8009802:	465b      	mov	r3, fp
 8009804:	4640      	mov	r0, r8
 8009806:	4649      	mov	r1, r9
 8009808:	f7f6 fdc2 	bl	8000390 <__aeabi_uldivmod>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4613      	mov	r3, r2
 8009812:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800981a:	d308      	bcc.n	800982e <UART_SetConfig+0x79a>
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009822:	d204      	bcs.n	800982e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800982a:	60da      	str	r2, [r3, #12]
 800982c:	e17c      	b.n	8009b28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009834:	e178      	b.n	8009b28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800983e:	f040 80c5 	bne.w	80099cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009846:	2b20      	cmp	r3, #32
 8009848:	dc48      	bgt.n	80098dc <UART_SetConfig+0x848>
 800984a:	2b00      	cmp	r3, #0
 800984c:	db7b      	blt.n	8009946 <UART_SetConfig+0x8b2>
 800984e:	2b20      	cmp	r3, #32
 8009850:	d879      	bhi.n	8009946 <UART_SetConfig+0x8b2>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <UART_SetConfig+0x7c4>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	080098e3 	.word	0x080098e3
 800985c:	080098eb 	.word	0x080098eb
 8009860:	08009947 	.word	0x08009947
 8009864:	08009947 	.word	0x08009947
 8009868:	080098f3 	.word	0x080098f3
 800986c:	08009947 	.word	0x08009947
 8009870:	08009947 	.word	0x08009947
 8009874:	08009947 	.word	0x08009947
 8009878:	08009903 	.word	0x08009903
 800987c:	08009947 	.word	0x08009947
 8009880:	08009947 	.word	0x08009947
 8009884:	08009947 	.word	0x08009947
 8009888:	08009947 	.word	0x08009947
 800988c:	08009947 	.word	0x08009947
 8009890:	08009947 	.word	0x08009947
 8009894:	08009947 	.word	0x08009947
 8009898:	08009913 	.word	0x08009913
 800989c:	08009947 	.word	0x08009947
 80098a0:	08009947 	.word	0x08009947
 80098a4:	08009947 	.word	0x08009947
 80098a8:	08009947 	.word	0x08009947
 80098ac:	08009947 	.word	0x08009947
 80098b0:	08009947 	.word	0x08009947
 80098b4:	08009947 	.word	0x08009947
 80098b8:	08009947 	.word	0x08009947
 80098bc:	08009947 	.word	0x08009947
 80098c0:	08009947 	.word	0x08009947
 80098c4:	08009947 	.word	0x08009947
 80098c8:	08009947 	.word	0x08009947
 80098cc:	08009947 	.word	0x08009947
 80098d0:	08009947 	.word	0x08009947
 80098d4:	08009947 	.word	0x08009947
 80098d8:	08009939 	.word	0x08009939
 80098dc:	2b40      	cmp	r3, #64	@ 0x40
 80098de:	d02e      	beq.n	800993e <UART_SetConfig+0x8aa>
 80098e0:	e031      	b.n	8009946 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e2:	f7fc f929 	bl	8005b38 <HAL_RCC_GetPCLK1Freq>
 80098e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e8:	e033      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098ea:	f7fc f93b 	bl	8005b64 <HAL_RCC_GetPCLK2Freq>
 80098ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098f0:	e02f      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fb6a 	bl	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e027      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009902:	f107 0318 	add.w	r3, r7, #24
 8009906:	4618      	mov	r0, r3
 8009908:	f7fd fcb6 	bl	8007278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009910:	e01f      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009912:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <UART_SetConfig+0x934>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800991e:	4b2a      	ldr	r3, [pc, #168]	@ (80099c8 <UART_SetConfig+0x934>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	08db      	lsrs	r3, r3, #3
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	4a24      	ldr	r2, [pc, #144]	@ (80099bc <UART_SetConfig+0x928>)
 800992a:	fa22 f303 	lsr.w	r3, r2, r3
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009930:	e00f      	b.n	8009952 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009932:	4b22      	ldr	r3, [pc, #136]	@ (80099bc <UART_SetConfig+0x928>)
 8009934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009936:	e00c      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009938:	4b21      	ldr	r3, [pc, #132]	@ (80099c0 <UART_SetConfig+0x92c>)
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993c:	e009      	b.n	8009952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009944:	e005      	b.n	8009952 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80e7 	beq.w	8009b28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995e:	4a19      	ldr	r2, [pc, #100]	@ (80099c4 <UART_SetConfig+0x930>)
 8009960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009964:	461a      	mov	r2, r3
 8009966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009968:	fbb3 f3f2 	udiv	r3, r3, r2
 800996c:	005a      	lsls	r2, r3, #1
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	085b      	lsrs	r3, r3, #1
 8009974:	441a      	add	r2, r3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	fbb2 f3f3 	udiv	r3, r2, r3
 800997e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	2b0f      	cmp	r3, #15
 8009984:	d916      	bls.n	80099b4 <UART_SetConfig+0x920>
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800998c:	d212      	bcs.n	80099b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	b29b      	uxth	r3, r3
 8009992:	f023 030f 	bic.w	r3, r3, #15
 8009996:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	085b      	lsrs	r3, r3, #1
 800999c:	b29b      	uxth	r3, r3
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099a6:	4313      	orrs	r3, r2
 80099a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099b0:	60da      	str	r2, [r3, #12]
 80099b2:	e0b9      	b.n	8009b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099ba:	e0b5      	b.n	8009b28 <UART_SetConfig+0xa94>
 80099bc:	03d09000 	.word	0x03d09000
 80099c0:	003d0900 	.word	0x003d0900
 80099c4:	0800b984 	.word	0x0800b984
 80099c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80099cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	dc49      	bgt.n	8009a68 <UART_SetConfig+0x9d4>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	db7c      	blt.n	8009ad2 <UART_SetConfig+0xa3e>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d87a      	bhi.n	8009ad2 <UART_SetConfig+0xa3e>
 80099dc:	a201      	add	r2, pc, #4	@ (adr r2, 80099e4 <UART_SetConfig+0x950>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a6f 	.word	0x08009a6f
 80099e8:	08009a77 	.word	0x08009a77
 80099ec:	08009ad3 	.word	0x08009ad3
 80099f0:	08009ad3 	.word	0x08009ad3
 80099f4:	08009a7f 	.word	0x08009a7f
 80099f8:	08009ad3 	.word	0x08009ad3
 80099fc:	08009ad3 	.word	0x08009ad3
 8009a00:	08009ad3 	.word	0x08009ad3
 8009a04:	08009a8f 	.word	0x08009a8f
 8009a08:	08009ad3 	.word	0x08009ad3
 8009a0c:	08009ad3 	.word	0x08009ad3
 8009a10:	08009ad3 	.word	0x08009ad3
 8009a14:	08009ad3 	.word	0x08009ad3
 8009a18:	08009ad3 	.word	0x08009ad3
 8009a1c:	08009ad3 	.word	0x08009ad3
 8009a20:	08009ad3 	.word	0x08009ad3
 8009a24:	08009a9f 	.word	0x08009a9f
 8009a28:	08009ad3 	.word	0x08009ad3
 8009a2c:	08009ad3 	.word	0x08009ad3
 8009a30:	08009ad3 	.word	0x08009ad3
 8009a34:	08009ad3 	.word	0x08009ad3
 8009a38:	08009ad3 	.word	0x08009ad3
 8009a3c:	08009ad3 	.word	0x08009ad3
 8009a40:	08009ad3 	.word	0x08009ad3
 8009a44:	08009ad3 	.word	0x08009ad3
 8009a48:	08009ad3 	.word	0x08009ad3
 8009a4c:	08009ad3 	.word	0x08009ad3
 8009a50:	08009ad3 	.word	0x08009ad3
 8009a54:	08009ad3 	.word	0x08009ad3
 8009a58:	08009ad3 	.word	0x08009ad3
 8009a5c:	08009ad3 	.word	0x08009ad3
 8009a60:	08009ad3 	.word	0x08009ad3
 8009a64:	08009ac5 	.word	0x08009ac5
 8009a68:	2b40      	cmp	r3, #64	@ 0x40
 8009a6a:	d02e      	beq.n	8009aca <UART_SetConfig+0xa36>
 8009a6c:	e031      	b.n	8009ad2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a6e:	f7fc f863 	bl	8005b38 <HAL_RCC_GetPCLK1Freq>
 8009a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a74:	e033      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a76:	f7fc f875 	bl	8005b64 <HAL_RCC_GetPCLK2Freq>
 8009a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a7c:	e02f      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fd faa4 	bl	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e027      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a8e:	f107 0318 	add.w	r3, r7, #24
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fd fbf0 	bl	8007278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9c:	e01f      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b54 <UART_SetConfig+0xac0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8009b54 <UART_SetConfig+0xac0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	08db      	lsrs	r3, r3, #3
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	4a28      	ldr	r2, [pc, #160]	@ (8009b58 <UART_SetConfig+0xac4>)
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009abc:	e00f      	b.n	8009ade <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009abe:	4b26      	ldr	r3, [pc, #152]	@ (8009b58 <UART_SetConfig+0xac4>)
 8009ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac2:	e00c      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ac4:	4b25      	ldr	r3, [pc, #148]	@ (8009b5c <UART_SetConfig+0xac8>)
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e009      	b.n	8009ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad0:	e005      	b.n	8009ade <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009adc:	bf00      	nop
    }

    if (pclk != 0U)
 8009ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d021      	beq.n	8009b28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b60 <UART_SetConfig+0xacc>)
 8009aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aee:	461a      	mov	r2, r3
 8009af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	441a      	add	r2, r3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	2b0f      	cmp	r3, #15
 8009b0c:	d909      	bls.n	8009b22 <UART_SetConfig+0xa8e>
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b14:	d205      	bcs.n	8009b22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	60da      	str	r2, [r3, #12]
 8009b20:	e002      	b.n	8009b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2200      	movs	r2, #0
 8009b42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3748      	adds	r7, #72	@ 0x48
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b52:	bf00      	nop
 8009b54:	58024400 	.word	0x58024400
 8009b58:	03d09000 	.word	0x03d09000
 8009b5c:	003d0900 	.word	0x003d0900
 8009b60:	0800b984 	.word	0x0800b984

08009b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c62:	d10a      	bne.n	8009c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	605a      	str	r2, [r3, #4]
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b098      	sub	sp, #96	@ 0x60
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb8:	f7f8 fd24 	bl	8002704 <HAL_GetTick>
 8009cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d12f      	bne.n	8009d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f88e 	bl	8009dfc <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d022      	beq.n	8009d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e063      	b.n	8009df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d149      	bne.n	8009dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d42:	2200      	movs	r2, #0
 8009d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f857 	bl	8009dfc <UART_WaitOnFlagUntilTimeout>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d03c      	beq.n	8009dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	623b      	str	r3, [r7, #32]
   return(result);
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e6      	bne.n	8009d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009da6:	61fa      	str	r2, [r7, #28]
 8009da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	69b9      	ldr	r1, [r7, #24]
 8009dac:	69fa      	ldr	r2, [r7, #28]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	617b      	str	r3, [r7, #20]
   return(result);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e012      	b.n	8009df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3758      	adds	r7, #88	@ 0x58
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e0c:	e04f      	b.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e14:	d04b      	beq.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e16:	f7f8 fc75 	bl	8002704 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d302      	bcc.n	8009e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e04e      	b.n	8009ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d037      	beq.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	2b80      	cmp	r3, #128	@ 0x80
 8009e42:	d034      	beq.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b40      	cmp	r3, #64	@ 0x40
 8009e48:	d031      	beq.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d110      	bne.n	8009e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f95b 	bl	800a11c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2208      	movs	r2, #8
 8009e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e029      	b.n	8009ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e88:	d111      	bne.n	8009eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 f941 	bl	800a11c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e00f      	b.n	8009ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	bf0c      	ite	eq
 8009ebe:	2301      	moveq	r3, #1
 8009ec0:	2300      	movne	r3, #0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d0a0      	beq.n	8009e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b0a3      	sub	sp, #140	@ 0x8c
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	88fa      	ldrh	r2, [r7, #6]
 8009ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f0a:	d10e      	bne.n	8009f2a <UART_Start_Receive_IT+0x52>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d105      	bne.n	8009f20 <UART_Start_Receive_IT+0x48>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f1e:	e02d      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	22ff      	movs	r2, #255	@ 0xff
 8009f24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f28:	e028      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10d      	bne.n	8009f4e <UART_Start_Receive_IT+0x76>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <UART_Start_Receive_IT+0x6c>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	22ff      	movs	r2, #255	@ 0xff
 8009f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f42:	e01b      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	227f      	movs	r2, #127	@ 0x7f
 8009f48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f4c:	e016      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f56:	d10d      	bne.n	8009f74 <UART_Start_Receive_IT+0x9c>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <UART_Start_Receive_IT+0x92>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	227f      	movs	r2, #127	@ 0x7f
 8009f64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f68:	e008      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	223f      	movs	r2, #63	@ 0x3f
 8009f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f72:	e003      	b.n	8009f7c <UART_Start_Receive_IT+0xa4>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2222      	movs	r2, #34	@ 0x22
 8009f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009fb0:	673a      	str	r2, [r7, #112]	@ 0x70
 8009fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009fb6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009fb8:	e841 2300 	strex	r3, r2, [r1]
 8009fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e3      	bne.n	8009f8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fcc:	d14f      	bne.n	800a06e <UART_Start_Receive_IT+0x196>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fd4:	88fa      	ldrh	r2, [r7, #6]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d349      	bcc.n	800a06e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe2:	d107      	bne.n	8009ff4 <UART_Start_Receive_IT+0x11c>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4a47      	ldr	r2, [pc, #284]	@ (800a10c <UART_Start_Receive_IT+0x234>)
 8009ff0:	675a      	str	r2, [r3, #116]	@ 0x74
 8009ff2:	e002      	b.n	8009ffa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4a46      	ldr	r2, [pc, #280]	@ (800a110 <UART_Start_Receive_IT+0x238>)
 8009ff8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d01a      	beq.n	800a038 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a016:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a026:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a028:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a02a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a02c:	e841 2300 	strex	r3, r2, [r1]
 800a030:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e4      	bne.n	800a002 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3308      	adds	r3, #8
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a04e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3308      	adds	r3, #8
 800a056:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a058:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a05a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a05e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e5      	bne.n	800a038 <UART_Start_Receive_IT+0x160>
 800a06c:	e046      	b.n	800a0fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a076:	d107      	bne.n	800a088 <UART_Start_Receive_IT+0x1b0>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	4a24      	ldr	r2, [pc, #144]	@ (800a114 <UART_Start_Receive_IT+0x23c>)
 800a084:	675a      	str	r2, [r3, #116]	@ 0x74
 800a086:	e002      	b.n	800a08e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a23      	ldr	r2, [pc, #140]	@ (800a118 <UART_Start_Receive_IT+0x240>)
 800a08c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d019      	beq.n	800a0ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	e853 3f00 	ldrex	r3, [r3]
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a0aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e6      	bne.n	800a096 <UART_Start_Receive_IT+0x1be>
 800a0c8:	e018      	b.n	800a0fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f043 0320 	orr.w	r3, r3, #32
 800a0de:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0e8:	623b      	str	r3, [r7, #32]
 800a0ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	69f9      	ldr	r1, [r7, #28]
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e6      	bne.n	800a0ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	378c      	adds	r7, #140	@ 0x8c
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	0800a939 	.word	0x0800a939
 800a110:	0800a5d5 	.word	0x0800a5d5
 800a114:	0800a41d 	.word	0x0800a41d
 800a118:	0800a265 	.word	0x0800a265

0800a11c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b095      	sub	sp, #84	@ 0x54
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a142:	643b      	str	r3, [r7, #64]	@ 0x40
 800a144:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e6      	bne.n	800a124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3308      	adds	r3, #8
 800a15c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	61fb      	str	r3, [r7, #28]
   return(result);
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e4 <UART_EndRxTransfer+0xc8>)
 800a16a:	4013      	ands	r3, r2
 800a16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a176:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a178:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a17c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e5      	bne.n	800a156 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d118      	bne.n	800a1c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f023 0310 	bic.w	r3, r3, #16
 800a1a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1d8:	bf00      	nop
 800a1da:	3754      	adds	r7, #84	@ 0x54
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	effffffe 	.word	0xeffffffe

0800a1e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7fe ff32 	bl	8009068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	60bb      	str	r3, [r7, #8]
   return(result);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6979      	ldr	r1, [r7, #20]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	613b      	str	r3, [r7, #16]
   return(result);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7fe fefd 	bl	8009054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a25a:	bf00      	nop
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b09c      	sub	sp, #112	@ 0x70
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a272:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a27c:	2b22      	cmp	r3, #34	@ 0x22
 800a27e:	f040 80be 	bne.w	800a3fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a288:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a28c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a290:	b2d9      	uxtb	r1, r3
 800a292:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a296:	b2da      	uxtb	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29c:	400a      	ands	r2, r1
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f040 80a1 	bne.w	800a40e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e6      	bne.n	800a2cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3308      	adds	r3, #8
 800a304:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	667b      	str	r3, [r7, #100]	@ 0x64
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a31e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a320:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a33      	ldr	r2, [pc, #204]	@ (800a418 <UART_RxISR_8BIT+0x1b4>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d01f      	beq.n	800a390 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d018      	beq.n	800a390 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	623b      	str	r3, [r7, #32]
   return(result);
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a372:	663b      	str	r3, [r7, #96]	@ 0x60
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a37c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a37e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a394:	2b01      	cmp	r3, #1
 800a396:	d12e      	bne.n	800a3f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0310 	bic.w	r3, r3, #16
 800a3b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3bc:	61fb      	str	r3, [r7, #28]
 800a3be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	69b9      	ldr	r1, [r7, #24]
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e6      	bne.n	800a39e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b10      	cmp	r3, #16
 800a3dc:	d103      	bne.n	800a3e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fe fe44 	bl	800907c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3f4:	e00b      	b.n	800a40e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7f7 ffac 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 800a3fc:	e007      	b.n	800a40e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	699a      	ldr	r2, [r3, #24]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f042 0208 	orr.w	r2, r2, #8
 800a40c:	619a      	str	r2, [r3, #24]
}
 800a40e:	bf00      	nop
 800a410:	3770      	adds	r7, #112	@ 0x70
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	58000c00 	.word	0x58000c00

0800a41c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b09c      	sub	sp, #112	@ 0x70
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a42a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a434:	2b22      	cmp	r3, #34	@ 0x22
 800a436:	f040 80be 	bne.w	800a5b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a448:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a44a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a44e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a452:	4013      	ands	r3, r2
 800a454:	b29a      	uxth	r2, r3
 800a456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a458:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a45e:	1c9a      	adds	r2, r3, #2
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	3b01      	subs	r3, #1
 800a46e:	b29a      	uxth	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f040 80a1 	bne.w	800a5c6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a498:	667b      	str	r3, [r7, #100]	@ 0x64
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e6      	bne.n	800a484 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	f023 0301 	bic.w	r3, r3, #1
 800a4cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4d6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e5      	bne.n	800a4b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a33      	ldr	r2, [pc, #204]	@ (800a5d0 <UART_RxISR_16BIT+0x1b4>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d01f      	beq.n	800a548 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d018      	beq.n	800a548 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	61fb      	str	r3, [r7, #28]
   return(result);
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a52a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a536:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a53a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d12e      	bne.n	800a5ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	60bb      	str	r3, [r7, #8]
   return(result);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f023 0310 	bic.w	r3, r3, #16
 800a56a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a574:	61bb      	str	r3, [r7, #24]
 800a576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a578:	6979      	ldr	r1, [r7, #20]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	e841 2300 	strex	r3, r2, [r1]
 800a580:	613b      	str	r3, [r7, #16]
   return(result);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e6      	bne.n	800a556 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	2b10      	cmp	r3, #16
 800a594:	d103      	bne.n	800a59e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2210      	movs	r2, #16
 800a59c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fe fd68 	bl	800907c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5ac:	e00b      	b.n	800a5c6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7f7 fed0 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 800a5b4:	e007      	b.n	800a5c6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f042 0208 	orr.w	r2, r2, #8
 800a5c4:	619a      	str	r2, [r3, #24]
}
 800a5c6:	bf00      	nop
 800a5c8:	3770      	adds	r7, #112	@ 0x70
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	58000c00 	.word	0x58000c00

0800a5d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b0ac      	sub	sp, #176	@ 0xb0
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a60a:	2b22      	cmp	r3, #34	@ 0x22
 800a60c:	f040 8181 	bne.w	800a912 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a616:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a61a:	e124      	b.n	800a866 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a622:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a626:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a62a:	b2d9      	uxtb	r1, r3
 800a62c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a630:	b2da      	uxtb	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a636:	400a      	ands	r2, r1
 800a638:	b2d2      	uxtb	r2, r2
 800a63a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d053      	beq.n	800a716 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d011      	beq.n	800a69e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a67a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a67e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2201      	movs	r2, #1
 800a68c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a694:	f043 0201 	orr.w	r2, r3, #1
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d011      	beq.n	800a6ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a6aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00b      	beq.n	800a6ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c4:	f043 0204 	orr.w	r2, r3, #4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d011      	beq.n	800a6fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a6da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00b      	beq.n	800a6fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6f4:	f043 0202 	orr.w	r2, r3, #2
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a704:	2b00      	cmp	r3, #0
 800a706:	d006      	beq.n	800a716 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7fe fcad 	bl	8009068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 80a1 	bne.w	800a866 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a746:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a748:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a74c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e4      	bne.n	800a724 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3308      	adds	r3, #8
 800a760:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a76a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a76c:	4b6f      	ldr	r3, [pc, #444]	@ (800a92c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a76e:	4013      	ands	r3, r2
 800a770:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a77e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a780:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a784:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a78c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1e3      	bne.n	800a75a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2220      	movs	r2, #32
 800a796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a61      	ldr	r2, [pc, #388]	@ (800a930 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d021      	beq.n	800a7f4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01a      	beq.n	800a7f4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c6:	e853 3f00 	ldrex	r3, [r3]
 800a7ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a7e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7e2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e4      	bne.n	800a7be <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d130      	bne.n	800a85e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	f023 0310 	bic.w	r3, r3, #16
 800a816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a824:	643b      	str	r3, [r7, #64]	@ 0x40
 800a826:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a82a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e4      	bne.n	800a802 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f003 0310 	and.w	r3, r3, #16
 800a842:	2b10      	cmp	r3, #16
 800a844:	d103      	bne.n	800a84e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2210      	movs	r2, #16
 800a84c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7fe fc10 	bl	800907c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a85c:	e00e      	b.n	800a87c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7f7 fd78 	bl	8002354 <HAL_UART_RxCpltCallback>
        break;
 800a864:	e00a      	b.n	800a87c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a866:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	f47f aed0 	bne.w	800a61c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a882:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a886:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d049      	beq.n	800a922 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a894:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a898:	429a      	cmp	r2, r3
 800a89a:	d242      	bcs.n	800a922 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a8c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e3      	bne.n	800a89c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a17      	ldr	r2, [pc, #92]	@ (800a934 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a8d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f043 0320 	orr.w	r3, r3, #32
 800a8ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a8fc:	61bb      	str	r3, [r7, #24]
 800a8fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	6979      	ldr	r1, [r7, #20]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	613b      	str	r3, [r7, #16]
   return(result);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e4      	bne.n	800a8da <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a910:	e007      	b.n	800a922 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	699a      	ldr	r2, [r3, #24]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f042 0208 	orr.w	r2, r2, #8
 800a920:	619a      	str	r2, [r3, #24]
}
 800a922:	bf00      	nop
 800a924:	37b0      	adds	r7, #176	@ 0xb0
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	effffffe 	.word	0xeffffffe
 800a930:	58000c00 	.word	0x58000c00
 800a934:	0800a265 	.word	0x0800a265

0800a938 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b0ae      	sub	sp, #184	@ 0xb8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a946:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a96e:	2b22      	cmp	r3, #34	@ 0x22
 800a970:	f040 8185 	bne.w	800ac7e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a97a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a97e:	e128      	b.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a986:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a98e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a992:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a996:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a99a:	4013      	ands	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a8:	1c9a      	adds	r2, r3, #2
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a9ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d053      	beq.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d011      	beq.n	800aa06 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fc:	f043 0201 	orr.w	r2, r3, #1
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d011      	beq.n	800aa36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aa12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2202      	movs	r2, #2
 800aa24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa2c:	f043 0204 	orr.w	r2, r3, #4
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa3a:	f003 0304 	and.w	r3, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d011      	beq.n	800aa66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aa42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2204      	movs	r2, #4
 800aa54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa5c:	f043 0202 	orr.w	r2, r3, #2
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7fe faf9 	bl	8009068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f040 80a3 	bne.w	800abd2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aaae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e2      	bne.n	800aa8c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3308      	adds	r3, #8
 800aacc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aad8:	4b6f      	ldr	r3, [pc, #444]	@ (800ac98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aada:	4013      	ands	r3, r2
 800aadc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	3308      	adds	r3, #8
 800aae6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800aaea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aaec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aaf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aaf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e3      	bne.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2220      	movs	r2, #32
 800ab02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a61      	ldr	r2, [pc, #388]	@ (800ac9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d021      	beq.n	800ab60 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d01a      	beq.n	800ab60 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab32:	e853 3f00 	ldrex	r3, [r3]
 800ab36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ab4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab4e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e4      	bne.n	800ab2a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d130      	bne.n	800abca <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7e:	f023 0310 	bic.w	r3, r3, #16
 800ab82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e4      	bne.n	800ab6e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b10      	cmp	r3, #16
 800abb0:	d103      	bne.n	800abba <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2210      	movs	r2, #16
 800abb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fe fa5a 	bl	800907c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800abc8:	e00e      	b.n	800abe8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7f7 fbc2 	bl	8002354 <HAL_UART_RxCpltCallback>
        break;
 800abd0:	e00a      	b.n	800abe8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abd2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d006      	beq.n	800abe8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800abda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f47f aecc 	bne.w	800a980 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800abf2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d049      	beq.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0x356>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac00:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d242      	bcs.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	e853 3f00 	ldrex	r3, [r3]
 800ac16:	623b      	str	r3, [r7, #32]
   return(result);
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ac2c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e3      	bne.n	800ac08 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a17      	ldr	r2, [pc, #92]	@ (800aca0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ac44:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	e853 3f00 	ldrex	r3, [r3]
 800ac52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f043 0320 	orr.w	r3, r3, #32
 800ac5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	69b9      	ldr	r1, [r7, #24]
 800ac6e:	69fa      	ldr	r2, [r7, #28]
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	617b      	str	r3, [r7, #20]
   return(result);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e4      	bne.n	800ac46 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac7c:	e007      	b.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	699a      	ldr	r2, [r3, #24]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f042 0208 	orr.w	r2, r2, #8
 800ac8c:	619a      	str	r2, [r3, #24]
}
 800ac8e:	bf00      	nop
 800ac90:	37b8      	adds	r7, #184	@ 0xb8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	effffffe 	.word	0xeffffffe
 800ac9c:	58000c00 	.word	0x58000c00
 800aca0:	0800a41d 	.word	0x0800a41d

0800aca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d101      	bne.n	800acf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800acf2:	2302      	movs	r3, #2
 800acf4:	e027      	b.n	800ad46 <HAL_UARTEx_DisableFifoMode+0x66>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2224      	movs	r2, #36	@ 0x24
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f022 0201 	bic.w	r2, r2, #1
 800ad1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d101      	bne.n	800ad6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad66:	2302      	movs	r3, #2
 800ad68:	e02d      	b.n	800adc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2224      	movs	r2, #36	@ 0x24
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f850 	bl	800ae4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2220      	movs	r2, #32
 800adb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d101      	bne.n	800ade6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ade2:	2302      	movs	r3, #2
 800ade4:	e02d      	b.n	800ae42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2224      	movs	r2, #36	@ 0x24
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 0201 	bic.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f812 	bl	800ae4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2220      	movs	r2, #32
 800ae34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d108      	bne.n	800ae6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae6c:	e031      	b.n	800aed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae6e:	2310      	movs	r3, #16
 800ae70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae72:	2310      	movs	r3, #16
 800ae74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	0e5b      	lsrs	r3, r3, #25
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	0f5b      	lsrs	r3, r3, #29
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 0307 	and.w	r3, r3, #7
 800ae94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	7b3a      	ldrb	r2, [r7, #12]
 800ae9a:	4911      	ldr	r1, [pc, #68]	@ (800aee0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae9c:	5c8a      	ldrb	r2, [r1, r2]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aea2:	7b3a      	ldrb	r2, [r7, #12]
 800aea4:	490f      	ldr	r1, [pc, #60]	@ (800aee4 <UARTEx_SetNbDataToProcess+0x98>)
 800aea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	7b7a      	ldrb	r2, [r7, #13]
 800aeb8:	4909      	ldr	r1, [pc, #36]	@ (800aee0 <UARTEx_SetNbDataToProcess+0x94>)
 800aeba:	5c8a      	ldrb	r2, [r1, r2]
 800aebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aec0:	7b7a      	ldrb	r2, [r7, #13]
 800aec2:	4908      	ldr	r1, [pc, #32]	@ (800aee4 <UARTEx_SetNbDataToProcess+0x98>)
 800aec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aec6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aed2:	bf00      	nop
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	0800b99c 	.word	0x0800b99c
 800aee4:	0800b9a4 	.word	0x0800b9a4

0800aee8 <_vsniprintf_r>:
 800aee8:	b530      	push	{r4, r5, lr}
 800aeea:	4614      	mov	r4, r2
 800aeec:	2c00      	cmp	r4, #0
 800aeee:	b09b      	sub	sp, #108	@ 0x6c
 800aef0:	4605      	mov	r5, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	da05      	bge.n	800af02 <_vsniprintf_r+0x1a>
 800aef6:	238b      	movs	r3, #139	@ 0x8b
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	b01b      	add	sp, #108	@ 0x6c
 800af00:	bd30      	pop	{r4, r5, pc}
 800af02:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800af06:	f8ad 300c 	strh.w	r3, [sp, #12]
 800af0a:	f04f 0300 	mov.w	r3, #0
 800af0e:	9319      	str	r3, [sp, #100]	@ 0x64
 800af10:	bf14      	ite	ne
 800af12:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af16:	4623      	moveq	r3, r4
 800af18:	9302      	str	r3, [sp, #8]
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af20:	9100      	str	r1, [sp, #0]
 800af22:	9104      	str	r1, [sp, #16]
 800af24:	f8ad 300e 	strh.w	r3, [sp, #14]
 800af28:	4669      	mov	r1, sp
 800af2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800af2c:	f000 f9ae 	bl	800b28c <_svfiprintf_r>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	bfbc      	itt	lt
 800af34:	238b      	movlt	r3, #139	@ 0x8b
 800af36:	602b      	strlt	r3, [r5, #0]
 800af38:	2c00      	cmp	r4, #0
 800af3a:	d0e0      	beq.n	800aefe <_vsniprintf_r+0x16>
 800af3c:	9b00      	ldr	r3, [sp, #0]
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e7dc      	b.n	800aefe <_vsniprintf_r+0x16>

0800af44 <vsniprintf>:
 800af44:	b507      	push	{r0, r1, r2, lr}
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4613      	mov	r3, r2
 800af4a:	460a      	mov	r2, r1
 800af4c:	4601      	mov	r1, r0
 800af4e:	4803      	ldr	r0, [pc, #12]	@ (800af5c <vsniprintf+0x18>)
 800af50:	6800      	ldr	r0, [r0, #0]
 800af52:	f7ff ffc9 	bl	800aee8 <_vsniprintf_r>
 800af56:	b003      	add	sp, #12
 800af58:	f85d fb04 	ldr.w	pc, [sp], #4
 800af5c:	24000010 	.word	0x24000010

0800af60 <memset>:
 800af60:	4402      	add	r2, r0
 800af62:	4603      	mov	r3, r0
 800af64:	4293      	cmp	r3, r2
 800af66:	d100      	bne.n	800af6a <memset+0xa>
 800af68:	4770      	bx	lr
 800af6a:	f803 1b01 	strb.w	r1, [r3], #1
 800af6e:	e7f9      	b.n	800af64 <memset+0x4>

0800af70 <__errno>:
 800af70:	4b01      	ldr	r3, [pc, #4]	@ (800af78 <__errno+0x8>)
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	24000010 	.word	0x24000010

0800af7c <__libc_init_array>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	4d0d      	ldr	r5, [pc, #52]	@ (800afb4 <__libc_init_array+0x38>)
 800af80:	4c0d      	ldr	r4, [pc, #52]	@ (800afb8 <__libc_init_array+0x3c>)
 800af82:	1b64      	subs	r4, r4, r5
 800af84:	10a4      	asrs	r4, r4, #2
 800af86:	2600      	movs	r6, #0
 800af88:	42a6      	cmp	r6, r4
 800af8a:	d109      	bne.n	800afa0 <__libc_init_array+0x24>
 800af8c:	4d0b      	ldr	r5, [pc, #44]	@ (800afbc <__libc_init_array+0x40>)
 800af8e:	4c0c      	ldr	r4, [pc, #48]	@ (800afc0 <__libc_init_array+0x44>)
 800af90:	f000 fc64 	bl	800b85c <_init>
 800af94:	1b64      	subs	r4, r4, r5
 800af96:	10a4      	asrs	r4, r4, #2
 800af98:	2600      	movs	r6, #0
 800af9a:	42a6      	cmp	r6, r4
 800af9c:	d105      	bne.n	800afaa <__libc_init_array+0x2e>
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
 800afa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afa4:	4798      	blx	r3
 800afa6:	3601      	adds	r6, #1
 800afa8:	e7ee      	b.n	800af88 <__libc_init_array+0xc>
 800afaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800afae:	4798      	blx	r3
 800afb0:	3601      	adds	r6, #1
 800afb2:	e7f2      	b.n	800af9a <__libc_init_array+0x1e>
 800afb4:	0800b9e8 	.word	0x0800b9e8
 800afb8:	0800b9e8 	.word	0x0800b9e8
 800afbc:	0800b9e8 	.word	0x0800b9e8
 800afc0:	0800b9ec 	.word	0x0800b9ec

0800afc4 <__retarget_lock_acquire_recursive>:
 800afc4:	4770      	bx	lr

0800afc6 <__retarget_lock_release_recursive>:
 800afc6:	4770      	bx	lr

0800afc8 <memcpy>:
 800afc8:	440a      	add	r2, r1
 800afca:	4291      	cmp	r1, r2
 800afcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd0:	d100      	bne.n	800afd4 <memcpy+0xc>
 800afd2:	4770      	bx	lr
 800afd4:	b510      	push	{r4, lr}
 800afd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afde:	4291      	cmp	r1, r2
 800afe0:	d1f9      	bne.n	800afd6 <memcpy+0xe>
 800afe2:	bd10      	pop	{r4, pc}

0800afe4 <_free_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4605      	mov	r5, r0
 800afe8:	2900      	cmp	r1, #0
 800afea:	d041      	beq.n	800b070 <_free_r+0x8c>
 800afec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff0:	1f0c      	subs	r4, r1, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfb8      	it	lt
 800aff6:	18e4      	addlt	r4, r4, r3
 800aff8:	f000 f8e0 	bl	800b1bc <__malloc_lock>
 800affc:	4a1d      	ldr	r2, [pc, #116]	@ (800b074 <_free_r+0x90>)
 800affe:	6813      	ldr	r3, [r2, #0]
 800b000:	b933      	cbnz	r3, 800b010 <_free_r+0x2c>
 800b002:	6063      	str	r3, [r4, #4]
 800b004:	6014      	str	r4, [r2, #0]
 800b006:	4628      	mov	r0, r5
 800b008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b00c:	f000 b8dc 	b.w	800b1c8 <__malloc_unlock>
 800b010:	42a3      	cmp	r3, r4
 800b012:	d908      	bls.n	800b026 <_free_r+0x42>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	1821      	adds	r1, r4, r0
 800b018:	428b      	cmp	r3, r1
 800b01a:	bf01      	itttt	eq
 800b01c:	6819      	ldreq	r1, [r3, #0]
 800b01e:	685b      	ldreq	r3, [r3, #4]
 800b020:	1809      	addeq	r1, r1, r0
 800b022:	6021      	streq	r1, [r4, #0]
 800b024:	e7ed      	b.n	800b002 <_free_r+0x1e>
 800b026:	461a      	mov	r2, r3
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	b10b      	cbz	r3, 800b030 <_free_r+0x4c>
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	d9fa      	bls.n	800b026 <_free_r+0x42>
 800b030:	6811      	ldr	r1, [r2, #0]
 800b032:	1850      	adds	r0, r2, r1
 800b034:	42a0      	cmp	r0, r4
 800b036:	d10b      	bne.n	800b050 <_free_r+0x6c>
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	4401      	add	r1, r0
 800b03c:	1850      	adds	r0, r2, r1
 800b03e:	4283      	cmp	r3, r0
 800b040:	6011      	str	r1, [r2, #0]
 800b042:	d1e0      	bne.n	800b006 <_free_r+0x22>
 800b044:	6818      	ldr	r0, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	6053      	str	r3, [r2, #4]
 800b04a:	4408      	add	r0, r1
 800b04c:	6010      	str	r0, [r2, #0]
 800b04e:	e7da      	b.n	800b006 <_free_r+0x22>
 800b050:	d902      	bls.n	800b058 <_free_r+0x74>
 800b052:	230c      	movs	r3, #12
 800b054:	602b      	str	r3, [r5, #0]
 800b056:	e7d6      	b.n	800b006 <_free_r+0x22>
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	1821      	adds	r1, r4, r0
 800b05c:	428b      	cmp	r3, r1
 800b05e:	bf04      	itt	eq
 800b060:	6819      	ldreq	r1, [r3, #0]
 800b062:	685b      	ldreq	r3, [r3, #4]
 800b064:	6063      	str	r3, [r4, #4]
 800b066:	bf04      	itt	eq
 800b068:	1809      	addeq	r1, r1, r0
 800b06a:	6021      	streq	r1, [r4, #0]
 800b06c:	6054      	str	r4, [r2, #4]
 800b06e:	e7ca      	b.n	800b006 <_free_r+0x22>
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	bf00      	nop
 800b074:	240015f4 	.word	0x240015f4

0800b078 <sbrk_aligned>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	4e0f      	ldr	r6, [pc, #60]	@ (800b0b8 <sbrk_aligned+0x40>)
 800b07c:	460c      	mov	r4, r1
 800b07e:	6831      	ldr	r1, [r6, #0]
 800b080:	4605      	mov	r5, r0
 800b082:	b911      	cbnz	r1, 800b08a <sbrk_aligned+0x12>
 800b084:	f000 fba4 	bl	800b7d0 <_sbrk_r>
 800b088:	6030      	str	r0, [r6, #0]
 800b08a:	4621      	mov	r1, r4
 800b08c:	4628      	mov	r0, r5
 800b08e:	f000 fb9f 	bl	800b7d0 <_sbrk_r>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	d103      	bne.n	800b09e <sbrk_aligned+0x26>
 800b096:	f04f 34ff 	mov.w	r4, #4294967295
 800b09a:	4620      	mov	r0, r4
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
 800b09e:	1cc4      	adds	r4, r0, #3
 800b0a0:	f024 0403 	bic.w	r4, r4, #3
 800b0a4:	42a0      	cmp	r0, r4
 800b0a6:	d0f8      	beq.n	800b09a <sbrk_aligned+0x22>
 800b0a8:	1a21      	subs	r1, r4, r0
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 fb90 	bl	800b7d0 <_sbrk_r>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d1f2      	bne.n	800b09a <sbrk_aligned+0x22>
 800b0b4:	e7ef      	b.n	800b096 <sbrk_aligned+0x1e>
 800b0b6:	bf00      	nop
 800b0b8:	240015f0 	.word	0x240015f0

0800b0bc <_malloc_r>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	1ccd      	adds	r5, r1, #3
 800b0c2:	f025 0503 	bic.w	r5, r5, #3
 800b0c6:	3508      	adds	r5, #8
 800b0c8:	2d0c      	cmp	r5, #12
 800b0ca:	bf38      	it	cc
 800b0cc:	250c      	movcc	r5, #12
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	db01      	blt.n	800b0d8 <_malloc_r+0x1c>
 800b0d4:	42a9      	cmp	r1, r5
 800b0d6:	d904      	bls.n	800b0e2 <_malloc_r+0x26>
 800b0d8:	230c      	movs	r3, #12
 800b0da:	6033      	str	r3, [r6, #0]
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1b8 <_malloc_r+0xfc>
 800b0e6:	f000 f869 	bl	800b1bc <__malloc_lock>
 800b0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ee:	461c      	mov	r4, r3
 800b0f0:	bb44      	cbnz	r4, 800b144 <_malloc_r+0x88>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff ffbf 	bl	800b078 <sbrk_aligned>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	d158      	bne.n	800b1b2 <_malloc_r+0xf6>
 800b100:	f8d8 4000 	ldr.w	r4, [r8]
 800b104:	4627      	mov	r7, r4
 800b106:	2f00      	cmp	r7, #0
 800b108:	d143      	bne.n	800b192 <_malloc_r+0xd6>
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	d04b      	beq.n	800b1a6 <_malloc_r+0xea>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	4639      	mov	r1, r7
 800b112:	4630      	mov	r0, r6
 800b114:	eb04 0903 	add.w	r9, r4, r3
 800b118:	f000 fb5a 	bl	800b7d0 <_sbrk_r>
 800b11c:	4581      	cmp	r9, r0
 800b11e:	d142      	bne.n	800b1a6 <_malloc_r+0xea>
 800b120:	6821      	ldr	r1, [r4, #0]
 800b122:	1a6d      	subs	r5, r5, r1
 800b124:	4629      	mov	r1, r5
 800b126:	4630      	mov	r0, r6
 800b128:	f7ff ffa6 	bl	800b078 <sbrk_aligned>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d03a      	beq.n	800b1a6 <_malloc_r+0xea>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	442b      	add	r3, r5
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	f8d8 3000 	ldr.w	r3, [r8]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	bb62      	cbnz	r2, 800b198 <_malloc_r+0xdc>
 800b13e:	f8c8 7000 	str.w	r7, [r8]
 800b142:	e00f      	b.n	800b164 <_malloc_r+0xa8>
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	1b52      	subs	r2, r2, r5
 800b148:	d420      	bmi.n	800b18c <_malloc_r+0xd0>
 800b14a:	2a0b      	cmp	r2, #11
 800b14c:	d917      	bls.n	800b17e <_malloc_r+0xc2>
 800b14e:	1961      	adds	r1, r4, r5
 800b150:	42a3      	cmp	r3, r4
 800b152:	6025      	str	r5, [r4, #0]
 800b154:	bf18      	it	ne
 800b156:	6059      	strne	r1, [r3, #4]
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	bf08      	it	eq
 800b15c:	f8c8 1000 	streq.w	r1, [r8]
 800b160:	5162      	str	r2, [r4, r5]
 800b162:	604b      	str	r3, [r1, #4]
 800b164:	4630      	mov	r0, r6
 800b166:	f000 f82f 	bl	800b1c8 <__malloc_unlock>
 800b16a:	f104 000b 	add.w	r0, r4, #11
 800b16e:	1d23      	adds	r3, r4, #4
 800b170:	f020 0007 	bic.w	r0, r0, #7
 800b174:	1ac2      	subs	r2, r0, r3
 800b176:	bf1c      	itt	ne
 800b178:	1a1b      	subne	r3, r3, r0
 800b17a:	50a3      	strne	r3, [r4, r2]
 800b17c:	e7af      	b.n	800b0de <_malloc_r+0x22>
 800b17e:	6862      	ldr	r2, [r4, #4]
 800b180:	42a3      	cmp	r3, r4
 800b182:	bf0c      	ite	eq
 800b184:	f8c8 2000 	streq.w	r2, [r8]
 800b188:	605a      	strne	r2, [r3, #4]
 800b18a:	e7eb      	b.n	800b164 <_malloc_r+0xa8>
 800b18c:	4623      	mov	r3, r4
 800b18e:	6864      	ldr	r4, [r4, #4]
 800b190:	e7ae      	b.n	800b0f0 <_malloc_r+0x34>
 800b192:	463c      	mov	r4, r7
 800b194:	687f      	ldr	r7, [r7, #4]
 800b196:	e7b6      	b.n	800b106 <_malloc_r+0x4a>
 800b198:	461a      	mov	r2, r3
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d1fb      	bne.n	800b198 <_malloc_r+0xdc>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6053      	str	r3, [r2, #4]
 800b1a4:	e7de      	b.n	800b164 <_malloc_r+0xa8>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 f80c 	bl	800b1c8 <__malloc_unlock>
 800b1b0:	e794      	b.n	800b0dc <_malloc_r+0x20>
 800b1b2:	6005      	str	r5, [r0, #0]
 800b1b4:	e7d6      	b.n	800b164 <_malloc_r+0xa8>
 800b1b6:	bf00      	nop
 800b1b8:	240015f4 	.word	0x240015f4

0800b1bc <__malloc_lock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	@ (800b1c4 <__malloc_lock+0x8>)
 800b1be:	f7ff bf01 	b.w	800afc4 <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	240015ec 	.word	0x240015ec

0800b1c8 <__malloc_unlock>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	@ (800b1d0 <__malloc_unlock+0x8>)
 800b1ca:	f7ff befc 	b.w	800afc6 <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	240015ec 	.word	0x240015ec

0800b1d4 <__ssputs_r>:
 800b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	688e      	ldr	r6, [r1, #8]
 800b1da:	461f      	mov	r7, r3
 800b1dc:	42be      	cmp	r6, r7
 800b1de:	680b      	ldr	r3, [r1, #0]
 800b1e0:	4682      	mov	sl, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	4690      	mov	r8, r2
 800b1e6:	d82d      	bhi.n	800b244 <__ssputs_r+0x70>
 800b1e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1f0:	d026      	beq.n	800b240 <__ssputs_r+0x6c>
 800b1f2:	6965      	ldr	r5, [r4, #20]
 800b1f4:	6909      	ldr	r1, [r1, #16]
 800b1f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1fa:	eba3 0901 	sub.w	r9, r3, r1
 800b1fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b202:	1c7b      	adds	r3, r7, #1
 800b204:	444b      	add	r3, r9
 800b206:	106d      	asrs	r5, r5, #1
 800b208:	429d      	cmp	r5, r3
 800b20a:	bf38      	it	cc
 800b20c:	461d      	movcc	r5, r3
 800b20e:	0553      	lsls	r3, r2, #21
 800b210:	d527      	bpl.n	800b262 <__ssputs_r+0x8e>
 800b212:	4629      	mov	r1, r5
 800b214:	f7ff ff52 	bl	800b0bc <_malloc_r>
 800b218:	4606      	mov	r6, r0
 800b21a:	b360      	cbz	r0, 800b276 <__ssputs_r+0xa2>
 800b21c:	6921      	ldr	r1, [r4, #16]
 800b21e:	464a      	mov	r2, r9
 800b220:	f7ff fed2 	bl	800afc8 <memcpy>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b22e:	81a3      	strh	r3, [r4, #12]
 800b230:	6126      	str	r6, [r4, #16]
 800b232:	6165      	str	r5, [r4, #20]
 800b234:	444e      	add	r6, r9
 800b236:	eba5 0509 	sub.w	r5, r5, r9
 800b23a:	6026      	str	r6, [r4, #0]
 800b23c:	60a5      	str	r5, [r4, #8]
 800b23e:	463e      	mov	r6, r7
 800b240:	42be      	cmp	r6, r7
 800b242:	d900      	bls.n	800b246 <__ssputs_r+0x72>
 800b244:	463e      	mov	r6, r7
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	4632      	mov	r2, r6
 800b24a:	4641      	mov	r1, r8
 800b24c:	f000 faa6 	bl	800b79c <memmove>
 800b250:	68a3      	ldr	r3, [r4, #8]
 800b252:	1b9b      	subs	r3, r3, r6
 800b254:	60a3      	str	r3, [r4, #8]
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	4433      	add	r3, r6
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	2000      	movs	r0, #0
 800b25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b262:	462a      	mov	r2, r5
 800b264:	f000 fac4 	bl	800b7f0 <_realloc_r>
 800b268:	4606      	mov	r6, r0
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d1e0      	bne.n	800b230 <__ssputs_r+0x5c>
 800b26e:	6921      	ldr	r1, [r4, #16]
 800b270:	4650      	mov	r0, sl
 800b272:	f7ff feb7 	bl	800afe4 <_free_r>
 800b276:	230c      	movs	r3, #12
 800b278:	f8ca 3000 	str.w	r3, [sl]
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b282:	81a3      	strh	r3, [r4, #12]
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	e7e9      	b.n	800b25e <__ssputs_r+0x8a>
	...

0800b28c <_svfiprintf_r>:
 800b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	4698      	mov	r8, r3
 800b292:	898b      	ldrh	r3, [r1, #12]
 800b294:	061b      	lsls	r3, r3, #24
 800b296:	b09d      	sub	sp, #116	@ 0x74
 800b298:	4607      	mov	r7, r0
 800b29a:	460d      	mov	r5, r1
 800b29c:	4614      	mov	r4, r2
 800b29e:	d510      	bpl.n	800b2c2 <_svfiprintf_r+0x36>
 800b2a0:	690b      	ldr	r3, [r1, #16]
 800b2a2:	b973      	cbnz	r3, 800b2c2 <_svfiprintf_r+0x36>
 800b2a4:	2140      	movs	r1, #64	@ 0x40
 800b2a6:	f7ff ff09 	bl	800b0bc <_malloc_r>
 800b2aa:	6028      	str	r0, [r5, #0]
 800b2ac:	6128      	str	r0, [r5, #16]
 800b2ae:	b930      	cbnz	r0, 800b2be <_svfiprintf_r+0x32>
 800b2b0:	230c      	movs	r3, #12
 800b2b2:	603b      	str	r3, [r7, #0]
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	b01d      	add	sp, #116	@ 0x74
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	2340      	movs	r3, #64	@ 0x40
 800b2c0:	616b      	str	r3, [r5, #20]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2c6:	2320      	movs	r3, #32
 800b2c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d0:	2330      	movs	r3, #48	@ 0x30
 800b2d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b470 <_svfiprintf_r+0x1e4>
 800b2d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2da:	f04f 0901 	mov.w	r9, #1
 800b2de:	4623      	mov	r3, r4
 800b2e0:	469a      	mov	sl, r3
 800b2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2e6:	b10a      	cbz	r2, 800b2ec <_svfiprintf_r+0x60>
 800b2e8:	2a25      	cmp	r2, #37	@ 0x25
 800b2ea:	d1f9      	bne.n	800b2e0 <_svfiprintf_r+0x54>
 800b2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f0:	d00b      	beq.n	800b30a <_svfiprintf_r+0x7e>
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff ff6b 	bl	800b1d4 <__ssputs_r>
 800b2fe:	3001      	adds	r0, #1
 800b300:	f000 80a7 	beq.w	800b452 <_svfiprintf_r+0x1c6>
 800b304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b306:	445a      	add	r2, fp
 800b308:	9209      	str	r2, [sp, #36]	@ 0x24
 800b30a:	f89a 3000 	ldrb.w	r3, [sl]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 809f 	beq.w	800b452 <_svfiprintf_r+0x1c6>
 800b314:	2300      	movs	r3, #0
 800b316:	f04f 32ff 	mov.w	r2, #4294967295
 800b31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b31e:	f10a 0a01 	add.w	sl, sl, #1
 800b322:	9304      	str	r3, [sp, #16]
 800b324:	9307      	str	r3, [sp, #28]
 800b326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b32a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b32c:	4654      	mov	r4, sl
 800b32e:	2205      	movs	r2, #5
 800b330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b334:	484e      	ldr	r0, [pc, #312]	@ (800b470 <_svfiprintf_r+0x1e4>)
 800b336:	f7f4 ffdb 	bl	80002f0 <memchr>
 800b33a:	9a04      	ldr	r2, [sp, #16]
 800b33c:	b9d8      	cbnz	r0, 800b376 <_svfiprintf_r+0xea>
 800b33e:	06d0      	lsls	r0, r2, #27
 800b340:	bf44      	itt	mi
 800b342:	2320      	movmi	r3, #32
 800b344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b348:	0711      	lsls	r1, r2, #28
 800b34a:	bf44      	itt	mi
 800b34c:	232b      	movmi	r3, #43	@ 0x2b
 800b34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b352:	f89a 3000 	ldrb.w	r3, [sl]
 800b356:	2b2a      	cmp	r3, #42	@ 0x2a
 800b358:	d015      	beq.n	800b386 <_svfiprintf_r+0xfa>
 800b35a:	9a07      	ldr	r2, [sp, #28]
 800b35c:	4654      	mov	r4, sl
 800b35e:	2000      	movs	r0, #0
 800b360:	f04f 0c0a 	mov.w	ip, #10
 800b364:	4621      	mov	r1, r4
 800b366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b36a:	3b30      	subs	r3, #48	@ 0x30
 800b36c:	2b09      	cmp	r3, #9
 800b36e:	d94b      	bls.n	800b408 <_svfiprintf_r+0x17c>
 800b370:	b1b0      	cbz	r0, 800b3a0 <_svfiprintf_r+0x114>
 800b372:	9207      	str	r2, [sp, #28]
 800b374:	e014      	b.n	800b3a0 <_svfiprintf_r+0x114>
 800b376:	eba0 0308 	sub.w	r3, r0, r8
 800b37a:	fa09 f303 	lsl.w	r3, r9, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	46a2      	mov	sl, r4
 800b384:	e7d2      	b.n	800b32c <_svfiprintf_r+0xa0>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	1d19      	adds	r1, r3, #4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	9103      	str	r1, [sp, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	bfbb      	ittet	lt
 800b392:	425b      	neglt	r3, r3
 800b394:	f042 0202 	orrlt.w	r2, r2, #2
 800b398:	9307      	strge	r3, [sp, #28]
 800b39a:	9307      	strlt	r3, [sp, #28]
 800b39c:	bfb8      	it	lt
 800b39e:	9204      	strlt	r2, [sp, #16]
 800b3a0:	7823      	ldrb	r3, [r4, #0]
 800b3a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3a4:	d10a      	bne.n	800b3bc <_svfiprintf_r+0x130>
 800b3a6:	7863      	ldrb	r3, [r4, #1]
 800b3a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3aa:	d132      	bne.n	800b412 <_svfiprintf_r+0x186>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	1d1a      	adds	r2, r3, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	9203      	str	r2, [sp, #12]
 800b3b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3b8:	3402      	adds	r4, #2
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b480 <_svfiprintf_r+0x1f4>
 800b3c0:	7821      	ldrb	r1, [r4, #0]
 800b3c2:	2203      	movs	r2, #3
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	f7f4 ff93 	bl	80002f0 <memchr>
 800b3ca:	b138      	cbz	r0, 800b3dc <_svfiprintf_r+0x150>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	eba0 000a 	sub.w	r0, r0, sl
 800b3d2:	2240      	movs	r2, #64	@ 0x40
 800b3d4:	4082      	lsls	r2, r0
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	3401      	adds	r4, #1
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e0:	4824      	ldr	r0, [pc, #144]	@ (800b474 <_svfiprintf_r+0x1e8>)
 800b3e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	f7f4 ff82 	bl	80002f0 <memchr>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d036      	beq.n	800b45e <_svfiprintf_r+0x1d2>
 800b3f0:	4b21      	ldr	r3, [pc, #132]	@ (800b478 <_svfiprintf_r+0x1ec>)
 800b3f2:	bb1b      	cbnz	r3, 800b43c <_svfiprintf_r+0x1b0>
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	3307      	adds	r3, #7
 800b3f8:	f023 0307 	bic.w	r3, r3, #7
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	9303      	str	r3, [sp, #12]
 800b400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b402:	4433      	add	r3, r6
 800b404:	9309      	str	r3, [sp, #36]	@ 0x24
 800b406:	e76a      	b.n	800b2de <_svfiprintf_r+0x52>
 800b408:	fb0c 3202 	mla	r2, ip, r2, r3
 800b40c:	460c      	mov	r4, r1
 800b40e:	2001      	movs	r0, #1
 800b410:	e7a8      	b.n	800b364 <_svfiprintf_r+0xd8>
 800b412:	2300      	movs	r3, #0
 800b414:	3401      	adds	r4, #1
 800b416:	9305      	str	r3, [sp, #20]
 800b418:	4619      	mov	r1, r3
 800b41a:	f04f 0c0a 	mov.w	ip, #10
 800b41e:	4620      	mov	r0, r4
 800b420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b424:	3a30      	subs	r2, #48	@ 0x30
 800b426:	2a09      	cmp	r2, #9
 800b428:	d903      	bls.n	800b432 <_svfiprintf_r+0x1a6>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0c6      	beq.n	800b3bc <_svfiprintf_r+0x130>
 800b42e:	9105      	str	r1, [sp, #20]
 800b430:	e7c4      	b.n	800b3bc <_svfiprintf_r+0x130>
 800b432:	fb0c 2101 	mla	r1, ip, r1, r2
 800b436:	4604      	mov	r4, r0
 800b438:	2301      	movs	r3, #1
 800b43a:	e7f0      	b.n	800b41e <_svfiprintf_r+0x192>
 800b43c:	ab03      	add	r3, sp, #12
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	462a      	mov	r2, r5
 800b442:	4b0e      	ldr	r3, [pc, #56]	@ (800b47c <_svfiprintf_r+0x1f0>)
 800b444:	a904      	add	r1, sp, #16
 800b446:	4638      	mov	r0, r7
 800b448:	f3af 8000 	nop.w
 800b44c:	1c42      	adds	r2, r0, #1
 800b44e:	4606      	mov	r6, r0
 800b450:	d1d6      	bne.n	800b400 <_svfiprintf_r+0x174>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	065b      	lsls	r3, r3, #25
 800b456:	f53f af2d 	bmi.w	800b2b4 <_svfiprintf_r+0x28>
 800b45a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b45c:	e72c      	b.n	800b2b8 <_svfiprintf_r+0x2c>
 800b45e:	ab03      	add	r3, sp, #12
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	462a      	mov	r2, r5
 800b464:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <_svfiprintf_r+0x1f0>)
 800b466:	a904      	add	r1, sp, #16
 800b468:	4638      	mov	r0, r7
 800b46a:	f000 f879 	bl	800b560 <_printf_i>
 800b46e:	e7ed      	b.n	800b44c <_svfiprintf_r+0x1c0>
 800b470:	0800b9ac 	.word	0x0800b9ac
 800b474:	0800b9b6 	.word	0x0800b9b6
 800b478:	00000000 	.word	0x00000000
 800b47c:	0800b1d5 	.word	0x0800b1d5
 800b480:	0800b9b2 	.word	0x0800b9b2

0800b484 <_printf_common>:
 800b484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b488:	4616      	mov	r6, r2
 800b48a:	4698      	mov	r8, r3
 800b48c:	688a      	ldr	r2, [r1, #8]
 800b48e:	690b      	ldr	r3, [r1, #16]
 800b490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b494:	4293      	cmp	r3, r2
 800b496:	bfb8      	it	lt
 800b498:	4613      	movlt	r3, r2
 800b49a:	6033      	str	r3, [r6, #0]
 800b49c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	b10a      	cbz	r2, 800b4aa <_printf_common+0x26>
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	6033      	str	r3, [r6, #0]
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	0699      	lsls	r1, r3, #26
 800b4ae:	bf42      	ittt	mi
 800b4b0:	6833      	ldrmi	r3, [r6, #0]
 800b4b2:	3302      	addmi	r3, #2
 800b4b4:	6033      	strmi	r3, [r6, #0]
 800b4b6:	6825      	ldr	r5, [r4, #0]
 800b4b8:	f015 0506 	ands.w	r5, r5, #6
 800b4bc:	d106      	bne.n	800b4cc <_printf_common+0x48>
 800b4be:	f104 0a19 	add.w	sl, r4, #25
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	6832      	ldr	r2, [r6, #0]
 800b4c6:	1a9b      	subs	r3, r3, r2
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	dc26      	bgt.n	800b51a <_printf_common+0x96>
 800b4cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4d0:	6822      	ldr	r2, [r4, #0]
 800b4d2:	3b00      	subs	r3, #0
 800b4d4:	bf18      	it	ne
 800b4d6:	2301      	movne	r3, #1
 800b4d8:	0692      	lsls	r2, r2, #26
 800b4da:	d42b      	bmi.n	800b534 <_printf_common+0xb0>
 800b4dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	47c8      	blx	r9
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d01e      	beq.n	800b528 <_printf_common+0xa4>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	6922      	ldr	r2, [r4, #16]
 800b4ee:	f003 0306 	and.w	r3, r3, #6
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	bf02      	ittt	eq
 800b4f6:	68e5      	ldreq	r5, [r4, #12]
 800b4f8:	6833      	ldreq	r3, [r6, #0]
 800b4fa:	1aed      	subeq	r5, r5, r3
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	bf0c      	ite	eq
 800b500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b504:	2500      	movne	r5, #0
 800b506:	4293      	cmp	r3, r2
 800b508:	bfc4      	itt	gt
 800b50a:	1a9b      	subgt	r3, r3, r2
 800b50c:	18ed      	addgt	r5, r5, r3
 800b50e:	2600      	movs	r6, #0
 800b510:	341a      	adds	r4, #26
 800b512:	42b5      	cmp	r5, r6
 800b514:	d11a      	bne.n	800b54c <_printf_common+0xc8>
 800b516:	2000      	movs	r0, #0
 800b518:	e008      	b.n	800b52c <_printf_common+0xa8>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4652      	mov	r2, sl
 800b51e:	4641      	mov	r1, r8
 800b520:	4638      	mov	r0, r7
 800b522:	47c8      	blx	r9
 800b524:	3001      	adds	r0, #1
 800b526:	d103      	bne.n	800b530 <_printf_common+0xac>
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b530:	3501      	adds	r5, #1
 800b532:	e7c6      	b.n	800b4c2 <_printf_common+0x3e>
 800b534:	18e1      	adds	r1, r4, r3
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	2030      	movs	r0, #48	@ 0x30
 800b53a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b53e:	4422      	add	r2, r4
 800b540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b548:	3302      	adds	r3, #2
 800b54a:	e7c7      	b.n	800b4dc <_printf_common+0x58>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4622      	mov	r2, r4
 800b550:	4641      	mov	r1, r8
 800b552:	4638      	mov	r0, r7
 800b554:	47c8      	blx	r9
 800b556:	3001      	adds	r0, #1
 800b558:	d0e6      	beq.n	800b528 <_printf_common+0xa4>
 800b55a:	3601      	adds	r6, #1
 800b55c:	e7d9      	b.n	800b512 <_printf_common+0x8e>
	...

0800b560 <_printf_i>:
 800b560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	7e0f      	ldrb	r7, [r1, #24]
 800b566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b568:	2f78      	cmp	r7, #120	@ 0x78
 800b56a:	4691      	mov	r9, r2
 800b56c:	4680      	mov	r8, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	469a      	mov	sl, r3
 800b572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b576:	d807      	bhi.n	800b588 <_printf_i+0x28>
 800b578:	2f62      	cmp	r7, #98	@ 0x62
 800b57a:	d80a      	bhi.n	800b592 <_printf_i+0x32>
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	f000 80d1 	beq.w	800b724 <_printf_i+0x1c4>
 800b582:	2f58      	cmp	r7, #88	@ 0x58
 800b584:	f000 80b8 	beq.w	800b6f8 <_printf_i+0x198>
 800b588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b58c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b590:	e03a      	b.n	800b608 <_printf_i+0xa8>
 800b592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b596:	2b15      	cmp	r3, #21
 800b598:	d8f6      	bhi.n	800b588 <_printf_i+0x28>
 800b59a:	a101      	add	r1, pc, #4	@ (adr r1, 800b5a0 <_printf_i+0x40>)
 800b59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a0:	0800b5f9 	.word	0x0800b5f9
 800b5a4:	0800b60d 	.word	0x0800b60d
 800b5a8:	0800b589 	.word	0x0800b589
 800b5ac:	0800b589 	.word	0x0800b589
 800b5b0:	0800b589 	.word	0x0800b589
 800b5b4:	0800b589 	.word	0x0800b589
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b589 	.word	0x0800b589
 800b5c0:	0800b589 	.word	0x0800b589
 800b5c4:	0800b589 	.word	0x0800b589
 800b5c8:	0800b589 	.word	0x0800b589
 800b5cc:	0800b70b 	.word	0x0800b70b
 800b5d0:	0800b637 	.word	0x0800b637
 800b5d4:	0800b6c5 	.word	0x0800b6c5
 800b5d8:	0800b589 	.word	0x0800b589
 800b5dc:	0800b589 	.word	0x0800b589
 800b5e0:	0800b72d 	.word	0x0800b72d
 800b5e4:	0800b589 	.word	0x0800b589
 800b5e8:	0800b637 	.word	0x0800b637
 800b5ec:	0800b589 	.word	0x0800b589
 800b5f0:	0800b589 	.word	0x0800b589
 800b5f4:	0800b6cd 	.word	0x0800b6cd
 800b5f8:	6833      	ldr	r3, [r6, #0]
 800b5fa:	1d1a      	adds	r2, r3, #4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6032      	str	r2, [r6, #0]
 800b600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b608:	2301      	movs	r3, #1
 800b60a:	e09c      	b.n	800b746 <_printf_i+0x1e6>
 800b60c:	6833      	ldr	r3, [r6, #0]
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	1d19      	adds	r1, r3, #4
 800b612:	6031      	str	r1, [r6, #0]
 800b614:	0606      	lsls	r6, r0, #24
 800b616:	d501      	bpl.n	800b61c <_printf_i+0xbc>
 800b618:	681d      	ldr	r5, [r3, #0]
 800b61a:	e003      	b.n	800b624 <_printf_i+0xc4>
 800b61c:	0645      	lsls	r5, r0, #25
 800b61e:	d5fb      	bpl.n	800b618 <_printf_i+0xb8>
 800b620:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b624:	2d00      	cmp	r5, #0
 800b626:	da03      	bge.n	800b630 <_printf_i+0xd0>
 800b628:	232d      	movs	r3, #45	@ 0x2d
 800b62a:	426d      	negs	r5, r5
 800b62c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b630:	4858      	ldr	r0, [pc, #352]	@ (800b794 <_printf_i+0x234>)
 800b632:	230a      	movs	r3, #10
 800b634:	e011      	b.n	800b65a <_printf_i+0xfa>
 800b636:	6821      	ldr	r1, [r4, #0]
 800b638:	6833      	ldr	r3, [r6, #0]
 800b63a:	0608      	lsls	r0, r1, #24
 800b63c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b640:	d402      	bmi.n	800b648 <_printf_i+0xe8>
 800b642:	0649      	lsls	r1, r1, #25
 800b644:	bf48      	it	mi
 800b646:	b2ad      	uxthmi	r5, r5
 800b648:	2f6f      	cmp	r7, #111	@ 0x6f
 800b64a:	4852      	ldr	r0, [pc, #328]	@ (800b794 <_printf_i+0x234>)
 800b64c:	6033      	str	r3, [r6, #0]
 800b64e:	bf14      	ite	ne
 800b650:	230a      	movne	r3, #10
 800b652:	2308      	moveq	r3, #8
 800b654:	2100      	movs	r1, #0
 800b656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b65a:	6866      	ldr	r6, [r4, #4]
 800b65c:	60a6      	str	r6, [r4, #8]
 800b65e:	2e00      	cmp	r6, #0
 800b660:	db05      	blt.n	800b66e <_printf_i+0x10e>
 800b662:	6821      	ldr	r1, [r4, #0]
 800b664:	432e      	orrs	r6, r5
 800b666:	f021 0104 	bic.w	r1, r1, #4
 800b66a:	6021      	str	r1, [r4, #0]
 800b66c:	d04b      	beq.n	800b706 <_printf_i+0x1a6>
 800b66e:	4616      	mov	r6, r2
 800b670:	fbb5 f1f3 	udiv	r1, r5, r3
 800b674:	fb03 5711 	mls	r7, r3, r1, r5
 800b678:	5dc7      	ldrb	r7, [r0, r7]
 800b67a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b67e:	462f      	mov	r7, r5
 800b680:	42bb      	cmp	r3, r7
 800b682:	460d      	mov	r5, r1
 800b684:	d9f4      	bls.n	800b670 <_printf_i+0x110>
 800b686:	2b08      	cmp	r3, #8
 800b688:	d10b      	bne.n	800b6a2 <_printf_i+0x142>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	07df      	lsls	r7, r3, #31
 800b68e:	d508      	bpl.n	800b6a2 <_printf_i+0x142>
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	6861      	ldr	r1, [r4, #4]
 800b694:	4299      	cmp	r1, r3
 800b696:	bfde      	ittt	le
 800b698:	2330      	movle	r3, #48	@ 0x30
 800b69a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b69e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6a2:	1b92      	subs	r2, r2, r6
 800b6a4:	6122      	str	r2, [r4, #16]
 800b6a6:	f8cd a000 	str.w	sl, [sp]
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	aa03      	add	r2, sp, #12
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4640      	mov	r0, r8
 800b6b2:	f7ff fee7 	bl	800b484 <_printf_common>
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d14a      	bne.n	800b750 <_printf_i+0x1f0>
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	b004      	add	sp, #16
 800b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	f043 0320 	orr.w	r3, r3, #32
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	4832      	ldr	r0, [pc, #200]	@ (800b798 <_printf_i+0x238>)
 800b6ce:	2778      	movs	r7, #120	@ 0x78
 800b6d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	6831      	ldr	r1, [r6, #0]
 800b6d8:	061f      	lsls	r7, r3, #24
 800b6da:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6de:	d402      	bmi.n	800b6e6 <_printf_i+0x186>
 800b6e0:	065f      	lsls	r7, r3, #25
 800b6e2:	bf48      	it	mi
 800b6e4:	b2ad      	uxthmi	r5, r5
 800b6e6:	6031      	str	r1, [r6, #0]
 800b6e8:	07d9      	lsls	r1, r3, #31
 800b6ea:	bf44      	itt	mi
 800b6ec:	f043 0320 	orrmi.w	r3, r3, #32
 800b6f0:	6023      	strmi	r3, [r4, #0]
 800b6f2:	b11d      	cbz	r5, 800b6fc <_printf_i+0x19c>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	e7ad      	b.n	800b654 <_printf_i+0xf4>
 800b6f8:	4826      	ldr	r0, [pc, #152]	@ (800b794 <_printf_i+0x234>)
 800b6fa:	e7e9      	b.n	800b6d0 <_printf_i+0x170>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	f023 0320 	bic.w	r3, r3, #32
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	e7f6      	b.n	800b6f4 <_printf_i+0x194>
 800b706:	4616      	mov	r6, r2
 800b708:	e7bd      	b.n	800b686 <_printf_i+0x126>
 800b70a:	6833      	ldr	r3, [r6, #0]
 800b70c:	6825      	ldr	r5, [r4, #0]
 800b70e:	6961      	ldr	r1, [r4, #20]
 800b710:	1d18      	adds	r0, r3, #4
 800b712:	6030      	str	r0, [r6, #0]
 800b714:	062e      	lsls	r6, r5, #24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	d501      	bpl.n	800b71e <_printf_i+0x1be>
 800b71a:	6019      	str	r1, [r3, #0]
 800b71c:	e002      	b.n	800b724 <_printf_i+0x1c4>
 800b71e:	0668      	lsls	r0, r5, #25
 800b720:	d5fb      	bpl.n	800b71a <_printf_i+0x1ba>
 800b722:	8019      	strh	r1, [r3, #0]
 800b724:	2300      	movs	r3, #0
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	4616      	mov	r6, r2
 800b72a:	e7bc      	b.n	800b6a6 <_printf_i+0x146>
 800b72c:	6833      	ldr	r3, [r6, #0]
 800b72e:	1d1a      	adds	r2, r3, #4
 800b730:	6032      	str	r2, [r6, #0]
 800b732:	681e      	ldr	r6, [r3, #0]
 800b734:	6862      	ldr	r2, [r4, #4]
 800b736:	2100      	movs	r1, #0
 800b738:	4630      	mov	r0, r6
 800b73a:	f7f4 fdd9 	bl	80002f0 <memchr>
 800b73e:	b108      	cbz	r0, 800b744 <_printf_i+0x1e4>
 800b740:	1b80      	subs	r0, r0, r6
 800b742:	6060      	str	r0, [r4, #4]
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	2300      	movs	r3, #0
 800b74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b74e:	e7aa      	b.n	800b6a6 <_printf_i+0x146>
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	4632      	mov	r2, r6
 800b754:	4649      	mov	r1, r9
 800b756:	4640      	mov	r0, r8
 800b758:	47d0      	blx	sl
 800b75a:	3001      	adds	r0, #1
 800b75c:	d0ad      	beq.n	800b6ba <_printf_i+0x15a>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	079b      	lsls	r3, r3, #30
 800b762:	d413      	bmi.n	800b78c <_printf_i+0x22c>
 800b764:	68e0      	ldr	r0, [r4, #12]
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	4298      	cmp	r0, r3
 800b76a:	bfb8      	it	lt
 800b76c:	4618      	movlt	r0, r3
 800b76e:	e7a6      	b.n	800b6be <_printf_i+0x15e>
 800b770:	2301      	movs	r3, #1
 800b772:	4632      	mov	r2, r6
 800b774:	4649      	mov	r1, r9
 800b776:	4640      	mov	r0, r8
 800b778:	47d0      	blx	sl
 800b77a:	3001      	adds	r0, #1
 800b77c:	d09d      	beq.n	800b6ba <_printf_i+0x15a>
 800b77e:	3501      	adds	r5, #1
 800b780:	68e3      	ldr	r3, [r4, #12]
 800b782:	9903      	ldr	r1, [sp, #12]
 800b784:	1a5b      	subs	r3, r3, r1
 800b786:	42ab      	cmp	r3, r5
 800b788:	dcf2      	bgt.n	800b770 <_printf_i+0x210>
 800b78a:	e7eb      	b.n	800b764 <_printf_i+0x204>
 800b78c:	2500      	movs	r5, #0
 800b78e:	f104 0619 	add.w	r6, r4, #25
 800b792:	e7f5      	b.n	800b780 <_printf_i+0x220>
 800b794:	0800b9bd 	.word	0x0800b9bd
 800b798:	0800b9ce 	.word	0x0800b9ce

0800b79c <memmove>:
 800b79c:	4288      	cmp	r0, r1
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	eb01 0402 	add.w	r4, r1, r2
 800b7a4:	d902      	bls.n	800b7ac <memmove+0x10>
 800b7a6:	4284      	cmp	r4, r0
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	d807      	bhi.n	800b7bc <memmove+0x20>
 800b7ac:	1e43      	subs	r3, r0, #1
 800b7ae:	42a1      	cmp	r1, r4
 800b7b0:	d008      	beq.n	800b7c4 <memmove+0x28>
 800b7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ba:	e7f8      	b.n	800b7ae <memmove+0x12>
 800b7bc:	4402      	add	r2, r0
 800b7be:	4601      	mov	r1, r0
 800b7c0:	428a      	cmp	r2, r1
 800b7c2:	d100      	bne.n	800b7c6 <memmove+0x2a>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ce:	e7f7      	b.n	800b7c0 <memmove+0x24>

0800b7d0 <_sbrk_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d06      	ldr	r5, [pc, #24]	@ (800b7ec <_sbrk_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	f7f6 fdf2 	bl	80023c4 <_sbrk>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_sbrk_r+0x1a>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_sbrk_r+0x1a>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	240015e8 	.word	0x240015e8

0800b7f0 <_realloc_r>:
 800b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	4614      	mov	r4, r2
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	b921      	cbnz	r1, 800b806 <_realloc_r+0x16>
 800b7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	4611      	mov	r1, r2
 800b802:	f7ff bc5b 	b.w	800b0bc <_malloc_r>
 800b806:	b92a      	cbnz	r2, 800b814 <_realloc_r+0x24>
 800b808:	f7ff fbec 	bl	800afe4 <_free_r>
 800b80c:	4625      	mov	r5, r4
 800b80e:	4628      	mov	r0, r5
 800b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b814:	f000 f81a 	bl	800b84c <_malloc_usable_size_r>
 800b818:	4284      	cmp	r4, r0
 800b81a:	4606      	mov	r6, r0
 800b81c:	d802      	bhi.n	800b824 <_realloc_r+0x34>
 800b81e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b822:	d8f4      	bhi.n	800b80e <_realloc_r+0x1e>
 800b824:	4621      	mov	r1, r4
 800b826:	4638      	mov	r0, r7
 800b828:	f7ff fc48 	bl	800b0bc <_malloc_r>
 800b82c:	4680      	mov	r8, r0
 800b82e:	b908      	cbnz	r0, 800b834 <_realloc_r+0x44>
 800b830:	4645      	mov	r5, r8
 800b832:	e7ec      	b.n	800b80e <_realloc_r+0x1e>
 800b834:	42b4      	cmp	r4, r6
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	bf28      	it	cs
 800b83c:	4632      	movcs	r2, r6
 800b83e:	f7ff fbc3 	bl	800afc8 <memcpy>
 800b842:	4629      	mov	r1, r5
 800b844:	4638      	mov	r0, r7
 800b846:	f7ff fbcd 	bl	800afe4 <_free_r>
 800b84a:	e7f1      	b.n	800b830 <_realloc_r+0x40>

0800b84c <_malloc_usable_size_r>:
 800b84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b850:	1f18      	subs	r0, r3, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	bfbc      	itt	lt
 800b856:	580b      	ldrlt	r3, [r1, r0]
 800b858:	18c0      	addlt	r0, r0, r3
 800b85a:	4770      	bx	lr

0800b85c <_init>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr

0800b868 <_fini>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	bf00      	nop
 800b86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86e:	bc08      	pop	{r3}
 800b870:	469e      	mov	lr, r3
 800b872:	4770      	bx	lr
